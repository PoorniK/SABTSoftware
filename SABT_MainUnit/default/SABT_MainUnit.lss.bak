
SABT_MainUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007a0  00800100  00005ee8  00005f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000056c  008008a0  008008a0  0000671c  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  0000671c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00005d1f  00000000  00000000  0000695c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000099e5  00000000  00000000  0000c67b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001906  00000000  00000000  00016060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000047d7  00000000  00000000  00017966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a20  00000000  00000000  0001c140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000019b4  00000000  00000000  0001cb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002792  00000000  00000000  0001e514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00020ca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__ctors_end>
       4:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
       8:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
       c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      10:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      14:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      18:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      1c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      20:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      24:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      28:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      2c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      30:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      34:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_13>
      38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      3c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      40:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      44:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      48:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      4c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      50:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_20>
      54:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      58:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      5c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      60:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      64:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      68:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      6c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      70:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_28>
      74:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      78:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      7c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      80:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      84:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      88:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>

0000008c <__c.2089>:
      8c:	4d 6f 64 65 20 66 69 6c 65 20 66 6f 75 6e 64 00     Mode file found.

0000009c <__c.2087>:
      9c:	4d 6f 64 65 20 66 69 6c 65 20 6e 6f 74 20 66 6f     Mode file not fo
      ac:	75 6e 64 00                                         und.

000000b0 <__c.2085>:
      b0:	53 41 42 54 20 74 65 73 74 69 6e 67 2e 2e 2e 00     SABT testing....

000000c0 <__c.2843>:
      c0:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 7a 69     Error initializi
      d0:	6e 67 20 56 53 31 30 35 33 20 2d 20 43 4f 44 45     ng VS1053 - CODE
      e0:	20 00                                                .

000000e2 <__c.2841>:
      e2:	56 53 31 30 35 33 20 4d 50 33 20 63 68 69 70 20     VS1053 MP3 chip 
      f2:	73 75 63 65 73 73 66 75 6c 6c 79 20 69 6e 69 74     sucessfully init
     102:	69 61 6c 69 7a 65 64 00                             ialized.

0000010a <__c.2839>:
     10a:	46 41 54 33 32 20 66 69 6c 65 20 73 79 73 74 65     FAT32 file syste
     11a:	6d 20 64 65 74 65 63 74 65 64 2e 2e 2e 00           m detected....

00000128 <__c.2837>:
     128:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

00000139 <__c.2835>:
     139:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     149:	44 65 74 65 63 74 65 64 00                          Detected.

00000152 <__c.2832>:
     152:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     162:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     172:	20 44 65 74 65 63 74 65 64 00                        Detected.

0000017c <__c.2829>:
     17c:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     18c:	72 64 20 44 65 74 65 63 74 65 64 00                 rd Detected.

00000198 <__c.2825>:
     198:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1a8:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     1b8:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001c2 <__c.2821>:
     1c2:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     1d2:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

000001df <__c.2819>:
     1df:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     1ef:	63 74 65 64 2e 2e 00                                cted...

000001f6 <__c.2542>:
     1f6:	49 6e 76 61 6c 69 64 20 66 69 6c 65 5f 6e 61 6d     Invalid file_nam
     206:	65 2e 00                                            e..

00000209 <__c.2504>:
     209:	49 6e 76 61 6c 69 64 20 66 69 6c 65 5f 6e 61 6d     Invalid file_nam
     219:	65 2e 00                                            e..

0000021c <__c.2362>:
     21c:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     22c:	20 63 6c 75 73 74 65 72 00                           cluster.

00000235 <__c.2295>:
     235:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     245:	20 63 6c 75 73 74 65 72 00                           cluster.

0000024e <__c.2248>:
     24e:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     25e:	20 63 6c 75 73 74 65 72 00                           cluster.

00000267 <__c.2207>:
     267:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     277:	20 63 6c 75 73 74 65 72 00                           cluster.

00000280 <__c.2156>:
     280:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     290:	20 63 6c 75 73 74 65 72 00                           cluster.

00000299 <__c.2148>:
     299:	52 4f 4f 54 00                                      ROOT.

0000029e <__c.2146>:
     29e:	44 49 52 00                                         DIR.

000002a2 <__c.2144>:
     2a2:	20 20 20 00                                            .

000002a6 <__c.2142>:
     2a6:	46 49 4c 45 00                                      FILE.

000002ab <__c.2140>:
     2ab:	20 20 20 00                                            .

000002af <__c.2134>:
     2af:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000002bd <__c.2132>:
     2bd:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000002c8 <__c.2127>:
     2c8:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     2d8:	69 73 74 21 00                                      ist!.

000002dd <__c.2264>:
     2dd:	56 6f 6c 20 44 4f 57 4e 20 70 72 65 73 73 65 64     Vol DOWN pressed
	...

000002ee <__c.2261>:
     2ee:	56 6f 6c 20 55 50 20 70 72 65 73 73 65 64 00        Vol UP pressed.

000002fd <__c.2224>:
     2fd:	41 6e 61 6c 6f 67 20 49 6e 70 75 74 20 63 68 61     Analog Input cha
     30d:	6e 6e 65 6c 2c 4d 53 42 2c 4c 53 42 20 3a 00        nnel,MSB,LSB :.

0000031c <__c.2166>:
     31c:	41 6e 64 20 74 68 65 20 6d 6f 64 65 73 20 61 72     And the modes ar
     32c:	65 3b 20 00                                         e; .

00000330 <__c.2053>:
     330:	53 41 42 54 2d 46 41 49 4c 00                       SABT-FAIL.

0000033a <__c.2051>:
     33a:	53 41 42 54 2d 4f 4b 00                             SABT-OK.

00000342 <__c.2033>:
     342:	53 41 42 54 2d 76 32 2e 31 00                       SABT-v2.1.

0000034c <__ctors_end>:
     34c:	11 24       	eor	r1, r1
     34e:	1f be       	out	0x3f, r1	; 63
     350:	cf ef       	ldi	r28, 0xFF	; 255
     352:	d0 e4       	ldi	r29, 0x40	; 64
     354:	de bf       	out	0x3e, r29	; 62
     356:	cd bf       	out	0x3d, r28	; 61

00000358 <__do_copy_data>:
     358:	18 e0       	ldi	r17, 0x08	; 8
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	e8 ee       	ldi	r30, 0xE8	; 232
     360:	fe e5       	ldi	r31, 0x5E	; 94
     362:	00 e0       	ldi	r16, 0x00	; 0
     364:	0b bf       	out	0x3b, r16	; 59
     366:	02 c0       	rjmp	.+4      	; 0x36c <__do_copy_data+0x14>
     368:	07 90       	elpm	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	a0 3a       	cpi	r26, 0xA0	; 160
     36e:	b1 07       	cpc	r27, r17
     370:	d9 f7       	brne	.-10     	; 0x368 <__do_copy_data+0x10>

00000372 <__do_clear_bss>:
     372:	1e e0       	ldi	r17, 0x0E	; 14
     374:	a0 ea       	ldi	r26, 0xA0	; 160
     376:	b8 e0       	ldi	r27, 0x08	; 8
     378:	01 c0       	rjmp	.+2      	; 0x37c <.do_clear_bss_start>

0000037a <.do_clear_bss_loop>:
     37a:	1d 92       	st	X+, r1

0000037c <.do_clear_bss_start>:
     37c:	ac 30       	cpi	r26, 0x0C	; 12
     37e:	b1 07       	cpc	r27, r17
     380:	e1 f7       	brne	.-8      	; 0x37a <.do_clear_bss_loop>
     382:	0e 94 91 02 	call	0x522	; 0x522 <main>
     386:	0c 94 72 2f 	jmp	0x5ee4	; 0x5ee4 <_exit>

0000038a <__bad_interrupt>:
     38a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038e <timer_routine>:
 * @ref AtATmega1284P(Preferred).pdf
 * @return Void
 */
void timer_routine(void)
{
  if(!LED_STAT){
     38e:	80 91 6a 0b 	lds	r24, 0x0B6A
     392:	88 23       	and	r24, r24
     394:	39 f4       	brne	.+14     	; 0x3a4 <timer_routine+0x16>
    PORTD &= ~_BV(5);
     396:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~_BV(6);
     398:	5e 98       	cbi	0x0b, 6	; 11
    PORTD &= ~_BV(7);
     39a:	5f 98       	cbi	0x0b, 7	; 11
    LED_STAT=true;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 6a 0b 	sts	0x0B6A, r24
     3a2:	08 95       	ret
  }
  else
  {
    PORTD |= _BV(5);
     3a4:	5d 9a       	sbi	0x0b, 5	; 11
    PORTD |= _BV(6);
     3a6:	5e 9a       	sbi	0x0b, 6	; 11
    PORTD |= _BV(7);
     3a8:	5f 9a       	sbi	0x0b, 7	; 11
    LED_STAT=false;
     3aa:	10 92 6a 0b 	sts	0x0B6A, r1
     3ae:	08 95       	ret

000003b0 <__vector_13>:
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(TIMER1_COMPA_vect)
{
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	8f 93       	push	r24
  timer_interrupt = true;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 74 0d 	sts	0x0D74, r24
}
     3c2:	8f 91       	pop	r24
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <__vector_28>:
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART1_RX_vect)
{
     3ce:	1f 92       	push	r1
     3d0:	0f 92       	push	r0
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	8f 93       	push	r24
  usart_keypad_received_data = UDR1;
     3da:	80 91 ce 00 	lds	r24, 0x00CE
     3de:	80 93 17 09 	sts	0x0917, r24
  usart_keypad_data_ready = true;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 fc 08 	sts	0x08FC, r24
};
     3e8:	8f 91       	pop	r24
     3ea:	0f 90       	pop	r0
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	0f 90       	pop	r0
     3f0:	1f 90       	pop	r1
     3f2:	18 95       	reti

000003f4 <__vector_20>:
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART0_RX_vect)
{
     3f4:	1f 92       	push	r1
     3f6:	0f 92       	push	r0
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	0f 92       	push	r0
     3fc:	0b b6       	in	r0, 0x3b	; 59
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
  // Temporarily disabled the PC communications since we are simulating the UI with PC
  usart_pc_received_data = UDR0;
     41a:	80 91 c6 00 	lds	r24, 0x00C6
     41e:	80 93 33 09 	sts	0x0933, r24
  usart_pc_data_ready = true;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 95 0d 	sts	0x0D95, r24
  usart_transmit_byte_to_pc(usart_pc_received_data);
     428:	80 91 33 09 	lds	r24, 0x0933
     42c:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
};
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0b be       	out	0x3b, r0	; 59
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <initialize_system>:
 * @brief Initialize the system and interrupts
 * @return Void
 */
void initialize_system(void)
{
  ui_mp3_file_pending = false;
     456:	10 92 f9 08 	sts	0x08F9, r1
  timer_interrupt = false;      // Clear the timer interrupt flag
     45a:	10 92 74 0d 	sts	0x0D74, r1
  PORTA = 0x00;
     45e:	12 b8       	out	0x02, r1	; 2
  DDRA = 0xFF;
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	81 b9       	out	0x01, r24	; 1
  PORTA = 0x00;
     464:	12 b8       	out	0x02, r1	; 2

  // Set the data direction register values
  DDRD |= _BV(5) | _BV(6) | _BV(7);
     466:	8a b1       	in	r24, 0x0a	; 10
     468:	80 6e       	ori	r24, 0xE0	; 224
     46a:	8a b9       	out	0x0a, r24	; 10

  TCCR1A = 0x00;
     46c:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0x0D;
     470:	8d e0       	ldi	r24, 0x0D	; 13
     472:	80 93 81 00 	sts	0x0081, r24
  OCR1A = 390;            // 1s interval
     476:	86 e8       	ldi	r24, 0x86	; 134
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	90 93 89 00 	sts	0x0089, r25
     47e:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 |= (1<<OCIE1A);  // Enable interrupt
     482:	80 91 6f 00 	lds	r24, 0x006F
     486:	82 60       	ori	r24, 0x02	; 2
     488:	80 93 6f 00 	sts	0x006F, r24

  init_usart_keypad();
     48c:	0e 94 bd 02 	call	0x57a	; 0x57a <init_usart_keypad>
  init_usart_pc();
     490:	0e 94 46 03 	call	0x68c	; 0x68c <init_usart_pc>
  spi_initialize();
     494:	0e 94 6e 05 	call	0xadc	; 0xadc <spi_initialize>

  sei();  // sets the interrupt flag (enables interrupts)
     498:	78 94       	sei

  usart_transmit_string_to_pc_from_flash (PSTR("SABT testing..."));
     49a:	80 eb       	ldi	r24, 0xB0	; 176
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
  TX_NEWLINE_PC;
     4a2:	8d e0       	ldi	r24, 0x0D	; 13
     4a4:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>

  init_sd_card(true);
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <init_sd_card>

  //say that we are not playing a sound file
  playing_sound = false;
     4b4:	10 92 1c 09 	sts	0x091C, r1

  message_count = 0;
     4b8:	10 92 93 0d 	sts	0x0D93, r1
  valid_message = true;  
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 8f 0d 	sts	0x0D8F, r24

  if(!ui_check_modes())
     4c2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <ui_check_modes>
     4c6:	88 23       	and	r24, r24
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <initialize_system+0x7a>
  {
    usart_transmit_string_to_pc_from_flash (PSTR("Mode file not found"));
     4ca:	8c e9       	ldi	r24, 0x9C	; 156
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <initialize_system+0x7e>
    TX_NEWLINE_PC; 
  }
  else
  {
    usart_transmit_string_to_pc_from_flash (PSTR("Mode file found"));
     4d0:	8c e8       	ldi	r24, 0x8C	; 140
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    TX_NEWLINE_PC;
     4d8:	8d e0       	ldi	r24, 0x0D	; 13
     4da:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
     4de:	8a e0       	ldi	r24, 0x0A	; 10
     4e0:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
  }

  ui_current_mode = number_of_modes;  //No mode selected
     4e4:	80 91 90 0d 	lds	r24, 0x0D90
     4e8:	80 93 69 0b 	sts	0x0B69, r24
  ui_selected_mode = number_of_modes;
     4ec:	80 91 90 0d 	lds	r24, 0x0D90
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	90 93 fe 08 	sts	0x08FE, r25
     4f6:	80 93 fd 08 	sts	0x08FD, r24

  // please wait for the dictionary file to load
  play_mp3_file("WAIT.MP3");
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 02 17 	call	0x2e04	; 0x2e04 <play_mp3_file>

  init_read_dict((unsigned char *)"wordsEn.txt");
     502:	89 e0       	ldi	r24, 0x09	; 9
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <init_read_dict>
     50a:	02 c0       	rjmp	.+4      	; 0x510 <initialize_system+0xba>

  while(!done_rd_dict){
    read_dict_file();
     50c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <read_dict_file>
  // please wait for the dictionary file to load
  play_mp3_file("WAIT.MP3");

  init_read_dict((unsigned char *)"wordsEn.txt");

  while(!done_rd_dict){
     510:	80 91 05 09 	lds	r24, 0x0905
     514:	88 23       	and	r24, r24
     516:	d1 f3       	breq	.-12     	; 0x50c <initialize_system+0xb6>
    read_dict_file();
  }

  request_to_play_mp3_file("WELCOME.MP3"); 
     518:	85 e1       	ldi	r24, 0x15	; 21
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
     520:	08 95       	ret

00000522 <main>:
 * @brief the main routine
 * @return Void
 */
int main(void)
{
  initialize_system();
     522:	0e 94 2b 02 	call	0x456	; 0x456 <initialize_system>
  while(1)
  {
    // read in the dict file till done
    // check to see if we've received data from UI board
    // if true, process the single byte
    if(usart_keypad_data_ready)
     526:	80 91 fc 08 	lds	r24, 0x08FC
     52a:	88 23       	and	r24, r24
     52c:	11 f0       	breq	.+4      	; 0x532 <main+0x10>
       *  A: contains braille dot at this location in the UI
       *  B: contains braille character at this location in the UI
       *  C: payload contains an error message
       *  D: payload contains a control button input from UI
       *  E: miscellaneous */
      usart_keypad_receive_action();
     52e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <usart_keypad_receive_action>
    }

    // check to see if we've received data from a connected PC 
    // if true, process the single byte
    if(usart_pc_data_ready)
     532:	80 91 95 0d 	lds	r24, 0x0D95
     536:	88 23       	and	r24, r24
     538:	11 f0       	breq	.+4      	; 0x53e <main+0x1c>
    {
      usart_pc_receive_action();
     53a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <usart_pc_receive_action>
    }

    if(timer_interrupt)
     53e:	80 91 74 0d 	lds	r24, 0x0D74
     542:	88 23       	and	r24, r24
     544:	11 f0       	breq	.+4      	; 0x54a <main+0x28>
    {
      timer_interrupt = false;
     546:	10 92 74 0d 	sts	0x0D74, r1
      //  timer_routine();
    }

    if(usart_pc_message_ready) //If a message ready from the PC, process it
     54a:	80 91 f4 08 	lds	r24, 0x08F4
     54e:	88 23       	and	r24, r24
     550:	11 f0       	breq	.+4      	; 0x556 <main+0x34>
    {
      pc_parse_message();
     552:	0e 94 da 22 	call	0x45b4	; 0x45b4 <pc_parse_message>
    }

    if(usart_ui_message_ready) //If a message ready from the user interface, process it
     556:	80 91 1d 09 	lds	r24, 0x091D
     55a:	88 23       	and	r24, r24
     55c:	19 f0       	breq	.+6      	; 0x564 <main+0x42>
    {
      ui_parse_message(false);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 18 1a 	call	0x3430	; 0x3430 <ui_parse_message>
    }

    if(ui_mp3_file_pending)  //If the UI handler needs to play new file, play it (the main loop won't be called while playing another file, so don't worry)
     564:	80 91 f9 08 	lds	r24, 0x08F9
     568:	88 23       	and	r24, r24
     56a:	21 f0       	breq	.+8      	; 0x574 <main+0x52>
    {
      play_mp3_file(g_file_name);
     56c:	84 e3       	ldi	r24, 0x34	; 52
     56e:	99 e0       	ldi	r25, 0x09	; 9
     570:	0e 94 02 17 	call	0x2e04	; 0x2e04 <play_mp3_file>
    }

    ui_run_main_of_current_mode();
     574:	0e 94 7e 18 	call	0x30fc	; 0x30fc <ui_run_main_of_current_mode>
     578:	d6 cf       	rjmp	.-84     	; 0x526 <main+0x4>

0000057a <init_usart_keypad>:
 * @brief Initializes the baud communication over USART.
 * @return Void
 */
void init_usart_keypad(void)
{
  UCSR1B = 0x00; //disable while setting baud rate
     57a:	e9 ec       	ldi	r30, 0xC9	; 201
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	10 82       	st	Z, r1
  UCSR1A = 0x00;
     580:	10 92 c8 00 	sts	0x00C8, r1
  UCSR1C = 0x06;
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	80 93 ca 00 	sts	0x00CA, r24
  UBRR1L = 0x19; //set baud rate lo
     58a:	89 e1       	ldi	r24, 0x19	; 25
     58c:	80 93 cc 00 	sts	0x00CC, r24
  UBRR1H = 0x00; //set baud rate hi 19,200 baud with 8MHz clock
     590:	10 92 cd 00 	sts	0x00CD, r1
  UCSR1B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     594:	88 e9       	ldi	r24, 0x98	; 152
     596:	80 83       	st	Z, r24
  usart_ui_length_received = false;
     598:	10 92 a2 0d 	sts	0x0DA2, r1
  usart_ui_header_received = false;
     59c:	10 92 9d 0d 	sts	0x0D9D, r1
  usart_ui_message_ready = false;
     5a0:	10 92 1d 09 	sts	0x091D, r1
}
     5a4:	08 95       	ret

000005a6 <usart_keypad_receive_action>:
 * @return Void
 */
void usart_keypad_receive_action(void)
{

  usart_keypad_data_ready = false;
     5a6:	10 92 fc 08 	sts	0x08FC, r1

  // If no header has been found, build it
  if(!usart_ui_header_received)
     5aa:	80 91 9d 0d 	lds	r24, 0x0D9D
     5ae:	88 23       	and	r24, r24
     5b0:	d9 f4       	brne	.+54     	; 0x5e8 <usart_keypad_receive_action+0x42>
  {
    usart_ui_prefix[2] = usart_keypad_received_data;
     5b2:	20 91 17 09 	lds	r18, 0x0917
     5b6:	20 93 a1 0d 	sts	0x0DA1, r18
    usart_ui_prefix[0] = usart_ui_prefix[1];
     5ba:	90 91 a0 0d 	lds	r25, 0x0DA0
     5be:	90 93 9f 0d 	sts	0x0D9F, r25
    usart_ui_prefix[1] = usart_ui_prefix[2];
     5c2:	20 93 a0 0d 	sts	0x0DA0, r18

    if((usart_ui_prefix[0] == 'U') && (usart_ui_prefix[1] == 'I'))
     5c6:	95 35       	cpi	r25, 0x55	; 85
     5c8:	f1 f5       	brne	.+124    	; 0x646 <usart_keypad_receive_action+0xa0>
     5ca:	29 34       	cpi	r18, 0x49	; 73
     5cc:	e1 f5       	brne	.+120    	; 0x646 <usart_keypad_receive_action+0xa0>
    {
      usart_ui_header_received = true;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 9d 0d 	sts	0x0D9D, r24
      usart_ui_received_packet[0] = usart_ui_prefix[0];
     5d4:	90 93 54 0b 	sts	0x0B54, r25
      usart_ui_received_packet[1] = usart_ui_prefix[1];
     5d8:	20 93 55 0b 	sts	0x0B55, r18
      usart_ui_receive_msgcnt = 2;
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	80 93 9c 0d 	sts	0x0D9C, r24
      usart_ui_length_received = false;
     5e2:	10 92 a2 0d 	sts	0x0DA2, r1
     5e6:	08 95       	ret
    }
  }
  // Get the length of the payload
  else if(!usart_ui_length_received)
     5e8:	80 91 a2 0d 	lds	r24, 0x0DA2
     5ec:	90 91 9c 0d 	lds	r25, 0x0D9C
     5f0:	88 23       	and	r24, r24
     5f2:	a1 f4       	brne	.+40     	; 0x61c <usart_keypad_receive_action+0x76>
  {
    if(usart_ui_receive_msgcnt == 2)
     5f4:	92 30       	cpi	r25, 0x02	; 2
     5f6:	79 f4       	brne	.+30     	; 0x616 <usart_keypad_receive_action+0x70>
    {
      usart_ui_received_payload_len = usart_keypad_received_data;
     5f8:	80 91 17 09 	lds	r24, 0x0917
     5fc:	80 93 9e 0d 	sts	0x0D9E, r24
      usart_ui_received_packet[usart_ui_receive_msgcnt] = usart_keypad_received_data;
     600:	80 91 17 09 	lds	r24, 0x0917
     604:	80 93 56 0b 	sts	0x0B56, r24
      usart_ui_length_received = true;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 a2 0d 	sts	0x0DA2, r24
      usart_ui_receive_msgcnt++;
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	80 93 9c 0d 	sts	0x0D9C, r24
     614:	08 95       	ret
    }
    else
    {
      usart_ui_header_received = false;
     616:	10 92 9d 0d 	sts	0x0D9D, r1
     61a:	08 95       	ret
    }
  }
  // Build the actual message
  else
  {
    usart_ui_received_packet[usart_ui_receive_msgcnt++] = usart_keypad_received_data;
     61c:	e9 2f       	mov	r30, r25
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 91 17 09 	lds	r24, 0x0917
     624:	ec 5a       	subi	r30, 0xAC	; 172
     626:	f4 4f       	sbci	r31, 0xF4	; 244
     628:	80 83       	st	Z, r24
     62a:	9f 5f       	subi	r25, 0xFF	; 255
     62c:	90 93 9c 0d 	sts	0x0D9C, r25

    // Full message has been received
    if(usart_ui_receive_msgcnt == usart_ui_received_payload_len) 
     630:	80 91 9e 0d 	lds	r24, 0x0D9E
     634:	98 17       	cp	r25, r24
     636:	39 f4       	brne	.+14     	; 0x646 <usart_keypad_receive_action+0xa0>
    {
      usart_ui_message_ready = true;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 1d 09 	sts	0x091D, r24
      usart_ui_header_received = false;
     63e:	10 92 9d 0d 	sts	0x0D9D, r1
      usart_ui_length_received = false;
     642:	10 92 a2 0d 	sts	0x0DA2, r1
     646:	08 95       	ret

00000648 <usart_transmit_byte_to_keypad>:
 * @brief Transmits byte data from MC --> UI over UDR1
 * @param data - unsigned char, byte to transmit to UI
 * @return Void
 */
void usart_transmit_byte_to_keypad(unsigned char data)
{
     648:	98 2f       	mov	r25, r24
  while (!(UCSR1A & (1<<UDRE1)));   // Wait for empty transmit buffer
     64a:	80 91 c8 00 	lds	r24, 0x00C8
     64e:	85 ff       	sbrs	r24, 5
     650:	fc cf       	rjmp	.-8      	; 0x64a <usart_transmit_byte_to_keypad+0x2>
  UDR1 = data;                      // Start transmition
     652:	90 93 ce 00 	sts	0x00CE, r25
}
     656:	08 95       	ret

00000658 <usart_transmit_string_to_keypad_from_flash>:
 * @brief Transmits string data from MC Flash --> UI over UDR1
 * @param string - char*, String to transmit to UI
 * @return Void
 */
void usart_transmit_string_to_keypad_from_flash(char* string)
{
     658:	fc 01       	movw	r30, r24
     65a:	07 c0       	rjmp	.+14     	; 0x66a <usart_transmit_string_to_keypad_from_flash+0x12>
 * @param data - unsigned char, byte to transmit to UI
 * @return Void
 */
void usart_transmit_byte_to_keypad(unsigned char data)
{
  while (!(UCSR1A & (1<<UDRE1)));   // Wait for empty transmit buffer
     65c:	80 91 c8 00 	lds	r24, 0x00C8
     660:	85 ff       	sbrs	r24, 5
     662:	fc cf       	rjmp	.-8      	; 0x65c <usart_transmit_string_to_keypad_from_flash+0x4>
 * @return Void
 */
void usart_transmit_string_to_keypad_from_flash(char* string)
{
  while (pgm_read_byte(&(*string)))
    usart_transmit_byte_to_keypad(pgm_read_byte(&(*string++)));
     664:	31 96       	adiw	r30, 0x01	; 1
 * @return Void
 */
void usart_transmit_byte_to_keypad(unsigned char data)
{
  while (!(UCSR1A & (1<<UDRE1)));   // Wait for empty transmit buffer
  UDR1 = data;                      // Start transmition
     666:	90 93 ce 00 	sts	0x00CE, r25
 * @param string - char*, String to transmit to UI
 * @return Void
 */
void usart_transmit_string_to_keypad_from_flash(char* string)
{
  while (pgm_read_byte(&(*string)))
     66a:	94 91       	lpm	r25, Z+
     66c:	99 23       	and	r25, r25
     66e:	b1 f7       	brne	.-20     	; 0x65c <usart_transmit_string_to_keypad_from_flash+0x4>
    usart_transmit_byte_to_keypad(pgm_read_byte(&(*string++)));
}
     670:	08 95       	ret

00000672 <usart_transmit_string_to_keypad>:
 * @brief Transmits string data from MC --> UI over UDR1
 * @param string - char*, String to transmit to UI
 * @return Void
 */
void usart_transmit_string_to_keypad(unsigned char* string)
{
     672:	fc 01       	movw	r30, r24
     674:	07 c0       	rjmp	.+14     	; 0x684 <usart_transmit_string_to_keypad+0x12>
 * @param data - unsigned char, byte to transmit to UI
 * @return Void
 */
void usart_transmit_byte_to_keypad(unsigned char data)
{
  while (!(UCSR1A & (1<<UDRE1)));   // Wait for empty transmit buffer
     676:	80 91 c8 00 	lds	r24, 0x00C8
     67a:	85 ff       	sbrs	r24, 5
     67c:	fc cf       	rjmp	.-8      	; 0x676 <usart_transmit_string_to_keypad+0x4>
 * @return Void
 */
void usart_transmit_string_to_keypad(unsigned char* string)
{
  while (*string)
    usart_transmit_byte_to_keypad(*string++);
     67e:	31 96       	adiw	r30, 0x01	; 1
 * @return Void
 */
void usart_transmit_byte_to_keypad(unsigned char data)
{
  while (!(UCSR1A & (1<<UDRE1)));   // Wait for empty transmit buffer
  UDR1 = data;                      // Start transmition
     680:	90 93 ce 00 	sts	0x00CE, r25
 * @param string - char*, String to transmit to UI
 * @return Void
 */
void usart_transmit_string_to_keypad(unsigned char* string)
{
  while (*string)
     684:	90 81       	ld	r25, Z
     686:	99 23       	and	r25, r25
     688:	b1 f7       	brne	.-20     	; 0x676 <usart_transmit_string_to_keypad+0x4>
    usart_transmit_byte_to_keypad(*string++);
}
     68a:	08 95       	ret

0000068c <init_usart_pc>:
 * @brief Initializes the buad communication over USART.
 * @return Void
 */
void init_usart_pc(void)
{
  UCSR0B = 0x00; //disable while setting baud rate
     68c:	e1 ec       	ldi	r30, 0xC1	; 193
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	10 82       	st	Z, r1
  UCSR0A = 0x00;
     692:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0C = 0x06;
     696:	86 e0       	ldi	r24, 0x06	; 6
     698:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = 0x19;
     69c:	89 e1       	ldi	r24, 0x19	; 25
     69e:	80 93 c4 00 	sts	0x00C4, r24
  UBRR0H = 0x00; //set baud rate to 19,200 with 8MHz clock
     6a2:	10 92 c5 00 	sts	0x00C5, r1
  UCSR0B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     6a6:	88 e9       	ldi	r24, 0x98	; 152
     6a8:	80 83       	st	Z, r24
}
     6aa:	08 95       	ret

000006ac <usart_transmit_byte_to_pc>:
 * @brief transmit one byte to UDR0 (PC connection) 
 * @param data contains the byte that needs to be sent
 * return Void
 */
void usart_transmit_byte_to_pc(unsigned char data)
{
     6ac:	98 2f       	mov	r25, r24
  while (!(UCSR0A & (1<<UDRE0)));   // Loop until the data register is empty
     6ae:	80 91 c0 00 	lds	r24, 0x00C0
     6b2:	85 ff       	sbrs	r24, 5
     6b4:	fc cf       	rjmp	.-8      	; 0x6ae <usart_transmit_byte_to_pc+0x2>
  UDR0 = data;                      // Transmit one byte of data
     6b6:	90 93 c6 00 	sts	0x00C6, r25
}
     6ba:	08 95       	ret

000006bc <usart_transmit_string_to_pc_from_flash>:
 * @brief reads each byte of data and sends it to the Flash individually
 * @param str_data   String     Contains message to be sent to PC
 * @return Void
 */
void usart_transmit_string_to_pc_from_flash(char* str_data)
{
     6bc:	fc 01       	movw	r30, r24
     6be:	07 c0       	rjmp	.+14     	; 0x6ce <usart_transmit_string_to_pc_from_flash+0x12>
 * @param data contains the byte that needs to be sent
 * return Void
 */
void usart_transmit_byte_to_pc(unsigned char data)
{
  while (!(UCSR0A & (1<<UDRE0)));   // Loop until the data register is empty
     6c0:	80 91 c0 00 	lds	r24, 0x00C0
     6c4:	85 ff       	sbrs	r24, 5
     6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <usart_transmit_string_to_pc_from_flash+0x4>
 * @return Void
 */
void usart_transmit_string_to_pc_from_flash(char* str_data)
{
  while (pgm_read_byte(&(*str_data)))
    usart_transmit_byte_to_pc(pgm_read_byte(&(*str_data++)));
     6c8:	31 96       	adiw	r30, 0x01	; 1
 * return Void
 */
void usart_transmit_byte_to_pc(unsigned char data)
{
  while (!(UCSR0A & (1<<UDRE0)));   // Loop until the data register is empty
  UDR0 = data;                      // Transmit one byte of data
     6ca:	90 93 c6 00 	sts	0x00C6, r25
 * @param str_data   String     Contains message to be sent to PC
 * @return Void
 */
void usart_transmit_string_to_pc_from_flash(char* str_data)
{
  while (pgm_read_byte(&(*str_data)))
     6ce:	94 91       	lpm	r25, Z+
     6d0:	99 23       	and	r25, r25
     6d2:	b1 f7       	brne	.-20     	; 0x6c0 <usart_transmit_string_to_pc_from_flash+0x4>
    usart_transmit_byte_to_pc(pgm_read_byte(&(*str_data++)));
}
     6d4:	08 95       	ret

000006d6 <usart_transmit_string_to_pc>:
 * @param str_data string to transmit
 * @return Void
 * TODO: does this method send null terminator?
 */
void usart_transmit_string_to_pc(unsigned char* str_data)
{
     6d6:	fc 01       	movw	r30, r24
     6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <usart_transmit_string_to_pc+0x12>
 * @param data contains the byte that needs to be sent
 * return Void
 */
void usart_transmit_byte_to_pc(unsigned char data)
{
  while (!(UCSR0A & (1<<UDRE0)));   // Loop until the data register is empty
     6da:	80 91 c0 00 	lds	r24, 0x00C0
     6de:	85 ff       	sbrs	r24, 5
     6e0:	fc cf       	rjmp	.-8      	; 0x6da <usart_transmit_string_to_pc+0x4>
 * TODO: does this method send null terminator?
 */
void usart_transmit_string_to_pc(unsigned char* str_data)
{
  while (*str_data)
    usart_transmit_byte_to_pc(*str_data++);
     6e2:	31 96       	adiw	r30, 0x01	; 1
 * return Void
 */
void usart_transmit_byte_to_pc(unsigned char data)
{
  while (!(UCSR0A & (1<<UDRE0)));   // Loop until the data register is empty
  UDR0 = data;                      // Transmit one byte of data
     6e4:	90 93 c6 00 	sts	0x00C6, r25
 * @return Void
 * TODO: does this method send null terminator?
 */
void usart_transmit_string_to_pc(unsigned char* str_data)
{
  while (*str_data)
     6e8:	90 81       	ld	r25, Z
     6ea:	99 23       	and	r25, r25
     6ec:	b1 f7       	brne	.-20     	; 0x6da <usart_transmit_string_to_pc+0x4>
    usart_transmit_byte_to_pc(*str_data++);
}
     6ee:	08 95       	ret

000006f0 <usart_pc_receive_action>:
 * @ref  tech_report.pdf
 * @return always 0?
 */
unsigned char usart_pc_receive_action(void)
{
  usart_pc_data_ready = false;
     6f0:	10 92 95 0d 	sts	0x0D95, r1

  message_count++;
     6f4:	80 91 93 0d 	lds	r24, 0x0D93
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 93 0d 	sts	0x0D93, r24

  // Received an entire line; process it
  if(usart_pc_received_data == CARR_RETURN)
     6fe:	80 91 33 09 	lds	r24, 0x0933
     702:	8d 30       	cpi	r24, 0x0D	; 13
     704:	69 f4       	brne	.+26     	; 0x720 <usart_pc_receive_action+0x30>
  {
    message_count = 0;
     706:	10 92 93 0d 	sts	0x0D93, r1
    if(!valid_message)
     70a:	80 91 8f 0d 	lds	r24, 0x0D8F
     70e:	88 23       	and	r24, r24
     710:	39 f4       	brne	.+14     	; 0x720 <usart_pc_receive_action+0x30>
    {
      valid_message = true;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 8f 0d 	sts	0x0D8F, r24
      PRINTF((unsigned char *)"SABT - IMPROPER HEADER TYPE, MUST USE PC!\r\n");
     718:	81 e2       	ldi	r24, 0x21	; 33
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
    }
  }

  // if header not yet received, build it
  if(!usart_pc_header_received)
     720:	80 91 aa 0d 	lds	r24, 0x0DAA
     724:	88 23       	and	r24, r24
     726:	19 f5       	brne	.+70     	; 0x76e <usart_pc_receive_action+0x7e>
  {
    usart_pc_prefix[2] = usart_pc_received_data;
     728:	90 91 33 09 	lds	r25, 0x0933
     72c:	90 93 a5 0d 	sts	0x0DA5, r25
    usart_pc_prefix[0] = usart_pc_prefix[1];
     730:	20 91 a4 0d 	lds	r18, 0x0DA4
     734:	20 93 a3 0d 	sts	0x0DA3, r18
    usart_pc_prefix[1] = usart_pc_prefix[2];
     738:	90 93 a4 0d 	sts	0x0DA4, r25

    if((usart_pc_prefix[0]=='P') && (usart_pc_prefix[1]=='C') && (message_count == 2))
     73c:	20 35       	cpi	r18, 0x50	; 80
     73e:	81 f4       	brne	.+32     	; 0x760 <usart_pc_receive_action+0x70>
     740:	93 34       	cpi	r25, 0x43	; 67
     742:	71 f4       	brne	.+28     	; 0x760 <usart_pc_receive_action+0x70>
     744:	30 91 93 0d 	lds	r19, 0x0D93
     748:	32 30       	cpi	r19, 0x02	; 2
     74a:	61 f5       	brne	.+88     	; 0x7a4 <usart_pc_receive_action+0xb4>
    {
      usart_pc_header_received = true;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 aa 0d 	sts	0x0DAA, r24
      usart_pc_received_packet[0] = usart_pc_prefix[0];
     752:	20 93 75 0d 	sts	0x0D75, r18
      usart_pc_received_packet[1] = usart_pc_prefix[1];
     756:	90 93 76 0d 	sts	0x0D76, r25
      usart_pc_receive_msgcnt = 2;
     75a:	30 93 a6 0d 	sts	0x0DA6, r19
     75e:	22 c0       	rjmp	.+68     	; 0x7a4 <usart_pc_receive_action+0xb4>
    }
    else if(((usart_pc_prefix[0] != 'P') || (usart_pc_prefix[1] != 'C')) &&
     760:	80 91 93 0d 	lds	r24, 0x0D93
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	f1 f4       	brne	.+60     	; 0x7a4 <usart_pc_receive_action+0xb4>
        (message_count == 2))
    {
      valid_message = false;
     768:	10 92 8f 0d 	sts	0x0D8F, r1
     76c:	1b c0       	rjmp	.+54     	; 0x7a4 <usart_pc_receive_action+0xb4>
    }
  }
  else
  {
    // If carraige return found --> end of the command
    if(usart_pc_received_data == CARR_RETURN)
     76e:	80 91 33 09 	lds	r24, 0x0933
     772:	8d 30       	cpi	r24, 0x0D	; 13
     774:	59 f4       	brne	.+22     	; 0x78c <usart_pc_receive_action+0x9c>
    {
      usart_received_payload_len = usart_pc_receive_msgcnt;
     776:	80 91 a6 0d 	lds	r24, 0x0DA6
     77a:	80 93 a8 0d 	sts	0x0DA8, r24
     77e:	10 92 a9 0d 	sts	0x0DA9, r1
      usart_pc_message_ready = true;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 f4 08 	sts	0x08F4, r24
      usart_pc_header_received = false;
     788:	10 92 aa 0d 	sts	0x0DAA, r1
    }
    usart_pc_received_packet[usart_pc_receive_msgcnt++] = usart_pc_received_data;
     78c:	80 91 a6 0d 	lds	r24, 0x0DA6
     790:	e8 2f       	mov	r30, r24
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	90 91 33 09 	lds	r25, 0x0933
     798:	eb 58       	subi	r30, 0x8B	; 139
     79a:	f2 4f       	sbci	r31, 0xF2	; 242
     79c:	90 83       	st	Z, r25
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	80 93 a6 0d 	sts	0x0DA6, r24
  }

  return 0;
}
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	08 95       	ret

000007a8 <request_to_play_mp3_file>:
 *        loop)
 * @param this_file  the name of the MP3 file to be played
 * @return Void
 */
void request_to_play_mp3_file(const char* this_file)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
  int i = 0, j;

  while(i < strlen((char*)g_file_name))
     7b2:	a4 e3       	ldi	r26, 0x34	; 52
     7b4:	b9 e0       	ldi	r27, 0x09	; 9
     7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <request_to_play_mp3_file+0x1a>
  {
    g_file_name[i++] = '\0';
     7b8:	fc 01       	movw	r30, r24
     7ba:	ec 5c       	subi	r30, 0xCC	; 204
     7bc:	f6 4f       	sbci	r31, 0xF6	; 246
     7be:	10 82       	st	Z, r1
     7c0:	01 96       	adiw	r24, 0x01	; 1
 */
void request_to_play_mp3_file(const char* this_file)
{
  int i = 0, j;

  while(i < strlen((char*)g_file_name))
     7c2:	fd 01       	movw	r30, r26
     7c4:	01 90       	ld	r0, Z+
     7c6:	00 20       	and	r0, r0
     7c8:	e9 f7       	brne	.-6      	; 0x7c4 <request_to_play_mp3_file+0x1c>
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	e4 53       	subi	r30, 0x34	; 52
     7ce:	f9 40       	sbci	r31, 0x09	; 9
     7d0:	8e 17       	cp	r24, r30
     7d2:	9f 07       	cpc	r25, r31
     7d4:	88 f3       	brcs	.-30     	; 0x7b8 <request_to_play_mp3_file+0x10>
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <request_to_play_mp3_file+0x38>
  i = 0;

  // copy the file name to the global variable
  while(this_file[i] != '.')
  {
    g_file_name[i] = this_file[i];
     7dc:	ec 93       	st	X, r30
    i++;
     7de:	a9 01       	movw	r20, r18
  }

  i = 0;

  // copy the file name to the global variable
  while(this_file[i] != '.')
     7e0:	fe 01       	movw	r30, r28
     7e2:	e4 0f       	add	r30, r20
     7e4:	f5 1f       	adc	r31, r21
     7e6:	e0 81       	ld	r30, Z
     7e8:	da 01       	movw	r26, r20
     7ea:	ac 5c       	subi	r26, 0xCC	; 204
     7ec:	b6 4f       	sbci	r27, 0xF6	; 246
     7ee:	9a 01       	movw	r18, r20
     7f0:	2f 5f       	subi	r18, 0xFF	; 255
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	ee 32       	cpi	r30, 0x2E	; 46
     7f6:	91 f7       	brne	.-28     	; 0x7dc <request_to_play_mp3_file+0x34>
    i++;
  }

  for(j = 0; j < 4; j ++)
  {
    g_file_name[i] = this_file[i];
     7f8:	ec 93       	st	X, r30
     7fa:	d9 01       	movw	r26, r18
     7fc:	ac 5c       	subi	r26, 0xCC	; 204
     7fe:	b6 4f       	sbci	r27, 0xF6	; 246
     800:	fe 01       	movw	r30, r28
     802:	e2 0f       	add	r30, r18
     804:	f3 1f       	adc	r31, r19
     806:	80 81       	ld	r24, Z
     808:	8c 93       	st	X, r24
    i ++;
     80a:	f9 01       	movw	r30, r18
     80c:	31 96       	adiw	r30, 0x01	; 1
    i++;
  }

  for(j = 0; j < 4; j ++)
  {
    g_file_name[i] = this_file[i];
     80e:	9f 01       	movw	r18, r30
     810:	2c 5c       	subi	r18, 0xCC	; 204
     812:	36 4f       	sbci	r19, 0xF6	; 246
     814:	de 01       	movw	r26, r28
     816:	ae 0f       	add	r26, r30
     818:	bf 1f       	adc	r27, r31
     81a:	8c 91       	ld	r24, X
     81c:	d9 01       	movw	r26, r18
     81e:	8c 93       	st	X, r24
    i ++;
     820:	31 96       	adiw	r30, 0x01	; 1
    i++;
  }

  for(j = 0; j < 4; j ++)
  {
    g_file_name[i] = this_file[i];
     822:	ce 0f       	add	r28, r30
     824:	df 1f       	adc	r29, r31
     826:	88 81       	ld	r24, Y
     828:	ec 5c       	subi	r30, 0xCC	; 204
     82a:	f6 4f       	sbci	r31, 0xF6	; 246
     82c:	80 83       	st	Z, r24
     82e:	ca 01       	movw	r24, r20
     830:	04 96       	adiw	r24, 0x04	; 4
     832:	fc 01       	movw	r30, r24
     834:	ec 5c       	subi	r30, 0xCC	; 204
     836:	f6 4f       	sbci	r31, 0xF6	; 246
     838:	02 c0       	rjmp	.+4      	; 0x83e <request_to_play_mp3_file+0x96>
    i ++;
  }

  //clear out anything that is left
  for(; i < FILE_NAME_LEN; i ++)
    g_file_name[i] = 0;
     83a:	11 92       	st	Z+, r1
    g_file_name[i] = this_file[i];
    i ++;
  }

  //clear out anything that is left
  for(; i < FILE_NAME_LEN; i ++)
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	8d 30       	cpi	r24, 0x0D	; 13
     840:	91 05       	cpc	r25, r1
     842:	dc f3       	brlt	.-10     	; 0x83a <request_to_play_mp3_file+0x92>
    g_file_name[i] = 0;

  // Mark that a file is queued to be played by the user interface
  ui_mp3_file_pending = true;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 f9 08 	sts	0x08F9, r24
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <vs1053_read_command>:
 * @brief ?
 * @param addr - unsigned char, address to read from
 * @return unsigned int - return combination of SPI_recieves
 */
unsigned int vs1053_read_command(unsigned char addr)
{
     850:	1f 93       	push	r17
     852:	18 2f       	mov	r17, r24
  temp_address = addr;
     854:	80 93 ad 0d 	sts	0x0DAD, r24
  spi_select_mp3_cmd();
     858:	0e 94 8b 05 	call	0xb16	; 0xb16 <spi_select_mp3_cmd>
  spi_transmit(0x03);
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(addr);
     862:	81 2f       	mov	r24, r17
     864:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  temp1 = spi_receive();
     868:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	90 93 a1 08 	sts	0x08A1, r25
     872:	80 93 a0 08 	sts	0x08A0, r24
  temp2 = spi_receive();
     876:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 a3 08 	sts	0x08A3, r25
     880:	80 93 a2 08 	sts	0x08A2, r24
  temp3 = temp1 * 256 + temp2;
     884:	80 91 a0 08 	lds	r24, 0x08A0
     888:	90 91 a1 08 	lds	r25, 0x08A1
     88c:	20 91 a2 08 	lds	r18, 0x08A2
     890:	30 91 a3 08 	lds	r19, 0x08A3
     894:	98 2f       	mov	r25, r24
     896:	88 27       	eor	r24, r24
     898:	82 0f       	add	r24, r18
     89a:	93 1f       	adc	r25, r19
     89c:	90 93 a5 08 	sts	0x08A5, r25
     8a0:	80 93 a4 08 	sts	0x08A4, r24
  spi_deselect_all();
     8a4:	0e 94 7d 05 	call	0xafa	; 0xafa <spi_deselect_all>
  return temp3;
     8a8:	20 91 a4 08 	lds	r18, 0x08A4
     8ac:	30 91 a5 08 	lds	r19, 0x08A5
}
     8b0:	c9 01       	movw	r24, r18
     8b2:	1f 91       	pop	r17
     8b4:	08 95       	ret

000008b6 <vs1053_write_command>:
 * @param addr - unsigned char, address to write into
 * @param cmd - unsigned int, commmand to process
 * @return Void
 */
void vs1053_write_command(unsigned char addr, unsigned int cmd)
{
     8b6:	1f 93       	push	r17
     8b8:	18 2f       	mov	r17, r24
  temp4 = (cmd & 0xFF00) >> 8;
     8ba:	70 93 ac 0d 	sts	0x0DAC, r23
  temp5 = (cmd & 0x00FF);
     8be:	60 93 ab 0d 	sts	0x0DAB, r22
  temp_address = addr;
     8c2:	80 93 ad 0d 	sts	0x0DAD, r24
  spi_select_mp3_cmd();
     8c6:	0e 94 8b 05 	call	0xb16	; 0xb16 <spi_select_mp3_cmd>
  spi_transmit(0x02);
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(addr);
     8d0:	81 2f       	mov	r24, r17
     8d2:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(temp4);
     8d6:	80 91 ac 0d 	lds	r24, 0x0DAC
     8da:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(temp5);
     8de:	80 91 ab 0d 	lds	r24, 0x0DAB
     8e2:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_deselect_all();
     8e6:	0e 94 7d 05 	call	0xafa	; 0xafa <spi_deselect_all>
}
     8ea:	1f 91       	pop	r17
     8ec:	08 95       	ret

000008ee <vs1053_decrease_vol>:
 * @ref   https://www.sparkfun.com/datasheets/Components/SMD/vs1053.pdf look
 *        on page 47
 * @return bool - did sound file change properly
 */
bool vs1053_decrease_vol(void)
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
  int retry = 0;

  //Decrease the global volume setting
  vs1053_volume = vs1053_volume + VOL_INCR;
     8f2:	80 91 43 09 	lds	r24, 0x0943
     8f6:	90 91 44 09 	lds	r25, 0x0944
     8fa:	88 51       	subi	r24, 0x18	; 24
     8fc:	9c 4f       	sbci	r25, 0xFC	; 252
     8fe:	90 93 44 09 	sts	0x0944, r25
     902:	80 93 43 09 	sts	0x0943, r24
  // Check for min volume setting
  //vs1053_volume is an unsigned, so if you go above FFFF, will wrap around to small number
  //Min_vol is assigned based off of testing.  IF you go down by more then 9, vol_INCR, when set at
  //1000. Sound will go up for 4 down presses before becoming completely quiet.  
  //make sure not to let this happen
  if(vs1053_volume >= (MIN_VOL - VOL_INCR))
     906:	80 91 43 09 	lds	r24, 0x0943
     90a:	90 91 44 09 	lds	r25, 0x0944
     90e:	88 56       	subi	r24, 0x68	; 104
     910:	97 44       	sbci	r25, 0x47	; 71
     912:	18 f4       	brcc	.+6      	; 0x91a <vs1053_decrease_vol+0x2c>
     914:	c0 e0       	ldi	r28, 0x00	; 0
     916:	d0 e0       	ldi	r29, 0x00	; 0
     918:	14 c0       	rjmp	.+40     	; 0x942 <vs1053_decrease_vol+0x54>
  {
    vs1053_volume = MIN_VOL - VOL_INCR - 1;
     91a:	87 e6       	ldi	r24, 0x67	; 103
     91c:	97 e4       	ldi	r25, 0x47	; 71
     91e:	90 93 44 09 	sts	0x0944, r25
     922:	80 93 43 09 	sts	0x0943, r24
     926:	17 c0       	rjmp	.+46     	; 0x956 <vs1053_decrease_vol+0x68>
  else
  {
    // Actually decrease the volume
    while(vs1053_read_command(0x0B) != vs1053_volume)   // REDO if not written properly
    {
      vs1053_write_command(0x0B, vs1053_volume);        // Set the requested volume
     928:	60 91 43 09 	lds	r22, 0x0943
     92c:	70 91 44 09 	lds	r23, 0x0944
     930:	8b e0       	ldi	r24, 0x0B	; 11
     932:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
      if(retry++ > 10) return false;
     936:	cb 30       	cpi	r28, 0x0B	; 11
     938:	d1 05       	cpc	r29, r1
     93a:	11 f4       	brne	.+4      	; 0x940 <vs1053_decrease_vol+0x52>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0c c0       	rjmp	.+24     	; 0x958 <vs1053_decrease_vol+0x6a>
     940:	21 96       	adiw	r28, 0x01	; 1
    vs1053_volume = MIN_VOL - VOL_INCR - 1;
  }
  else
  {
    // Actually decrease the volume
    while(vs1053_read_command(0x0B) != vs1053_volume)   // REDO if not written properly
     942:	8b e0       	ldi	r24, 0x0B	; 11
     944:	0e 94 28 04 	call	0x850	; 0x850 <vs1053_read_command>
     948:	20 91 43 09 	lds	r18, 0x0943
     94c:	30 91 44 09 	lds	r19, 0x0944
     950:	82 17       	cp	r24, r18
     952:	93 07       	cpc	r25, r19
     954:	49 f7       	brne	.-46     	; 0x928 <vs1053_decrease_vol+0x3a>
     956:	81 e0       	ldi	r24, 0x01	; 1
      vs1053_write_command(0x0B, vs1053_volume);        // Set the requested volume
      if(retry++ > 10) return false;
    }
  }
  return true;
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <vs1053_increase_vol>:
 * @ref   https://www.sparkfun.com/datasheets/Components/SMD/vs1053.pdf, look
 *        on page 47
 * @return bool - did sound file change properly
 */
bool vs1053_increase_vol(void)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
  int retry = 0;

  // Increase the global volume setting
  vs1053_volume = vs1053_volume - VOL_INCR;
     962:	80 91 43 09 	lds	r24, 0x0943
     966:	90 91 44 09 	lds	r25, 0x0944
     96a:	88 5e       	subi	r24, 0xE8	; 232
     96c:	93 40       	sbci	r25, 0x03	; 3
     96e:	90 93 44 09 	sts	0x0944, r25
     972:	80 93 43 09 	sts	0x0943, r24
  
  // Check for max volume we are allowing
  //vs1053_volume is an unsigned, so if you go belove 0, wraps around to high positive
  if(vs1053_volume <= VOL_INCR)
     976:	80 91 43 09 	lds	r24, 0x0943
     97a:	90 91 44 09 	lds	r25, 0x0944
     97e:	89 5e       	subi	r24, 0xE9	; 233
     980:	93 40       	sbci	r25, 0x03	; 3
     982:	18 f0       	brcs	.+6      	; 0x98a <vs1053_increase_vol+0x2c>
     984:	c0 e0       	ldi	r28, 0x00	; 0
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <vs1053_increase_vol+0x54>
  {
    vs1053_volume = VOL_INCR + 1;
     98a:	89 ee       	ldi	r24, 0xE9	; 233
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	90 93 44 09 	sts	0x0944, r25
     992:	80 93 43 09 	sts	0x0943, r24
     996:	17 c0       	rjmp	.+46     	; 0x9c6 <vs1053_increase_vol+0x68>
  else
  {
    // Actually increase the volume
    while(vs1053_read_command(0x0B) != vs1053_volume)   // REDO if not written properly
    {
      vs1053_write_command(0x0B, vs1053_volume);        // Set the requested volume
     998:	60 91 43 09 	lds	r22, 0x0943
     99c:	70 91 44 09 	lds	r23, 0x0944
     9a0:	8b e0       	ldi	r24, 0x0B	; 11
     9a2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
      if(retry++ > 10) return false;
     9a6:	cb 30       	cpi	r28, 0x0B	; 11
     9a8:	d1 05       	cpc	r29, r1
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <vs1053_increase_vol+0x52>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0c c0       	rjmp	.+24     	; 0x9c8 <vs1053_increase_vol+0x6a>
     9b0:	21 96       	adiw	r28, 0x01	; 1
    vs1053_volume = VOL_INCR + 1;
  }
  else
  {
    // Actually increase the volume
    while(vs1053_read_command(0x0B) != vs1053_volume)   // REDO if not written properly
     9b2:	8b e0       	ldi	r24, 0x0B	; 11
     9b4:	0e 94 28 04 	call	0x850	; 0x850 <vs1053_read_command>
     9b8:	20 91 43 09 	lds	r18, 0x0943
     9bc:	30 91 44 09 	lds	r19, 0x0944
     9c0:	82 17       	cp	r24, r18
     9c2:	93 07       	cpc	r25, r19
     9c4:	49 f7       	brne	.-46     	; 0x998 <vs1053_increase_vol+0x3a>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
      vs1053_write_command(0x0B, vs1053_volume);        // Set the requested volume
      if(retry++ > 10) return false;
    }
  }
  return true;
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <vs1053_software_reset>:
  return 0;
}

void vs1053_software_reset(void)
{
  vs1053_write_command(0x00, 0x0804);         // Software reset via mode register
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	64 e0       	ldi	r22, 0x04	; 4
     9d2:	78 e0       	ldi	r23, 0x08	; 8
     9d4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9d8:	80 e4       	ldi	r24, 0x40	; 64
     9da:	9c e9       	ldi	r25, 0x9C	; 156
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <vs1053_software_reset+0xe>
  _delay_ms(20);
}
     9e0:	08 95       	ret

000009e2 <vs1053_write_data>:
 * @brief ?
 * @param data - unsigned char, transmits data on SPI interface
 * @return Void
 */
void vs1053_write_data(unsigned char data)
{
     9e2:	1f 93       	push	r17
     9e4:	18 2f       	mov	r17, r24
  spi_select_mp3_data();
     9e6:	0e 94 86 05 	call	0xb0c	; 0xb0c <spi_select_mp3_data>
  spi_transmit(data);
     9ea:	81 2f       	mov	r24, r17
     9ec:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_deselect_all();
     9f0:	0e 94 7d 05 	call	0xafa	; 0xafa <spi_deselect_all>
}
     9f4:	1f 91       	pop	r17
     9f6:	08 95       	ret

000009f8 <vs1053_initialize>:
 *                         return 2 if not written properly to 0x0B
 *                         return 3 if not written properly to 0x0b
 *                         return 4 if not written properly to 0x00
 */
unsigned char vs1053_initialize(void)
{
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
  unsigned char retry;

  spi_deselect_all();
     9fc:	0e 94 7d 05 	call	0xafa	; 0xafa <spi_deselect_all>
  SPI_PORT &= ~_BV(MP3_RESET);    // De assert RESET line (Chip in the reset state)
     a00:	2c 98       	cbi	0x05, 4	; 5
     a02:	00 e4       	ldi	r16, 0x40	; 64
     a04:	1c e9       	ldi	r17, 0x9C	; 156
     a06:	c8 01       	movw	r24, r16
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <vs1053_initialize+0x10>
  _delay_ms(20);                  // Hold for 20ms
  SPI_PORT |= _BV(MP3_RESET);     // Assert RESET line (Chip is powered now)
     a0c:	2c 9a       	sbi	0x05, 4	; 5
  spi_1x();                       // Low speed mode
     a0e:	0e 94 9a 05 	call	0xb34	; 0xb34 <spi_1x>
     a12:	c8 01       	movw	r24, r16
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <vs1053_initialize+0x1c>
     a18:	00 e0       	ldi	r16, 0x00	; 0
     a1a:	0a c0       	rjmp	.+20     	; 0xa30 <vs1053_initialize+0x38>
  retry = 0;

  while(vs1053_read_command(0x03) != 0x9800)  //REDO if not written properly  
  {
    // Set PLL register to 3.5 (preferred for normal operation)
    vs1053_write_command(0x03,0x9800);
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	78 e9       	ldi	r23, 0x98	; 152
     a22:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>

    if(retry++ > 10 ) return 1;     // try this 10 times
     a26:	0b 30       	cpi	r16, 0x0B	; 11
     a28:	11 f4       	brne	.+4      	; 0xa2e <vs1053_initialize+0x36>
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	54 c0       	rjmp	.+168    	; 0xad6 <vs1053_initialize+0xde>
     a2e:	0f 5f       	subi	r16, 0xFF	; 255
  SPI_PORT |= _BV(MP3_RESET);     // Assert RESET line (Chip is powered now)
  spi_1x();                       // Low speed mode
  _delay_ms(20);                  // Hold for 20ms
  retry = 0;

  while(vs1053_read_command(0x03) != 0x9800)  //REDO if not written properly  
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	0e 94 28 04 	call	0x850	; 0x850 <vs1053_read_command>
     a36:	80 50       	subi	r24, 0x00	; 0
     a38:	98 49       	sbci	r25, 0x98	; 152
     a3a:	81 f7       	brne	.-32     	; 0xa1c <vs1053_initialize+0x24>
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	9c e9       	ldi	r25, 0x9C	; 156
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <vs1053_initialize+0x48>
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	0a c0       	rjmp	.+20     	; 0xa5c <vs1053_initialize+0x64>
  _delay_ms(20);

  retry = 0;
  while(vs1053_read_command(0x0B) != 0xFEFE)  // REDO if not written properly
  {
    vs1053_write_command(0x0B, 0xfefe);       // Total silence
     a48:	8b e0       	ldi	r24, 0x0B	; 11
     a4a:	6e ef       	ldi	r22, 0xFE	; 254
     a4c:	7e ef       	ldi	r23, 0xFE	; 254
     a4e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
    if(retry++ > 10 ) return 2;
     a52:	0b 30       	cpi	r16, 0x0B	; 11
     a54:	11 f4       	brne	.+4      	; 0xa5a <vs1053_initialize+0x62>
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	3e c0       	rjmp	.+124    	; 0xad6 <vs1053_initialize+0xde>
     a5a:	0f 5f       	subi	r16, 0xFF	; 255
  }

  _delay_ms(20);

  retry = 0;
  while(vs1053_read_command(0x0B) != 0xFEFE)  // REDO if not written properly
     a5c:	8b e0       	ldi	r24, 0x0B	; 11
     a5e:	0e 94 28 04 	call	0x850	; 0x850 <vs1053_read_command>
     a62:	8e 5f       	subi	r24, 0xFE	; 254
     a64:	9e 4f       	sbci	r25, 0xFE	; 254
     a66:	81 f7       	brne	.-32     	; 0xa48 <vs1053_initialize+0x50>
  {
    vs1053_write_command(0x0B, 0xfefe);       // Total silence
    if(retry++ > 10 ) return 2;
  }

  vs1053_write_command(0x05, 0xac45);         // Activate sample rate as 44.1kHz stereo
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	65 e4       	ldi	r22, 0x45	; 69
     a6c:	7c ea       	ldi	r23, 0xAC	; 172
     a6e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
     a72:	00 e0       	ldi	r16, 0x00	; 0
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <vs1053_initialize+0x92>

  retry = 0;
  while(vs1053_read_command(0x0b) != 0x2828)  // REDO if not written properly
  {
    vs1053_write_command(0x0b, 0x2828);       // Set volume to a midrange value
     a76:	8b e0       	ldi	r24, 0x0B	; 11
     a78:	68 e2       	ldi	r22, 0x28	; 40
     a7a:	78 e2       	ldi	r23, 0x28	; 40
     a7c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
    if(retry++ > 10 ) return 3;               // try this for 10 times
     a80:	0b 30       	cpi	r16, 0x0B	; 11
     a82:	11 f4       	brne	.+4      	; 0xa88 <vs1053_initialize+0x90>
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	27 c0       	rjmp	.+78     	; 0xad6 <vs1053_initialize+0xde>
     a88:	0f 5f       	subi	r16, 0xFF	; 255
  }

  vs1053_write_command(0x05, 0xac45);         // Activate sample rate as 44.1kHz stereo

  retry = 0;
  while(vs1053_read_command(0x0b) != 0x2828)  // REDO if not written properly
     a8a:	8b e0       	ldi	r24, 0x0B	; 11
     a8c:	0e 94 28 04 	call	0x850	; 0x850 <vs1053_read_command>
     a90:	28 e2       	ldi	r18, 0x28	; 40
     a92:	88 32       	cpi	r24, 0x28	; 40
     a94:	92 07       	cpc	r25, r18
     a96:	79 f7       	brne	.-34     	; 0xa76 <vs1053_initialize+0x7e>
  {
    vs1053_write_command(0x0b, 0x2828);       // Set volume to a midrange value
    if(retry++ > 10 ) return 3;               // try this for 10 times
  }

  vs1053_volume = 0x2828;
     a98:	90 93 44 09 	sts	0x0944, r25
     a9c:	80 93 43 09 	sts	0x0943, r24
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	0a c0       	rjmp	.+20     	; 0xab8 <vs1053_initialize+0xc0>
  retry = 0;
  while(vs1053_read_command(0x00) != 0x0800)  // REDO if not written properly
  {
    vs1053_write_command(0x00, 0x0800);       // Set mode reg to SDINEW mode and MICIN
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	78 e0       	ldi	r23, 0x08	; 8
     aaa:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vs1053_write_command>
    if(retry++ > 10 ) return 4;               // try this for 10 times
     aae:	0b 30       	cpi	r16, 0x0B	; 11
     ab0:	11 f4       	brne	.+4      	; 0xab6 <vs1053_initialize+0xbe>
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	10 c0       	rjmp	.+32     	; 0xad6 <vs1053_initialize+0xde>
     ab6:	0f 5f       	subi	r16, 0xFF	; 255
    if(retry++ > 10 ) return 3;               // try this for 10 times
  }

  vs1053_volume = 0x2828;
  retry = 0;
  while(vs1053_read_command(0x00) != 0x0800)  // REDO if not written properly
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 28 04 	call	0x850	; 0x850 <vs1053_read_command>
     abe:	80 50       	subi	r24, 0x00	; 0
     ac0:	98 40       	sbci	r25, 0x08	; 8
     ac2:	81 f7       	brne	.-32     	; 0xaa4 <vs1053_initialize+0xac>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	9c e9       	ldi	r25, 0x9C	; 156
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <vs1053_initialize+0xd0>
    vs1053_write_command(0x00, 0x0800);       // Set mode reg to SDINEW mode and MICIN
    if(retry++ > 10 ) return 4;               // try this for 10 times
  }

  _delay_ms(20);
  vs1053_software_reset();
     acc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vs1053_software_reset>

  spi_2x();
     ad0:	0e 94 90 05 	call	0xb20	; 0xb20 <spi_2x>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <spi_initialize>:
 * @brief Initilizes variables for SPI
 * @return Void
 */
void spi_initialize(void)
{
  DDRB |= _BV(SD_SELECT) | _BV(MP3_DATA) | _BV(MP3_CMD) | _BV(MP3_RESET);
     adc:	84 b1       	in	r24, 0x04	; 4
     ade:	87 61       	ori	r24, 0x17	; 23
     ae0:	84 b9       	out	0x04, r24	; 4
  DDRB &= ~_BV(MP3_DREQ);
     ae2:	23 98       	cbi	0x04, 3	; 4
  DDRB = 0xB7;
     ae4:	87 eb       	ldi	r24, 0xB7	; 183
     ae6:	84 b9       	out	0x04, r24	; 4
  SPCR = 0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
     ae8:	80 e5       	ldi	r24, 0x50	; 80
     aea:	8c bd       	out	0x2c, r24	; 44
 * @brief 
 * @return Void
 */
void spi_1x(void)
{  //62.5 kHz
  SPCR |= _BV(SPR1)|_BV(SPR0);
     aec:	8c b5       	in	r24, 0x2c	; 44
     aee:	83 60       	ori	r24, 0x03	; 3
     af0:	8c bd       	out	0x2c, r24	; 44
  SPSR &= ~_BV(SPI2X);
     af2:	8d b5       	in	r24, 0x2d	; 45
     af4:	8e 7f       	andi	r24, 0xFE	; 254
     af6:	8d bd       	out	0x2d, r24	; 45
  DDRB |= _BV(SD_SELECT) | _BV(MP3_DATA) | _BV(MP3_CMD) | _BV(MP3_RESET);
  DDRB &= ~_BV(MP3_DREQ);
  DDRB = 0xB7;
  SPCR = 0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
  spi_1x();
}
     af8:	08 95       	ret

00000afa <spi_deselect_all>:
 * @brief Deselects all from the SPI
 * @return Void
 */
void spi_deselect_all(void)
{
  SPI_PORT |= _BV(SD_SELECT) | _BV(MP3_DATA) | _BV(MP3_CMD);
     afa:	85 b1       	in	r24, 0x05	; 5
     afc:	87 60       	ori	r24, 0x07	; 7
     afe:	85 b9       	out	0x05, r24	; 5
}
     b00:	08 95       	ret

00000b02 <spi_select_sd>:
/**
 * @brief Selects all from the SPI
 * @return Void
 */
void spi_select_sd(void){
  SPI_PORT |= _BV(SD_SELECT) | _BV(MP3_DATA) | _BV(MP3_CMD);
     b02:	85 b1       	in	r24, 0x05	; 5
     b04:	87 60       	ori	r24, 0x07	; 7
     b06:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(SD_SELECT);
     b08:	28 98       	cbi	0x05, 0	; 5
}
     b0a:	08 95       	ret

00000b0c <spi_select_mp3_data>:
 * @brief Selects MP3 data for the SPI
 * @return Void
 */
void spi_select_mp3_data(void)
{
  SPI_PORT |= _BV(SD_SELECT) | _BV(MP3_DATA) | _BV(MP3_CMD);
     b0c:	85 b1       	in	r24, 0x05	; 5
     b0e:	87 60       	ori	r24, 0x07	; 7
     b10:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(MP3_DATA);
     b12:	2a 98       	cbi	0x05, 2	; 5
}
     b14:	08 95       	ret

00000b16 <spi_select_mp3_cmd>:
 * @brief Selects MP3 cmd for the SPI
 * @return Void
 */
void spi_select_mp3_cmd(void)
{
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b16:	85 b1       	in	r24, 0x05	; 5
     b18:	87 60       	ori	r24, 0x07	; 7
     b1a:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(MP3_CMD);
     b1c:	29 98       	cbi	0x05, 1	; 5
}
     b1e:	08 95       	ret

00000b20 <spi_2x>:
/**
 * @brief 
 * @return Void
 */
void spi_2x(void){ //4MHz
  SPCR &= ~_BV(SPR1);
     b20:	8c b5       	in	r24, 0x2c	; 44
     b22:	8d 7f       	andi	r24, 0xFD	; 253
     b24:	8c bd       	out	0x2c, r24	; 44
  SPCR &= ~_BV(SPR0);
     b26:	8c b5       	in	r24, 0x2c	; 44
     b28:	8e 7f       	andi	r24, 0xFE	; 254
     b2a:	8c bd       	out	0x2c, r24	; 44
  SPSR |= _BV(SPI2X);
     b2c:	8d b5       	in	r24, 0x2d	; 45
     b2e:	81 60       	ori	r24, 0x01	; 1
     b30:	8d bd       	out	0x2d, r24	; 45
}
     b32:	08 95       	ret

00000b34 <spi_1x>:
 * @brief 
 * @return Void
 */
void spi_1x(void)
{  //62.5 kHz
  SPCR |= _BV(SPR1)|_BV(SPR0);
     b34:	8c b5       	in	r24, 0x2c	; 44
     b36:	83 60       	ori	r24, 0x03	; 3
     b38:	8c bd       	out	0x2c, r24	; 44
  SPSR &= ~_BV(SPI2X);
     b3a:	8d b5       	in	r24, 0x2d	; 45
     b3c:	8e 7f       	andi	r24, 0xFE	; 254
     b3e:	8d bd       	out	0x2d, r24	; 45
}
     b40:	08 95       	ret

00000b42 <spi_transmit>:
 * @return Void
 */
unsigned char spi_transmit(unsigned char data)
{
  // Start transmission
  SPDR = data;
     b42:	8e bd       	out	0x2e, r24	; 46

  // Wait for transmission complete
  while(!(SPSR & (1 << SPIF)));
     b44:	0d b4       	in	r0, 0x2d	; 45
     b46:	07 fe       	sbrs	r0, 7
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <spi_transmit+0x2>
  data = SPDR;
     b4a:	8e b5       	in	r24, 0x2e	; 46
  return data;
}
     b4c:	08 95       	ret

00000b4e <spi_receive>:
unsigned char spi_receive(void)
{
  unsigned char data;

  // Wait for reception complete
  SPDR = 0xff;
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1 << SPIF)));
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <spi_receive+0x4>
  data = SPDR;
     b58:	8e b5       	in	r24, 0x2e	; 46

  // Return data register
  return data;
}
     b5a:	08 95       	ret

00000b5c <sd_send_command>:
 * @param cmd - unsigned char, command to send to the SD card
 * @param arg - unsigned long, argument of the command sent
 * @return unsigned char - response byte
 */
unsigned char sd_send_command(unsigned char cmd, unsigned long arg)
{
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	d8 2e       	mov	r13, r24
     b68:	7a 01       	movw	r14, r20
     b6a:	8b 01       	movw	r16, r22
  // so, if it's SD card we need to convert block address 
  // into corresponding byte address by 
  // multipying it with 512. which is equivalent to shifting it left 9 times
  // following 'if' loop does that

  if(sdhc_flag == 0)    
     b6c:	80 91 68 0b 	lds	r24, 0x0B68
     b70:	88 23       	and	r24, r24
     b72:	b9 f4       	brne	.+46     	; 0xba2 <sd_send_command+0x46>
    if(cmd == READ_SINGLE_BLOCK     ||
     b74:	8d 2d       	mov	r24, r13
     b76:	81 51       	subi	r24, 0x11	; 17
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	60 f0       	brcs	.+24     	; 0xb94 <sd_send_command+0x38>
     b7c:	88 e1       	ldi	r24, 0x18	; 24
     b7e:	d8 16       	cp	r13, r24
     b80:	49 f0       	breq	.+18     	; 0xb94 <sd_send_command+0x38>
     b82:	89 e1       	ldi	r24, 0x19	; 25
     b84:	d8 16       	cp	r13, r24
     b86:	31 f0       	breq	.+12     	; 0xb94 <sd_send_command+0x38>
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	d8 16       	cp	r13, r24
     b8c:	19 f0       	breq	.+6      	; 0xb94 <sd_send_command+0x38>
     b8e:	81 e2       	ldi	r24, 0x21	; 33
     b90:	d8 16       	cp	r13, r24
     b92:	39 f4       	brne	.+14     	; 0xba2 <sd_send_command+0x46>
        cmd == WRITE_SINGLE_BLOCK    ||
        cmd == WRITE_MULTIPLE_BLOCKS ||
        cmd == ERASE_BLOCK_START_ADDR|| 
        cmd == ERASE_BLOCK_END_ADDR ) 
    {
      arg = arg << 9;
     b94:	39 e0       	ldi	r19, 0x09	; 9
     b96:	ee 0c       	add	r14, r14
     b98:	ff 1c       	adc	r15, r15
     b9a:	00 1f       	adc	r16, r16
     b9c:	11 1f       	adc	r17, r17
     b9e:	3a 95       	dec	r19
     ba0:	d1 f7       	brne	.-12     	; 0xb96 <sd_send_command+0x3a>
    }

  SD_CS_ASSERT;
     ba2:	28 98       	cbi	0x05, 0	; 5

  spi_transmit(cmd | 0x40); //send command, first two bits always '01'
     ba4:	8d 2d       	mov	r24, r13
     ba6:	80 64       	ori	r24, 0x40	; 64
     ba8:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(arg >> 24);
     bac:	81 2f       	mov	r24, r17
     bae:	99 27       	eor	r25, r25
     bb0:	aa 27       	eor	r26, r26
     bb2:	bb 27       	eor	r27, r27
     bb4:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(arg >> 16);
     bb8:	c8 01       	movw	r24, r16
     bba:	aa 27       	eor	r26, r26
     bbc:	bb 27       	eor	r27, r27
     bbe:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(arg >> 8);
     bc2:	bb 27       	eor	r27, r27
     bc4:	a1 2f       	mov	r26, r17
     bc6:	90 2f       	mov	r25, r16
     bc8:	8f 2d       	mov	r24, r15
     bca:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(arg);
     bce:	8e 2d       	mov	r24, r14
     bd0:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>

  // It is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  if(cmd == SEND_IF_COND)
     bd4:	88 e0       	ldi	r24, 0x08	; 8
     bd6:	d8 16       	cp	r13, r24
     bd8:	11 f4       	brne	.+4      	; 0xbde <sd_send_command+0x82>
    spi_transmit(0x87);    // for remaining commands, CRC is ignored in SPI mode
     bda:	87 e8       	ldi	r24, 0x87	; 135
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <sd_send_command+0x84>
  else 
    spi_transmit(0x95); 
     bde:	85 e9       	ldi	r24, 0x95	; 149
     be0:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>

  while((response = spi_receive()) == 0xff) // wait response
    if(retry++ > 0xfe) break; // time out error
     be4:	10 e0       	ldi	r17, 0x00	; 0
     be6:	02 c0       	rjmp	.+4      	; 0xbec <sd_send_command+0x90>

  // It is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  if(cmd == SEND_IF_COND)
    spi_transmit(0x87);    // for remaining commands, CRC is ignored in SPI mode
  else 
    spi_transmit(0x95); 
     be8:	11 50       	subi	r17, 0x01	; 1

  while((response = spi_receive()) == 0xff) // wait response
    if(retry++ > 0xfe) break; // time out error
     bea:	d1 f0       	breq	.+52     	; 0xc20 <sd_send_command+0xc4>
  if(cmd == SEND_IF_COND)
    spi_transmit(0x87);    // for remaining commands, CRC is ignored in SPI mode
  else 
    spi_transmit(0x95); 

  while((response = spi_receive()) == 0xff) // wait response
     bec:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     bf0:	08 2f       	mov	r16, r24
     bf2:	8f 3f       	cpi	r24, 0xFF	; 255
     bf4:	c9 f3       	breq	.-14     	; 0xbe8 <sd_send_command+0x8c>
    if(retry++ > 0xfe) break; // time out error

  if(response == 0x00 && cmd == 58)  // checking response of CMD58
     bf6:	88 23       	and	r24, r24
     bf8:	99 f4       	brne	.+38     	; 0xc20 <sd_send_command+0xc4>
     bfa:	8a e3       	ldi	r24, 0x3A	; 58
     bfc:	d8 16       	cp	r13, r24
     bfe:	81 f4       	brne	.+32     	; 0xc20 <sd_send_command+0xc4>
  {
    status = spi_receive() & 0x40;     // first byte of the OCR register (bit 31:24)
     c00:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
    if(status == 0x40) sdhc_flag = 1;  // we need it to verify SDHC card
     c04:	86 ff       	sbrs	r24, 6
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <sd_send_command+0xb4>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 68 0b 	sts	0x0B68, r24
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <sd_send_command+0xb8>
    else sdhc_flag = 0;
     c10:	10 92 68 0b 	sts	0x0B68, r1

    spi_receive(); // remaining 3 bytes of the OCR register are ignored here
     c14:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
    spi_receive(); // one can use these bytes to check power supply limits of SD
     c18:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
    spi_receive(); 
     c1c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
  }

  spi_receive(); // extra 8 CLK
     c20:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
  SD_CS_DEASSERT;
     c24:	28 9a       	sbi	0x05, 0	; 5

  return response;
}
     c26:	80 2f       	mov	r24, r16
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	08 95       	ret

00000c34 <sd_erase>:
/**
 * @brief Erases the specified no. of blocks of SD card
 * @return unsigned char - 0 if no error and response byte if error
 */
unsigned char sd_erase (unsigned long start_block, unsigned long total_blocks)
{
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	7b 01       	movw	r14, r22
     c46:	8c 01       	movw	r16, r24
     c48:	59 01       	movw	r10, r18
     c4a:	6a 01       	movw	r12, r20
  unsigned char response;

  // Send starting block address
  response = sd_send_command(ERASE_BLOCK_START_ADDR, start_block); 
     c4c:	80 e2       	ldi	r24, 0x20	; 32
     c4e:	b8 01       	movw	r22, r16
     c50:	a7 01       	movw	r20, r14
     c52:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>

  if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     c56:	88 23       	and	r24, r24
     c58:	b9 f4       	brne	.+46     	; 0xc88 <sd_erase+0x54>
    return response;

  // Send end block address
  response = sd_send_command(ERASE_BLOCK_END_ADDR, (start_block + total_blocks - 1));
     c5a:	08 94       	sec
     c5c:	e1 08       	sbc	r14, r1
     c5e:	f1 08       	sbc	r15, r1
     c60:	01 09       	sbc	r16, r1
     c62:	11 09       	sbc	r17, r1
     c64:	ea 0c       	add	r14, r10
     c66:	fb 1c       	adc	r15, r11
     c68:	0c 1d       	adc	r16, r12
     c6a:	1d 1d       	adc	r17, r13
     c6c:	81 e2       	ldi	r24, 0x21	; 33
     c6e:	b8 01       	movw	r22, r16
     c70:	a7 01       	movw	r20, r14
     c72:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>

  if(response != 0x00)
     c76:	88 23       	and	r24, r24
     c78:	39 f4       	brne	.+14     	; 0xc88 <sd_erase+0x54>
    return response;

  // Erase all selected blocks
  response = sd_send_command(ERASE_SELECTED_BLOCKS, 0); 
     c7a:	86 e2       	ldi	r24, 0x26	; 38
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
  if(response != 0x00)
    return response;

  return 0;
}
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	08 95       	ret

00000c9a <sd_init>:
/**
 * @brief initializes the SD/SDHC card in SPI mode
 * @return unsigned char - return 0 if no error and response byte otherwise
 */
unsigned char sd_init(void)
{
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	10 e0       	ldi	r17, 0x00	; 0
  unsigned char i, response, sd_version;
  unsigned int retry = 0;

  for(i = 0; i < 10; i++)
    spi_transmit(0xff);   //80 clock pulses spent before sending the first command
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
unsigned char sd_init(void)
{
  unsigned char i, response, sd_version;
  unsigned int retry = 0;

  for(i = 0; i < 10; i++)
     ca8:	1f 5f       	subi	r17, 0xFF	; 255
     caa:	1a 30       	cpi	r17, 0x0A	; 10
     cac:	d1 f7       	brne	.-12     	; 0xca2 <sd_init+0x8>
    spi_transmit(0xff);   //80 clock pulses spent before sending the first command
  SD_CS_ASSERT;
     cae:	28 98       	cbi	0x05, 0	; 5
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
  do
  {
    response = sd_send_command(GO_IDLE_STATE, 0); //send 'reset & go idle' command
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
    retry++;
     cc2:	21 96       	adiw	r28, 0x01	; 1
    if(retry>0x20)
     cc4:	c1 32       	cpi	r28, 0x21	; 33
     cc6:	d1 05       	cpc	r29, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <sd_init+0x34>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	56 c0       	rjmp	.+172    	; 0xd7a <sd_init+0xe0>
      return 1;   //time out, card not detected
  } while(response != 0x01);
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	89 f7       	brne	.-30     	; 0xcb4 <sd_init+0x1a>

  SD_CS_DEASSERT;
     cd2:	28 9a       	sbi	0x05, 0	; 5
  spi_transmit (0xff);
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit (0xff);
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
     ce0:	c0 e0       	ldi	r28, 0x00	; 0
     ce2:	d0 e0       	ldi	r29, 0x00	; 0
  sd_version = 2; //default set to SD compliance with ver2.x; 
  //this may change after checking the next command
  do
  {
    // Check power supply status, mendatory for SDHC card
    response = sd_send_command(SEND_IF_COND, 0x000001AA); 
     ce4:	88 e0       	ldi	r24, 0x08	; 8
     ce6:	4a ea       	ldi	r20, 0xAA	; 170
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
    retry++;
     cf2:	21 96       	adiw	r28, 0x01	; 1
    if(retry > 0xfe) 
     cf4:	cf 3f       	cpi	r28, 0xFF	; 255
     cf6:	d1 05       	cpc	r29, r1
     cf8:	29 f4       	brne	.+10     	; 0xd04 <sd_init+0x6a>
    {
      sd_version = 1;
      card_type = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 8e 0d 	sts	0x0D8E, r24
     d00:	11 e0       	ldi	r17, 0x01	; 1
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <sd_init+0x70>
      break;
    }
  }
  while(response != 0x01);
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	71 f7       	brne	.-36     	; 0xce4 <sd_init+0x4a>
     d08:	12 e0       	ldi	r17, 0x02	; 2
     d0a:	c0 e0       	ldi	r28, 0x00	; 0
     d0c:	d0 e0       	ldi	r29, 0x00	; 0
  retry = 0;

  do
  {
    // CMD55, must be sent before sending any ACMD command
    response = sd_send_command(APP_CMD,0); 
     d0e:	87 e3       	ldi	r24, 0x37	; 55
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
    response = sd_send_command(SD_SEND_OP_COND,0x40000000); // ACMD41
     d1c:	89 e2       	ldi	r24, 0x29	; 41
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e4       	ldi	r23, 0x40	; 64
     d26:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>

    retry++;
     d2a:	21 96       	adiw	r28, 0x01	; 1
    if(retry > 0xfe)
     d2c:	cf 3f       	cpi	r28, 0xFF	; 255
     d2e:	d1 05       	cpc	r29, r1
     d30:	11 f4       	brne	.+4      	; 0xd36 <sd_init+0x9c>
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	22 c0       	rjmp	.+68     	; 0xd7a <sd_init+0xe0>
    {
      return 2;  //time out, card initialization failed
    }
  }
  while(response != 0x00);
     d36:	88 23       	and	r24, r24
     d38:	51 f7       	brne	.-44     	; 0xd0e <sd_init+0x74>


  retry = 0;
  sdhc_flag = 0;
     d3a:	10 92 68 0b 	sts	0x0B68, r1

  if (sd_version == 2)
     d3e:	12 30       	cpi	r17, 0x02	; 2
     d40:	e1 f4       	brne	.+56     	; 0xd7a <sd_init+0xe0>
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0
  {
    do
    {
      response = sd_send_command(READ_OCR,0);
     d46:	8a e3       	ldi	r24, 0x3A	; 58
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
      retry++;
     d54:	21 96       	adiw	r28, 0x01	; 1
      if(retry > 0xfe)
     d56:	cf 3f       	cpi	r28, 0xFF	; 255
     d58:	d1 05       	cpc	r29, r1
     d5a:	19 f4       	brne	.+6      	; 0xd62 <sd_init+0xc8>
      {
        card_type = 0;
     d5c:	10 92 8e 0d 	sts	0x0D8E, r1
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <sd_init+0xcc>
        break;
      } //time out
    }
    while(response != 0x00);
     d62:	88 23       	and	r24, r24
     d64:	81 f7       	brne	.-32     	; 0xd46 <sd_init+0xac>

    if(sdhc_flag == 1) card_type = 2;
     d66:	80 91 68 0b 	lds	r24, 0x0B68
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	11 f4       	brne	.+4      	; 0xd72 <sd_init+0xd8>
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <sd_init+0xda>
    else card_type = 3;
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	80 93 8e 0d 	sts	0x0D8E, r24
     d78:	80 e0       	ldi	r24, 0x00	; 0
  }

  return 0; //successful return
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	08 95       	ret

00000d82 <sd_write_single_block>:
 * @param start_block - unsigned long, describes which block you want to right 
 * @return unsigned char - 0 if no error
 *                         response byte will be sent if an error
 */
unsigned char sd_write_single_block(unsigned long start_block)
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ab 01       	movw	r20, r22
     d88:	bc 01       	movw	r22, r24
  unsigned char response;
  unsigned int i, retry = 0;

  response = sd_send_command(WRITE_SINGLE_BLOCK, start_block); //write a Block command
     d8a:	88 e1       	ldi	r24, 0x18	; 24
     d8c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>

  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     d90:	88 23       	and	r24, r24
     d92:	11 f0       	breq	.+4      	; 0xd98 <sd_write_single_block+0x16>
     d94:	98 2f       	mov	r25, r24
     d96:	3f c0       	rjmp	.+126    	; 0xe16 <sd_write_single_block+0x94>
  SD_CS_ASSERT;
     d98:	28 98       	cbi	0x05, 0	; 5

  spi_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     d9a:	8e ef       	ldi	r24, 0xFE	; 254
     d9c:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
     da0:	c0 e0       	ldi	r28, 0x00	; 0
     da2:	d0 e0       	ldi	r29, 0x00	; 0

  for(i = 0; i < 512; i++)    //send 512 bytes data
    spi_transmit(buffer[i]);
     da4:	fe 01       	movw	r30, r28
     da6:	e1 5b       	subi	r30, 0xB1	; 177
     da8:	f6 4f       	sbci	r31, 0xF6	; 246
     daa:	80 81       	ld	r24, Z
     dac:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
  SD_CS_ASSERT;

  spi_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

  for(i = 0; i < 512; i++)    //send 512 bytes data
     db0:	21 96       	adiw	r28, 0x01	; 1
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	c0 30       	cpi	r28, 0x00	; 0
     db6:	d8 07       	cpc	r29, r24
     db8:	a9 f7       	brne	.-22     	; 0xda4 <sd_write_single_block+0x22>
    spi_transmit(buffer[i]);

  spi_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  spi_transmit(0xff);
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>

  response = spi_receive();
     dc6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     dca:	98 2f       	mov	r25, r24

  if((response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     dcc:	8f 71       	andi	r24, 0x1F	; 31
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	41 f0       	breq	.+16     	; 0xde2 <sd_write_single_block+0x60>
  {                              //AAA='101'-data rejected due to CRC error
    SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     dd2:	28 9a       	sbi	0x05, 0	; 5
     dd4:	20 c0       	rjmp	.+64     	; 0xe16 <sd_write_single_block+0x94>
    return response;
  }

  while(!spi_receive()) //wait for SD card to complete writing and get idle
    if(retry++ > 0xfffe)
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	cf 3f       	cpi	r28, 0xFF	; 255
     dda:	d8 07       	cpc	r29, r24
     ddc:	91 f0       	breq	.+36     	; 0xe02 <sd_write_single_block+0x80>
     dde:	21 96       	adiw	r28, 0x01	; 1
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <sd_write_single_block+0x64>
    {
      SD_CS_DEASSERT; 
      return 1;
     de2:	c0 e0       	ldi	r28, 0x00	; 0
     de4:	d0 e0       	ldi	r29, 0x00	; 0
  {                              //AAA='101'-data rejected due to CRC error
    SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    return response;
  }

  while(!spi_receive()) //wait for SD card to complete writing and get idle
     de6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     dea:	88 23       	and	r24, r24
     dec:	a1 f3       	breq	.-24     	; 0xdd6 <sd_write_single_block+0x54>
    {
      SD_CS_DEASSERT; 
      return 1;
    }

  SD_CS_DEASSERT;
     dee:	28 9a       	sbi	0x05, 0	; 5
  spi_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	0e 94 a1 05 	call	0xb42	; 0xb42 <spi_transmit>
  SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     df6:	28 98       	cbi	0x05, 0	; 5
     df8:	08 c0       	rjmp	.+16     	; 0xe0a <sd_write_single_block+0x88>

  while(!spi_receive()) //wait for SD card to complete writing and get idle
    if(retry++ > 0xfffe)
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	cf 3f       	cpi	r28, 0xFF	; 255
     dfe:	d8 07       	cpc	r29, r24
     e00:	19 f4       	brne	.+6      	; 0xe08 <sd_write_single_block+0x86>
    {
      SD_CS_DEASSERT; 
     e02:	28 9a       	sbi	0x05, 0	; 5
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <sd_write_single_block+0x94>
  SD_CS_DEASSERT;
  spi_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
  SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

  while(!spi_receive()) //wait for SD card to complete writing and get idle
    if(retry++ > 0xfffe)
     e08:	21 96       	adiw	r28, 0x01	; 1

  SD_CS_DEASSERT;
  spi_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
  SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

  while(!spi_receive()) //wait for SD card to complete writing and get idle
     e0a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     e0e:	88 23       	and	r24, r24
     e10:	a1 f3       	breq	.-24     	; 0xdfa <sd_write_single_block+0x78>
    {
      SD_CS_DEASSERT; 
      return 1;
    }

  SD_CS_DEASSERT;
     e12:	28 9a       	sbi	0x05, 0	; 5
     e14:	90 e0       	ldi	r25, 0x00	; 0

  return 0;
}
     e16:	89 2f       	mov	r24, r25
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <sd_read_single_dict_block>:
 *        functions
 *        Reads 512 bytes (SPI Block) from SD Card
 * @return unsigned char - 0 if no error and response byte if error
 */
unsigned char sd_read_single_dict_block(unsigned long start_block)
{
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ab 01       	movw	r20, r22
     e26:	bc 01       	movw	r22, r24
  unsigned char response;
  unsigned int i, retry = 0;

  response = sd_send_command(READ_SINGLE_BLOCK, start_block); //read a Block command
     e28:	81 e1       	ldi	r24, 0x11	; 17
     e2a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
     e2e:	18 2f       	mov	r17, r24

  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     e30:	88 23       	and	r24, r24
     e32:	09 f5       	brne	.+66     	; 0xe76 <sd_read_single_dict_block+0x58>

  SD_CS_ASSERT;
     e34:	28 98       	cbi	0x05, 0	; 5
     e36:	c0 e0       	ldi	r28, 0x00	; 0
     e38:	d0 e0       	ldi	r29, 0x00	; 0
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <sd_read_single_dict_block+0x28>

  retry = 0;
  while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     e3c:	21 97       	sbiw	r28, 0x01	; 1
    if(retry++ > 0xfffe)
     e3e:	19 f4       	brne	.+6      	; 0xe46 <sd_read_single_dict_block+0x28>
    {
      SD_CS_DEASSERT; 
     e40:	28 9a       	sbi	0x05, 0	; 5
     e42:	11 e0       	ldi	r17, 0x01	; 1
     e44:	18 c0       	rjmp	.+48     	; 0xe76 <sd_read_single_dict_block+0x58>
  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

  SD_CS_ASSERT;

  retry = 0;
  while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     e46:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     e4a:	8e 3f       	cpi	r24, 0xFE	; 254
     e4c:	b9 f7       	brne	.-18     	; 0xe3c <sd_read_single_dict_block+0x1e>
     e4e:	c0 e0       	ldi	r28, 0x00	; 0
     e50:	d0 e0       	ldi	r29, 0x00	; 0
      SD_CS_DEASSERT; 
      return 1;
    } //return if time-out

  for(i = 0; i < 512; i++) //read 512 bytes
    dict_buffer[i] = spi_receive();
     e52:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     e56:	fe 01       	movw	r30, r28
     e58:	e5 59       	subi	r30, 0x95	; 149
     e5a:	f4 4f       	sbci	r31, 0xF4	; 244
     e5c:	80 83       	st	Z, r24
    {
      SD_CS_DEASSERT; 
      return 1;
    } //return if time-out

  for(i = 0; i < 512; i++) //read 512 bytes
     e5e:	21 96       	adiw	r28, 0x01	; 1
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	c0 30       	cpi	r28, 0x00	; 0
     e64:	d8 07       	cpc	r29, r24
     e66:	a9 f7       	brne	.-22     	; 0xe52 <sd_read_single_dict_block+0x34>
    dict_buffer[i] = spi_receive();

  spi_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     e68:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
  spi_receive();
     e6c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>

  spi_receive(); //extra 8 clock pulses
     e70:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
  SD_CS_DEASSERT;
     e74:	28 9a       	sbi	0x05, 0	; 5

  return 0;
}
     e76:	81 2f       	mov	r24, r17
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	08 95       	ret

00000e80 <sd_read_single_block>:
 * @brief Reads a single block from SD card
 *        Reads 512 bytes (SPI Block) from SD Card
 * @return unsigned char - 0 if no error and response byte if error
 */
unsigned char sd_read_single_block(unsigned long start_block)
{
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ab 01       	movw	r20, r22
     e88:	bc 01       	movw	r22, r24
  unsigned char response;
  unsigned int i, retry = 0;

  response = sd_send_command(READ_SINGLE_BLOCK, start_block); //read a Block command
     e8a:	81 e1       	ldi	r24, 0x11	; 17
     e8c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sd_send_command>
     e90:	18 2f       	mov	r17, r24

  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     e92:	88 23       	and	r24, r24
     e94:	09 f5       	brne	.+66     	; 0xed8 <sd_read_single_block+0x58>

  SD_CS_ASSERT;
     e96:	28 98       	cbi	0x05, 0	; 5
     e98:	c0 e0       	ldi	r28, 0x00	; 0
     e9a:	d0 e0       	ldi	r29, 0x00	; 0
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <sd_read_single_block+0x28>

  retry = 0;
  while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     e9e:	21 97       	sbiw	r28, 0x01	; 1
    if(retry++ > 0xfffe)
     ea0:	19 f4       	brne	.+6      	; 0xea8 <sd_read_single_block+0x28>
    {
      SD_CS_DEASSERT; 
     ea2:	28 9a       	sbi	0x05, 0	; 5
     ea4:	11 e0       	ldi	r17, 0x01	; 1
     ea6:	18 c0       	rjmp	.+48     	; 0xed8 <sd_read_single_block+0x58>
  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

  SD_CS_ASSERT;

  retry = 0;
  while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     ea8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     eac:	8e 3f       	cpi	r24, 0xFE	; 254
     eae:	b9 f7       	brne	.-18     	; 0xe9e <sd_read_single_block+0x1e>
     eb0:	c0 e0       	ldi	r28, 0x00	; 0
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
      SD_CS_DEASSERT; 
      return 1;
    } //return if time-out

  for(i = 0; i < 512; i++) //read 512 bytes
    buffer[i] = spi_receive();
     eb4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
     eb8:	fe 01       	movw	r30, r28
     eba:	e1 5b       	subi	r30, 0xB1	; 177
     ebc:	f6 4f       	sbci	r31, 0xF6	; 246
     ebe:	80 83       	st	Z, r24
    {
      SD_CS_DEASSERT; 
      return 1;
    } //return if time-out

  for(i = 0; i < 512; i++) //read 512 bytes
     ec0:	21 96       	adiw	r28, 0x01	; 1
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	c0 30       	cpi	r28, 0x00	; 0
     ec6:	d8 07       	cpc	r29, r24
     ec8:	a9 f7       	brne	.-22     	; 0xeb4 <sd_read_single_block+0x34>
    buffer[i] = spi_receive();

  spi_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     eca:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
  spi_receive();
     ece:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>

  spi_receive(); //extra 8 clock pulses
     ed2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <spi_receive>
  SD_CS_DEASSERT;
     ed6:	28 9a       	sbi	0x05, 0	; 5

  return 0;
}
     ed8:	81 2f       	mov	r24, r17
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	08 95       	ret

00000ee2 <get_first_sector>:
 * @brief calculates the first sector address of any given cluster
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
     eea:	20 91 f5 08 	lds	r18, 0x08F5
     eee:	30 91 f6 08 	lds	r19, 0x08F6
     ef2:	e0 90 70 0d 	lds	r14, 0x0D70
     ef6:	f0 90 71 0d 	lds	r15, 0x0D71
     efa:	00 91 72 0d 	lds	r16, 0x0D72
     efe:	10 91 73 0d 	lds	r17, 0x0D73
     f02:	62 50       	subi	r22, 0x02	; 2
     f04:	70 40       	sbci	r23, 0x00	; 0
     f06:	80 40       	sbci	r24, 0x00	; 0
     f08:	90 40       	sbci	r25, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	2e 0d       	add	r18, r14
     f18:	3f 1d       	adc	r19, r15
     f1a:	40 1f       	adc	r20, r16
     f1c:	51 1f       	adc	r21, r17
}
     f1e:	b9 01       	movw	r22, r18
     f20:	ca 01       	movw	r24, r20
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	08 95       	ret

00000f2c <check_first_full_word>:
 *               1 if word is less then first word in buffer
 *               2 if word is greater then first word in buffer 
 *               -1 error
 */
int check_first_full_word(unsigned char *word, char overlap)
{
     f2c:	dc 01       	movw	r26, r24
  int i;
  //PRINTF("enter!");
  //      TX_NEWLINE_PC;
  unsigned char *first_word;
  if(overlap == 1){
     f2e:	61 30       	cpi	r22, 0x01	; 1
     f30:	99 f4       	brne	.+38     	; 0xf58 <check_first_full_word+0x2c>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
    first_word = (unsigned char *)&dict_buffer[0];
    int i = 0;
    //find the start of the first word
    while(i < BUFFER_SIZE){
      if(dict_buffer[i] == '\n'){
     f36:	f9 01       	movw	r30, r18
     f38:	e5 59       	subi	r30, 0x95	; 149
     f3a:	f4 4f       	sbci	r31, 0xF4	; 244
     f3c:	80 81       	ld	r24, Z
     f3e:	f9 01       	movw	r30, r18
     f40:	31 96       	adiw	r30, 0x01	; 1
     f42:	8a 30       	cpi	r24, 0x0A	; 10
     f44:	21 f4       	brne	.+8      	; 0xf4e <check_first_full_word+0x22>
        first_word = (unsigned char *)&dict_buffer[i+1];
     f46:	af 01       	movw	r20, r30
     f48:	45 59       	subi	r20, 0x95	; 149
     f4a:	54 4f       	sbci	r21, 0xF4	; 244
     f4c:	07 c0       	rjmp	.+14     	; 0xf5c <check_first_full_word+0x30>
        break;
      }
      i ++;
     f4e:	9f 01       	movw	r18, r30
  unsigned char *first_word;
  if(overlap == 1){
    first_word = (unsigned char *)&dict_buffer[0];
    int i = 0;
    //find the start of the first word
    while(i < BUFFER_SIZE){
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	e0 30       	cpi	r30, 0x00	; 0
     f54:	f8 07       	cpc	r31, r24
     f56:	79 f7       	brne	.-34     	; 0xf36 <check_first_full_word+0xa>
     f58:	4b e6       	ldi	r20, 0x6B	; 107
     f5a:	5b e0       	ldi	r21, 0x0B	; 11
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
    first_word = (unsigned char *)&dict_buffer[0];

  i = 0;
  while(1){
    //if word is greater then first word
    if(word[i] > first_word[i])
     f60:	fd 01       	movw	r30, r26
     f62:	e2 0f       	add	r30, r18
     f64:	f3 1f       	adc	r31, r19
     f66:	80 81       	ld	r24, Z
     f68:	fa 01       	movw	r30, r20
     f6a:	e2 0f       	add	r30, r18
     f6c:	f3 1f       	adc	r31, r19
     f6e:	e0 81       	ld	r30, Z
     f70:	e8 17       	cp	r30, r24
     f72:	78 f0       	brcs	.+30     	; 0xf92 <check_first_full_word+0x66>
      return 2;
    //if word is less then first word
    else if(word[i] < first_word[i])
     f74:	8e 17       	cp	r24, r30
     f76:	18 f4       	brcc	.+6      	; 0xf7e <check_first_full_word+0x52>
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	0c c0       	rjmp	.+24     	; 0xf96 <check_first_full_word+0x6a>
      return 1;
    //if both words are terminated, null terminated by word and newline for firstword
    else if((word[i] == 0)  && (first_word[i] == '\n'))
     f7e:	88 23       	and	r24, r24
     f80:	29 f4       	brne	.+10     	; 0xf8c <check_first_full_word+0x60>
     f82:	ea 30       	cpi	r30, 0x0A	; 10
     f84:	19 f4       	brne	.+6      	; 0xf8c <check_first_full_word+0x60>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <check_first_full_word+0x6a>
      return 0;

    i++;
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	e7 cf       	rjmp	.-50     	; 0xf60 <check_first_full_word+0x34>
  }
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	30 e0       	ldi	r19, 0x00	; 0

  //if you got here, it is an error
  return -1;

}
     f96:	c9 01       	movw	r24, r18
     f98:	08 95       	ret

00000f9a <convert_dict_file_name>:
 * @TODO Currently overwrites the passed in buffer so if you pass in the same buffer twice, it 
 * will have already converted the file_name (specifically removed the '.' which is what the invalid
 * file check is done off of)
 */ 
unsigned char convert_dict_file_name (unsigned char *file_name)
{
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	2d 97       	sbiw	r28, 0x0d	; 13
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	8c 01       	movw	r16, r24
     fb4:	58 2f       	mov	r21, r24
     fb6:	a1 2f       	mov	r26, r17
     fb8:	fc 01       	movw	r30, r24
     fba:	40 e0       	ldi	r20, 0x00	; 0
  unsigned char file_name_dict_fat[FILE_NAME_LEN];
  unsigned char j, k;

  for(j = 0; j < FILE_NAME_LEN; j++) {
    if(file_name[j] == '.') 
     fbc:	80 81       	ld	r24, Z
     fbe:	8e 32       	cpi	r24, 0x2E	; 46
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <convert_dict_file_name+0x2e>
  if (j >= FILE_NAME_LEN)
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
     fc2:	49 30       	cpi	r20, 0x09	; 9
     fc4:	30 f0       	brcs	.+12     	; 0xfd2 <convert_dict_file_name+0x38>
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <convert_dict_file_name+0x4a>
unsigned char convert_dict_file_name (unsigned char *file_name)
{
  unsigned char file_name_dict_fat[FILE_NAME_LEN];
  unsigned char j, k;

  for(j = 0; j < FILE_NAME_LEN; j++) {
     fc8:	4f 5f       	subi	r20, 0xFF	; 255
     fca:	31 96       	adiw	r30, 0x01	; 1
     fcc:	4d 30       	cpi	r20, 0x0D	; 13
     fce:	b1 f7       	brne	.-20     	; 0xfbc <convert_dict_file_name+0x22>
     fd0:	58 c0       	rjmp	.+176    	; 0x1082 <convert_dict_file_name+0xe8>
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	85 2f       	mov	r24, r21
     fda:	9a 2f       	mov	r25, r26
     fdc:	9c 01       	movw	r18, r24
     fde:	f9 01       	movw	r30, r18
     fe0:	db 01       	movw	r26, r22
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <convert_dict_file_name+0x5a>
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    usart_transmit_string_to_pc_from_flash(PSTR("Invalid file_name.")); 
     fe4:	86 ef       	ldi	r24, 0xF6	; 246
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	4a c0       	rjmp	.+148    	; 0x1084 <convert_dict_file_name+0xea>
    return 1;
  }

  for(k = 0; k < j; k++) //setting file name
    file_name_dict_fat[k] = file_name[k];
     ff0:	81 91       	ld	r24, Z+
     ff2:	8d 93       	st	X+, r24
  if(j>8) {
    usart_transmit_string_to_pc_from_flash(PSTR("Invalid file_name.")); 
    return 1;
  }

  for(k = 0; k < j; k++) //setting file name
     ff4:	8e 2f       	mov	r24, r30
     ff6:	85 1b       	sub	r24, r21
     ff8:	84 17       	cp	r24, r20
     ffa:	d0 f3       	brcs	.-12     	; 0xff0 <convert_dict_file_name+0x56>
     ffc:	84 2f       	mov	r24, r20
    file_name_dict_fat[k] = file_name[k];

  for(k = j; k <= 7; k++) //filling file name trail with blanks
    file_name_dict_fat[k] = ' ';
     ffe:	9e 01       	movw	r18, r28
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	90 e2       	ldi	r25, 0x20	; 32
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <convert_dict_file_name+0x78>
    1008:	f9 01       	movw	r30, r18
    100a:	e8 0f       	add	r30, r24
    100c:	f1 1d       	adc	r31, r1
    100e:	90 83       	st	Z, r25
  }

  for(k = 0; k < j; k++) //setting file name
    file_name_dict_fat[k] = file_name[k];

  for(k = j; k <= 7; k++) //filling file name trail with blanks
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	88 30       	cpi	r24, 0x08	; 8
    1014:	c9 f7       	brne	.-14     	; 0x1008 <convert_dict_file_name+0x6e>
    file_name_dict_fat[k] = ' ';

  j++;
    1016:	94 2f       	mov	r25, r20
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	de 01       	movw	r26, r28
    101c:	19 96       	adiw	r26, 0x09	; 9

  for(k = 8; k < FILE_NAME_LEN; k++) //setting file extention
  {
    if(file_name[j] != 0)
    101e:	f8 01       	movw	r30, r16
    1020:	e9 0f       	add	r30, r25
    1022:	f1 1d       	adc	r31, r1
    1024:	e0 81       	ld	r30, Z
    1026:	ee 23       	and	r30, r30
    1028:	31 f0       	breq	.+12     	; 0x1036 <convert_dict_file_name+0x9c>
    {
      file_name_dict_fat[k] = file_name[j++];
    102a:	ed 93       	st	X+, r30
  for(k = j; k <= 7; k++) //filling file name trail with blanks
    file_name_dict_fat[k] = ' ';

  j++;

  for(k = 8; k < FILE_NAME_LEN; k++) //setting file extention
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	8d 30       	cpi	r24, 0x0D	; 13
    1030:	31 f0       	breq	.+12     	; 0x103e <convert_dict_file_name+0xa4>
  {
    if(file_name[j] != 0)
    {
      file_name_dict_fat[k] = file_name[j++];
    1032:	9f 5f       	subi	r25, 0xFF	; 255
    1034:	f4 cf       	rjmp	.-24     	; 0x101e <convert_dict_file_name+0x84>
    }
    else //filling extension trail with blanks
    {
      file_name_dict_fat[k] = file_name[j];
    1036:	fe 01       	movw	r30, r28
    1038:	e8 0f       	add	r30, r24
    103a:	f1 1d       	adc	r31, r1
    103c:	11 82       	std	Z+1, r1	; 0x01
      break;
    }
  }

  for(j = 0; j < FILE_NAME_LEN; j++) //converting small letters to caps
    103e:	9e 01       	movw	r18, r28
    1040:	22 5f       	subi	r18, 0xF2	; 242
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
  {
    if((file_name_dict_fat[j] >= 0x61) && (file_name_dict_fat[j] <= 0x7a))
    1044:	fb 01       	movw	r30, r22
    1046:	90 81       	ld	r25, Z
    1048:	89 2f       	mov	r24, r25
    104a:	81 56       	subi	r24, 0x61	; 97
    104c:	8a 31       	cpi	r24, 0x1A	; 26
    104e:	10 f4       	brcc	.+4      	; 0x1054 <convert_dict_file_name+0xba>
    {
      file_name_dict_fat[j] -= 0x20;
    1050:	90 52       	subi	r25, 0x20	; 32
    1052:	90 83       	st	Z, r25
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
      file_name_dict_fat[k] = file_name[j];
      break;
    }
  }

  for(j = 0; j < FILE_NAME_LEN; j++) //converting small letters to caps
    1058:	62 17       	cp	r22, r18
    105a:	73 07       	cpc	r23, r19
    105c:	99 f7       	brne	.-26     	; 0x1044 <convert_dict_file_name+0xaa>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    }
  }


  for(j = 0; j < FILE_NAME_LEN; j++)
    dict_file_name[j] = file_name_dict_fat[j];
    1062:	ae 01       	movw	r20, r28
    1064:	4f 5f       	subi	r20, 0xFF	; 255
    1066:	5f 4f       	sbci	r21, 0xFF	; 255
    1068:	f9 01       	movw	r30, r18
    106a:	e6 5f       	subi	r30, 0xF6	; 246
    106c:	f6 4f       	sbci	r31, 0xF6	; 246
    106e:	da 01       	movw	r26, r20
    1070:	a2 0f       	add	r26, r18
    1072:	b3 1f       	adc	r27, r19
    1074:	8c 91       	ld	r24, X
    1076:	80 83       	st	Z, r24
    1078:	2f 5f       	subi	r18, 0xFF	; 255
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
      file_name_dict_fat[j] -= 0x20;
    }
  }


  for(j = 0; j < FILE_NAME_LEN; j++)
    107c:	2d 30       	cpi	r18, 0x0D	; 13
    107e:	31 05       	cpc	r19, r1
    1080:	99 f7       	brne	.-26     	; 0x1068 <convert_dict_file_name+0xce>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    dict_file_name[j] = file_name_dict_fat[j];

  return 0;
}
    1084:	2d 96       	adiw	r28, 0x0d	; 13
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <convert_file_name>:
 * @TODO Currently overwrites the passed in buffer so if you pass in the same buffer twice, it 
 * will have already converted the file_name (specifically removed the '.' which is what the invalid
 * file check is done off of)
 */ 
unsigned char convert_file_name (unsigned char *file_name)
{
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2d 97       	sbiw	r28, 0x0d	; 13
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	8c 01       	movw	r16, r24
    10b4:	58 2f       	mov	r21, r24
    10b6:	a1 2f       	mov	r26, r17
    10b8:	fc 01       	movw	r30, r24
    10ba:	40 e0       	ldi	r20, 0x00	; 0
  unsigned char file_name_fat[FILE_NAME_LEN];
  unsigned char j, k;

  for(j = 0; j < FILE_NAME_LEN; j++) {
    if(file_name[j] == '.') 
    10bc:	80 81       	ld	r24, Z
    10be:	8e 32       	cpi	r24, 0x2E	; 46
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <convert_file_name+0x2e>
  if (j >= FILE_NAME_LEN)
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    10c2:	49 30       	cpi	r20, 0x09	; 9
    10c4:	30 f0       	brcs	.+12     	; 0x10d2 <convert_file_name+0x38>
    10c6:	0e c0       	rjmp	.+28     	; 0x10e4 <convert_file_name+0x4a>
unsigned char convert_file_name (unsigned char *file_name)
{
  unsigned char file_name_fat[FILE_NAME_LEN];
  unsigned char j, k;

  for(j = 0; j < FILE_NAME_LEN; j++) {
    10c8:	4f 5f       	subi	r20, 0xFF	; 255
    10ca:	31 96       	adiw	r30, 0x01	; 1
    10cc:	4d 30       	cpi	r20, 0x0D	; 13
    10ce:	b1 f7       	brne	.-20     	; 0x10bc <convert_file_name+0x22>
    10d0:	58 c0       	rjmp	.+176    	; 0x1182 <convert_file_name+0xe8>
    10d2:	be 01       	movw	r22, r28
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	85 2f       	mov	r24, r21
    10da:	9a 2f       	mov	r25, r26
    10dc:	9c 01       	movw	r18, r24
    10de:	f9 01       	movw	r30, r18
    10e0:	db 01       	movw	r26, r22
    10e2:	08 c0       	rjmp	.+16     	; 0x10f4 <convert_file_name+0x5a>
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    usart_transmit_string_to_pc_from_flash(PSTR("Invalid file_name.")); 
    10e4:	89 e0       	ldi	r24, 0x09	; 9
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	4a c0       	rjmp	.+148    	; 0x1184 <convert_file_name+0xea>
    return 1;
  }

  for(k = 0; k < j; k++) //setting file name
    file_name_fat[k] = file_name[k];
    10f0:	81 91       	ld	r24, Z+
    10f2:	8d 93       	st	X+, r24
  if(j>8) {
    usart_transmit_string_to_pc_from_flash(PSTR("Invalid file_name.")); 
    return 1;
  }

  for(k = 0; k < j; k++) //setting file name
    10f4:	8e 2f       	mov	r24, r30
    10f6:	85 1b       	sub	r24, r21
    10f8:	84 17       	cp	r24, r20
    10fa:	d0 f3       	brcs	.-12     	; 0x10f0 <convert_file_name+0x56>
    10fc:	84 2f       	mov	r24, r20
    file_name_fat[k] = file_name[k];

  for(k = j; k <= 7; k++) //filling file name trail with blanks
    file_name_fat[k] = ' ';
    10fe:	9e 01       	movw	r18, r28
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	90 e2       	ldi	r25, 0x20	; 32
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <convert_file_name+0x78>
    1108:	f9 01       	movw	r30, r18
    110a:	e8 0f       	add	r30, r24
    110c:	f1 1d       	adc	r31, r1
    110e:	90 83       	st	Z, r25
  }

  for(k = 0; k < j; k++) //setting file name
    file_name_fat[k] = file_name[k];

  for(k = j; k <= 7; k++) //filling file name trail with blanks
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	88 30       	cpi	r24, 0x08	; 8
    1114:	c9 f7       	brne	.-14     	; 0x1108 <convert_file_name+0x6e>
    file_name_fat[k] = ' ';

  j++;
    1116:	94 2f       	mov	r25, r20
    1118:	9f 5f       	subi	r25, 0xFF	; 255
    111a:	de 01       	movw	r26, r28
    111c:	19 96       	adiw	r26, 0x09	; 9

  for(k = 8; k < FILE_NAME_LEN; k++) //setting file extention
  {
    if(file_name[j] != 0)
    111e:	f8 01       	movw	r30, r16
    1120:	e9 0f       	add	r30, r25
    1122:	f1 1d       	adc	r31, r1
    1124:	e0 81       	ld	r30, Z
    1126:	ee 23       	and	r30, r30
    1128:	31 f0       	breq	.+12     	; 0x1136 <convert_file_name+0x9c>
    {
      file_name_fat[k] = file_name[j++];
    112a:	ed 93       	st	X+, r30
  for(k = j; k <= 7; k++) //filling file name trail with blanks
    file_name_fat[k] = ' ';

  j++;

  for(k = 8; k < FILE_NAME_LEN; k++) //setting file extention
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	8d 30       	cpi	r24, 0x0D	; 13
    1130:	31 f0       	breq	.+12     	; 0x113e <convert_file_name+0xa4>
  {
    if(file_name[j] != 0)
    {
      file_name_fat[k] = file_name[j++];
    1132:	9f 5f       	subi	r25, 0xFF	; 255
    1134:	f4 cf       	rjmp	.-24     	; 0x111e <convert_file_name+0x84>
    }
    else //filling extension trail with blanks
    {
      file_name_fat[k] = file_name[j];
    1136:	fe 01       	movw	r30, r28
    1138:	e8 0f       	add	r30, r24
    113a:	f1 1d       	adc	r31, r1
    113c:	11 82       	std	Z+1, r1	; 0x01
      break;
    }
  }

  for(j = 0; j < FILE_NAME_LEN; j++) //converting small letters to caps
    113e:	9e 01       	movw	r18, r28
    1140:	22 5f       	subi	r18, 0xF2	; 242
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
  {
    if((file_name_fat[j] >= 0x61) && (file_name_fat[j] <= 0x7a))
    1144:	fb 01       	movw	r30, r22
    1146:	90 81       	ld	r25, Z
    1148:	89 2f       	mov	r24, r25
    114a:	81 56       	subi	r24, 0x61	; 97
    114c:	8a 31       	cpi	r24, 0x1A	; 26
    114e:	10 f4       	brcc	.+4      	; 0x1154 <convert_file_name+0xba>
    {
      file_name_fat[j] -= 0x20;
    1150:	90 52       	subi	r25, 0x20	; 32
    1152:	90 83       	st	Z, r25
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
      file_name_fat[k] = file_name[j];
      break;
    }
  }

  for(j = 0; j < FILE_NAME_LEN; j++) //converting small letters to caps
    1158:	62 17       	cp	r22, r18
    115a:	73 07       	cpc	r23, r19
    115c:	99 f7       	brne	.-26     	; 0x1144 <convert_file_name+0xaa>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    }
  }


  for(j = 0; j < FILE_NAME_LEN; j++)
    file_name[j] = file_name_fat[j];
    1162:	ae 01       	movw	r20, r28
    1164:	4f 5f       	subi	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	f8 01       	movw	r30, r16
    116a:	e2 0f       	add	r30, r18
    116c:	f3 1f       	adc	r31, r19
    116e:	da 01       	movw	r26, r20
    1170:	a2 0f       	add	r26, r18
    1172:	b3 1f       	adc	r27, r19
    1174:	8c 91       	ld	r24, X
    1176:	80 83       	st	Z, r24
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
      file_name_fat[j] -= 0x20;
    }
  }


  for(j = 0; j < FILE_NAME_LEN; j++)
    117c:	2d 30       	cpi	r18, 0x0D	; 13
    117e:	31 05       	cpc	r19, r1
    1180:	99 f7       	brne	.-26     	; 0x1168 <convert_file_name+0xce>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    file_name[j] = file_name_fat[j];


  return 0;
}
    1184:	2d 96       	adiw	r28, 0x0d	; 13
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <display_memory>:
 *               else in Bytes
 * @param memory - unsigned long, memory value 
 * @return Void
 */
void display_memory (unsigned char flag, unsigned long memory)
{
    119a:	8f 92       	push	r8
    119c:	9f 92       	push	r9
    119e:	af 92       	push	r10
    11a0:	bf 92       	push	r11
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	64 97       	sbiw	r28, 0x14	; 20
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	98 2e       	mov	r9, r24
    11c2:	6a 01       	movw	r12, r20
    11c4:	7b 01       	movw	r14, r22
  // 19 character long string for memory display
  unsigned char memory_string[] = "              Bytes"; 
    11c6:	de 01       	movw	r26, r28
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	ed e4       	ldi	r30, 0x4D	; 77
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	84 e1       	ldi	r24, 0x14	; 20
    11d0:	01 90       	ld	r0, Z+
    11d2:	0d 92       	st	X+, r0
    11d4:	81 50       	subi	r24, 0x01	; 1
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <display_memory+0x36>
    11d8:	0c e0       	ldi	r16, 0x0C	; 12

  for(i = 12; i > 0; i--) //converting free_memory into ASCII string
  {
    if(i == 5 || i == 9) 
    {
      memory_string[i - 1] = ',';  
    11da:	8c e2       	ldi	r24, 0x2C	; 44
    11dc:	88 2e       	mov	r8, r24
  unsigned char memory_string[] = "              Bytes"; 
  unsigned char i;

  for(i = 12; i > 0; i--) //converting free_memory into ASCII string
  {
    if(i == 5 || i == 9) 
    11de:	05 30       	cpi	r16, 0x05	; 5
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <display_memory+0x4c>
    11e2:	09 30       	cpi	r16, 0x09	; 9
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <display_memory+0x56>
    {
      memory_string[i - 1] = ',';  
    11e6:	fe 01       	movw	r30, r28
    11e8:	e0 0f       	add	r30, r16
    11ea:	f1 1d       	adc	r31, r1
    11ec:	80 82       	st	Z, r8
      i--;
    11ee:	01 50       	subi	r16, 0x01	; 1
    }
    memory_string[i-1] = (memory % 10) | 0x30;
    11f0:	5e 01       	movw	r10, r28
    11f2:	a0 0e       	add	r10, r16
    11f4:	b1 1c       	adc	r11, r1
    11f6:	c7 01       	movw	r24, r14
    11f8:	b6 01       	movw	r22, r12
    11fa:	2a e0       	ldi	r18, 0x0A	; 10
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    1206:	60 63       	ori	r22, 0x30	; 48
    1208:	f5 01       	movw	r30, r10
    120a:	60 83       	st	Z, r22
    memory /= 10;
    120c:	c7 01       	movw	r24, r14
    120e:	b6 01       	movw	r22, r12
    1210:	2a e0       	ldi	r18, 0x0A	; 10
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    121c:	c9 01       	movw	r24, r18
    121e:	da 01       	movw	r26, r20
    1220:	6c 01       	movw	r12, r24
    1222:	7d 01       	movw	r14, r26

    if(memory == 0) break;
    1224:	c1 14       	cp	r12, r1
    1226:	d1 04       	cpc	r13, r1
    1228:	e1 04       	cpc	r14, r1
    122a:	f1 04       	cpc	r15, r1
    122c:	11 f0       	breq	.+4      	; 0x1232 <display_memory+0x98>
{
  // 19 character long string for memory display
  unsigned char memory_string[] = "              Bytes"; 
  unsigned char i;

  for(i = 12; i > 0; i--) //converting free_memory into ASCII string
    122e:	01 50       	subi	r16, 0x01	; 1
    1230:	b1 f6       	brne	.-84     	; 0x11de <display_memory+0x44>
    memory /= 10;

    if(memory == 0) break;
  }

  if(flag == HIGH) memory_string[13] = 'K';
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	9f 16       	cp	r9, r31
    1236:	11 f4       	brne	.+4      	; 0x123c <display_memory+0xa2>
    1238:	8b e4       	ldi	r24, 0x4B	; 75
    123a:	8e 87       	std	Y+14, r24	; 0x0e
  usart_transmit_string_to_pc(memory_string);
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
}
    1244:	64 96       	adiw	r28, 0x14	; 20
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	08 95       	ret

00001268 <search_next_free_cluster>:
 *        at specified cluster
 * @param start_cluster - unsinged long, starting cluster
 * @return usigned long, the number of the next free cluster
 */
unsigned long search_next_free_cluster (unsigned long start_cluster)
{
    1268:	6f 92       	push	r6
    126a:	7f 92       	push	r7
    126c:	8f 92       	push	r8
    126e:	9f 92       	push	r9
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;

  start_cluster -=  (start_cluster % 128);   //to start with the first file in a FAT sector
    1280:	60 78       	andi	r22, 0x80	; 128
    1282:	3b 01       	movw	r6, r22
    1284:	4c 01       	movw	r8, r24
    1286:	22 e0       	ldi	r18, 0x02	; 2
    1288:	66 0c       	add	r6, r6
    128a:	77 1c       	adc	r7, r7
    128c:	88 1c       	adc	r8, r8
    128e:	99 1c       	adc	r9, r9
    1290:	2a 95       	dec	r18
    1292:	d1 f7       	brne	.-12     	; 0x1288 <search_next_free_cluster+0x20>
    1294:	5b 01       	movw	r10, r22
    1296:	6c 01       	movw	r12, r24
    1298:	50 c0       	rjmp	.+160    	; 0x133a <search_next_free_cluster+0xd2>
  for(cluster =start_cluster; cluster < total_clusters; cluster += 128) 
  {
    sector = unused_sectors + reserved_sector_count + ((cluster * 4)
    129a:	e0 90 03 09 	lds	r14, 0x0903
    129e:	f0 90 04 09 	lds	r15, 0x0904
    12a2:	20 91 f7 08 	lds	r18, 0x08F7
    12a6:	30 91 f8 08 	lds	r19, 0x08F8
        / bytes_per_sector);
    sd_read_single_block(sector);
    12aa:	00 e0       	ldi	r16, 0x00	; 0
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	80 91 21 09 	lds	r24, 0x0921
    12b2:	90 91 22 09 	lds	r25, 0x0922
    12b6:	a0 91 23 09 	lds	r26, 0x0923
    12ba:	b0 91 24 09 	lds	r27, 0x0924
    12be:	e8 0e       	add	r14, r24
    12c0:	f9 1e       	adc	r15, r25
    12c2:	0a 1f       	adc	r16, r26
    12c4:	1b 1f       	adc	r17, r27
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	c4 01       	movw	r24, r8
    12cc:	b3 01       	movw	r22, r6
    12ce:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    12d2:	e2 0e       	add	r14, r18
    12d4:	f3 1e       	adc	r15, r19
    12d6:	04 1f       	adc	r16, r20
    12d8:	15 1f       	adc	r17, r21
    12da:	c8 01       	movw	r24, r16
    12dc:	b7 01       	movw	r22, r14
    12de:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    for(i = 0; i < 128; i++)
    {
      value = (unsigned long *) &buffer[i * 4];
      if(((*value) & 0x0fffffff) == 0)
    12e4:	e6 2f       	mov	r30, r22
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	e1 5b       	subi	r30, 0xB1	; 177
    12f2:	f6 4f       	sbci	r31, 0xF6	; 246
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	a2 81       	ldd	r26, Z+2	; 0x02
    12fa:	b3 81       	ldd	r27, Z+3	; 0x03
    12fc:	bf 70       	andi	r27, 0x0F	; 15
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	a1 05       	cpc	r26, r1
    1302:	b1 05       	cpc	r27, r1
    1304:	39 f4       	brne	.+14     	; 0x1314 <search_next_free_cluster+0xac>
        return(cluster + i);
    1306:	a6 01       	movw	r20, r12
    1308:	95 01       	movw	r18, r10
    130a:	26 0f       	add	r18, r22
    130c:	31 1d       	adc	r19, r1
    130e:	41 1d       	adc	r20, r1
    1310:	51 1d       	adc	r21, r1
    1312:	25 c0       	rjmp	.+74     	; 0x135e <search_next_free_cluster+0xf6>
  for(cluster =start_cluster; cluster < total_clusters; cluster += 128) 
  {
    sector = unused_sectors + reserved_sector_count + ((cluster * 4)
        / bytes_per_sector);
    sd_read_single_block(sector);
    for(i = 0; i < 128; i++)
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	60 38       	cpi	r22, 0x80	; 128
    1318:	29 f7       	brne	.-54     	; 0x12e4 <search_next_free_cluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;

  start_cluster -=  (start_cluster % 128);   //to start with the first file in a FAT sector
  for(cluster =start_cluster; cluster < total_clusters; cluster += 128) 
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	a8 0e       	add	r10, r24
    1324:	b9 1e       	adc	r11, r25
    1326:	ca 1e       	adc	r12, r26
    1328:	db 1e       	adc	r13, r27
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	68 0e       	add	r6, r24
    1334:	79 1e       	adc	r7, r25
    1336:	8a 1e       	adc	r8, r26
    1338:	9b 1e       	adc	r9, r27
    133a:	80 91 4b 09 	lds	r24, 0x094B
    133e:	90 91 4c 09 	lds	r25, 0x094C
    1342:	a0 91 4d 09 	lds	r26, 0x094D
    1346:	b0 91 4e 09 	lds	r27, 0x094E
    134a:	a8 16       	cp	r10, r24
    134c:	b9 06       	cpc	r11, r25
    134e:	ca 06       	cpc	r12, r26
    1350:	db 06       	cpc	r13, r27
    1352:	08 f4       	brcc	.+2      	; 0x1356 <search_next_free_cluster+0xee>
    1354:	a2 cf       	rjmp	.-188    	; 0x129a <search_next_free_cluster+0x32>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
        return(cluster + i);
    }
  } 

  return 0;
}
    135e:	b9 01       	movw	r22, r18
    1360:	ca 01       	movw	r24, r20
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	9f 90       	pop	r9
    1374:	8f 90       	pop	r8
    1376:	7f 90       	pop	r7
    1378:	6f 90       	pop	r6
    137a:	08 95       	ret

0000137c <get_set_free_cluster>:
 *                       GET.  0xffffffff if any error or arg2 is Set
 */
unsigned long get_set_free_cluster(unsigned char tot_or_next, 
    unsigned char get_set, 
    unsigned long fs_entry)
{
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	d8 2e       	mov	r13, r24
    138a:	c6 2e       	mov	r12, r22
    138c:	79 01       	movw	r14, r18
    138e:	8a 01       	movw	r16, r20
  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
  unsigned char error;

  sd_read_single_block(unused_sectors + 1);
    1390:	60 91 21 09 	lds	r22, 0x0921
    1394:	70 91 22 09 	lds	r23, 0x0922
    1398:	80 91 23 09 	lds	r24, 0x0923
    139c:	90 91 24 09 	lds	r25, 0x0924
    13a0:	6f 5f       	subi	r22, 0xFF	; 255
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	8f 4f       	sbci	r24, 0xFF	; 255
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>

  if((FS->lead_signature != 0x41615252) || (FS->structure_signature != 0x61417272) 
    13ac:	80 91 4f 09 	lds	r24, 0x094F
    13b0:	90 91 50 09 	lds	r25, 0x0950
    13b4:	a0 91 51 09 	lds	r26, 0x0951
    13b8:	b0 91 52 09 	lds	r27, 0x0952
    13bc:	82 55       	subi	r24, 0x52	; 82
    13be:	92 45       	sbci	r25, 0x52	; 82
    13c0:	a1 46       	sbci	r26, 0x61	; 97
    13c2:	b1 44       	sbci	r27, 0x41	; 65
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <get_set_free_cluster+0x4c>
    13c6:	54 c0       	rjmp	.+168    	; 0x1470 <get_set_free_cluster+0xf4>
    13c8:	80 91 33 0b 	lds	r24, 0x0B33
    13cc:	90 91 34 0b 	lds	r25, 0x0B34
    13d0:	a0 91 35 0b 	lds	r26, 0x0B35
    13d4:	b0 91 36 0b 	lds	r27, 0x0B36
    13d8:	82 57       	subi	r24, 0x72	; 114
    13da:	92 47       	sbci	r25, 0x72	; 114
    13dc:	a1 44       	sbci	r26, 0x41	; 65
    13de:	b1 46       	sbci	r27, 0x61	; 97
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <get_set_free_cluster+0x68>
    13e2:	46 c0       	rjmp	.+140    	; 0x1470 <get_set_free_cluster+0xf4>
    13e4:	80 91 4b 0b 	lds	r24, 0x0B4B
    13e8:	90 91 4c 0b 	lds	r25, 0x0B4C
    13ec:	a0 91 4d 0b 	lds	r26, 0x0B4D
    13f0:	b0 91 4e 0b 	lds	r27, 0x0B4E
    13f4:	80 50       	subi	r24, 0x00	; 0
    13f6:	90 40       	sbci	r25, 0x00	; 0
    13f8:	a5 45       	sbci	r26, 0x55	; 85
    13fa:	ba 4a       	sbci	r27, 0xAA	; 170
    13fc:	c9 f5       	brne	.+114    	; 0x1470 <get_set_free_cluster+0xf4>
      || (FS->trail_signature !=0xaa550000))
    return 0xffffffff;

  if(get_set == GET)
    13fe:	cc 20       	and	r12, r12
    1400:	a9 f4       	brne	.+42     	; 0x142c <get_set_free_cluster+0xb0>
  {
    if(tot_or_next == TOTAL_FREE) return(FS->free_cluster_count);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	d8 16       	cp	r13, r24
    1406:	49 f4       	brne	.+18     	; 0x141a <get_set_free_cluster+0x9e>
    1408:	20 91 37 0b 	lds	r18, 0x0B37
    140c:	30 91 38 0b 	lds	r19, 0x0B38
    1410:	40 91 39 0b 	lds	r20, 0x0B39
    1414:	50 91 3a 0b 	lds	r21, 0x0B3A
    1418:	2f c0       	rjmp	.+94     	; 0x1478 <get_set_free_cluster+0xfc>
    else return(FS->next_free_cluster);
    141a:	20 91 3b 0b 	lds	r18, 0x0B3B
    141e:	30 91 3c 0b 	lds	r19, 0x0B3C
    1422:	40 91 3d 0b 	lds	r20, 0x0B3D
    1426:	50 91 3e 0b 	lds	r21, 0x0B3E
    142a:	26 c0       	rjmp	.+76     	; 0x1478 <get_set_free_cluster+0xfc>
  }
  else
  {
    if(tot_or_next == TOTAL_FREE)
    142c:	21 e0       	ldi	r18, 0x01	; 1
    142e:	d2 16       	cp	r13, r18
    1430:	49 f4       	brne	.+18     	; 0x1444 <get_set_free_cluster+0xc8>
      FS->free_cluster_count = fs_entry;
    1432:	e0 92 37 0b 	sts	0x0B37, r14
    1436:	f0 92 38 0b 	sts	0x0B38, r15
    143a:	00 93 39 0b 	sts	0x0B39, r16
    143e:	10 93 3a 0b 	sts	0x0B3A, r17
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <get_set_free_cluster+0xd8>
    else // when tot_or_next = NEXT_FREE
      FS->next_free_cluster = fs_entry;
    1444:	e0 92 3b 0b 	sts	0x0B3B, r14
    1448:	f0 92 3c 0b 	sts	0x0B3C, r15
    144c:	00 93 3d 0b 	sts	0x0B3D, r16
    1450:	10 93 3e 0b 	sts	0x0B3E, r17
    error = sd_write_single_block(unused_sectors + 1);  //update FSinfo
    1454:	60 91 21 09 	lds	r22, 0x0921
    1458:	70 91 22 09 	lds	r23, 0x0922
    145c:	80 91 23 09 	lds	r24, 0x0923
    1460:	90 91 24 09 	lds	r25, 0x0924
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>
  }
  return 0xffffffff;
    1470:	2f ef       	ldi	r18, 0xFF	; 255
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f ef       	ldi	r20, 0xFF	; 255
    1476:	5f ef       	ldi	r21, 0xFF	; 255
}
    1478:	b9 01       	movw	r22, r18
    147a:	ca 01       	movw	r24, r20
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <free_memory_update>:
 * @param flag - unsigned char, can be ADD or REMOVE
 * @param size - unsigned long, file size in Bytes
 * @return Void
 */
void free_memory_update (unsigned char flag, unsigned long size)
{
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	d8 2e       	mov	r13, r24
    1496:	db 01       	movw	r26, r22
    1498:	ca 01       	movw	r24, r20
    149a:	e9 e0       	ldi	r30, 0x09	; 9
    149c:	b6 95       	lsr	r27
    149e:	a7 95       	ror	r26
    14a0:	97 95       	ror	r25
    14a2:	87 95       	ror	r24
    14a4:	ea 95       	dec	r30
    14a6:	d1 f7       	brne	.-12     	; 0x149c <free_memory_update+0x12>
  unsigned long free_clusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    14a8:	51 70       	andi	r21, 0x01	; 1
    14aa:	60 70       	andi	r22, 0x00	; 0
    14ac:	70 70       	andi	r23, 0x00	; 0
    14ae:	41 15       	cp	r20, r1
    14b0:	51 05       	cpc	r21, r1
    14b2:	61 05       	cpc	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	19 f4       	brne	.+6      	; 0x14be <free_memory_update+0x34>
    14b8:	ac 01       	movw	r20, r24
    14ba:	bd 01       	movw	r22, r26
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <free_memory_update+0x40>
  else size = (size / 512) +1;
    14be:	ac 01       	movw	r20, r24
    14c0:	bd 01       	movw	r22, r26
    14c2:	4f 5f       	subi	r20, 0xFF	; 255
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	6f 4f       	sbci	r22, 0xFF	; 255
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	db 01       	movw	r26, r22
    14cc:	ca 01       	movw	r24, r20
    14ce:	33 e0       	ldi	r19, 0x03	; 3
    14d0:	b6 95       	lsr	r27
    14d2:	a7 95       	ror	r26
    14d4:	97 95       	ror	r25
    14d6:	87 95       	ror	r24
    14d8:	3a 95       	dec	r19
    14da:	d1 f7       	brne	.-12     	; 0x14d0 <free_memory_update+0x46>
  if((size % 8) == 0) size = size / 8;
    14dc:	47 70       	andi	r20, 0x07	; 7
    14de:	50 70       	andi	r21, 0x00	; 0
    14e0:	60 70       	andi	r22, 0x00	; 0
    14e2:	70 70       	andi	r23, 0x00	; 0
    14e4:	41 15       	cp	r20, r1
    14e6:	51 05       	cpc	r21, r1
    14e8:	61 05       	cpc	r22, r1
    14ea:	71 05       	cpc	r23, r1
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <free_memory_update+0x6a>
    14ee:	7c 01       	movw	r14, r24
    14f0:	8d 01       	movw	r16, r26
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <free_memory_update+0x78>
  else size = (size / 8) +1;
    14f4:	7c 01       	movw	r14, r24
    14f6:	8d 01       	movw	r16, r26
    14f8:	08 94       	sec
    14fa:	e1 1c       	adc	r14, r1
    14fc:	f1 1c       	adc	r15, r1
    14fe:	01 1d       	adc	r16, r1
    1500:	11 1d       	adc	r17, r1

  if(free_cluster_count_updated)
    1502:	80 91 6b 0d 	lds	r24, 0x0D6B
    1506:	88 23       	and	r24, r24
    1508:	d9 f0       	breq	.+54     	; 0x1540 <free_memory_update+0xb6>
  {
    free_clusters = get_set_free_cluster (TOTAL_FREE, GET, 0);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
    if(flag == ADD)
    151a:	dd 20       	and	r13, r13
    151c:	39 f4       	brne	.+14     	; 0x152c <free_memory_update+0xa2>
      free_clusters = free_clusters + size;
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	2e 0d       	add	r18, r14
    1524:	3f 1d       	adc	r19, r15
    1526:	40 1f       	adc	r20, r16
    1528:	51 1f       	adc	r21, r17
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <free_memory_update+0xae>
    else  //when flag = REMOVE
      free_clusters = free_clusters - size;
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	2e 19       	sub	r18, r14
    1532:	3f 09       	sbc	r19, r15
    1534:	40 0b       	sbc	r20, r16
    1536:	51 0b       	sbc	r21, r17
    get_set_free_cluster (TOTAL_FREE, SET, free_clusters);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
  }
}
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	08 95       	ret

0000154c <memory_statistics>:
 *        stored then it will return immediately. Otherwise it will count the total 
 *        number of free clusters, which takes time
 * @return Void
 */
void memory_statistics (void)
{
    154c:	2f 92       	push	r2
    154e:	3f 92       	push	r3
    1550:	4f 92       	push	r4
    1552:	5f 92       	push	r5
    1554:	6f 92       	push	r6
    1556:	7f 92       	push	r7
    1558:	8f 92       	push	r8
    155a:	9f 92       	push	r9
    155c:	af 92       	push	r10
    155e:	bf 92       	push	r11
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
  unsigned long free_clusters, total_cluster_count, cluster;
  unsigned long total_memory, free_memory, sector, *value;
  unsigned int i;


  total_memory = total_clusters * sector_per_cluster / 1024;
    156c:	20 91 4b 09 	lds	r18, 0x094B
    1570:	30 91 4c 09 	lds	r19, 0x094C
    1574:	40 91 4d 09 	lds	r20, 0x094D
    1578:	50 91 4e 09 	lds	r21, 0x094E
    157c:	60 91 f5 08 	lds	r22, 0x08F5
    1580:	70 91 f6 08 	lds	r23, 0x08F6
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    158c:	5b 01       	movw	r10, r22
    158e:	6c 01       	movw	r12, r24
    1590:	1a e0       	ldi	r17, 0x0A	; 10
    1592:	d6 94       	lsr	r13
    1594:	c7 94       	ror	r12
    1596:	b7 94       	ror	r11
    1598:	a7 94       	ror	r10
    159a:	1a 95       	dec	r17
    159c:	d1 f7       	brne	.-12     	; 0x1592 <memory_statistics+0x46>
  total_memory *= bytes_per_sector;
    159e:	e0 90 f7 08 	lds	r14, 0x08F7
    15a2:	f0 90 f8 08 	lds	r15, 0x08F8

  TX_NEWLINE_PC;
    15a6:	8d e0       	ldi	r24, 0x0D	; 13
    15a8:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    15ac:	8a e0       	ldi	r24, 0x0A	; 10
    15ae:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
  TX_NEWLINE_PC;
    15b2:	8d e0       	ldi	r24, 0x0D	; 13
    15b4:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>

  // Display total memory
  display_memory (HIGH, total_memory);
    15be:	00 e0       	ldi	r16, 0x00	; 0
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	c6 01       	movw	r24, r12
    15c4:	b5 01       	movw	r22, r10
    15c6:	a8 01       	movw	r20, r16
    15c8:	97 01       	movw	r18, r14
    15ca:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    15ce:	ab 01       	movw	r20, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 cd 08 	call	0x119a	; 0x119a <display_memory>

  free_clusters = get_set_free_cluster (TOTAL_FREE, GET, 0);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
    15e8:	3b 01       	movw	r6, r22
    15ea:	4c 01       	movw	r8, r24

  if(free_clusters > total_clusters)
    15ec:	80 91 4b 09 	lds	r24, 0x094B
    15f0:	90 91 4c 09 	lds	r25, 0x094C
    15f4:	a0 91 4d 09 	lds	r26, 0x094D
    15f8:	b0 91 4e 09 	lds	r27, 0x094E
    15fc:	86 15       	cp	r24, r6
    15fe:	97 05       	cpc	r25, r7
    1600:	a8 05       	cpc	r26, r8
    1602:	b9 05       	cpc	r27, r9
    1604:	08 f0       	brcs	.+2      	; 0x1608 <memory_statistics+0xbc>
    1606:	7c c0       	rjmp	.+248    	; 0x1700 <memory_statistics+0x1b4>
  {
    free_cluster_count_updated = 0;
    1608:	10 92 6b 0d 	sts	0x0D6B, r1
    free_clusters = 0;
    total_cluster_count = 0;
    cluster = root_cluster;    
    160c:	a0 90 6c 0d 	lds	r10, 0x0D6C
    1610:	b0 90 6d 0d 	lds	r11, 0x0D6D
    1614:	c0 90 6e 0d 	lds	r12, 0x0D6E
    1618:	d0 90 6f 0d 	lds	r13, 0x0D6F
    161c:	b2 e0       	ldi	r27, 0x02	; 2
    161e:	aa 0c       	add	r10, r10
    1620:	bb 1c       	adc	r11, r11
    1622:	cc 1c       	adc	r12, r12
    1624:	dd 1c       	adc	r13, r13
    1626:	ba 95       	dec	r27
    1628:	d1 f7       	brne	.-12     	; 0x161e <memory_statistics+0xd2>
    162a:	66 24       	eor	r6, r6
    162c:	77 24       	eor	r7, r7
    162e:	43 01       	movw	r8, r6
    1630:	22 24       	eor	r2, r2
    1632:	33 24       	eor	r3, r3
    1634:	21 01       	movw	r4, r2

    while(1)
    {
      sector = unused_sectors + reserved_sector_count 
    1636:	e0 90 03 09 	lds	r14, 0x0903
    163a:	f0 90 04 09 	lds	r15, 0x0904
    163e:	20 91 f7 08 	lds	r18, 0x08F7
    1642:	30 91 f8 08 	lds	r19, 0x08F8
        + ((cluster * 4) / bytes_per_sector) ;
      sd_read_single_block(sector);
    1646:	00 e0       	ldi	r16, 0x00	; 0
    1648:	10 e0       	ldi	r17, 0x00	; 0
    164a:	80 91 21 09 	lds	r24, 0x0921
    164e:	90 91 22 09 	lds	r25, 0x0922
    1652:	a0 91 23 09 	lds	r26, 0x0923
    1656:	b0 91 24 09 	lds	r27, 0x0924
    165a:	e8 0e       	add	r14, r24
    165c:	f9 1e       	adc	r15, r25
    165e:	0a 1f       	adc	r16, r26
    1660:	1b 1f       	adc	r17, r27
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	c6 01       	movw	r24, r12
    1668:	b5 01       	movw	r22, r10
    166a:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    166e:	e2 0e       	add	r14, r18
    1670:	f3 1e       	adc	r15, r19
    1672:	04 1f       	adc	r16, r20
    1674:	15 1f       	adc	r17, r21
    1676:	c8 01       	movw	r24, r16
    1678:	b7 01       	movw	r22, r14
    167a:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    167e:	a2 01       	movw	r20, r4
    1680:	91 01       	movw	r18, r2
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	70 e0       	ldi	r23, 0x00	; 0

      for(i = 0; i < 128; i++)
      {
        value = (unsigned long *) &buffer[i*4];
        if(((*value) & 0x0fffffff) == 0) free_clusters++;
    1686:	fb 01       	movw	r30, r22
    1688:	e1 5b       	subi	r30, 0xB1	; 177
    168a:	f6 4f       	sbci	r31, 0xF6	; 246
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	a2 81       	ldd	r26, Z+2	; 0x02
    1692:	b3 81       	ldd	r27, Z+3	; 0x03
    1694:	bf 70       	andi	r27, 0x0F	; 15
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	a1 05       	cpc	r26, r1
    169a:	b1 05       	cpc	r27, r1
    169c:	29 f4       	brne	.+10     	; 0x16a8 <memory_statistics+0x15c>
    169e:	08 94       	sec
    16a0:	61 1c       	adc	r6, r1
    16a2:	71 1c       	adc	r7, r1
    16a4:	81 1c       	adc	r8, r1
    16a6:	91 1c       	adc	r9, r1
        total_cluster_count++;
    16a8:	2f 5f       	subi	r18, 0xFF	; 255
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	4f 4f       	sbci	r20, 0xFF	; 255
    16ae:	5f 4f       	sbci	r21, 0xFF	; 255
        if(total_cluster_count == (total_clusters + 2)) break;
    16b0:	80 91 4b 09 	lds	r24, 0x094B
    16b4:	90 91 4c 09 	lds	r25, 0x094C
    16b8:	a0 91 4d 09 	lds	r26, 0x094D
    16bc:	b0 91 4e 09 	lds	r27, 0x094E
    16c0:	02 96       	adiw	r24, 0x02	; 2
    16c2:	a1 1d       	adc	r26, r1
    16c4:	b1 1d       	adc	r27, r1
    16c6:	28 17       	cp	r18, r24
    16c8:	39 07       	cpc	r19, r25
    16ca:	4a 07       	cpc	r20, r26
    16cc:	5b 07       	cpc	r21, r27
    16ce:	c1 f0       	breq	.+48     	; 0x1700 <memory_statistics+0x1b4>
    16d0:	c9 01       	movw	r24, r18
    16d2:	82 19       	sub	r24, r2
    16d4:	93 09       	sbc	r25, r3
    16d6:	6c 5f       	subi	r22, 0xFC	; 252
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    {
      sector = unused_sectors + reserved_sector_count 
        + ((cluster * 4) / bytes_per_sector) ;
      sd_read_single_block(sector);

      for(i = 0; i < 128; i++)
    16da:	02 e0       	ldi	r16, 0x02	; 2
    16dc:	60 30       	cpi	r22, 0x00	; 0
    16de:	70 07       	cpc	r23, r16
    16e0:	91 f6       	brne	.-92     	; 0x1686 <memory_statistics+0x13a>
    16e2:	e1 2c       	mov	r14, r1
    16e4:	a2 e0       	ldi	r26, 0x02	; 2
    16e6:	fa 2e       	mov	r15, r26
    16e8:	01 2d       	mov	r16, r1
    16ea:	11 2d       	mov	r17, r1
    16ec:	ae 0c       	add	r10, r14
    16ee:	bf 1c       	adc	r11, r15
    16f0:	c0 1e       	adc	r12, r16
    16f2:	d1 1e       	adc	r13, r17
        if(((*value) & 0x0fffffff) == 0) free_clusters++;
        total_cluster_count++;
        if(total_cluster_count == (total_clusters + 2)) break;
      }  

      if(i < 128) break;
    16f4:	80 38       	cpi	r24, 0x80	; 128
    16f6:	91 05       	cpc	r25, r1
    16f8:	18 f0       	brcs	.+6      	; 0x1700 <memory_statistics+0x1b4>
    16fa:	19 01       	movw	r2, r18
    16fc:	2a 01       	movw	r4, r20
    16fe:	9b cf       	rjmp	.-202    	; 0x1636 <memory_statistics+0xea>
      cluster += 128;
    } 
  }

  if(!free_cluster_count_updated)
    1700:	80 91 6b 0d 	lds	r24, 0x0D6B
    1704:	88 23       	and	r24, r24
    1706:	31 f4       	brne	.+12     	; 0x1714 <memory_statistics+0x1c8>
  {  
    //update FSinfo next free cluster entry
    get_set_free_cluster (TOTAL_FREE, SET, free_clusters); 
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	a4 01       	movw	r20, r8
    170e:	93 01       	movw	r18, r6
    1710:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
  }

  free_cluster_count_updated = 1;  //set flag
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 93 6b 0d 	sts	0x0D6B, r24
  free_memory = free_clusters * sector_per_cluster / 1024;
    171a:	20 91 f5 08 	lds	r18, 0x08F5
    171e:	30 91 f6 08 	lds	r19, 0x08F6
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	c4 01       	movw	r24, r8
    1728:	b3 01       	movw	r22, r6
    172a:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    172e:	fa e0       	ldi	r31, 0x0A	; 10
    1730:	96 95       	lsr	r25
    1732:	87 95       	ror	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	fa 95       	dec	r31
    173a:	d1 f7       	brne	.-12     	; 0x1730 <memory_statistics+0x1e4>
  free_memory *= bytes_per_sector ;
    173c:	20 91 f7 08 	lds	r18, 0x08F7
    1740:	30 91 f8 08 	lds	r19, 0x08F8

  // Print free memory
  display_memory (HIGH, free_memory);
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    174c:	ab 01       	movw	r20, r22
    174e:	bc 01       	movw	r22, r24
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 cd 08 	call	0x119a	; 0x119a <display_memory>
}
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	6f 90       	pop	r6
    176e:	5f 90       	pop	r5
    1770:	4f 90       	pop	r4
    1772:	3f 90       	pop	r3
    1774:	2f 90       	pop	r2
    1776:	08 95       	ret

00001778 <get_boot_sector_data>:
 * checks to make sure that it is the FAT32 standard
 * @return unsigned char - return 0 on successful read
 *                         return 1 on error of file system or if not read properly
 */
unsigned char get_boot_sector_data (void)
{
    1778:	6f 92       	push	r6
    177a:	7f 92       	push	r7
    177c:	8f 92       	push	r8
    177e:	9f 92       	push	r9
    1780:	af 92       	push	r10
    1782:	bf 92       	push	r11
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
  struct BS_Structure *bpb; //mapping the buffer onto the structure
  struct MBRinfo_Structure *mbr;
  struct partitionInfo_Structure *partition;
  unsigned long data_sectors;

  unused_sectors = 0;
    1790:	10 92 21 09 	sts	0x0921, r1
    1794:	10 92 22 09 	sts	0x0922, r1
    1798:	10 92 23 09 	sts	0x0923, r1
    179c:	10 92 24 09 	sts	0x0924, r1

  sd_read_single_block(0);
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
  bpb = (struct BS_Structure *)buffer;

  if(bpb->jump_boot[0]!=0xE9 && bpb->jump_boot[0]!=0xEB)    //check if it is boot sector
    17ac:	80 91 4f 09 	lds	r24, 0x094F
    17b0:	89 3e       	cpi	r24, 0xE9	; 233
    17b2:	19 f1       	breq	.+70     	; 0x17fa <get_boot_sector_data+0x82>
    17b4:	8b 3e       	cpi	r24, 0xEB	; 235
    17b6:	09 f1       	breq	.+66     	; 0x17fa <get_boot_sector_data+0x82>
  {
    mbr = (struct MBRinfo_Structure *) buffer;              //if it is not boot sector, it must be MBR

    if(mbr->signature != 0xaa55) return 1;                  //if it is not even MBR then it's not FAT32
    17b8:	80 91 4d 0b 	lds	r24, 0x0B4D
    17bc:	90 91 4e 0b 	lds	r25, 0x0B4E
    17c0:	85 55       	subi	r24, 0x55	; 85
    17c2:	9a 4a       	sbci	r25, 0xAA	; 170
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <get_boot_sector_data+0x50>
    17c6:	b0 c0       	rjmp	.+352    	; 0x1928 <get_boot_sector_data+0x1b0>

    partition = (struct partitionInfo_Structure *)(mbr->partition_data);  //first partition
    unused_sectors = partition->first_sector;                             //the unused sectors, hidden to the FAT
    17c8:	60 91 15 0b 	lds	r22, 0x0B15
    17cc:	70 91 16 0b 	lds	r23, 0x0B16
    17d0:	80 91 17 0b 	lds	r24, 0x0B17
    17d4:	90 91 18 0b 	lds	r25, 0x0B18
    17d8:	60 93 21 09 	sts	0x0921, r22
    17dc:	70 93 22 09 	sts	0x0922, r23
    17e0:	80 93 23 09 	sts	0x0923, r24
    17e4:	90 93 24 09 	sts	0x0924, r25

    sd_read_single_block(partition->first_sector);          //read the bpb sector
    17e8:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    bpb = (struct BS_Structure *)buffer;
    if(bpb->jump_boot[0]!=0xE9 && bpb->jump_boot[0]!=0xEB) return 1; 
    17ec:	80 91 4f 09 	lds	r24, 0x094F
    17f0:	89 3e       	cpi	r24, 0xE9	; 233
    17f2:	19 f0       	breq	.+6      	; 0x17fa <get_boot_sector_data+0x82>
    17f4:	8b 3e       	cpi	r24, 0xEB	; 235
    17f6:	09 f0       	breq	.+2      	; 0x17fa <get_boot_sector_data+0x82>
    17f8:	97 c0       	rjmp	.+302    	; 0x1928 <get_boot_sector_data+0x1b0>
  }

  bytes_per_sector = bpb->bytes_per_sector;
    17fa:	80 91 5a 09 	lds	r24, 0x095A
    17fe:	90 91 5b 09 	lds	r25, 0x095B
    1802:	90 93 f8 08 	sts	0x08F8, r25
    1806:	80 93 f7 08 	sts	0x08F7, r24
  sector_per_cluster = bpb->sector_per_cluster;
    180a:	80 91 5c 09 	lds	r24, 0x095C
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	90 93 f6 08 	sts	0x08F6, r25
    1814:	80 93 f5 08 	sts	0x08F5, r24
  reserved_sector_count = bpb->reserved_sector_count;
    1818:	a0 90 5d 09 	lds	r10, 0x095D
    181c:	b0 90 5e 09 	lds	r11, 0x095E
    1820:	b0 92 04 09 	sts	0x0904, r11
    1824:	a0 92 03 09 	sts	0x0903, r10
  root_cluster = bpb->root_cluster;
    1828:	80 91 7b 09 	lds	r24, 0x097B
    182c:	90 91 7c 09 	lds	r25, 0x097C
    1830:	a0 91 7d 09 	lds	r26, 0x097D
    1834:	b0 91 7e 09 	lds	r27, 0x097E
    1838:	80 93 6c 0d 	sts	0x0D6C, r24
    183c:	90 93 6d 0d 	sts	0x0D6D, r25
    1840:	a0 93 6e 0d 	sts	0x0D6E, r26
    1844:	b0 93 6f 0d 	sts	0x0D6F, r27
  first_data_sector = bpb->hidden_sectors + reserved_sector_count 
    1848:	e0 90 03 09 	lds	r14, 0x0903
    184c:	f0 90 04 09 	lds	r15, 0x0904
    1850:	60 91 5f 09 	lds	r22, 0x095F
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	20 91 73 09 	lds	r18, 0x0973
    185e:	30 91 74 09 	lds	r19, 0x0974
    1862:	40 91 75 09 	lds	r20, 0x0975
    1866:	50 91 76 09 	lds	r21, 0x0976
    186a:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    186e:	3b 01       	movw	r6, r22
    1870:	4c 01       	movw	r8, r24
    1872:	00 e0       	ldi	r16, 0x00	; 0
    1874:	10 e0       	ldi	r17, 0x00	; 0
    1876:	80 91 6b 09 	lds	r24, 0x096B
    187a:	90 91 6c 09 	lds	r25, 0x096C
    187e:	a0 91 6d 09 	lds	r26, 0x096D
    1882:	b0 91 6e 09 	lds	r27, 0x096E
    1886:	e8 0e       	add	r14, r24
    1888:	f9 1e       	adc	r15, r25
    188a:	0a 1f       	adc	r16, r26
    188c:	1b 1f       	adc	r17, r27
    188e:	e6 0c       	add	r14, r6
    1890:	f7 1c       	adc	r15, r7
    1892:	08 1d       	adc	r16, r8
    1894:	19 1d       	adc	r17, r9
    1896:	e0 92 70 0d 	sts	0x0D70, r14
    189a:	f0 92 71 0d 	sts	0x0D71, r15
    189e:	00 93 72 0d 	sts	0x0D72, r16
    18a2:	10 93 73 0d 	sts	0x0D73, r17
    + (bpb->number_of_fats * bpb->fat_size_f32);

  data_sectors = bpb->total_sectors_f32
    - bpb->reserved_sector_count
    - ( bpb->number_of_fats * bpb->fat_size_f32);
  total_clusters = data_sectors / sector_per_cluster;
    18a6:	20 91 f5 08 	lds	r18, 0x08F5
    18aa:	30 91 f6 08 	lds	r19, 0x08F6
    18ae:	cc 24       	eor	r12, r12
    18b0:	dd 24       	eor	r13, r13
    18b2:	60 91 6f 09 	lds	r22, 0x096F
    18b6:	70 91 70 09 	lds	r23, 0x0970
    18ba:	80 91 71 09 	lds	r24, 0x0971
    18be:	90 91 72 09 	lds	r25, 0x0972
    18c2:	6a 19       	sub	r22, r10
    18c4:	7b 09       	sbc	r23, r11
    18c6:	8c 09       	sbc	r24, r12
    18c8:	9d 09       	sbc	r25, r13
    18ca:	66 19       	sub	r22, r6
    18cc:	77 09       	sbc	r23, r7
    18ce:	88 09       	sbc	r24, r8
    18d0:	99 09       	sbc	r25, r9
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    18da:	c9 01       	movw	r24, r18
    18dc:	da 01       	movw	r26, r20
    18de:	80 93 4b 09 	sts	0x094B, r24
    18e2:	90 93 4c 09 	sts	0x094C, r25
    18e6:	a0 93 4d 09 	sts	0x094D, r26
    18ea:	b0 93 4e 09 	sts	0x094E, r27

  // Check if FSinfo free clusters count is valid
  if((get_set_free_cluster (TOTAL_FREE, GET, 0)) > total_clusters)  
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
    18fe:	20 91 4b 09 	lds	r18, 0x094B
    1902:	30 91 4c 09 	lds	r19, 0x094C
    1906:	40 91 4d 09 	lds	r20, 0x094D
    190a:	50 91 4e 09 	lds	r21, 0x094E
    190e:	26 17       	cp	r18, r22
    1910:	37 07       	cpc	r19, r23
    1912:	48 07       	cpc	r20, r24
    1914:	59 07       	cpc	r21, r25
    1916:	18 f4       	brcc	.+6      	; 0x191e <get_boot_sector_data+0x1a6>
    free_cluster_count_updated = 0;
    1918:	10 92 6b 0d 	sts	0x0D6B, r1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <get_boot_sector_data+0x1ac>
  else free_cluster_count_updated = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	80 93 6b 0d 	sts	0x0D6B, r24
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	01 c0       	rjmp	.+2      	; 0x192a <get_boot_sector_data+0x1b2>
    1928:	81 e0       	ldi	r24, 0x01	; 1
  return 0;
}
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	08 95       	ret

00001944 <init_sd_card>:
 *        to the computer
 * @ref   www.dharmanitech.com
 * @return Void
 */
void init_sd_card(bool verbose)
{
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	18 2f       	mov	r17, r24
  unsigned char init = 0;
  unsigned char error, FAT32_active;
  unsigned int i;
  card_type = 0;
    194c:	10 92 8e 0d 	sts	0x0D8E, r1
    1950:	c0 e0       	ldi	r28, 0x00	; 0
    1952:	d0 e0       	ldi	r29, 0x00	; 0

  for (i = 0; i < 10; i++)
  {
    error = sd_init();
    1954:	0e 94 4d 06 	call	0xc9a	; 0xc9a <sd_init>
    if(!error) break;
    1958:	88 23       	and	r24, r24
    195a:	21 f0       	breq	.+8      	; 0x1964 <init_sd_card+0x20>
  unsigned char init = 0;
  unsigned char error, FAT32_active;
  unsigned int i;
  card_type = 0;

  for (i = 0; i < 10; i++)
    195c:	21 96       	adiw	r28, 0x01	; 1
    195e:	ca 30       	cpi	r28, 0x0A	; 10
    1960:	d1 05       	cpc	r29, r1
    1962:	c1 f7       	brne	.-16     	; 0x1954 <init_sd_card+0x10>
  {
    error = sd_init();
    if(!error) break;
  }

  if(verbose)
    1964:	11 23       	and	r17, r17
    1966:	09 f4       	brne	.+2      	; 0x196a <init_sd_card+0x26>
    1968:	5f c0       	rjmp	.+190    	; 0x1a28 <init_sd_card+0xe4>
  {
    if(error)
    196a:	88 23       	and	r24, r24
    196c:	71 f0       	breq	.+28     	; 0x198a <init_sd_card+0x46>
    {
      if(error == 1) 
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	29 f4       	brne	.+10     	; 0x197c <init_sd_card+0x38>
        usart_transmit_string_to_pc_from_flash(PSTR("SD card not detected.."));
    1972:	8f ed       	ldi	r24, 0xDF	; 223
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <init_sd_card+0x44>
      if(error == 2) 
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	21 f4       	brne	.+8      	; 0x1988 <init_sd_card+0x44>
        usart_transmit_string_to_pc_from_flash(PSTR("Card Initialization failed.."));
    1980:	82 ec       	ldi	r24, 0xC2	; 194
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    1988:	ff cf       	rjmp	.-2      	; 0x1988 <init_sd_card+0x44>
      while(1);  //wait here forever if error in SD init   
    }

    switch (card_type)
    198a:	80 91 8e 0d 	lds	r24, 0x0D8E
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	39 f0       	breq	.+14     	; 0x19a0 <init_sd_card+0x5c>
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	41 f0       	breq	.+16     	; 0x19a6 <init_sd_card+0x62>
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	49 f4       	brne	.+18     	; 0x19ac <init_sd_card+0x68>
    {
      case 1:
        usart_transmit_string_to_pc_from_flash(
            PSTR("Standard Capacity Card (Ver 1.x) Detected"));
    199a:	88 e9       	ldi	r24, 0x98	; 152
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	08 c0       	rjmp	.+16     	; 0x19b0 <init_sd_card+0x6c>
        break;
      case 2:
        usart_transmit_string_to_pc_from_flash(
            PSTR("High Capacity Card Detected"));
    19a0:	8c e7       	ldi	r24, 0x7C	; 124
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <init_sd_card+0x6c>
        break;
      case 3:
        usart_transmit_string_to_pc_from_flash(
            PSTR("Standard Capacity Card (Ver 2.x) Detected"));
    19a6:	82 e5       	ldi	r24, 0x52	; 82
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <init_sd_card+0x6c>
        break;
      default:
        usart_transmit_string_to_pc_from_flash(
            PSTR("Unknown SD Card Detected"));
    19ac:	89 e3       	ldi	r24, 0x39	; 57
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    19b4:	80 ed       	ldi	r24, 0xD0	; 208
    19b6:	97 e0       	ldi	r25, 0x07	; 7
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <init_sd_card+0x74>


    _delay_ms(1);   //some delay

    FAT32_active = 1;
    error = get_boot_sector_data (); //read boot sector and keep necessary data in global variables
    19bc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <get_boot_sector_data>
    if(error)   
    19c0:	88 23       	and	r24, r24
    19c2:	49 f0       	breq	.+18     	; 0x19d6 <init_sd_card+0x92>
    {
      TX_NEWLINE_PC;
    19c4:	8d e0       	ldi	r24, 0x0D	; 13
    19c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
      usart_transmit_string_to_pc_from_flash(
          PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    19d0:	88 e2       	ldi	r24, 0x28	; 40
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	08 c0       	rjmp	.+16     	; 0x19e6 <init_sd_card+0xa2>
      FAT32_active = 0;
    }
    else
    {
      TX_NEWLINE_PC;
    19d6:	8d e0       	ldi	r24, 0x0D	; 13
    19d8:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
      usart_transmit_string_to_pc_from_flash(
          PSTR("FAT32 file system detected..."));
    19e2:	8a e0       	ldi	r24, 0x0A	; 10
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    }
    TX_NEWLINE_PC;  
    19ea:	8d e0       	ldi	r24, 0x0D	; 13
    19ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    19f0:	8a e0       	ldi	r24, 0x0A	; 10
    19f2:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    init = vs1053_initialize();
    19f6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vs1053_initialize>
    19fa:	18 2f       	mov	r17, r24

    if(init == 0)
    19fc:	88 23       	and	r24, r24
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <init_sd_card+0xc6>
    {
      usart_transmit_string_to_pc_from_flash(
          PSTR("VS1053 MP3 chip sucessfully initialized"));
    1a00:	82 ee       	ldi	r24, 0xE2	; 226
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    1a08:	08 c0       	rjmp	.+16     	; 0x1a1a <init_sd_card+0xd6>
      TX_NEWLINE_PC;  
    }
    else
    {
      usart_transmit_string_to_pc_from_flash (PSTR("Error initializing VS1053 - CODE "));
    1a0a:	80 ec       	ldi	r24, 0xC0	; 192
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
      usart_transmit_byte_to_pc(init + 64);
    1a12:	81 2f       	mov	r24, r17
    1a14:	80 5c       	subi	r24, 0xC0	; 192
    1a16:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
      TX_NEWLINE_PC;
    1a1a:	8d e0       	ldi	r24, 0x0D	; 13
    1a1c:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1a20:	8a e0       	ldi	r24, 0x0A	; 10
    1a22:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1a26:	0a c0       	rjmp	.+20     	; 0x1a3c <init_sd_card+0xf8>
    }
  }
  else
  {
    if(error)
    1a28:	81 11       	cpse	r24, r1
    1a2a:	ff cf       	rjmp	.-2      	; 0x1a2a <init_sd_card+0xe6>
    1a2c:	80 ed       	ldi	r24, 0xD0	; 208
    1a2e:	97 e0       	ldi	r25, 0x07	; 7
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <init_sd_card+0xec>
    _delay_ms(1);   //some delay

    FAT32_active = 1;

    //read boot sector and keep necessary data in global variables
    error = get_boot_sector_data(); 
    1a34:	0e 94 bc 0b 	call	0x1778	; 0x1778 <get_boot_sector_data>
    if(error)   
    {
      FAT32_active = 0;
    }

    init = vs1053_initialize();
    1a38:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vs1053_initialize>
  }
}
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	08 95       	ret

00001a44 <get_set_next_cluster>:
 * @return unsinged long - next cluster number if arg2 = get, else 0
 */
unsigned long get_set_next_cluster (unsigned long cluster_number,
    unsigned char get_set,
    unsigned long cluster_entry)
{
    1a44:	4f 92       	push	r4
    1a46:	5f 92       	push	r5
    1a48:	6f 92       	push	r6
    1a4a:	7f 92       	push	r7
    1a4c:	8f 92       	push	r8
    1a4e:	9f 92       	push	r9
    1a50:	af 92       	push	r10
    1a52:	bf 92       	push	r11
    1a54:	cf 92       	push	r12
    1a56:	df 92       	push	r13
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	5b 01       	movw	r10, r22
    1a66:	6c 01       	movw	r12, r24
    1a68:	84 2e       	mov	r8, r20
    1a6a:	28 01       	movw	r4, r16
    1a6c:	39 01       	movw	r6, r18
  unsigned int fat_entry_offset;
  unsigned long *fat_entry_value, fat_entry_sector;
  unsigned char retry = 0;

  // Get sector number of the cluster entry in the FAT
  fat_entry_sector = unused_sectors + reserved_sector_count 
    1a6e:	80 91 03 09 	lds	r24, 0x0903
    1a72:	90 91 04 09 	lds	r25, 0x0904
    1a76:	02 e0       	ldi	r16, 0x02	; 2
    1a78:	aa 0c       	add	r10, r10
    1a7a:	bb 1c       	adc	r11, r11
    1a7c:	cc 1c       	adc	r12, r12
    1a7e:	dd 1c       	adc	r13, r13
    1a80:	0a 95       	dec	r16
    1a82:	d1 f7       	brne	.-12     	; 0x1a78 <get_set_next_cluster+0x34>
    1a84:	20 91 f7 08 	lds	r18, 0x08F7
    1a88:	30 91 f8 08 	lds	r19, 0x08F8
    1a8c:	7c 01       	movw	r14, r24
    1a8e:	00 e0       	ldi	r16, 0x00	; 0
    1a90:	10 e0       	ldi	r17, 0x00	; 0
    1a92:	80 91 21 09 	lds	r24, 0x0921
    1a96:	90 91 22 09 	lds	r25, 0x0922
    1a9a:	a0 91 23 09 	lds	r26, 0x0923
    1a9e:	b0 91 24 09 	lds	r27, 0x0924
    1aa2:	e8 0e       	add	r14, r24
    1aa4:	f9 1e       	adc	r15, r25
    1aa6:	0a 1f       	adc	r16, r26
    1aa8:	1b 1f       	adc	r17, r27
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	c6 01       	movw	r24, r12
    1ab0:	b5 01       	movw	r22, r10
    1ab2:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    1ab6:	e2 0e       	add	r14, r18
    1ab8:	f3 1e       	adc	r15, r19
    1aba:	04 1f       	adc	r16, r20
    1abc:	15 1f       	adc	r17, r21
    + ((cluster_number * 4) / bytes_per_sector);

  // Get the offset address in that sector number
  fat_entry_offset = (unsigned int) ((cluster_number * 4) % bytes_per_sector);
    1abe:	c0 91 f7 08 	lds	r28, 0x08F7
    1ac2:	d0 91 f8 08 	lds	r29, 0x08F8
    1ac6:	99 24       	eor	r9, r9

  // Read the sector into a buffer
  while(retry < 10)
  {
    if(!sd_read_single_block(fat_entry_sector)) break; 
    1ac8:	c8 01       	movw	r24, r16
    1aca:	b7 01       	movw	r22, r14
    1acc:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    1ad0:	88 23       	and	r24, r24
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <get_set_next_cluster+0x98>
    retry++;
    1ad4:	93 94       	inc	r9

  // Get the offset address in that sector number
  fat_entry_offset = (unsigned int) ((cluster_number * 4) % bytes_per_sector);

  // Read the sector into a buffer
  while(retry < 10)
    1ad6:	8a e0       	ldi	r24, 0x0A	; 10
    1ad8:	98 16       	cp	r9, r24
    1ada:	b1 f7       	brne	.-20     	; 0x1ac8 <get_set_next_cluster+0x84>
    if(!sd_read_single_block(fat_entry_sector)) break; 
    retry++;
  }

  // Get the cluster address from the buffer
  fat_entry_value = (unsigned long *) &buffer[fat_entry_offset];
    1adc:	9e 01       	movw	r18, r28
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	b5 01       	movw	r22, r10
    1ae6:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    1aea:	fb 01       	movw	r30, r22
    1aec:	e1 5b       	subi	r30, 0xB1	; 177
    1aee:	f6 4f       	sbci	r31, 0xF6	; 246

  if(get_set == GET) return ((*fat_entry_value) & 0x0fffffff);
    1af0:	88 20       	and	r8, r8
    1af2:	31 f4       	brne	.+12     	; 0x1b00 <get_set_next_cluster+0xbc>
    1af4:	20 81       	ld	r18, Z
    1af6:	31 81       	ldd	r19, Z+1	; 0x01
    1af8:	42 81       	ldd	r20, Z+2	; 0x02
    1afa:	53 81       	ldd	r21, Z+3	; 0x03
    1afc:	5f 70       	andi	r21, 0x0F	; 15
    1afe:	0c c0       	rjmp	.+24     	; 0x1b18 <get_set_next_cluster+0xd4>

  // For setting new value in cluster entry in FAT
  *fat_entry_value = cluster_entry;
    1b00:	40 82       	st	Z, r4
    1b02:	51 82       	std	Z+1, r5	; 0x01
    1b04:	62 82       	std	Z+2, r6	; 0x02
    1b06:	73 82       	std	Z+3, r7	; 0x03

  sd_write_single_block(fat_entry_sector);
    1b08:	c8 01       	movw	r24, r16
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	50 e0       	ldi	r21, 0x00	; 0

  return 0;
}
    1b18:	b9 01       	movw	r22, r18
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	7f 90       	pop	r7
    1b36:	6f 90       	pop	r6
    1b38:	5f 90       	pop	r5
    1b3a:	4f 90       	pop	r4
    1b3c:	08 95       	ret

00001b3e <find_files>:
 * @param file_name - unsinged char *, pointer to the file name to operate on
 * @return struct dir_Structure * - first cluster of file if flag = GET_FILE
 *         print file/dir list if flag = GET_LIST. Delete file if flag = DELETE
 */
struct dir_Structure* find_files (unsigned char flag, unsigned char *file_name)
{
    1b3e:	2f 92       	push	r2
    1b40:	3f 92       	push	r3
    1b42:	4f 92       	push	r4
    1b44:	5f 92       	push	r5
    1b46:	6f 92       	push	r6
    1b48:	7f 92       	push	r7
    1b4a:	8f 92       	push	r8
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	2a 97       	sbiw	r28, 0x0a	; 10
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	7f 83       	std	Y+7, r23	; 0x07
    1b76:	6e 83       	std	Y+6, r22	; 0x06
  struct dir_Structure *dir;
  unsigned long cluster, sector, first_sector, first_cluster, next_cluster;
  unsigned int i;
  unsigned char j;

  cluster = root_cluster; //root cluster
    1b78:	a0 90 6c 0d 	lds	r10, 0x0D6C
    1b7c:	b0 90 6d 0d 	lds	r11, 0x0D6D
    1b80:	c0 90 6e 0d 	lds	r12, 0x0D6E
    1b84:	d0 90 6f 0d 	lds	r13, 0x0D6F
            usart_transmit_string_to_pc_from_flash(PSTR("File does not exist!"));
          return 0;   
        }
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1b88:	81 50       	subi	r24, 0x01	; 1
    1b8a:	88 87       	std	Y+8, r24	; 0x08
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    1b8c:	20 91 f5 08 	lds	r18, 0x08F5
    1b90:	30 91 f6 08 	lds	r19, 0x08F6
    1b94:	e0 90 70 0d 	lds	r14, 0x0D70
    1b98:	f0 90 71 0d 	lds	r15, 0x0D71
    1b9c:	00 91 72 0d 	lds	r16, 0x0D72
    1ba0:	10 91 73 0d 	lds	r17, 0x0D73
    1ba4:	c6 01       	movw	r24, r12
    1ba6:	b5 01       	movw	r22, r10
    1ba8:	62 50       	subi	r22, 0x02	; 2
    1baa:	70 40       	sbci	r23, 0x00	; 0
    1bac:	80 40       	sbci	r24, 0x00	; 0
    1bae:	90 40       	sbci	r25, 0x00	; 0
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    1bb8:	1b 01       	movw	r2, r22
    1bba:	2c 01       	movw	r4, r24
    1bbc:	2e 0c       	add	r2, r14
    1bbe:	3f 1c       	adc	r3, r15
    1bc0:	40 1e       	adc	r4, r16
    1bc2:	51 1e       	adc	r5, r17
    1bc4:	66 24       	eor	r6, r6
    1bc6:	77 24       	eor	r7, r7
    1bc8:	43 01       	movw	r8, r6
    1bca:	60 c1       	rjmp	.+704    	; 0x1e8c <find_files+0x34e>

  while(1)
  {
    first_sector = get_first_sector (cluster);

    for(sector = 0; sector < sector_per_cluster; sector++)
    1bcc:	d4 01       	movw	r26, r8
    1bce:	c3 01       	movw	r24, r6
    1bd0:	82 0d       	add	r24, r2
    1bd2:	93 1d       	adc	r25, r3
    1bd4:	a4 1d       	adc	r26, r4
    1bd6:	b5 1d       	adc	r27, r5
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	ab 83       	std	Y+3, r26	; 0x03
    1bde:	bc 83       	std	Y+4, r27	; 0x04
    {
      sd_read_single_block(first_sector + sector);
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	e4 2e       	mov	r14, r20
    1bec:	f1 2c       	mov	r15, r1
    1bee:	3e c1       	rjmp	.+636    	; 0x1e6c <find_files+0x32e>

      for(i = 0; i < bytes_per_sector; i += 32)
    1bf0:	8a 01       	movw	r16, r20
    1bf2:	01 5b       	subi	r16, 0xB1	; 177
    1bf4:	16 4f       	sbci	r17, 0xF6	; 246
      {
        dir = (struct dir_Structure *) &buffer[i];
        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	e1 5b       	subi	r30, 0xB1	; 177
    1bfa:	f6 4f       	sbci	r31, 0xF6	; 246
    1bfc:	b0 97       	sbiw	r30, 0x20	; 32
    1bfe:	80 81       	ld	r24, Z
    1c00:	b0 96       	adiw	r30, 0x20	; 32
    1c02:	88 23       	and	r24, r24
    1c04:	41 f4       	brne	.+16     	; 0x1c16 <find_files+0xd8>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	92 30       	cpi	r25, 0x02	; 2
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <find_files+0xd2>
    1c0e:	68 c1       	rjmp	.+720    	; 0x1ee0 <find_files+0x3a2>
            usart_transmit_string_to_pc_from_flash(PSTR("File does not exist!"));
    1c10:	88 ec       	ldi	r24, 0xC8	; 200
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	63 c1       	rjmp	.+710    	; 0x1edc <find_files+0x39e>
          return 0;   
        }
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1c16:	85 3e       	cpi	r24, 0xE5	; 229
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <find_files+0xde>
    1c1a:	24 c1       	rjmp	.+584    	; 0x1e64 <find_files+0x326>
    1c1c:	75 97       	sbiw	r30, 0x15	; 21
    1c1e:	80 81       	ld	r24, Z
    1c20:	8f 30       	cpi	r24, 0x0F	; 15
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <find_files+0xe8>
    1c24:	1f c1       	rjmp	.+574    	; 0x1e64 <find_files+0x326>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1c26:	a8 85       	ldd	r26, Y+8	; 0x08
    1c28:	a2 30       	cpi	r26, 0x02	; 2
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <find_files+0xf0>
    1c2c:	d2 c0       	rjmp	.+420    	; 0x1dd2 <find_files+0x294>
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
          {
            //loop over the name[] array till you do not see a match,(DID NOT match)
            for(j=0; j<11; j++)
              if(dir->name[j] != file_name[j]) break;
    1c32:	c8 01       	movw	r24, r16
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	ae 81       	ldd	r26, Y+6	; 0x06
    1c3a:	bf 81       	ldd	r27, Y+7	; 0x07
    1c3c:	a2 0f       	add	r26, r18
    1c3e:	b3 1f       	adc	r27, r19
    1c40:	fc 01       	movw	r30, r24
    1c42:	90 81       	ld	r25, Z
    1c44:	8c 91       	ld	r24, X
    1c46:	98 17       	cp	r25, r24
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <find_files+0x10e>
    1c4a:	0c c1       	rjmp	.+536    	; 0x1e64 <find_files+0x326>
    1c4c:	82 2f       	mov	r24, r18
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	2f 5f       	subi	r18, 0xFF	; 255
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            //loop over the name[] array till you do not see a match,(DID NOT match)
            for(j=0; j<11; j++)
    1c54:	2b 30       	cpi	r18, 0x0B	; 11
    1c56:	31 05       	cpc	r19, r1
    1c58:	61 f7       	brne	.-40     	; 0x1c32 <find_files+0xf4>
              if(dir->name[j] != file_name[j]) break;
            if(j == 11)
    1c5a:	8b 30       	cpi	r24, 0x0B	; 11
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <find_files+0x122>
    1c5e:	02 c1       	rjmp	.+516    	; 0x1e64 <find_files+0x326>
            {
              if(flag == GET_FILE)
    1c60:	fd 81       	ldd	r31, Y+5	; 0x05
    1c62:	f1 30       	cpi	r31, 0x01	; 1
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <find_files+0x12a>
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <find_files+0x1a8>
              {
                append_file_sector = first_sector + sector;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c70:	80 93 2f 09 	sts	0x092F, r24
    1c74:	90 93 30 09 	sts	0x0930, r25
    1c78:	a0 93 31 09 	sts	0x0931, r26
    1c7c:	b0 93 32 09 	sts	0x0932, r27
                append_file_location = i;
    1c80:	ca 01       	movw	r24, r20
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	80 93 06 09 	sts	0x0906, r24
    1c8a:	90 93 07 09 	sts	0x0907, r25
    1c8e:	a0 93 08 09 	sts	0x0908, r26
    1c92:	b0 93 09 09 	sts	0x0909, r27
                append_start_cluster = (((unsigned long) dir->first_cluster_hi) << 16) 
    1c96:	d8 01       	movw	r26, r16
    1c98:	54 96       	adiw	r26, 0x14	; 20
    1c9a:	8d 91       	ld	r24, X+
    1c9c:	9c 91       	ld	r25, X
    1c9e:	55 97       	sbiw	r26, 0x15	; 21
    1ca0:	a0 e0       	ldi	r26, 0x00	; 0
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	99 27       	eor	r25, r25
    1ca8:	88 27       	eor	r24, r24
    1caa:	f8 01       	movw	r30, r16
    1cac:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cae:	33 8d       	ldd	r19, Z+27	; 0x1b
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	82 2b       	or	r24, r18
    1cb6:	93 2b       	or	r25, r19
    1cb8:	a4 2b       	or	r26, r20
    1cba:	b5 2b       	or	r27, r21
    1cbc:	80 93 47 09 	sts	0x0947, r24
    1cc0:	90 93 48 09 	sts	0x0948, r25
    1cc4:	a0 93 49 09 	sts	0x0949, r26
    1cc8:	b0 93 4a 09 	sts	0x094A, r27
                  | dir->first_cluster_lo;
                file_size = dir->file_size;
    1ccc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cce:	95 8d       	ldd	r25, Z+29	; 0x1d
    1cd0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1cd2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1cd4:	80 93 98 0d 	sts	0x0D98, r24
    1cd8:	90 93 99 0d 	sts	0x0D99, r25
    1cdc:	a0 93 9a 0d 	sts	0x0D9A, r26
    1ce0:	b0 93 9b 0d 	sts	0x0D9B, r27
    1ce4:	ff c0       	rjmp	.+510    	; 0x1ee4 <find_files+0x3a6>
                return (dir);
              }  
              else    //when flag = DELETE
              {
                TX_NEWLINE_PC;
    1ce6:	8d e0       	ldi	r24, 0x0D	; 13
    1ce8:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1cec:	8a e0       	ldi	r24, 0x0A	; 10
    1cee:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
                usart_transmit_string_to_pc_from_flash(PSTR("Deleting.."));
    1cf2:	8d eb       	ldi	r24, 0xBD	; 189
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
                TX_NEWLINE_PC;
    1cfa:	8d e0       	ldi	r24, 0x0D	; 13
    1cfc:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1d00:	8a e0       	ldi	r24, 0x0A	; 10
    1d02:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
                TX_NEWLINE_PC;
    1d06:	8d e0       	ldi	r24, 0x0D	; 13
    1d08:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1d0c:	8a e0       	ldi	r24, 0x0A	; 10
    1d0e:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
                first_cluster = (((unsigned long) dir->first_cluster_hi) << 16) | dir->first_cluster_lo;
    1d12:	d8 01       	movw	r26, r16
    1d14:	54 96       	adiw	r26, 0x14	; 20
    1d16:	8d 91       	ld	r24, X+
    1d18:	9c 91       	ld	r25, X
    1d1a:	55 97       	sbiw	r26, 0x15	; 21
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	5c 01       	movw	r10, r24
    1d22:	99 24       	eor	r9, r9
    1d24:	88 24       	eor	r8, r8
    1d26:	f8 01       	movw	r30, r16
    1d28:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	88 2a       	or	r8, r24
    1d32:	99 2a       	or	r9, r25
    1d34:	aa 2a       	or	r10, r26
    1d36:	bb 2a       	or	r11, r27

                //mark file as 'deleted' in FAT table
                dir->name[0] = DELETED;    
    1d38:	85 ee       	ldi	r24, 0xE5	; 229
    1d3a:	80 83       	st	Z, r24
                sd_write_single_block (first_sector+sector);
    1d3c:	69 81       	ldd	r22, Y+1	; 0x01
    1d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>

                free_memory_update (ADD, dir->file_size);
    1d48:	d8 01       	movw	r26, r16
    1d4a:	5c 96       	adiw	r26, 0x1c	; 28
    1d4c:	4d 91       	ld	r20, X+
    1d4e:	5d 91       	ld	r21, X+
    1d50:	6d 91       	ld	r22, X+
    1d52:	7c 91       	ld	r23, X
    1d54:	5f 97       	sbiw	r26, 0x1f	; 31
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	0e 94 45 0a 	call	0x148a	; 0x148a <free_memory_update>

                //update next free cluster entry in FSinfo sector
                cluster = get_set_free_cluster (NEXT_FREE, GET, 0); 
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
                if(first_cluster < cluster)
    1d6c:	86 16       	cp	r8, r22
    1d6e:	97 06       	cpc	r9, r23
    1d70:	a8 06       	cpc	r10, r24
    1d72:	b9 06       	cpc	r11, r25
    1d74:	30 f4       	brcc	.+12     	; 0x1d82 <find_files+0x244>
                  get_set_free_cluster (NEXT_FREE, SET, first_cluster);
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	61 e0       	ldi	r22, 0x01	; 1
    1d7a:	a5 01       	movw	r20, r10
    1d7c:	94 01       	movw	r18, r8
    1d7e:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>

                //mark all the clusters allocated to the file as 'free'
                while(1)
                {
                  next_cluster = get_set_next_cluster (first_cluster, GET, 0);
    1d82:	c5 01       	movw	r24, r10
    1d84:	b4 01       	movw	r22, r8
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	00 e0       	ldi	r16, 0x00	; 0
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    1d94:	f6 2e       	mov	r15, r22
    1d96:	e7 2e       	mov	r14, r23
    1d98:	d8 2e       	mov	r13, r24
    1d9a:	c9 2e       	mov	r12, r25
                  get_set_next_cluster (first_cluster, SET, 0);
    1d9c:	c5 01       	movw	r24, r10
    1d9e:	b4 01       	movw	r22, r8
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	00 e0       	ldi	r16, 0x00	; 0
    1da4:	10 e0       	ldi	r17, 0x00	; 0
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    1dae:	8f 2d       	mov	r24, r15
    1db0:	9e 2d       	mov	r25, r14
    1db2:	ad 2d       	mov	r26, r13
    1db4:	bc 2d       	mov	r27, r12
    1db6:	4c 01       	movw	r8, r24
    1db8:	5d 01       	movw	r10, r26
                  if(next_cluster > 0x0ffffff6) 
    1dba:	b7 ef       	ldi	r27, 0xF7	; 247
    1dbc:	8b 16       	cp	r8, r27
    1dbe:	bf ef       	ldi	r27, 0xFF	; 255
    1dc0:	9b 06       	cpc	r9, r27
    1dc2:	bf ef       	ldi	r27, 0xFF	; 255
    1dc4:	ab 06       	cpc	r10, r27
    1dc6:	bf e0       	ldi	r27, 0x0F	; 15
    1dc8:	bb 06       	cpc	r11, r27
    1dca:	d8 f2       	brcs	.-74     	; 0x1d82 <find_files+0x244>
                  {usart_transmit_string_to_pc_from_flash(PSTR("File deleted!"));return 0;}
    1dcc:	8f ea       	ldi	r24, 0xAF	; 175
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	85 c0       	rjmp	.+266    	; 0x1edc <find_files+0x39e>
              }
            }
          }
          else  //when flag = GET_LIST
          {
            TX_NEWLINE_PC;
    1dd2:	8d e0       	ldi	r24, 0x0D	; 13
    1dd4:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1dd8:	8a e0       	ldi	r24, 0x0A	; 10
    1dda:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1dde:	1a 86       	std	Y+10, r1	; 0x0a
    1de0:	19 86       	std	Y+9, r1	; 0x09
    1de2:	0b c0       	rjmp	.+22     	; 0x1dfa <find_files+0x2bc>
            for(j=0; j<11; j++)
            {
              if(j == 8) usart_transmit_byte_to_pc(' ');
    1de4:	e9 85       	ldd	r30, Y+9	; 0x09
    1de6:	e7 30       	cpi	r30, 0x07	; 7
    1de8:	19 f4       	brne	.+6      	; 0x1df0 <find_files+0x2b2>
    1dea:	80 e2       	ldi	r24, 0x20	; 32
    1dec:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	9a 87       	std	Y+10, r25	; 0x0a
    1df8:	89 87       	std	Y+9, r24	; 0x09
              usart_transmit_byte_to_pc (dir->name[j]);
    1dfa:	e9 85       	ldd	r30, Y+9	; 0x09
    1dfc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dfe:	e0 0f       	add	r30, r16
    1e00:	f1 1f       	adc	r31, r17
    1e02:	80 81       	ld	r24, Z
    1e04:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
            }
          }
          else  //when flag = GET_LIST
          {
            TX_NEWLINE_PC;
            for(j=0; j<11; j++)
    1e08:	a9 85       	ldd	r26, Y+9	; 0x09
    1e0a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e0c:	1a 97       	sbiw	r26, 0x0a	; 10
    1e0e:	51 f7       	brne	.-44     	; 0x1de4 <find_files+0x2a6>
            {
              if(j == 8) usart_transmit_byte_to_pc(' ');
              usart_transmit_byte_to_pc (dir->name[j]);
            }
            usart_transmit_string_to_pc_from_flash (PSTR("   "));
    1e10:	8b ea       	ldi	r24, 0xAB	; 171
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
            if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1e18:	87 01       	movw	r16, r14
    1e1a:	01 5b       	subi	r16, 0xB1	; 177
    1e1c:	16 4f       	sbci	r17, 0xF6	; 246
    1e1e:	05 51       	subi	r16, 0x15	; 21
    1e20:	10 40       	sbci	r17, 0x00	; 0
    1e22:	f8 01       	movw	r30, r16
    1e24:	80 81       	ld	r24, Z
    1e26:	0b 5e       	subi	r16, 0xEB	; 235
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	80 31       	cpi	r24, 0x10	; 16
    1e2c:	b9 f0       	breq	.+46     	; 0x1e5c <find_files+0x31e>
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <find_files+0x2fa>
              usart_transmit_string_to_pc_from_flash (PSTR("FILE" ));
              usart_transmit_string_to_pc_from_flash (PSTR("   "));
              display_memory (LOW, dir->file_size);
            }
            else
              usart_transmit_string_to_pc_from_flash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1e32:	89 e9       	ldi	r24, 0x99	; 153
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <find_files+0x322>
              usart_transmit_byte_to_pc (dir->name[j]);
            }
            usart_transmit_string_to_pc_from_flash (PSTR("   "));
            if((dir->attrib != 0x10) && (dir->attrib != 0x08))
            {
              usart_transmit_string_to_pc_from_flash (PSTR("FILE" ));
    1e38:	86 ea       	ldi	r24, 0xA6	; 166
    1e3a:	92 e0       	ldi	r25, 0x02	; 2
    1e3c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
              usart_transmit_string_to_pc_from_flash (PSTR("   "));
    1e40:	82 ea       	ldi	r24, 0xA2	; 162
    1e42:	92 e0       	ldi	r25, 0x02	; 2
    1e44:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
              display_memory (LOW, dir->file_size);
    1e48:	f8 01       	movw	r30, r16
    1e4a:	34 97       	sbiw	r30, 0x04	; 4
    1e4c:	40 81       	ld	r20, Z
    1e4e:	51 81       	ldd	r21, Z+1	; 0x01
    1e50:	62 81       	ldd	r22, Z+2	; 0x02
    1e52:	73 81       	ldd	r23, Z+3	; 0x03
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	0e 94 cd 08 	call	0x119a	; 0x119a <display_memory>
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <find_files+0x326>
            }
            else
              usart_transmit_string_to_pc_from_flash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1e5c:	8e e9       	ldi	r24, 0x9E	; 158
    1e5e:	92 e0       	ldi	r25, 0x02	; 2
    1e60:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    1e64:	80 e2       	ldi	r24, 0x20	; 32
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	e8 0e       	add	r14, r24
    1e6a:	f9 1e       	adc	r15, r25
    1e6c:	a7 01       	movw	r20, r14
    1e6e:	40 52       	subi	r20, 0x20	; 32
    1e70:	50 40       	sbci	r21, 0x00	; 0

    for(sector = 0; sector < sector_per_cluster; sector++)
    {
      sd_read_single_block(first_sector + sector);

      for(i = 0; i < bytes_per_sector; i += 32)
    1e72:	80 91 f7 08 	lds	r24, 0x08F7
    1e76:	90 91 f8 08 	lds	r25, 0x08F8
    1e7a:	48 17       	cp	r20, r24
    1e7c:	59 07       	cpc	r21, r25
    1e7e:	08 f4       	brcc	.+2      	; 0x1e82 <find_files+0x344>
    1e80:	b7 ce       	rjmp	.-658    	; 0x1bf0 <find_files+0xb2>

  while(1)
  {
    first_sector = get_first_sector (cluster);

    for(sector = 0; sector < sector_per_cluster; sector++)
    1e82:	08 94       	sec
    1e84:	61 1c       	adc	r6, r1
    1e86:	71 1c       	adc	r7, r1
    1e88:	81 1c       	adc	r8, r1
    1e8a:	91 1c       	adc	r9, r1
    1e8c:	80 91 f5 08 	lds	r24, 0x08F5
    1e90:	90 91 f6 08 	lds	r25, 0x08F6
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	68 16       	cp	r6, r24
    1e9a:	79 06       	cpc	r7, r25
    1e9c:	8a 06       	cpc	r8, r26
    1e9e:	9b 06       	cpc	r9, r27
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <find_files+0x366>
    1ea2:	94 ce       	rjmp	.-728    	; 0x1bcc <find_files+0x8e>
          }
        }
      }
    }

    cluster = (get_set_next_cluster (cluster, GET, 0));
    1ea4:	c6 01       	movw	r24, r12
    1ea6:	b5 01       	movw	r22, r10
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	00 e0       	ldi	r16, 0x00	; 0
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    1eb6:	5b 01       	movw	r10, r22
    1eb8:	6c 01       	movw	r12, r24

    //out of bonds?? TODO - look at
    if(cluster > 0x0ffffff6)
    1eba:	97 ef       	ldi	r25, 0xF7	; 247
    1ebc:	a9 16       	cp	r10, r25
    1ebe:	9f ef       	ldi	r25, 0xFF	; 255
    1ec0:	b9 06       	cpc	r11, r25
    1ec2:	9f ef       	ldi	r25, 0xFF	; 255
    1ec4:	c9 06       	cpc	r12, r25
    1ec6:	9f e0       	ldi	r25, 0x0F	; 15
    1ec8:	d9 06       	cpc	r13, r25
    1eca:	50 f4       	brcc	.+20     	; 0x1ee0 <find_files+0x3a2>
      return 0;
    if(cluster == 0) 
    1ecc:	a1 14       	cp	r10, r1
    1ece:	b1 04       	cpc	r11, r1
    1ed0:	c1 04       	cpc	r12, r1
    1ed2:	d1 04       	cpc	r13, r1
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <find_files+0x39a>
    1ed6:	5a ce       	rjmp	.-844    	; 0x1b8c <find_files+0x4e>
    {usart_transmit_string_to_pc_from_flash(PSTR("Error in getting cluster"));  return 0;}
    1ed8:	80 e8       	ldi	r24, 0x80	; 128
    1eda:	92 e0       	ldi	r25, 0x02	; 2
    1edc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
  }
  return 0;
}
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	2a 96       	adiw	r28, 0x0a	; 10
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	af 90       	pop	r10
    1f06:	9f 90       	pop	r9
    1f08:	8f 90       	pop	r8
    1f0a:	7f 90       	pop	r7
    1f0c:	6f 90       	pop	r6
    1f0e:	5f 90       	pop	r5
    1f10:	4f 90       	pop	r4
    1f12:	3f 90       	pop	r3
    1f14:	2f 90       	pop	r2
    1f16:	08 95       	ret

00001f18 <delete_file>:
 * @brief function deletes the specified file in the root directory
 * @param file_name - unsigned char *, file name of file that you want deleted
 * @return Void
 */
void delete_file (unsigned char *file_name)
{
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convert_file_name (file_name);
    1f1e:	0e 94 4d 08 	call	0x109a	; 0x109a <convert_file_name>
  if(error) return;
    1f22:	88 23       	and	r24, r24
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <delete_file+0x16>

  find_files (DELETE, file_name);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	be 01       	movw	r22, r28
    1f2a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <find_files>
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <read_and_retrieve_file_contents>:
 *                         1 means that you could not convert file_name
 *                         2 means file does not exists
 *                         3 will mean inability to read a cluster
 */
unsigned char read_and_retrieve_file_contents(unsigned char *file_name, unsigned char *data_string)
{
    1f34:	2f 92       	push	r2
    1f36:	3f 92       	push	r3
    1f38:	4f 92       	push	r4
    1f3a:	5f 92       	push	r5
    1f3c:	6f 92       	push	r6
    1f3e:	7f 92       	push	r7
    1f40:	8f 92       	push	r8
    1f42:	9f 92       	push	r9
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	cf 92       	push	r12
    1f4a:	df 92       	push	r13
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	28 97       	sbiw	r28, 0x08	; 8
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	8c 01       	movw	r16, r24
    1f6a:	7e 83       	std	Y+6, r23	; 0x06
    1f6c:	6d 83       	std	Y+5, r22	; 0x05
  unsigned int k;
  unsigned char j, error;
  unsigned int num_bytes_read;
  bool end_of_file = false;

  error = convert_file_name (file_name);    //convert file_name into FAT format
    1f6e:	0e 94 4d 08 	call	0x109a	; 0x109a <convert_file_name>
  if(error) 
    1f72:	88 23       	and	r24, r24
    1f74:	41 f0       	breq	.+16     	; 0x1f86 <read_and_retrieve_file_contents+0x52>
  {
    TX_NEWLINE_PC;
    1f76:	8d e0       	ldi	r24, 0x0D	; 13
    1f78:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	b4 c0       	rjmp	.+360    	; 0x20ee <read_and_retrieve_file_contents+0x1ba>
    return 1;
  }

  dir = find_files (GET_FILE, file_name);   //get the file location
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	b8 01       	movw	r22, r16
    1f8a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <find_files>
    1f8e:	9c 01       	movw	r18, r24
  if(dir == 0) 
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	41 f4       	brne	.+16     	; 0x1fa4 <read_and_retrieve_file_contents+0x70>
  {
    TX_NEWLINE_PC;
    1f94:	8d e0       	ldi	r24, 0x0D	; 13
    1f96:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1f9a:	8a e0       	ldi	r24, 0x0A	; 10
    1f9c:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	a5 c0       	rjmp	.+330    	; 0x20ee <read_and_retrieve_file_contents+0x1ba>
    return 2;
  }

  cluster = (((unsigned long) dir->first_cluster_hi) << 16) | dir->first_cluster_lo;
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	54 96       	adiw	r26, 0x14	; 20
    1fa8:	8d 91       	ld	r24, X+
    1faa:	9c 91       	ld	r25, X
    1fac:	55 97       	sbiw	r26, 0x15	; 21
    1fae:	a0 e0       	ldi	r26, 0x00	; 0
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	6c 01       	movw	r12, r24
    1fb4:	bb 24       	eor	r11, r11
    1fb6:	aa 24       	eor	r10, r10
    1fb8:	f9 01       	movw	r30, r18
    1fba:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fbc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fbe:	a0 e0       	ldi	r26, 0x00	; 0
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	a8 2a       	or	r10, r24
    1fc4:	b9 2a       	or	r11, r25
    1fc6:	ca 2a       	or	r12, r26
    1fc8:	db 2a       	or	r13, r27

  file_size = dir->file_size;
    1fca:	d9 01       	movw	r26, r18
    1fcc:	5c 96       	adiw	r26, 0x1c	; 28
    1fce:	2d 90       	ld	r2, X+
    1fd0:	3d 90       	ld	r3, X+
    1fd2:	4d 90       	ld	r4, X+
    1fd4:	5c 90       	ld	r5, X
    1fd6:	5f 97       	sbiw	r26, 0x1f	; 31
    1fd8:	29 82       	std	Y+1, r2	; 0x01
    1fda:	3a 82       	std	Y+2, r3	; 0x02
    1fdc:	4b 82       	std	Y+3, r4	; 0x03
    1fde:	5c 82       	std	Y+4, r5	; 0x04
    1fe0:	22 24       	eor	r2, r2
    1fe2:	33 24       	eor	r3, r3
    1fe4:	21 01       	movw	r4, r2
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    1fe6:	20 91 f5 08 	lds	r18, 0x08F5
    1fea:	30 91 f6 08 	lds	r19, 0x08F6
    1fee:	e0 90 70 0d 	lds	r14, 0x0D70
    1ff2:	f0 90 71 0d 	lds	r15, 0x0D71
    1ff6:	00 91 72 0d 	lds	r16, 0x0D72
    1ffa:	10 91 73 0d 	lds	r17, 0x0D73
    1ffe:	c6 01       	movw	r24, r12
    2000:	b5 01       	movw	r22, r10
    2002:	62 50       	subi	r22, 0x02	; 2
    2004:	70 40       	sbci	r23, 0x00	; 0
    2006:	80 40       	sbci	r24, 0x00	; 0
    2008:	90 40       	sbci	r25, 0x00	; 0
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2012:	3b 01       	movw	r6, r22
    2014:	4c 01       	movw	r8, r24
    2016:	6e 0c       	add	r6, r14
    2018:	7f 1c       	adc	r7, r15
    201a:	80 1e       	adc	r8, r16
    201c:	91 1e       	adc	r9, r17
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	40 c0       	rjmp	.+128    	; 0x20a2 <read_and_retrieve_file_contents+0x16e>
  {
    first_sector = get_first_sector (cluster);

    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_block(first_sector + j);
    2022:	c4 01       	movw	r24, r8
    2024:	b3 01       	movw	r22, r6
    2026:	61 0f       	add	r22, r17
    2028:	71 1d       	adc	r23, r1
    202a:	81 1d       	adc	r24, r1
    202c:	91 1d       	adc	r25, r1
    202e:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    2032:	a2 01       	movw	r20, r4
    2034:	91 01       	movw	r18, r2
    2036:	60 e0       	ldi	r22, 0x00	; 0


      for(k=0; k<512; k++)
    2038:	d2 01       	movw	r26, r4
    203a:	c1 01       	movw	r24, r2
    203c:	80 50       	subi	r24, 0x00	; 0
    203e:	9e 4f       	sbci	r25, 0xFE	; 254
    2040:	af 4f       	sbci	r26, 0xFF	; 255
    2042:	bf 4f       	sbci	r27, 0xFF	; 255
      {
        if ((byteCounter++) >= file_size ) end_of_file=true;
    2044:	29 80       	ldd	r2, Y+1	; 0x01
    2046:	3a 80       	ldd	r3, Y+2	; 0x02
    2048:	4b 80       	ldd	r4, Y+3	; 0x03
    204a:	5c 80       	ldd	r5, Y+4	; 0x04
    204c:	22 15       	cp	r18, r2
    204e:	33 05       	cpc	r19, r3
    2050:	44 05       	cpc	r20, r4
    2052:	55 05       	cpc	r21, r5
    2054:	08 f0       	brcs	.+2      	; 0x2058 <read_and_retrieve_file_contents+0x124>
    2056:	61 e0       	ldi	r22, 0x01	; 1
    2058:	2f 5f       	subi	r18, 0xFF	; 255
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	4f 4f       	sbci	r20, 0xFF	; 255
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_block(first_sector + j);


      for(k=0; k<512; k++)
    2060:	28 17       	cp	r18, r24
    2062:	39 07       	cpc	r19, r25
    2064:	4a 07       	cpc	r20, r26
    2066:	5b 07       	cpc	r21, r27
    2068:	69 f7       	brne	.-38     	; 0x2044 <read_and_retrieve_file_contents+0x110>
    206a:	0f c0       	rjmp	.+30     	; 0x208a <read_and_retrieve_file_contents+0x156>
        if ((byteCounter++) >= file_size ) end_of_file=true;

      }
      while(num_bytes_read < k)
      {
        *data_string++ = buffer[num_bytes_read];
    206c:	ef 81       	ldd	r30, Y+7	; 0x07
    206e:	f8 85       	ldd	r31, Y+8	; 0x08
    2070:	e1 5b       	subi	r30, 0xB1	; 177
    2072:	f6 4f       	sbci	r31, 0xF6	; 246
    2074:	80 81       	ld	r24, Z
    2076:	ad 81       	ldd	r26, Y+5	; 0x05
    2078:	be 81       	ldd	r27, Y+6	; 0x06
    207a:	8d 93       	st	X+, r24
    207c:	be 83       	std	Y+6, r27	; 0x06
    207e:	ad 83       	std	Y+5, r26	; 0x05
        if(num_bytes_read++ == k)return 0;  
    2080:	ef 81       	ldd	r30, Y+7	; 0x07
    2082:	f8 85       	ldd	r31, Y+8	; 0x08
    2084:	31 96       	adiw	r30, 0x01	; 1
    2086:	f8 87       	std	Y+8, r31	; 0x08
    2088:	ef 83       	std	Y+7, r30	; 0x07
      for(k=0; k<512; k++)
      {
        if ((byteCounter++) >= file_size ) end_of_file=true;

      }
      while(num_bytes_read < k)
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	98 85       	ldd	r25, Y+8	; 0x08
    208e:	80 50       	subi	r24, 0x00	; 0
    2090:	92 40       	sbci	r25, 0x02	; 2
    2092:	60 f3       	brcs	.-40     	; 0x206c <read_and_retrieve_file_contents+0x138>
      {
        *data_string++ = buffer[num_bytes_read];
        if(num_bytes_read++ == k)return 0;  
      }
      if(end_of_file)
    2094:	66 23       	and	r22, r22
    2096:	11 f0       	breq	.+4      	; 0x209c <read_and_retrieve_file_contents+0x168>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	29 c0       	rjmp	.+82     	; 0x20ee <read_and_retrieve_file_contents+0x1ba>

  while(1)
  {
    first_sector = get_first_sector (cluster);

    for(j=0; j<sector_per_cluster; j++)
    209c:	1f 5f       	subi	r17, 0xFF	; 255
    209e:	19 01       	movw	r2, r18
    20a0:	2a 01       	movw	r4, r20
    20a2:	20 91 f5 08 	lds	r18, 0x08F5
    20a6:	30 91 f6 08 	lds	r19, 0x08F6
    20aa:	81 2f       	mov	r24, r17
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	82 17       	cp	r24, r18
    20b0:	93 07       	cpc	r25, r19
    20b2:	08 f4       	brcc	.+2      	; 0x20b6 <read_and_retrieve_file_contents+0x182>
    20b4:	b6 cf       	rjmp	.-148    	; 0x2022 <read_and_retrieve_file_contents+0xee>
      if(end_of_file)
      {
        return 0;
      }
    }
    cluster = get_set_next_cluster (cluster, GET, 0);
    20b6:	c6 01       	movw	r24, r12
    20b8:	b5 01       	movw	r22, r10
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	00 e0       	ldi	r16, 0x00	; 0
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    20c8:	5b 01       	movw	r10, r22
    20ca:	6c 01       	movw	r12, r24
    if(cluster == 0) 
    20cc:	61 15       	cp	r22, r1
    20ce:	71 05       	cpc	r23, r1
    20d0:	81 05       	cpc	r24, r1
    20d2:	91 05       	cpc	r25, r1
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <read_and_retrieve_file_contents+0x1a4>
    20d6:	87 cf       	rjmp	.-242    	; 0x1fe6 <read_and_retrieve_file_contents+0xb2>
    {
      TX_NEWLINE_PC;
    20d8:	8d e0       	ldi	r24, 0x0D	; 13
    20da:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    20de:	8a e0       	ldi	r24, 0x0A	; 10
    20e0:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
      usart_transmit_string_to_pc_from_flash(PSTR("Error in getting cluster")); 
    20e4:	8e e4       	ldi	r24, 0x4E	; 78
    20e6:	92 e0       	ldi	r25, 0x02	; 2
    20e8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    20ec:	83 e0       	ldi	r24, 0x03	; 3
      return 3;
    }
  }

  return 4;
}
    20ee:	28 96       	adiw	r28, 0x08	; 8
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	df 90       	pop	r13
    2108:	cf 90       	pop	r12
    210a:	bf 90       	pop	r11
    210c:	af 90       	pop	r10
    210e:	9f 90       	pop	r9
    2110:	8f 90       	pop	r8
    2112:	7f 90       	pop	r7
    2114:	6f 90       	pop	r6
    2116:	5f 90       	pop	r5
    2118:	4f 90       	pop	r4
    211a:	3f 90       	pop	r3
    211c:	2f 90       	pop	r2
    211e:	08 95       	ret

00002120 <read_file>:
 * @return char - returns 0 on success
 *                returns 1 if files already exists and flag = Verify
 *                returns 2 on error convertingFileName
 */
unsigned char read_file (unsigned char flag, unsigned char *file_name)
{
    2120:	2f 92       	push	r2
    2122:	3f 92       	push	r3
    2124:	4f 92       	push	r4
    2126:	5f 92       	push	r5
    2128:	6f 92       	push	r6
    212a:	7f 92       	push	r7
    212c:	8f 92       	push	r8
    212e:	9f 92       	push	r9
    2130:	af 92       	push	r10
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <read_file+0x26>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <read_file+0x28>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	e8 2e       	mov	r14, r24
    214e:	8b 01       	movw	r16, r22
  unsigned long cluster, byteCounter = 0, file_size, first_sector;
  unsigned int k;
  unsigned char j, error;
  bool end_of_file = false;

  error = convert_file_name (file_name); //convert file_name into FAT format
    2150:	cb 01       	movw	r24, r22
    2152:	0e 94 4d 08 	call	0x109a	; 0x109a <convert_file_name>
  if(error) return 2;
    2156:	88 23       	and	r24, r24
    2158:	11 f0       	breq	.+4      	; 0x215e <read_file+0x3e>
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	94 c0       	rjmp	.+296    	; 0x2286 <read_file+0x166>

  dir = find_files (GET_FILE, file_name); //get the file location
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	b8 01       	movw	r22, r16
    2162:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <find_files>
    2166:	9c 01       	movw	r18, r24
  if(dir == 0) 
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	09 f4       	brne	.+2      	; 0x216e <read_file+0x4e>
    216c:	8b c0       	rjmp	.+278    	; 0x2284 <read_file+0x164>
    return 0;

  if(flag == VERIFY) return 1;  //specified file name is already existing
    216e:	22 24       	eor	r2, r2
    2170:	23 94       	inc	r2
    2172:	e2 14       	cp	r14, r2
    2174:	11 f4       	brne	.+4      	; 0x217a <read_file+0x5a>
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	86 c0       	rjmp	.+268    	; 0x2286 <read_file+0x166>

  cluster = (((unsigned long) dir->first_cluster_hi) << 16) | dir->first_cluster_lo;
    217a:	dc 01       	movw	r26, r24
    217c:	54 96       	adiw	r26, 0x14	; 20
    217e:	8d 91       	ld	r24, X+
    2180:	9c 91       	ld	r25, X
    2182:	55 97       	sbiw	r26, 0x15	; 21
    2184:	a0 e0       	ldi	r26, 0x00	; 0
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	6c 01       	movw	r12, r24
    218a:	bb 24       	eor	r11, r11
    218c:	aa 24       	eor	r10, r10
    218e:	f9 01       	movw	r30, r18
    2190:	82 8d       	ldd	r24, Z+26	; 0x1a
    2192:	93 8d       	ldd	r25, Z+27	; 0x1b
    2194:	a0 e0       	ldi	r26, 0x00	; 0
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	a8 2a       	or	r10, r24
    219a:	b9 2a       	or	r11, r25
    219c:	ca 2a       	or	r12, r26
    219e:	db 2a       	or	r13, r27

  file_size = dir->file_size;
    21a0:	d9 01       	movw	r26, r18
    21a2:	5c 96       	adiw	r26, 0x1c	; 28
    21a4:	2d 90       	ld	r2, X+
    21a6:	3d 90       	ld	r3, X+
    21a8:	4d 90       	ld	r4, X+
    21aa:	5c 90       	ld	r5, X
    21ac:	5f 97       	sbiw	r26, 0x1f	; 31
    21ae:	29 82       	std	Y+1, r2	; 0x01
    21b0:	3a 82       	std	Y+2, r3	; 0x02
    21b2:	4b 82       	std	Y+3, r4	; 0x03
    21b4:	5c 82       	std	Y+4, r5	; 0x04
    21b6:	22 24       	eor	r2, r2
    21b8:	33 24       	eor	r3, r3
    21ba:	21 01       	movw	r4, r2
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    21bc:	20 91 f5 08 	lds	r18, 0x08F5
    21c0:	30 91 f6 08 	lds	r19, 0x08F6
    21c4:	e0 90 70 0d 	lds	r14, 0x0D70
    21c8:	f0 90 71 0d 	lds	r15, 0x0D71
    21cc:	00 91 72 0d 	lds	r16, 0x0D72
    21d0:	10 91 73 0d 	lds	r17, 0x0D73
    21d4:	c6 01       	movw	r24, r12
    21d6:	b5 01       	movw	r22, r10
    21d8:	62 50       	subi	r22, 0x02	; 2
    21da:	70 40       	sbci	r23, 0x00	; 0
    21dc:	80 40       	sbci	r24, 0x00	; 0
    21de:	90 40       	sbci	r25, 0x00	; 0
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    21e8:	3b 01       	movw	r6, r22
    21ea:	4c 01       	movw	r8, r24
    21ec:	6e 0c       	add	r6, r14
    21ee:	7f 1c       	adc	r7, r15
    21f0:	80 1e       	adc	r8, r16
    21f2:	91 1e       	adc	r9, r17
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	28 c0       	rjmp	.+80     	; 0x2248 <read_file+0x128>
  {
    first_sector = get_first_sector (cluster);

    for(j = 0; j < sector_per_cluster; j++)
    {
      sd_read_single_block(first_sector + j);
    21f8:	c4 01       	movw	r24, r8
    21fa:	b3 01       	movw	r22, r6
    21fc:	61 0f       	add	r22, r17
    21fe:	71 1d       	adc	r23, r1
    2200:	81 1d       	adc	r24, r1
    2202:	91 1d       	adc	r25, r1
    2204:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    2208:	d2 01       	movw	r26, r4
    220a:	c1 01       	movw	r24, r2
    220c:	60 e0       	ldi	r22, 0x00	; 0

      for(k = 0; k < 512; k++)
    220e:	a2 01       	movw	r20, r4
    2210:	91 01       	movw	r18, r2
    2212:	20 50       	subi	r18, 0x00	; 0
    2214:	3e 4f       	sbci	r19, 0xFE	; 254
    2216:	4f 4f       	sbci	r20, 0xFF	; 255
    2218:	5f 4f       	sbci	r21, 0xFF	; 255
      {
        if ((byteCounter++) >= file_size ) end_of_file = true;
    221a:	29 80       	ldd	r2, Y+1	; 0x01
    221c:	3a 80       	ldd	r3, Y+2	; 0x02
    221e:	4b 80       	ldd	r4, Y+3	; 0x03
    2220:	5c 80       	ldd	r5, Y+4	; 0x04
    2222:	82 15       	cp	r24, r2
    2224:	93 05       	cpc	r25, r3
    2226:	a4 05       	cpc	r26, r4
    2228:	b5 05       	cpc	r27, r5
    222a:	08 f0       	brcs	.+2      	; 0x222e <read_file+0x10e>
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	a1 1d       	adc	r26, r1
    2232:	b1 1d       	adc	r27, r1

    for(j = 0; j < sector_per_cluster; j++)
    {
      sd_read_single_block(first_sector + j);

      for(k = 0; k < 512; k++)
    2234:	82 17       	cp	r24, r18
    2236:	93 07       	cpc	r25, r19
    2238:	a4 07       	cpc	r26, r20
    223a:	b5 07       	cpc	r27, r21
    223c:	71 f7       	brne	.-36     	; 0x221a <read_file+0xfa>
      {
        if ((byteCounter++) >= file_size ) end_of_file = true;
      }

      if(end_of_file)
    223e:	66 23       	and	r22, r22
    2240:	09 f5       	brne	.+66     	; 0x2284 <read_file+0x164>

  while(1)
  {
    first_sector = get_first_sector (cluster);

    for(j = 0; j < sector_per_cluster; j++)
    2242:	1f 5f       	subi	r17, 0xFF	; 255
    2244:	1c 01       	movw	r2, r24
    2246:	2d 01       	movw	r4, r26
    2248:	20 91 f5 08 	lds	r18, 0x08F5
    224c:	30 91 f6 08 	lds	r19, 0x08F6
    2250:	81 2f       	mov	r24, r17
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	82 17       	cp	r24, r18
    2256:	93 07       	cpc	r25, r19
    2258:	78 f2       	brcs	.-98     	; 0x21f8 <read_file+0xd8>
      {
        return 0;
      }
    }

    cluster = get_set_next_cluster (cluster, GET, 0);
    225a:	c6 01       	movw	r24, r12
    225c:	b5 01       	movw	r22, r10
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	00 e0       	ldi	r16, 0x00	; 0
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    226c:	5b 01       	movw	r10, r22
    226e:	6c 01       	movw	r12, r24
    if(cluster == 0)
    2270:	61 15       	cp	r22, r1
    2272:	71 05       	cpc	r23, r1
    2274:	81 05       	cpc	r24, r1
    2276:	91 05       	cpc	r25, r1
    2278:	09 f0       	breq	.+2      	; 0x227c <read_file+0x15c>
    227a:	a0 cf       	rjmp	.-192    	; 0x21bc <read_file+0x9c>
    {
      usart_transmit_string_to_pc_from_flash(PSTR("Error in getting cluster"));
    227c:	87 e6       	ldi	r24, 0x67	; 103
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
      return 0;
    2284:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return 0;
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	af 90       	pop	r10
    22a2:	9f 90       	pop	r9
    22a4:	8f 90       	pop	r8
    22a6:	7f 90       	pop	r7
    22a8:	6f 90       	pop	r6
    22aa:	5f 90       	pop	r5
    22ac:	4f 90       	pop	r4
    22ae:	3f 90       	pop	r3
    22b0:	2f 90       	pop	r2
    22b2:	08 95       	ret

000022b4 <write_file>:
 *        file name does not exists. If it already exists then append data to end
 * @param file_name - unsigned char *, this is the name of the file to write to
 * @return Void
 */
void write_file (unsigned char *file_name)
{
    22b4:	2f 92       	push	r2
    22b6:	3f 92       	push	r3
    22b8:	4f 92       	push	r4
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	8f 92       	push	r8
    22c2:	9f 92       	push	r9
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	bc 01       	movw	r22, r24
  unsigned char start = 0, append_file = 0, sector_end_flag = 0, sector = 0;
  unsigned int i, first_cluster_high, first_cluster_low;
  unsigned long cluster, next_cluster, prev_cluster;
  unsigned long first_sector, cluster_count, extraMemory;

  j = read_file(VERIFY, file_name);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	0e 94 90 10 	call	0x2120	; 0x2120 <read_file>

  if(j == 1)
    22dc:	81 30       	cpi	r24, 0x01	; 1
    22de:	09 f0       	breq	.+2      	; 0x22e2 <write_file+0x2e>
    22e0:	51 c0       	rjmp	.+162    	; 0x2384 <write_file+0xd0>
  {
    append_file = 1;
    cluster = append_start_cluster;
    22e2:	60 90 47 09 	lds	r6, 0x0947
    22e6:	70 90 48 09 	lds	r7, 0x0948
    22ea:	80 90 49 09 	lds	r8, 0x0949
    22ee:	90 90 4a 09 	lds	r9, 0x094A
    22f2:	aa 24       	eor	r10, r10
    22f4:	bb 24       	eor	r11, r11
    22f6:	65 01       	movw	r12, r10
    cluster_count=0;
    while(1)
    {
      next_cluster = get_set_next_cluster (cluster, GET, 0);
    22f8:	c4 01       	movw	r24, r8
    22fa:	b3 01       	movw	r22, r6
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	00 e0       	ldi	r16, 0x00	; 0
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
      if(next_cluster == EOF) break;
    230a:	6f 3f       	cpi	r22, 0xFF	; 255
    230c:	2f ef       	ldi	r18, 0xFF	; 255
    230e:	72 07       	cpc	r23, r18
    2310:	2f ef       	ldi	r18, 0xFF	; 255
    2312:	82 07       	cpc	r24, r18
    2314:	2f e0       	ldi	r18, 0x0F	; 15
    2316:	92 07       	cpc	r25, r18
    2318:	41 f0       	breq	.+16     	; 0x232a <write_file+0x76>
      cluster = next_cluster;
      cluster_count++;
    231a:	08 94       	sec
    231c:	a1 1c       	adc	r10, r1
    231e:	b1 1c       	adc	r11, r1
    2320:	c1 1c       	adc	r12, r1
    2322:	d1 1c       	adc	r13, r1
    2324:	3b 01       	movw	r6, r22
    2326:	4c 01       	movw	r8, r24
    2328:	e7 cf       	rjmp	.-50     	; 0x22f8 <write_file+0x44>
    }

    sector = (file_size - (cluster_count * sector_per_cluster * bytes_per_sector)) 
    232a:	20 91 f5 08 	lds	r18, 0x08F5
    232e:	30 91 f6 08 	lds	r19, 0x08F6
    2332:	60 91 f7 08 	lds	r22, 0x08F7
    2336:	70 91 f8 08 	lds	r23, 0x08F8
    233a:	e0 90 f7 08 	lds	r14, 0x08F7
    233e:	f0 90 f8 08 	lds	r15, 0x08F8
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    234e:	a6 01       	movw	r20, r12
    2350:	95 01       	movw	r18, r10
    2352:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	60 91 98 0d 	lds	r22, 0x0D98
    235e:	70 91 99 0d 	lds	r23, 0x0D99
    2362:	80 91 9a 0d 	lds	r24, 0x0D9A
    2366:	90 91 9b 0d 	lds	r25, 0x0D9B
    236a:	62 1b       	sub	r22, r18
    236c:	73 0b       	sbc	r23, r19
    236e:	84 0b       	sbc	r24, r20
    2370:	95 0b       	sbc	r25, r21
    2372:	00 e0       	ldi	r16, 0x00	; 0
    2374:	10 e0       	ldi	r17, 0x00	; 0
    2376:	a8 01       	movw	r20, r16
    2378:	97 01       	movw	r18, r14
    237a:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    237e:	b2 2e       	mov	r11, r18
    2380:	21 e0       	ldi	r18, 0x01	; 1
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <write_file+0x14e>
      / bytes_per_sector; //last sector number of the last cluster of the file
    start = 1;
  }
  else if(j == 2) return; //invalid file name
    2384:	82 30       	cpi	r24, 0x02	; 2
    2386:	09 f4       	brne	.+2      	; 0x238a <write_file+0xd6>
    2388:	09 c1       	rjmp	.+530    	; 0x259c <write_file+0x2e8>
  else
  {
    cluster = get_set_free_cluster (NEXT_FREE, GET, 0);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	0e 94 be 09 	call	0x137c	; 0x137c <get_set_free_cluster>
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    if(cluster > total_clusters)
    239e:	80 91 4b 09 	lds	r24, 0x094B
    23a2:	90 91 4c 09 	lds	r25, 0x094C
    23a6:	a0 91 4d 09 	lds	r26, 0x094D
    23aa:	b0 91 4e 09 	lds	r27, 0x094E
    23ae:	82 17       	cp	r24, r18
    23b0:	93 07       	cpc	r25, r19
    23b2:	a4 07       	cpc	r26, r20
    23b4:	b5 07       	cpc	r27, r21
    23b6:	40 f4       	brcc	.+16     	; 0x23c8 <write_file+0x114>
      cluster = root_cluster;
    23b8:	20 91 6c 0d 	lds	r18, 0x0D6C
    23bc:	30 91 6d 0d 	lds	r19, 0x0D6D
    23c0:	40 91 6e 0d 	lds	r20, 0x0D6E
    23c4:	50 91 6f 0d 	lds	r21, 0x0D6F

    cluster = search_next_free_cluster(cluster);
    23c8:	ca 01       	movw	r24, r20
    23ca:	b9 01       	movw	r22, r18
    23cc:	0e 94 34 09 	call	0x1268	; 0x1268 <search_next_free_cluster>
    23d0:	3b 01       	movw	r6, r22
    23d2:	4c 01       	movw	r8, r24

    // No free cluster
    if(cluster == 0) return;
    23d4:	61 15       	cp	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	81 05       	cpc	r24, r1
    23da:	91 05       	cpc	r25, r1
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <write_file+0x12c>
    23de:	de c0       	rjmp	.+444    	; 0x259c <write_file+0x2e8>

    get_set_next_cluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0f ef       	ldi	r16, 0xFF	; 255
    23e4:	1f ef       	ldi	r17, 0xFF	; 255
    23e6:	2f ef       	ldi	r18, 0xFF	; 255
    23e8:	3f e0       	ldi	r19, 0x0F	; 15
    23ea:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>

    first_cluster_high = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    first_cluster_low = (unsigned int) ( cluster & 0x0000ffff);
    file_size = 0;
    23ee:	10 92 98 0d 	sts	0x0D98, r1
    23f2:	10 92 99 0d 	sts	0x0D99, r1
    23f6:	10 92 9a 0d 	sts	0x0D9A, r1
    23fa:	10 92 9b 0d 	sts	0x0D9B, r1
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	bb 24       	eor	r11, r11
  while(1)
  {
    if(start)
    {
      start = 0;
      start_block = get_first_sector (cluster) + sector;
    2402:	2b 2c       	mov	r2, r11
    2404:	33 24       	eor	r3, r3
    2406:	44 24       	eor	r4, r4
    2408:	55 24       	eor	r5, r5
    240a:	c4 01       	movw	r24, r8
    240c:	b3 01       	movw	r22, r6
    240e:	62 50       	subi	r22, 0x02	; 2
    2410:	70 40       	sbci	r23, 0x00	; 0
    2412:	80 40       	sbci	r24, 0x00	; 0
    2414:	90 40       	sbci	r25, 0x00	; 0
    file_size = 0;
  }

  while(1)
  {
    if(start)
    2416:	22 23       	and	r18, r18
    2418:	e1 f1       	breq	.+120    	; 0x2492 <write_file+0x1de>
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    241a:	20 91 f5 08 	lds	r18, 0x08F5
    241e:	30 91 f6 08 	lds	r19, 0x08F6
    2422:	e0 90 70 0d 	lds	r14, 0x0D70
    2426:	f0 90 71 0d 	lds	r15, 0x0D71
    242a:	00 91 72 0d 	lds	r16, 0x0D72
    242e:	10 91 73 0d 	lds	r17, 0x0D73
  while(1)
  {
    if(start)
    {
      start = 0;
      start_block = get_first_sector (cluster) + sector;
    2432:	e2 0c       	add	r14, r2
    2434:	f3 1c       	adc	r15, r3
    2436:	04 1d       	adc	r16, r4
    2438:	15 1d       	adc	r17, r5
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2442:	e6 0e       	add	r14, r22
    2444:	f7 1e       	adc	r15, r23
    2446:	08 1f       	adc	r16, r24
    2448:	19 1f       	adc	r17, r25
    244a:	e0 92 50 0b 	sts	0x0B50, r14
    244e:	f0 92 51 0b 	sts	0x0B51, r15
    2452:	00 93 52 0b 	sts	0x0B52, r16
    2456:	10 93 53 0b 	sts	0x0B53, r17
      sd_read_single_block (start_block);
    245a:	60 91 50 0b 	lds	r22, 0x0B50
    245e:	70 91 51 0b 	lds	r23, 0x0B51
    2462:	80 91 52 0b 	lds	r24, 0x0B52
    2466:	90 91 53 0b 	lds	r25, 0x0B53
    246a:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
      i = file_size % bytes_per_sector;
    246e:	20 91 f7 08 	lds	r18, 0x08F7
    2472:	30 91 f8 08 	lds	r19, 0x08F8
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	60 91 98 0d 	lds	r22, 0x0D98
    247e:	70 91 99 0d 	lds	r23, 0x0D99
    2482:	80 91 9a 0d 	lds	r24, 0x0D9A
    2486:	90 91 9b 0d 	lds	r25, 0x0D9B
    248a:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__udivmodsi4>
    248e:	1b 2d       	mov	r17, r11
    2490:	1f c0       	rjmp	.+62     	; 0x24d0 <write_file+0x21c>
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    2492:	20 91 f5 08 	lds	r18, 0x08F5
    2496:	30 91 f6 08 	lds	r19, 0x08F6
    249a:	e0 90 70 0d 	lds	r14, 0x0D70
    249e:	f0 90 71 0d 	lds	r15, 0x0D71
    24a2:	00 91 72 0d 	lds	r16, 0x0D72
    24a6:	10 91 73 0d 	lds	r17, 0x0D73
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    24b2:	e6 0e       	add	r14, r22
    24b4:	f7 1e       	adc	r15, r23
    24b6:	08 1f       	adc	r16, r24
    24b8:	19 1f       	adc	r17, r25
      i = file_size % bytes_per_sector;
      j = sector;
    }
    else
    {
      start_block = get_first_sector (cluster);
    24ba:	e0 92 50 0b 	sts	0x0B50, r14
    24be:	f0 92 51 0b 	sts	0x0B51, r15
    24c2:	00 93 52 0b 	sts	0x0B52, r16
    24c6:	10 93 53 0b 	sts	0x0B53, r17
    24ca:	10 e0       	ldi	r17, 0x00	; 0
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	20 91 98 0d 	lds	r18, 0x0D98
    24d4:	30 91 99 0d 	lds	r19, 0x0D99
    24d8:	40 91 9a 0d 	lds	r20, 0x0D9A
    24dc:	50 91 9b 0d 	lds	r21, 0x0D9B
          file_size--;
        }
        continue;
      }

      buffer[i++] = data;
    24e0:	fb 01       	movw	r30, r22
    24e2:	e1 5b       	subi	r30, 0xB1	; 177
    24e4:	f6 4f       	sbci	r31, 0xF6	; 246
    24e6:	10 82       	st	Z, r1
    24e8:	6f 5f       	subi	r22, 0xFF	; 255
    24ea:	7f 4f       	sbci	r23, 0xFF	; 255
    24ec:	2f 5f       	subi	r18, 0xFF	; 255
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	4f 4f       	sbci	r20, 0xFF	; 255
    24f2:	5f 4f       	sbci	r21, 0xFF	; 255
          file_size++;
        }
      }

      //though 'i' will never become greater than 512, it's kept here to avoid 
      if(i >= 512)   
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	60 30       	cpi	r22, 0x00	; 0
    24f8:	78 07       	cpc	r23, r24
    24fa:	90 f3       	brcs	.-28     	; 0x24e0 <write_file+0x22c>
    24fc:	20 93 98 0d 	sts	0x0D98, r18
    2500:	30 93 99 0d 	sts	0x0D99, r19
    2504:	40 93 9a 0d 	sts	0x0D9A, r20
    2508:	50 93 9b 0d 	sts	0x0D9B, r21
      {
        i = 0;
        error = sd_write_single_block (start_block);
    250c:	60 91 50 0b 	lds	r22, 0x0B50
    2510:	70 91 51 0b 	lds	r23, 0x0B51
    2514:	80 91 52 0b 	lds	r24, 0x0B52
    2518:	90 91 53 0b 	lds	r25, 0x0B53
    251c:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>
        j++;
    2520:	1f 5f       	subi	r17, 0xFF	; 255
        if(j == sector_per_cluster) {j = 0; break;}
    2522:	20 91 f5 08 	lds	r18, 0x08F5
    2526:	30 91 f6 08 	lds	r19, 0x08F6
    252a:	81 2f       	mov	r24, r17
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	82 17       	cp	r24, r18
    2530:	93 07       	cpc	r25, r19
    2532:	61 f4       	brne	.+24     	; 0x254c <write_file+0x298>
    }

    prev_cluster = cluster;

    // Look for a free cluster starting from the current cluster
    cluster = search_next_free_cluster(prev_cluster);
    2534:	c4 01       	movw	r24, r8
    2536:	b3 01       	movw	r22, r6
    2538:	0e 94 34 09 	call	0x1268	; 0x1268 <search_next_free_cluster>
    253c:	6b 01       	movw	r12, r22
    253e:	7c 01       	movw	r14, r24

    // No free cluster
    if(cluster == 0) return;
    2540:	61 15       	cp	r22, r1
    2542:	71 05       	cpc	r23, r1
    2544:	81 05       	cpc	r24, r1
    2546:	91 05       	cpc	r25, r1
    2548:	a9 f4       	brne	.+42     	; 0x2574 <write_file+0x2c0>
    254a:	28 c0       	rjmp	.+80     	; 0x259c <write_file+0x2e8>
      {
        i = 0;
        error = sd_write_single_block (start_block);
        j++;
        if(j == sector_per_cluster) {j = 0; break;}
        start_block++;
    254c:	80 91 50 0b 	lds	r24, 0x0B50
    2550:	90 91 51 0b 	lds	r25, 0x0B51
    2554:	a0 91 52 0b 	lds	r26, 0x0B52
    2558:	b0 91 53 0b 	lds	r27, 0x0B53
    255c:	01 96       	adiw	r24, 0x01	; 1
    255e:	a1 1d       	adc	r26, r1
    2560:	b1 1d       	adc	r27, r1
    2562:	80 93 50 0b 	sts	0x0B50, r24
    2566:	90 93 51 0b 	sts	0x0B51, r25
    256a:	a0 93 52 0b 	sts	0x0B52, r26
    256e:	b0 93 53 0b 	sts	0x0B53, r27
    2572:	ac cf       	rjmp	.-168    	; 0x24cc <write_file+0x218>
    cluster = search_next_free_cluster(prev_cluster);

    // No free cluster
    if(cluster == 0) return;

    get_set_next_cluster(prev_cluster, SET, cluster);
    2574:	c4 01       	movw	r24, r8
    2576:	b3 01       	movw	r22, r6
    2578:	41 e0       	ldi	r20, 0x01	; 1
    257a:	97 01       	movw	r18, r14
    257c:	86 01       	movw	r16, r12
    257e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    get_set_next_cluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2582:	c7 01       	movw	r24, r14
    2584:	b6 01       	movw	r22, r12
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0f ef       	ldi	r16, 0xFF	; 255
    258a:	1f ef       	ldi	r17, 0xFF	; 255
    258c:	2f ef       	ldi	r18, 0xFF	; 255
    258e:	3f e0       	ldi	r19, 0x0F	; 15
    2590:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	36 01       	movw	r6, r12
    2598:	47 01       	movw	r8, r14
    259a:	37 cf       	rjmp	.-402    	; 0x240a <write_file+0x156>
      else return;
    }
    if(cluster == 0) return;
    prev_cluster = cluster;
  }
}
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	bf 90       	pop	r11
    25aa:	af 90       	pop	r10
    25ac:	9f 90       	pop	r9
    25ae:	8f 90       	pop	r8
    25b0:	7f 90       	pop	r7
    25b2:	6f 90       	pop	r6
    25b4:	5f 90       	pop	r5
    25b6:	4f 90       	pop	r4
    25b8:	3f 90       	pop	r3
    25ba:	2f 90       	pop	r2
    25bc:	08 95       	ret

000025be <replace_the_contents_of_this_file_with>:
 * @param  file_content - unsighed char *, What to put into file_name
 * @return int - returns 0 if the file exists you are trying to overwrite
 *               returns 1 if the file does not exist
 */
int replace_the_contents_of_this_file_with (unsigned char *file_name, unsigned char *file_content)
{
    25be:	6f 92       	push	r6
    25c0:	7f 92       	push	r7
    25c2:	8f 92       	push	r8
    25c4:	9f 92       	push	r9
    25c6:	af 92       	push	r10
    25c8:	bf 92       	push	r11
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	9c 01       	movw	r18, r24
    25dc:	eb 01       	movw	r28, r22
  unsigned char j, error, append_file = 0;
  unsigned int i;
  struct dir_Structure *dir;
  unsigned long cluster, first_sector, cluster_count;

  if(read_file (VERIFY, file_name) == 1) 
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	b9 01       	movw	r22, r18
    25e2:	0e 94 90 10 	call	0x2120	; 0x2120 <read_file>
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	19 f0       	breq	.+6      	; 0x25f0 <replace_the_contents_of_this_file_with+0x32>
    25ea:	21 e0       	ldi	r18, 0x01	; 1
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	cf c0       	rjmp	.+414    	; 0x278e <replace_the_contents_of_this_file_with+0x1d0>
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    25f0:	a0 90 47 09 	lds	r10, 0x0947
    25f4:	b0 90 48 09 	lds	r11, 0x0948
    25f8:	c0 90 49 09 	lds	r12, 0x0949
    25fc:	d0 90 4a 09 	lds	r13, 0x094A
    2600:	8e ef       	ldi	r24, 0xFE	; 254
    2602:	9f ef       	ldi	r25, 0xFF	; 255
    2604:	af ef       	ldi	r26, 0xFF	; 255
    2606:	bf ef       	ldi	r27, 0xFF	; 255
    2608:	a8 0e       	add	r10, r24
    260a:	b9 1e       	adc	r11, r25
    260c:	ca 1e       	adc	r12, r26
    260e:	db 1e       	adc	r13, r27
    2610:	60 91 f5 08 	lds	r22, 0x08F5
    2614:	70 91 f6 08 	lds	r23, 0x08F6
    2618:	e0 90 70 0d 	lds	r14, 0x0D70
    261c:	f0 90 71 0d 	lds	r15, 0x0D71
    2620:	00 91 72 0d 	lds	r16, 0x0D72
    2624:	10 91 73 0d 	lds	r17, 0x0D73
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a6 01       	movw	r20, r12
    262e:	95 01       	movw	r18, r10
    2630:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2634:	3b 01       	movw	r6, r22
    2636:	4c 01       	movw	r8, r24
    2638:	6e 0c       	add	r6, r14
    263a:	7f 1c       	adc	r7, r15
    263c:	80 1e       	adc	r8, r16
    263e:	91 1e       	adc	r9, r17
  {
    append_file = 1;
    cluster = append_start_cluster;
    cluster_count=0;
    first_sector = get_first_sector (cluster);
    start_block = get_first_sector (cluster);
    2640:	60 91 f5 08 	lds	r22, 0x08F5
    2644:	70 91 f6 08 	lds	r23, 0x08F6
    2648:	e0 90 70 0d 	lds	r14, 0x0D70
    264c:	f0 90 71 0d 	lds	r15, 0x0D71
    2650:	00 91 72 0d 	lds	r16, 0x0D72
    2654:	10 91 73 0d 	lds	r17, 0x0D73
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2660:	e6 0e       	add	r14, r22
    2662:	f7 1e       	adc	r15, r23
    2664:	08 1f       	adc	r16, r24
    2666:	19 1f       	adc	r17, r25
    2668:	e0 92 50 0b 	sts	0x0B50, r14
    266c:	f0 92 51 0b 	sts	0x0B51, r15
    2670:	00 93 52 0b 	sts	0x0B52, r16
    2674:	10 93 53 0b 	sts	0x0B53, r17
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	34 c0       	rjmp	.+104    	; 0x26e4 <replace_the_contents_of_this_file_with+0x126>
    i=0;
    j=0;
    while(*file_content != '$')
    {      
      buffer[i++]=*file_content;
    267c:	fc 01       	movw	r30, r24
    267e:	e1 5b       	subi	r30, 0xB1	; 177
    2680:	f6 4f       	sbci	r31, 0xF6	; 246
    2682:	20 83       	st	Z, r18
    2684:	01 96       	adiw	r24, 0x01	; 1
      file_content++;
    2686:	21 96       	adiw	r28, 0x01	; 1
      if(i >= 512)
    2688:	a2 e0       	ldi	r26, 0x02	; 2
    268a:	80 30       	cpi	r24, 0x00	; 0
    268c:	9a 07       	cpc	r25, r26
    268e:	60 f1       	brcs	.+88     	; 0x26e8 <replace_the_contents_of_this_file_with+0x12a>
      {        
        i=0;
        error = sd_write_single_block (start_block);
    2690:	60 91 50 0b 	lds	r22, 0x0B50
    2694:	70 91 51 0b 	lds	r23, 0x0B51
    2698:	80 91 52 0b 	lds	r24, 0x0B52
    269c:	90 91 53 0b 	lds	r25, 0x0B53
    26a0:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>
        j++;
    26a4:	1f 5f       	subi	r17, 0xFF	; 255
        if(j == sector_per_cluster) {j = 0; break;}
    26a6:	20 91 f5 08 	lds	r18, 0x08F5
    26aa:	30 91 f6 08 	lds	r19, 0x08F6
    26ae:	81 2f       	mov	r24, r17
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	82 17       	cp	r24, r18
    26b4:	93 07       	cpc	r25, r19
    26b6:	19 f4       	brne	.+6      	; 0x26be <replace_the_contents_of_this_file_with+0x100>
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	18 c0       	rjmp	.+48     	; 0x26ee <replace_the_contents_of_this_file_with+0x130>
        start_block++; 
    26be:	80 91 50 0b 	lds	r24, 0x0B50
    26c2:	90 91 51 0b 	lds	r25, 0x0B51
    26c6:	a0 91 52 0b 	lds	r26, 0x0B52
    26ca:	b0 91 53 0b 	lds	r27, 0x0B53
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	a1 1d       	adc	r26, r1
    26d2:	b1 1d       	adc	r27, r1
    26d4:	80 93 50 0b 	sts	0x0B50, r24
    26d8:	90 93 51 0b 	sts	0x0B51, r25
    26dc:	a0 93 52 0b 	sts	0x0B52, r26
    26e0:	b0 93 53 0b 	sts	0x0B53, r27
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    cluster_count=0;
    first_sector = get_first_sector (cluster);
    start_block = get_first_sector (cluster);
    i=0;
    j=0;
    while(*file_content != '$')
    26e8:	28 81       	ld	r18, Y
    26ea:	24 32       	cpi	r18, 0x24	; 36
    26ec:	39 f6       	brne	.-114    	; 0x267c <replace_the_contents_of_this_file_with+0xbe>
        j++;
        if(j == sector_per_cluster) {j = 0; break;}
        start_block++; 
      }
    }
    if(*file_content == '$')
    26ee:	68 81       	ld	r22, Y
    26f0:	64 32       	cpi	r22, 0x24	; 36
    26f2:	09 f5       	brne	.+66     	; 0x2736 <replace_the_contents_of_this_file_with+0x178>
    {
      buffer[i++] = '$';
    26f4:	fc 01       	movw	r30, r24
    26f6:	e1 5b       	subi	r30, 0xB1	; 177
    26f8:	f6 4f       	sbci	r31, 0xF6	; 246
    26fa:	60 83       	st	Z, r22
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <replace_the_contents_of_this_file_with+0x148>
      for(;i < 512; i++)  //fill the rest of the buffer with 0x00
        buffer[i] = 0x00;
    26fe:	fc 01       	movw	r30, r24
    2700:	e1 5b       	subi	r30, 0xB1	; 177
    2702:	f6 4f       	sbci	r31, 0xF6	; 246
    2704:	10 82       	st	Z, r1
      }
    }
    if(*file_content == '$')
    {
      buffer[i++] = '$';
      for(;i < 512; i++)  //fill the rest of the buffer with 0x00
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	b2 e0       	ldi	r27, 0x02	; 2
    270a:	80 30       	cpi	r24, 0x00	; 0
    270c:	9b 07       	cpc	r25, r27
    270e:	b8 f3       	brcs	.-18     	; 0x26fe <replace_the_contents_of_this_file_with+0x140>
        buffer[i] = 0x00;
      error = sd_write_single_block (start_block);
    2710:	60 91 50 0b 	lds	r22, 0x0B50
    2714:	70 91 51 0b 	lds	r23, 0x0B51
    2718:	80 91 52 0b 	lds	r24, 0x0B52
    271c:	90 91 53 0b 	lds	r25, 0x0B53
    2720:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>
    2724:	88 ee       	ldi	r24, 0xE8	; 232
    2726:	93 e0       	ldi	r25, 0x03	; 3
    2728:	28 ec       	ldi	r18, 0xC8	; 200
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	f9 01       	movw	r30, r18
    272e:	31 97       	sbiw	r30, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <replace_the_contents_of_this_file_with+0x170>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	d9 f7       	brne	.-10     	; 0x272c <replace_the_contents_of_this_file_with+0x16e>
      _delay_ms(100);
    }
    sd_read_single_block(first_sector);    
    2736:	c4 01       	movw	r24, r8
    2738:	b3 01       	movw	r22, r6
    273a:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    273e:	88 ee       	ldi	r24, 0xE8	; 232
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	28 ec       	ldi	r18, 0xC8	; 200
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	f9 01       	movw	r30, r18
    2748:	31 97       	sbiw	r30, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <replace_the_contents_of_this_file_with+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274e:	d9 f7       	brne	.-10     	; 0x2746 <replace_the_contents_of_this_file_with+0x188>
    _delay_ms(100);
    dir = (struct dir_Structure *) &buffer[0]; 
    dir->file_size = file_size;
    2750:	80 91 98 0d 	lds	r24, 0x0D98
    2754:	90 91 99 0d 	lds	r25, 0x0D99
    2758:	a0 91 9a 0d 	lds	r26, 0x0D9A
    275c:	b0 91 9b 0d 	lds	r27, 0x0D9B
    2760:	80 93 6b 09 	sts	0x096B, r24
    2764:	90 93 6c 09 	sts	0x096C, r25
    2768:	a0 93 6d 09 	sts	0x096D, r26
    276c:	b0 93 6e 09 	sts	0x096E, r27
    //if we are writing the modes file - the next line rewrites stuff written in
    // above
    sd_write_single_block (first_sector);
    2770:	c4 01       	movw	r24, r8
    2772:	b3 01       	movw	r22, r6
    2774:	0e 94 c1 06 	call	0xd82	; 0xd82 <sd_write_single_block>
    2778:	88 ee       	ldi	r24, 0xE8	; 232
    277a:	93 e0       	ldi	r25, 0x03	; 3
    277c:	28 ec       	ldi	r18, 0xC8	; 200
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	f9 01       	movw	r30, r18
    2782:	31 97       	sbiw	r30, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <replace_the_contents_of_this_file_with+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	d9 f7       	brne	.-10     	; 0x2780 <replace_the_contents_of_this_file_with+0x1c2>
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    _delay_ms(100);
    return 0;
  }
  else return 1;
}
    278e:	c9 01       	movw	r24, r18
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
    27a0:	bf 90       	pop	r11
    27a2:	af 90       	pop	r10
    27a4:	9f 90       	pop	r9
    27a6:	8f 90       	pop	r8
    27a8:	7f 90       	pop	r7
    27aa:	6f 90       	pop	r6
    27ac:	08 95       	ret

000027ae <find_word_in_cluster>:
 * @param arr_cluster_index - unsigned long, this is the number of the cluster you
 *        are searching in
 * @return bool - return whether or not you found value in cluster
 */
bool find_word_in_cluster(unsigned char *word, unsigned long arr_cluster_index)
{
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	28 97       	sbiw	r28, 0x08	; 8
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	4b 83       	std	Y+3, r20	; 0x03
    27e8:	5c 83       	std	Y+4, r21	; 0x04
    27ea:	6d 83       	std	Y+5, r22	; 0x05
    27ec:	7e 83       	std	Y+6, r23	; 0x06
  unsigned long word_index, sector_index; // index into word, sector
  unsigned long cluster_index;  // Index into cluster

  // First, find out what cluster we need
  // uses global: dict_clusters
  unsigned long first_sector = get_first_sector(dict_clusters[arr_cluster_index]);
    27ee:	58 87       	std	Y+8, r21	; 0x08
    27f0:	4f 83       	std	Y+7, r20	; 0x07
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    27f2:	20 91 f5 08 	lds	r18, 0x08F5
    27f6:	30 91 f6 08 	lds	r19, 0x08F6
    27fa:	e0 90 70 0d 	lds	r14, 0x0D70
    27fe:	f0 90 71 0d 	lds	r15, 0x0D71
    2802:	00 91 72 0d 	lds	r16, 0x0D72
    2806:	10 91 73 0d 	lds	r17, 0x0D73
    280a:	ca 01       	movw	r24, r20
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	e0 91 1e 09 	lds	r30, 0x091E
    2818:	f0 91 1f 09 	lds	r31, 0x091F
    281c:	e8 0f       	add	r30, r24
    281e:	f9 1f       	adc	r31, r25
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	62 50       	subi	r22, 0x02	; 2
    282a:	70 40       	sbci	r23, 0x00	; 0
    282c:	80 40       	sbci	r24, 0x00	; 0
    282e:	90 40       	sbci	r25, 0x00	; 0
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2838:	1b 01       	movw	r2, r22
    283a:	2c 01       	movw	r4, r24
    283c:	2e 0c       	add	r2, r14
    283e:	3f 1c       	adc	r3, r15
    2840:	40 1e       	adc	r4, r16
    2842:	51 1e       	adc	r5, r17

  // First, find out what cluster we need
  // uses global: dict_clusters
  unsigned long first_sector = get_first_sector(dict_clusters[arr_cluster_index]);
  unsigned char* sector_pointer = (unsigned char*)dict_buffer; // Start at the beginning of the buffer
  char overlap = preceeding_word[arr_cluster_index];
    2844:	20 91 fa 08 	lds	r18, 0x08FA
    2848:	30 91 fb 08 	lds	r19, 0x08FB
    284c:	4b 81       	ldd	r20, Y+3	; 0x03
    284e:	5c 81       	ldd	r21, Y+4	; 0x04
    2850:	24 0f       	add	r18, r20
    2852:	35 1f       	adc	r19, r21
    2854:	d9 01       	movw	r26, r18
    2856:	1c 91       	ld	r17, X
    PRINTF(word);
    TX_NEWLINE_PC;*/

  // Read in the first sector to 'buffer'
  // uses global: buffer
  sd_read_single_dict_block(first_sector);
    2858:	c2 01       	movw	r24, r4
    285a:	b1 01       	movw	r22, r2
    285c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <sd_read_single_dict_block>

  sector_index = 0;
  word_index = 0;
  // Determine where we should begin scanning
  if (overlap == 1)
    2860:	11 30       	cpi	r17, 0x01	; 1
    2862:	21 f0       	breq	.+8      	; 0x286c <find_word_in_cluster+0xbe>
    2864:	ee 24       	eor	r14, r14
    2866:	ff 24       	eor	r15, r15
    2868:	87 01       	movw	r16, r14
    286a:	14 c0       	rjmp	.+40     	; 0x2894 <find_word_in_cluster+0xe6>
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	70 e0       	ldi	r23, 0x00	; 0
  {
    while (sector_pointer[sector_index] != '\n') sector_index++;
    2878:	fb 01       	movw	r30, r22
    287a:	e5 59       	subi	r30, 0x95	; 149
    287c:	f4 4f       	sbci	r31, 0xF4	; 244
    287e:	80 81       	ld	r24, Z
    2880:	6f 5f       	subi	r22, 0xFF	; 255
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	2f 5f       	subi	r18, 0xFF	; 255
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	4f 4f       	sbci	r20, 0xFF	; 255
    288a:	5f 4f       	sbci	r21, 0xFF	; 255
    288c:	8a 30       	cpi	r24, 0x0A	; 10
    288e:	a1 f7       	brne	.-24     	; 0x2878 <find_word_in_cluster+0xca>
    sector_index++; // Start after newline
    2890:	79 01       	movw	r14, r18
    2892:	8a 01       	movw	r16, r20
    2894:	66 24       	eor	r6, r6
    2896:	77 24       	eor	r7, r7
    2898:	43 01       	movw	r8, r6
    289a:	aa 24       	eor	r10, r10
    289c:	bb 24       	eor	r11, r11
    289e:	65 01       	movw	r12, r10
    28a0:	5a c0       	rjmp	.+180    	; 0x2956 <find_word_in_cluster+0x1a8>

  // Loop through all of the sectors in this cluster searching for word
  for(cluster_index = 0; cluster_index < sector_per_cluster; cluster_index++)
  {
    // Repopulate the buffer with the next sector
    sd_read_single_dict_block(first_sector + cluster_index);
    28a2:	c6 01       	movw	r24, r12
    28a4:	b5 01       	movw	r22, r10
    28a6:	62 0d       	add	r22, r2
    28a8:	73 1d       	adc	r23, r3
    28aa:	84 1d       	adc	r24, r4
    28ac:	95 1d       	adc	r25, r5
    28ae:	0e 94 0f 07 	call	0xe1e	; 0xe1e <sd_read_single_dict_block>


    // Reset the sector index if we overflowed last time
    // We want to avoid resetting after calculating the first word the first time,
    // or if we didn't get to the end of the sector for some other reason
    if (sector_index >= BUFFER_SIZE) sector_index = 0;
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	eb 16       	cp	r14, r27
    28b6:	b2 e0       	ldi	r27, 0x02	; 2
    28b8:	fb 06       	cpc	r15, r27
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	0b 07       	cpc	r16, r27
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	1b 07       	cpc	r17, r27
    28c2:	18 f0       	brcs	.+6      	; 0x28ca <find_word_in_cluster+0x11c>
    28c4:	ee 24       	eor	r14, r14
    28c6:	ff 24       	eor	r15, r15
    28c8:	87 01       	movw	r16, r14

    while (sector_index < BUFFER_SIZE)
    {
      // Check to see if we've successfully found the word
      if (word[word_index] == '\0' && sector_pointer[sector_index] == '\r') return true;
    28ca:	e9 81       	ldd	r30, Y+1	; 0x01
    28cc:	fa 81       	ldd	r31, Y+2	; 0x02
    28ce:	e6 0d       	add	r30, r6
    28d0:	f7 1d       	adc	r31, r7
    28d2:	e0 81       	ld	r30, Z
    28d4:	d7 01       	movw	r26, r14
    28d6:	a5 59       	subi	r26, 0x95	; 149
    28d8:	b4 4f       	sbci	r27, 0xF4	; 244
    28da:	ee 23       	and	r30, r30
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <find_word_in_cluster+0x136>
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	8c 91       	ld	r24, X
    28e2:	95 c0       	rjmp	.+298    	; 0x2a0e <find_word_in_cluster+0x260>
      // If we get to the end of the word in any other way, abort
      else if (word[word_index] == '\0') return false;
      // Otherwise, check to see if this is a possible match
      else if (word[word_index] == sector_pointer[sector_index])
    28e4:	8c 91       	ld	r24, X
    28e6:	e8 17       	cp	r30, r24
    28e8:	81 f4       	brne	.+32     	; 0x290a <find_word_in_cluster+0x15c>
      {
        word_index++;
    28ea:	08 94       	sec
    28ec:	61 1c       	adc	r6, r1
    28ee:	71 1c       	adc	r7, r1
    28f0:	81 1c       	adc	r8, r1
    28f2:	91 1c       	adc	r9, r1
        sector_index++;
    28f4:	08 94       	sec
    28f6:	e1 1c       	adc	r14, r1
    28f8:	f1 1c       	adc	r15, r1
    28fa:	01 1d       	adc	r16, r1
    28fc:	11 1d       	adc	r17, r1
    28fe:	1c c0       	rjmp	.+56     	; 0x2938 <find_word_in_cluster+0x18a>
      else
      {
        word_index = 0;
        while(sector_pointer[sector_index] != '\n' && sector_index < BUFFER_SIZE)
        {
          sector_index++;
    2900:	08 94       	sec
    2902:	e1 1c       	adc	r14, r1
    2904:	f1 1c       	adc	r15, r1
    2906:	01 1d       	adc	r16, r1
    2908:	11 1d       	adc	r17, r1
      }
      // Otherwise, the word is not a possible match. Advance until we can try again.
      else
      {
        word_index = 0;
        while(sector_pointer[sector_index] != '\n' && sector_index < BUFFER_SIZE)
    290a:	f7 01       	movw	r30, r14
    290c:	e5 59       	subi	r30, 0x95	; 149
    290e:	f4 4f       	sbci	r31, 0xF4	; 244
    2910:	80 81       	ld	r24, Z
    2912:	8a 30       	cpi	r24, 0x0A	; 10
    2914:	49 f0       	breq	.+18     	; 0x2928 <find_word_in_cluster+0x17a>
    2916:	e0 e0       	ldi	r30, 0x00	; 0
    2918:	ee 16       	cp	r14, r30
    291a:	e2 e0       	ldi	r30, 0x02	; 2
    291c:	fe 06       	cpc	r15, r30
    291e:	e0 e0       	ldi	r30, 0x00	; 0
    2920:	0e 07       	cpc	r16, r30
    2922:	e0 e0       	ldi	r30, 0x00	; 0
    2924:	1e 07       	cpc	r17, r30
    2926:	61 f7       	brne	.-40     	; 0x2900 <find_word_in_cluster+0x152>
        {
          sector_index++;
        }
        sector_index++; // skip the '\n' before a new word
    2928:	08 94       	sec
    292a:	e1 1c       	adc	r14, r1
    292c:	f1 1c       	adc	r15, r1
    292e:	01 1d       	adc	r16, r1
    2930:	11 1d       	adc	r17, r1
    2932:	66 24       	eor	r6, r6
    2934:	77 24       	eor	r7, r7
    2936:	43 01       	movw	r8, r6
    // Reset the sector index if we overflowed last time
    // We want to avoid resetting after calculating the first word the first time,
    // or if we didn't get to the end of the sector for some other reason
    if (sector_index >= BUFFER_SIZE) sector_index = 0;

    while (sector_index < BUFFER_SIZE)
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	ef 16       	cp	r14, r31
    293c:	f2 e0       	ldi	r31, 0x02	; 2
    293e:	ff 06       	cpc	r15, r31
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	0f 07       	cpc	r16, r31
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	1f 07       	cpc	r17, r31
    2948:	08 f4       	brcc	.+2      	; 0x294c <find_word_in_cluster+0x19e>
    294a:	bf cf       	rjmp	.-130    	; 0x28ca <find_word_in_cluster+0x11c>
    while (sector_pointer[sector_index] != '\n') sector_index++;
    sector_index++; // Start after newline
  }

  // Loop through all of the sectors in this cluster searching for word
  for(cluster_index = 0; cluster_index < sector_per_cluster; cluster_index++)
    294c:	08 94       	sec
    294e:	a1 1c       	adc	r10, r1
    2950:	b1 1c       	adc	r11, r1
    2952:	c1 1c       	adc	r12, r1
    2954:	d1 1c       	adc	r13, r1
    2956:	80 91 f5 08 	lds	r24, 0x08F5
    295a:	90 91 f6 08 	lds	r25, 0x08F6
    295e:	a0 e0       	ldi	r26, 0x00	; 0
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	a8 16       	cp	r10, r24
    2964:	b9 06       	cpc	r11, r25
    2966:	ca 06       	cpc	r12, r26
    2968:	db 06       	cpc	r13, r27
    296a:	08 f4       	brcc	.+2      	; 0x296e <find_word_in_cluster+0x1c0>
    296c:	9a cf       	rjmp	.-204    	; 0x28a2 <find_word_in_cluster+0xf4>


  //now we need to check if our word continues on to the next cluster, because overlapping words are our
  //responsibility
  //if we are not the last cluster 
  if(arr_cluster_index != (dict_cluster_cnt -1)){
    296e:	80 91 41 09 	lds	r24, 0x0941
    2972:	90 91 42 09 	lds	r25, 0x0942
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	a0 e0       	ldi	r26, 0x00	; 0
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	2b 81       	ldd	r18, Y+3	; 0x03
    297e:	3c 81       	ldd	r19, Y+4	; 0x04
    2980:	4d 81       	ldd	r20, Y+5	; 0x05
    2982:	5e 81       	ldd	r21, Y+6	; 0x06
    2984:	28 17       	cp	r18, r24
    2986:	39 07       	cpc	r19, r25
    2988:	4a 07       	cpc	r20, r26
    298a:	5b 07       	cpc	r21, r27
    298c:	09 f4       	brne	.+2      	; 0x2990 <find_word_in_cluster+0x1e2>
    298e:	54 c0       	rjmp	.+168    	; 0x2a38 <find_word_in_cluster+0x28a>
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    2990:	20 91 f5 08 	lds	r18, 0x08F5
    2994:	30 91 f6 08 	lds	r19, 0x08F6
    2998:	e0 90 70 0d 	lds	r14, 0x0D70
    299c:	f0 90 71 0d 	lds	r15, 0x0D71
    29a0:	00 91 72 0d 	lds	r16, 0x0D72
    29a4:	10 91 73 0d 	lds	r17, 0x0D73
  //now we need to check if our word continues on to the next cluster, because overlapping words are our
  //responsibility
  //if we are not the last cluster 
  if(arr_cluster_index != (dict_cluster_cnt -1)){
    first_sector = get_first_sector(dict_clusters[arr_cluster_index + 1]);
    sd_read_single_dict_block(first_sector);
    29a8:	4f 81       	ldd	r20, Y+7	; 0x07
    29aa:	58 85       	ldd	r21, Y+8	; 0x08
    29ac:	4f 5f       	subi	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	44 0f       	add	r20, r20
    29b2:	55 1f       	adc	r21, r21
    29b4:	44 0f       	add	r20, r20
    29b6:	55 1f       	adc	r21, r21
    29b8:	e0 91 1e 09 	lds	r30, 0x091E
    29bc:	f0 91 1f 09 	lds	r31, 0x091F
    29c0:	e4 0f       	add	r30, r20
    29c2:	f5 1f       	adc	r31, r21
    29c4:	60 81       	ld	r22, Z
    29c6:	71 81       	ldd	r23, Z+1	; 0x01
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	62 50       	subi	r22, 0x02	; 2
    29ce:	70 40       	sbci	r23, 0x00	; 0
    29d0:	80 40       	sbci	r24, 0x00	; 0
    29d2:	90 40       	sbci	r25, 0x00	; 0
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    29dc:	e6 0e       	add	r14, r22
    29de:	f7 1e       	adc	r15, r23
    29e0:	08 1f       	adc	r16, r24
    29e2:	19 1f       	adc	r17, r25
    29e4:	c8 01       	movw	r24, r16
    29e6:	b7 01       	movw	r22, r14
    29e8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <sd_read_single_dict_block>
    29ec:	a9 81       	ldd	r26, Y+1	; 0x01
    29ee:	ba 81       	ldd	r27, Y+2	; 0x02
    29f0:	a6 0d       	add	r26, r6
    29f2:	b7 1d       	adc	r27, r7
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	70 e0       	ldi	r23, 0x00	; 0

    while (sector_index < BUFFER_SIZE)
    {
      // Check to see if we've successfully found the word
      //@TODO - ALEX, need to change this back to '/0'
      if (word[word_index] == '\0' && sector_pointer[sector_index] == '\r') return true;
    2a00:	9c 91       	ld	r25, X
    2a02:	99 23       	and	r25, r25
    2a04:	41 f4       	brne	.+16     	; 0x2a16 <find_word_in_cluster+0x268>
    2a06:	f9 01       	movw	r30, r18
    2a08:	e5 59       	subi	r30, 0x95	; 149
    2a0a:	f4 4f       	sbci	r31, 0xF4	; 244
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8d 30       	cpi	r24, 0x0D	; 13
    2a10:	a1 f4       	brne	.+40     	; 0x2a3a <find_word_in_cluster+0x28c>
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	12 c0       	rjmp	.+36     	; 0x2a3a <find_word_in_cluster+0x28c>
      // If we get to the end of the word in any other way, abort
      else if (word[word_index] == '\0') return false;
      // Otherwise, check to see if this is a possible match
      else if (word[word_index] == sector_pointer[sector_index])
    2a16:	fb 01       	movw	r30, r22
    2a18:	e5 59       	subi	r30, 0x95	; 149
    2a1a:	f4 4f       	sbci	r31, 0xF4	; 244
    2a1c:	80 81       	ld	r24, Z
    2a1e:	98 17       	cp	r25, r24
    2a20:	59 f4       	brne	.+22     	; 0x2a38 <find_word_in_cluster+0x28a>
      {
        word_index++;
        sector_index++;
    2a22:	2f 5f       	subi	r18, 0xFF	; 255
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	4f 4f       	sbci	r20, 0xFF	; 255
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	6f 5f       	subi	r22, 0xFF	; 255
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	11 96       	adiw	r26, 0x01	; 1
  if(arr_cluster_index != (dict_cluster_cnt -1)){
    first_sector = get_first_sector(dict_clusters[arr_cluster_index + 1]);
    sd_read_single_dict_block(first_sector);
    sector_index = 0;

    while (sector_index < BUFFER_SIZE)
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	60 30       	cpi	r22, 0x00	; 0
    2a34:	78 07       	cpc	r23, r24
    2a36:	21 f7       	brne	.-56     	; 0x2a00 <find_word_in_cluster+0x252>
    2a38:	90 e0       	ldi	r25, 0x00	; 0


  // If we went throught the entire cluster and couldn't find the word, word not in cluster
  return false;

}
    2a3a:	89 2f       	mov	r24, r25
    2a3c:	28 96       	adiw	r28, 0x08	; 8
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	ff 90       	pop	r15
    2a52:	ef 90       	pop	r14
    2a54:	df 90       	pop	r13
    2a56:	cf 90       	pop	r12
    2a58:	bf 90       	pop	r11
    2a5a:	af 90       	pop	r10
    2a5c:	9f 90       	pop	r9
    2a5e:	8f 90       	pop	r8
    2a60:	7f 90       	pop	r7
    2a62:	6f 90       	pop	r6
    2a64:	5f 90       	pop	r5
    2a66:	4f 90       	pop	r4
    2a68:	3f 90       	pop	r3
    2a6a:	2f 90       	pop	r2
    2a6c:	08 95       	ret

00002a6e <bin_srch_dict>:
 * @return bool - returns whether or not you have found word
 * @TODO - NEED TO FIX WORD - IT IS GETTTING CORRUPTED
 * @TODO - NEED TO TAKE EDGE CASES OFF of CLUSTERS- WORDS that overlap clusters
 */
bool bin_srch_dict(unsigned char *word)
{
    2a6e:	8f 92       	push	r8
    2a70:	9f 92       	push	r9
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	4c 01       	movw	r8, r24
  bool found = false;
  int cluster_cnt = dict_cluster_cnt;
    2a88:	40 91 41 09 	lds	r20, 0x0941
    2a8c:	50 91 42 09 	lds	r21, 0x0942
  int cmp_wrd = 0;
  int mid;
  int cluster;
  struct dir_Structure *dir;

  dir = dict_dir;
    2a90:	e0 91 96 0d 	lds	r30, 0x0D96
    2a94:	f0 91 97 0d 	lds	r31, 0x0D97
  if(dir == 0)
    2a98:	30 97       	sbiw	r30, 0x00	; 0
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <bin_srch_dict+0x30>
    2a9c:	76 c0       	rjmp	.+236    	; 0x2b8a <bin_srch_dict+0x11c>
bool bin_srch_dict(unsigned char *word)
{
  bool found = false;
  int cluster_cnt = dict_cluster_cnt;
  unsigned long curr_cluster, first_sector;
  int hi = cluster_cnt - 1;
    2a9e:	5a 01       	movw	r10, r20
    2aa0:	08 94       	sec
    2aa2:	a1 08       	sbc	r10, r1
    2aa4:	b1 08       	sbc	r11, r1



  cluster = (((unsigned long) dir->first_cluster_hi) << 16) | dir->first_cluster_lo;

  file_size = dir->file_size;
    2aa6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2aa8:	95 8d       	ldd	r25, Z+29	; 0x1d
    2aaa:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2aac:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2aae:	80 93 98 0d 	sts	0x0D98, r24
    2ab2:	90 93 99 0d 	sts	0x0D99, r25
    2ab6:	a0 93 9a 0d 	sts	0x0D9A, r26
    2aba:	b0 93 9b 0d 	sts	0x0D9B, r27
    2abe:	cc 24       	eor	r12, r12
    2ac0:	dd 24       	eor	r13, r13
    2ac2:	4a c0       	rjmp	.+148    	; 0x2b58 <bin_srch_dict+0xea>


  //search for the cluster that contains the word
  while((hi - lo) > 1){

    mid = (hi + lo) / 2;
    2ac4:	c6 01       	movw	r24, r12
    2ac6:	8a 0d       	add	r24, r10
    2ac8:	9b 1d       	adc	r25, r11
    2aca:	62 e0       	ldi	r22, 0x02	; 2
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    2ad2:	eb 01       	movw	r28, r22
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    2ad4:	20 91 f5 08 	lds	r18, 0x08F5
    2ad8:	30 91 f6 08 	lds	r19, 0x08F6
    2adc:	e0 90 70 0d 	lds	r14, 0x0D70
    2ae0:	f0 90 71 0d 	lds	r15, 0x0D71
    2ae4:	00 91 72 0d 	lds	r16, 0x0D72
    2ae8:	10 91 73 0d 	lds	r17, 0x0D73
    mid = (hi + lo) / 2;
    curr_cluster = dict_clusters[mid];
    first_sector = get_first_sector (curr_cluster);

    //store these values into the buffer array 
    sd_read_single_dict_block(first_sector);
    2aec:	cb 01       	movw	r24, r22
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	e0 91 1e 09 	lds	r30, 0x091E
    2afa:	f0 91 1f 09 	lds	r31, 0x091F
    2afe:	e8 0f       	add	r30, r24
    2b00:	f9 1f       	adc	r31, r25
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	62 50       	subi	r22, 0x02	; 2
    2b0c:	70 40       	sbci	r23, 0x00	; 0
    2b0e:	80 40       	sbci	r24, 0x00	; 0
    2b10:	90 40       	sbci	r25, 0x00	; 0
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2b1a:	e6 0e       	add	r14, r22
    2b1c:	f7 1e       	adc	r15, r23
    2b1e:	08 1f       	adc	r16, r24
    2b20:	19 1f       	adc	r17, r25
    2b22:	c8 01       	movw	r24, r16
    2b24:	b7 01       	movw	r22, r14
    2b26:	0e 94 0f 07 	call	0xe1e	; 0xe1e <sd_read_single_dict_block>

    //this should return 0 for found, 1 for less then first, 2 for greater then first
    //2nd argument tells whether or last word in cluster crosses into this cluster
    cmp_wrd = check_first_full_word(word, preceeding_word[mid]);
    2b2a:	e0 91 fa 08 	lds	r30, 0x08FA
    2b2e:	f0 91 fb 08 	lds	r31, 0x08FB
    2b32:	ec 0f       	add	r30, r28
    2b34:	fd 1f       	adc	r31, r29
    2b36:	c4 01       	movw	r24, r8
    2b38:	60 81       	ld	r22, Z
    2b3a:	0e 94 96 07 	call	0xf2c	; 0xf2c <check_first_full_word>



    if(cmp_wrd == 0){
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	31 f1       	breq	.+76     	; 0x2b8e <bin_srch_dict+0x120>
      found = true;
      break;
    }

    else if(cmp_wrd == 1){
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	91 05       	cpc	r25, r1
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <bin_srch_dict+0xe4>
      hi = mid - 1;
    2b48:	5e 01       	movw	r10, r28
    2b4a:	08 94       	sec
    2b4c:	a1 08       	sbc	r10, r1
    2b4e:	b1 08       	sbc	r11, r1
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <bin_srch_dict+0xea>
    }

    else if(cmp_wrd == 2){
    2b52:	02 97       	sbiw	r24, 0x02	; 2
    2b54:	d1 f4       	brne	.+52     	; 0x2b8a <bin_srch_dict+0x11c>
    2b56:	6e 01       	movw	r12, r28

  file_size = dir->file_size;


  //search for the cluster that contains the word
  while((hi - lo) > 1){
    2b58:	c5 01       	movw	r24, r10
    2b5a:	8c 19       	sub	r24, r12
    2b5c:	9d 09       	sbc	r25, r13
    2b5e:	02 97       	sbiw	r24, 0x02	; 2
    2b60:	0c f0       	brlt	.+2      	; 0x2b64 <bin_srch_dict+0xf6>
    2b62:	b0 cf       	rjmp	.-160    	; 0x2ac4 <bin_srch_dict+0x56>
    2b64:	22 c0       	rjmp	.+68     	; 0x2baa <bin_srch_dict+0x13c>

  //if you have narrowed it down to the sector that is pointed at by lo
  if(found == false){
    if(find_word_in_cluster(word, lo))
      return true;
    PRINTF("DONE WIHT FIRST\r\n");        
    2b66:	81 e6       	ldi	r24, 0x61	; 97
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>

    if(find_word_in_cluster(word, hi))
    2b6e:	a5 01       	movw	r20, r10
    2b70:	66 27       	eor	r22, r22
    2b72:	57 fd       	sbrc	r21, 7
    2b74:	60 95       	com	r22
    2b76:	76 2f       	mov	r23, r22
    2b78:	c4 01       	movw	r24, r8
    2b7a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <find_word_in_cluster>
    2b7e:	88 23       	and	r24, r24
    2b80:	31 f4       	brne	.+12     	; 0x2b8e <bin_srch_dict+0x120>
      return true;

    PRINTF("DONE WIHT second\r\n"); 
    2b82:	83 e7       	ldi	r24, 0x73	; 115
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
    //if you get here, that means that you did not have find the word in any part of the cluster
    //it should be in
    return false;
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <bin_srch_dict+0x122>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1





}
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	ff 90       	pop	r15
    2b9a:	ef 90       	pop	r14
    2b9c:	df 90       	pop	r13
    2b9e:	cf 90       	pop	r12
    2ba0:	bf 90       	pop	r11
    2ba2:	af 90       	pop	r10
    2ba4:	9f 90       	pop	r9
    2ba6:	8f 90       	pop	r8
    2ba8:	08 95       	ret



  //if you have narrowed it down to the sector that is pointed at by lo
  if(found == false){
    if(find_word_in_cluster(word, lo))
    2baa:	a6 01       	movw	r20, r12
    2bac:	66 27       	eor	r22, r22
    2bae:	57 fd       	sbrc	r21, 7
    2bb0:	60 95       	com	r22
    2bb2:	76 2f       	mov	r23, r22
    2bb4:	c4 01       	movw	r24, r8
    2bb6:	0e 94 d7 13 	call	0x27ae	; 0x27ae <find_word_in_cluster>
    2bba:	88 23       	and	r24, r24
    2bbc:	41 f7       	brne	.-48     	; 0x2b8e <bin_srch_dict+0x120>
    2bbe:	d3 cf       	rjmp	.-90     	; 0x2b66 <bin_srch_dict+0xf8>

00002bc0 <read_dict_file>:
 *        dict_file_name - is global that stores FAT32 format name of the dicionary (corpus)
 * @param file_name - unsigned char *, name of the file we are trying to find
 * @return unsigned char - status of trying to read
 */
unsigned char read_dict_file()
{
    2bc0:	4f 92       	push	r4
    2bc2:	5f 92       	push	r5
    2bc4:	6f 92       	push	r6
    2bc6:	7f 92       	push	r7
    2bc8:	8f 92       	push	r8
    2bca:	9f 92       	push	r9
    2bcc:	af 92       	push	r10
    2bce:	bf 92       	push	r11
    2bd0:	cf 92       	push	r12
    2bd2:	df 92       	push	r13
    2bd4:	ef 92       	push	r14
    2bd6:	ff 92       	push	r15
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
  //@TODO   MUST FREE SOMEWHERE
  // READ in 281 clusters

  dir = dict_dir;
  file_size = dir->file_size;
  cluster = curr_dict_cluster;
    2be0:	60 90 8a 0d 	lds	r6, 0x0D8A
    2be4:	70 90 8b 0d 	lds	r7, 0x0D8B
    2be8:	80 90 8c 0d 	lds	r8, 0x0D8C
    2bec:	90 90 8d 0d 	lds	r9, 0x0D8D
    2bf0:	55 24       	eor	r5, r5
    2bf2:	c0 e0       	ldi	r28, 0x00	; 0
    2bf4:	d0 e0       	ldi	r29, 0x00	; 0
    //PUT ++++ at end of file to make sure we were at the end.  
    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_dict_block(first_sector + j);
      for(i = 0; i < BUFFER_SIZE; i ++){
        if(dict_buffer[i] =='+'){
    2bf6:	44 24       	eor	r4, r4
    2bf8:	43 94       	inc	r4
  dir = dict_dir;
  file_size = dir->file_size;
  cluster = curr_dict_cluster;
  for(k = 0; k < CLUSTERS_PER_RUN; k++)
  {
    dict_clusters[dict_cluster_cnt] = cluster;
    2bfa:	80 91 41 09 	lds	r24, 0x0941
    2bfe:	90 91 42 09 	lds	r25, 0x0942
    2c02:	9c 01       	movw	r18, r24
    2c04:	22 0f       	add	r18, r18
    2c06:	33 1f       	adc	r19, r19
    2c08:	22 0f       	add	r18, r18
    2c0a:	33 1f       	adc	r19, r19
    2c0c:	e0 91 1e 09 	lds	r30, 0x091E
    2c10:	f0 91 1f 09 	lds	r31, 0x091F
    2c14:	e2 0f       	add	r30, r18
    2c16:	f3 1f       	adc	r31, r19
    2c18:	60 82       	st	Z, r6
    2c1a:	71 82       	std	Z+1, r7	; 0x01
    2c1c:	82 82       	std	Z+2, r8	; 0x02
    2c1e:	93 82       	std	Z+3, r9	; 0x03
    dict_cluster_cnt ++;
    2c20:	01 96       	adiw	r24, 0x01	; 1
    2c22:	90 93 42 09 	sts	0x0942, r25
    2c26:	80 93 41 09 	sts	0x0941, r24
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    2c2a:	20 91 f5 08 	lds	r18, 0x08F5
    2c2e:	30 91 f6 08 	lds	r19, 0x08F6
    2c32:	e0 90 70 0d 	lds	r14, 0x0D70
    2c36:	f0 90 71 0d 	lds	r15, 0x0D71
    2c3a:	00 91 72 0d 	lds	r16, 0x0D72
    2c3e:	10 91 73 0d 	lds	r17, 0x0D73
    2c42:	c4 01       	movw	r24, r8
    2c44:	b3 01       	movw	r22, r6
    2c46:	62 50       	subi	r22, 0x02	; 2
    2c48:	70 40       	sbci	r23, 0x00	; 0
    2c4a:	80 40       	sbci	r24, 0x00	; 0
    2c4c:	90 40       	sbci	r25, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2c56:	5b 01       	movw	r10, r22
    2c58:	6c 01       	movw	r12, r24
    2c5a:	ae 0c       	add	r10, r14
    2c5c:	bf 1c       	adc	r11, r15
    2c5e:	c0 1e       	adc	r12, r16
    2c60:	d1 1e       	adc	r13, r17
    2c62:	10 e0       	ldi	r17, 0x00	; 0
    2c64:	33 c0       	rjmp	.+102    	; 0x2ccc <read_dict_file+0x10c>
    first_sector = get_first_sector(cluster);

    //PUT ++++ at end of file to make sure we were at the end.  
    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_dict_block(first_sector + j);
    2c66:	c6 01       	movw	r24, r12
    2c68:	b5 01       	movw	r22, r10
    2c6a:	61 0f       	add	r22, r17
    2c6c:	71 1d       	adc	r23, r1
    2c6e:	81 1d       	adc	r24, r1
    2c70:	91 1d       	adc	r25, r1
    2c72:	0e 94 0f 07 	call	0xe1e	; 0xe1e <sd_read_single_dict_block>
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
      for(i = 0; i < BUFFER_SIZE; i ++){
        if(dict_buffer[i] =='+'){
    2c80:	f9 01       	movw	r30, r18
    2c82:	e5 59       	subi	r30, 0x95	; 149
    2c84:	f4 4f       	sbci	r31, 0xF4	; 244
    2c86:	80 81       	ld	r24, Z
    2c88:	8b 32       	cpi	r24, 0x2B	; 43
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <read_dict_file+0xce>
    2c8c:	91 e0       	ldi	r25, 0x01	; 1

    //PUT ++++ at end of file to make sure we were at the end.  
    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_dict_block(first_sector + j);
      for(i = 0; i < BUFFER_SIZE; i ++){
    2c8e:	2f 5f       	subi	r18, 0xFF	; 255
    2c90:	3f 4f       	sbci	r19, 0xFF	; 255
    2c92:	4f 4f       	sbci	r20, 0xFF	; 255
    2c94:	5f 4f       	sbci	r21, 0xFF	; 255
    2c96:	20 30       	cpi	r18, 0x00	; 0
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	38 07       	cpc	r19, r24
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	48 07       	cpc	r20, r24
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	58 07       	cpc	r21, r24
    2ca4:	69 f7       	brne	.-38     	; 0x2c80 <read_dict_file+0xc0>
          end_of_file = true;
        }  
      }

      //last charachter in this buffer
      curr_char = dict_buffer[BUFFER_SIZE - 1];
    2ca6:	50 90 6a 0d 	lds	r5, 0x0D6A
      //number of bytes read at each sector
      byte_counter += BUFFER_SIZE;

      if(end_of_file)
    2caa:	99 23       	and	r25, r25
    2cac:	71 f0       	breq	.+28     	; 0x2cca <read_dict_file+0x10a>
      {
        done_rd_dict = true;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 05 09 	sts	0x0905, r24
        PRINTF("read in dictionary");
    2cb4:	86 e8       	ldi	r24, 0x86	; 134
    2cb6:	91 e0       	ldi	r25, 0x01	; 1
    2cb8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
        TX_NEWLINE_PC;
    2cbc:	8d e0       	ldi	r24, 0x0D	; 13
    2cbe:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    2cc2:	8a e0       	ldi	r24, 0x0A	; 10
    2cc4:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    2cc8:	3e c0       	rjmp	.+124    	; 0x2d46 <read_dict_file+0x186>
    dict_clusters[dict_cluster_cnt] = cluster;
    dict_cluster_cnt ++;
    first_sector = get_first_sector(cluster);

    //PUT ++++ at end of file to make sure we were at the end.  
    for(j=0; j<sector_per_cluster; j++)
    2cca:	1f 5f       	subi	r17, 0xFF	; 255
    2ccc:	20 91 f5 08 	lds	r18, 0x08F5
    2cd0:	30 91 f6 08 	lds	r19, 0x08F6
    2cd4:	81 2f       	mov	r24, r17
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	82 17       	cp	r24, r18
    2cda:	93 07       	cpc	r25, r19
    2cdc:	20 f2       	brcs	.-120    	; 0x2c66 <read_dict_file+0xa6>
    2cde:	80 91 41 09 	lds	r24, 0x0941
    2ce2:	90 91 42 09 	lds	r25, 0x0942
    2ce6:	e0 91 fa 08 	lds	r30, 0x08FA
    2cea:	f0 91 fb 08 	lds	r31, 0x08FB

    }
    count ++;

    //if the buffer ends in a \n, then this cluster starts on its own word
    if(curr_char == '\n')
    2cee:	2a e0       	ldi	r18, 0x0A	; 10
    2cf0:	52 16       	cp	r5, r18
    2cf2:	21 f4       	brne	.+8      	; 0x2cfc <read_dict_file+0x13c>
      preceeding_word[dict_cluster_cnt] = 0;
    2cf4:	e8 0f       	add	r30, r24
    2cf6:	f9 1f       	adc	r31, r25
    2cf8:	10 82       	st	Z, r1
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <read_dict_file+0x142>
    else
      preceeding_word[dict_cluster_cnt] = 1;
    2cfc:	e8 0f       	add	r30, r24
    2cfe:	f9 1f       	adc	r31, r25
    2d00:	40 82       	st	Z, r4

    cluster = get_set_next_cluster (cluster, GET, 0);
    2d02:	c4 01       	movw	r24, r8
    2d04:	b3 01       	movw	r22, r6
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	00 e0       	ldi	r16, 0x00	; 0
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    2d14:	3b 01       	movw	r6, r22
    2d16:	4c 01       	movw	r8, r24
    curr_dict_cluster = cluster;
    2d18:	60 93 8a 0d 	sts	0x0D8A, r22
    2d1c:	70 93 8b 0d 	sts	0x0D8B, r23
    2d20:	80 93 8c 0d 	sts	0x0D8C, r24
    2d24:	90 93 8d 0d 	sts	0x0D8D, r25
    if(cluster == 0) 
    2d28:	61 15       	cp	r22, r1
    2d2a:	71 05       	cpc	r23, r1
    2d2c:	81 05       	cpc	r24, r1
    2d2e:	91 05       	cpc	r25, r1
    2d30:	29 f4       	brne	.+10     	; 0x2d3c <read_dict_file+0x17c>
    {
      usart_transmit_string_to_pc_from_flash(PSTR("Error in getting cluster")); 
    2d32:	8c e1       	ldi	r24, 0x1C	; 28
    2d34:	92 e0       	ldi	r25, 0x02	; 2
    2d36:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    2d3a:	05 c0       	rjmp	.+10     	; 0x2d46 <read_dict_file+0x186>
      return 0;
    2d3c:	21 96       	adiw	r28, 0x01	; 1
  // READ in 281 clusters

  dir = dict_dir;
  file_size = dir->file_size;
  cluster = curr_dict_cluster;
  for(k = 0; k < CLUSTERS_PER_RUN; k++)
    2d3e:	cc 33       	cpi	r28, 0x3C	; 60
    2d40:	d1 05       	cpc	r29, r1
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <read_dict_file+0x186>
    2d44:	5a cf       	rjmp	.-332    	; 0x2bfa <read_dict_file+0x3a>
      usart_transmit_string_to_pc_from_flash(PSTR("Error in getting cluster")); 
      return 0;
    }
  }
  return 0;
}
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	ff 90       	pop	r15
    2d52:	ef 90       	pop	r14
    2d54:	df 90       	pop	r13
    2d56:	cf 90       	pop	r12
    2d58:	bf 90       	pop	r11
    2d5a:	af 90       	pop	r10
    2d5c:	9f 90       	pop	r9
    2d5e:	8f 90       	pop	r8
    2d60:	7f 90       	pop	r7
    2d62:	6f 90       	pop	r6
    2d64:	5f 90       	pop	r5
    2d66:	4f 90       	pop	r4
    2d68:	08 95       	ret

00002d6a <init_read_dict>:
/**
 * @brief This function will set up the initial values for the read_dict_file
 * @param file_name - unsigned char *, name of the file we are trying to find
 * @return unsigned char - status of trying to read
 */
unsigned char init_read_dict(unsigned char *file_name){
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	8c 01       	movw	r16, r24
  unsigned char error;
  struct dir_Structure *dir;

  //@TODO - 300 only works for the current dictionary -need to make different / better
  dict_clusters = calloc(MAX_NUM_CLUSTERS,sizeof(unsigned long));
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	92 e0       	ldi	r25, 0x02	; 2
    2d74:	64 e0       	ldi	r22, 0x04	; 4
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <calloc>
    2d7c:	80 93 1e 09 	sts	0x091E, r24
    2d80:	90 93 1f 09 	sts	0x091F, r25
  dict_cluster_cnt = 0;
    2d84:	10 92 42 09 	sts	0x0942, r1
    2d88:	10 92 41 09 	sts	0x0941, r1

  preceeding_word = calloc(MAX_NUM_CLUSTERS, sizeof(char));
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	92 e0       	ldi	r25, 0x02	; 2
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <calloc>
    2d98:	fc 01       	movw	r30, r24
    2d9a:	90 93 fb 08 	sts	0x08FB, r25
    2d9e:	80 93 fa 08 	sts	0x08FA, r24
  preceeding_word[0] = 0;
    2da2:	10 82       	st	Z, r1


  error = convert_dict_file_name (file_name); //convert file_name into FAT format
    2da4:	c8 01       	movw	r24, r16
    2da6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <convert_dict_file_name>
  if(error) return 2;
    2daa:	88 23       	and	r24, r24
    2dac:	11 f0       	breq	.+4      	; 0x2db2 <init_read_dict+0x48>
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	26 c0       	rjmp	.+76     	; 0x2dfe <init_read_dict+0x94>

  dir = find_files(GET_FILE, dict_file_name); //get the file location
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	6a e0       	ldi	r22, 0x0A	; 10
    2db6:	79 e0       	ldi	r23, 0x09	; 9
    2db8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <find_files>
    2dbc:	fc 01       	movw	r30, r24
  dict_dir = dir;
    2dbe:	90 93 97 0d 	sts	0x0D97, r25
    2dc2:	80 93 96 0d 	sts	0x0D96, r24

  if(dir == 0)
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	c9 f0       	breq	.+50     	; 0x2dfc <init_read_dict+0x92>
    return (0);

  curr_dict_cluster = (((unsigned long) dir->first_cluster_hi) << 16) | dir->first_cluster_lo;
    2dca:	84 89       	ldd	r24, Z+20	; 0x14
    2dcc:	95 89       	ldd	r25, Z+21	; 0x15
    2dce:	a0 e0       	ldi	r26, 0x00	; 0
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	99 27       	eor	r25, r25
    2dd6:	88 27       	eor	r24, r24
    2dd8:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dda:	33 8d       	ldd	r19, Z+27	; 0x1b
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	82 2b       	or	r24, r18
    2de2:	93 2b       	or	r25, r19
    2de4:	a4 2b       	or	r26, r20
    2de6:	b5 2b       	or	r27, r21
    2de8:	80 93 8a 0d 	sts	0x0D8A, r24
    2dec:	90 93 8b 0d 	sts	0x0D8B, r25
    2df0:	a0 93 8c 0d 	sts	0x0D8C, r26
    2df4:	b0 93 8d 0d 	sts	0x0D8D, r27
  done_rd_dict = false;
    2df8:	10 92 05 09 	sts	0x0905, r1
    2dfc:	80 e0       	ldi	r24, 0x00	; 0

  return 0;

}
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	08 95       	ret

00002e04 <play_mp3_file>:
 * @return unsigned char - return 0 on success
 *                         return 2 on error converting file_name
 */

unsigned char play_mp3_file(unsigned char *file_name)
{
    2e04:	2f 92       	push	r2
    2e06:	3f 92       	push	r3
    2e08:	4f 92       	push	r4
    2e0a:	5f 92       	push	r5
    2e0c:	6f 92       	push	r6
    2e0e:	7f 92       	push	r7
    2e10:	8f 92       	push	r8
    2e12:	9f 92       	push	r9
    2e14:	af 92       	push	r10
    2e16:	bf 92       	push	r11
    2e18:	cf 92       	push	r12
    2e1a:	df 92       	push	r13
    2e1c:	ef 92       	push	r14
    2e1e:	ff 92       	push	r15
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	2a 97       	sbiw	r28, 0x0a	; 10
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	8c 01       	movw	r16, r24
  unsigned int k,iCntForSingleAudioWrite;
  unsigned char j, error;
  unsigned int iAudioByteCnt;
  bool end_of_file=false;

  playing_sound = true;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	80 93 1c 09 	sts	0x091C, r24

  ui_mp3_file_pending=false;
    2e40:	10 92 f9 08 	sts	0x08F9, r1

  error = convert_file_name (file_name); //convert file_name into FAT format
    2e44:	c8 01       	movw	r24, r16
    2e46:	0e 94 4d 08 	call	0x109a	; 0x109a <convert_file_name>
  if(error) return 2;
    2e4a:	88 23       	and	r24, r24
    2e4c:	11 f0       	breq	.+4      	; 0x2e52 <play_mp3_file+0x4e>
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	de c0       	rjmp	.+444    	; 0x300e <play_mp3_file+0x20a>

  dir = find_files (GET_FILE, file_name); //get the file location
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	b8 01       	movw	r22, r16
    2e56:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <find_files>
    2e5a:	9c 01       	movw	r18, r24
  if(dir == 0) 
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <play_mp3_file+0x5e>
    2e60:	d5 c0       	rjmp	.+426    	; 0x300c <play_mp3_file+0x208>
    return (0);

  cluster = (((unsigned long) dir->first_cluster_hi) << 16) | dir->first_cluster_lo;
    2e62:	dc 01       	movw	r26, r24
    2e64:	54 96       	adiw	r26, 0x14	; 20
    2e66:	8d 91       	ld	r24, X+
    2e68:	9c 91       	ld	r25, X
    2e6a:	55 97       	sbiw	r26, 0x15	; 21
    2e6c:	a0 e0       	ldi	r26, 0x00	; 0
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	5c 01       	movw	r10, r24
    2e72:	99 24       	eor	r9, r9
    2e74:	88 24       	eor	r8, r8
    2e76:	f9 01       	movw	r30, r18
    2e78:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e7a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e7c:	a0 e0       	ldi	r26, 0x00	; 0
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	88 2a       	or	r8, r24
    2e82:	99 2a       	or	r9, r25
    2e84:	aa 2a       	or	r10, r26
    2e86:	bb 2a       	or	r11, r27

  file_size = dir->file_size;
    2e88:	d9 01       	movw	r26, r18
    2e8a:	5c 96       	adiw	r26, 0x1c	; 28
    2e8c:	8d 91       	ld	r24, X+
    2e8e:	9d 91       	ld	r25, X+
    2e90:	0d 90       	ld	r0, X+
    2e92:	bc 91       	ld	r27, X
    2e94:	a0 2d       	mov	r26, r0
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	ab 83       	std	Y+3, r26	; 0x03
    2e9c:	bc 83       	std	Y+4, r27	; 0x04
  vs1053_skip_play=false;
    2e9e:	10 92 89 0d 	sts	0x0D89, r1
    2ea2:	1d 82       	std	Y+5, r1	; 0x05
    2ea4:	1e 82       	std	Y+6, r1	; 0x06
    2ea6:	1f 82       	std	Y+7, r1	; 0x07
    2ea8:	18 86       	std	Y+8, r1	; 0x08
 * @param cluster_number - unsigned long, cluster number on which first sector found
 * @return unsgined long - first secotr address
 */
unsigned long get_first_sector(unsigned long cluster_number)
{
  return (((cluster_number - 2) * sector_per_cluster) + first_data_sector);
    2eaa:	20 91 f5 08 	lds	r18, 0x08F5
    2eae:	30 91 f6 08 	lds	r19, 0x08F6
    2eb2:	e0 90 70 0d 	lds	r14, 0x0D70
    2eb6:	f0 90 71 0d 	lds	r15, 0x0D71
    2eba:	00 91 72 0d 	lds	r16, 0x0D72
    2ebe:	10 91 73 0d 	lds	r17, 0x0D73
    2ec2:	c5 01       	movw	r24, r10
    2ec4:	b4 01       	movw	r22, r8
    2ec6:	62 50       	subi	r22, 0x02	; 2
    2ec8:	70 40       	sbci	r23, 0x00	; 0
    2eca:	80 40       	sbci	r24, 0x00	; 0
    2ecc:	90 40       	sbci	r25, 0x00	; 0
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	0e 94 96 2a 	call	0x552c	; 0x552c <__mulsi3>
    2ed6:	2b 01       	movw	r4, r22
    2ed8:	3c 01       	movw	r6, r24
    2eda:	4e 0c       	add	r4, r14
    2edc:	5f 1c       	adc	r5, r15
    2ede:	60 1e       	adc	r6, r16
    2ee0:	71 1e       	adc	r7, r17
    2ee2:	33 24       	eor	r3, r3
    2ee4:	72 c0       	rjmp	.+228    	; 0x2fca <play_mp3_file+0x1c6>
  {
    first_sector = get_first_sector (cluster);

    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_block(first_sector + j);
    2ee6:	c3 01       	movw	r24, r6
    2ee8:	b2 01       	movw	r22, r4
    2eea:	63 0d       	add	r22, r3
    2eec:	71 1d       	adc	r23, r1
    2eee:	81 1d       	adc	r24, r1
    2ef0:	91 1d       	adc	r25, r1
    2ef2:	0e 94 40 07 	call	0xe80	; 0xe80 <sd_read_single_block>
    2ef6:	cd 80       	ldd	r12, Y+5	; 0x05
    2ef8:	de 80       	ldd	r13, Y+6	; 0x06
    2efa:	ef 80       	ldd	r14, Y+7	; 0x07
    2efc:	f8 84       	ldd	r15, Y+8	; 0x08
    2efe:	22 24       	eor	r2, r2

      //for all sectors in this cluster, read in their data (512 bytes)
      for(k=0; k<512; k++)
    2f00:	d7 01       	movw	r26, r14
    2f02:	c6 01       	movw	r24, r12
    2f04:	80 50       	subi	r24, 0x00	; 0
    2f06:	9e 4f       	sbci	r25, 0xFE	; 254
    2f08:	af 4f       	sbci	r26, 0xFF	; 255
    2f0a:	bf 4f       	sbci	r27, 0xFF	; 255
      {
        if ((byteCounter++) >= file_size ) end_of_file=true;
    2f0c:	29 81       	ldd	r18, Y+1	; 0x01
    2f0e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f10:	4b 81       	ldd	r20, Y+3	; 0x03
    2f12:	5c 81       	ldd	r21, Y+4	; 0x04
    2f14:	c2 16       	cp	r12, r18
    2f16:	d3 06       	cpc	r13, r19
    2f18:	e4 06       	cpc	r14, r20
    2f1a:	f5 06       	cpc	r15, r21
    2f1c:	10 f0       	brcs	.+4      	; 0x2f22 <play_mp3_file+0x11e>
    2f1e:	22 24       	eor	r2, r2
    2f20:	23 94       	inc	r2
    2f22:	08 94       	sec
    2f24:	c1 1c       	adc	r12, r1
    2f26:	d1 1c       	adc	r13, r1
    2f28:	e1 1c       	adc	r14, r1
    2f2a:	f1 1c       	adc	r15, r1
    for(j=0; j<sector_per_cluster; j++)
    {
      sd_read_single_block(first_sector + j);

      //for all sectors in this cluster, read in their data (512 bytes)
      for(k=0; k<512; k++)
    2f2c:	c8 16       	cp	r12, r24
    2f2e:	d9 06       	cpc	r13, r25
    2f30:	ea 06       	cpc	r14, r26
    2f32:	fb 06       	cpc	r15, r27
    2f34:	59 f7       	brne	.-42     	; 0x2f0c <play_mp3_file+0x108>
    2f36:	e0 e0       	ldi	r30, 0x00	; 0
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
      }
      //After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
      iAudioByteCnt=0;
      while(iAudioByteCnt<k)
      {
        if(vs1053_skip_play)
    2f3a:	80 91 89 0d 	lds	r24, 0x0D89
    2f3e:	88 23       	and	r24, r24
    2f40:	29 f0       	breq	.+10     	; 0x2f4c <play_mp3_file+0x148>
        {
          vs1053_skip_play = false;
    2f42:	10 92 89 0d 	sts	0x0D89, r1
          vs1053_software_reset();
    2f46:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vs1053_software_reset>
    2f4a:	60 c0       	rjmp	.+192    	; 0x300c <play_mp3_file+0x208>
          return 0;//playing stopped by user
        }
        if((PINB & (1<<MP3_DREQ)))
    2f4c:	1b 99       	sbic	0x03, 3	; 3
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <play_mp3_file+0x150>
    2f50:	8f 01       	movw	r16, r30
    2f52:	18 c0       	rjmp	.+48     	; 0x2f84 <play_mp3_file+0x180>
    2f54:	8f 01       	movw	r16, r30
        {
          for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    2f56:	af 01       	movw	r20, r30
    2f58:	40 5e       	subi	r20, 0xE0	; 224
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5c:	5a 87       	std	Y+10, r21	; 0x0a
    2f5e:	49 87       	std	Y+9, r20	; 0x09
          {
            vs1053_write_data(buffer[iAudioByteCnt]);
    2f60:	f8 01       	movw	r30, r16
    2f62:	e1 5b       	subi	r30, 0xB1	; 177
    2f64:	f6 4f       	sbci	r31, 0xF6	; 246
    2f66:	80 81       	ld	r24, Z
    2f68:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <vs1053_write_data>
            if(iAudioByteCnt++==k)return 0;    
    2f6c:	52 e0       	ldi	r21, 0x02	; 2
    2f6e:	00 30       	cpi	r16, 0x00	; 0
    2f70:	15 07       	cpc	r17, r21
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <play_mp3_file+0x172>
    2f74:	4b c0       	rjmp	.+150    	; 0x300c <play_mp3_file+0x208>
    2f76:	0f 5f       	subi	r16, 0xFF	; 255
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
          vs1053_software_reset();
          return 0;//playing stopped by user
        }
        if((PINB & (1<<MP3_DREQ)))
        {
          for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	08 17       	cp	r16, r24
    2f80:	19 07       	cpc	r17, r25
    2f82:	71 f7       	brne	.-36     	; 0x2f60 <play_mp3_file+0x15c>
          }  
        }

        // KORY CHANGED
        //After playing a 32 bytes of data, check the user inputs
        if(usart_keypad_data_ready)
    2f84:	80 91 fc 08 	lds	r24, 0x08FC
    2f88:	88 23       	and	r24, r24
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <play_mp3_file+0x18c>
        {
          usart_keypad_receive_action();
    2f8c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <usart_keypad_receive_action>
        }
        if(usart_pc_data_ready)
    2f90:	80 91 95 0d 	lds	r24, 0x0D95
    2f94:	88 23       	and	r24, r24
    2f96:	11 f0       	breq	.+4      	; 0x2f9c <play_mp3_file+0x198>
        {
          usart_pc_receive_action();
    2f98:	0e 94 78 03 	call	0x6f0	; 0x6f0 <usart_pc_receive_action>
        }    
        if(usart_ui_message_ready) //If a message ready from the user interface, process it
    2f9c:	80 91 1d 09 	lds	r24, 0x091D
    2fa0:	88 23       	and	r24, r24
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <play_mp3_file+0x1a6>
        {
          ui_parse_message(true);
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	0e 94 18 1a 	call	0x3430	; 0x3430 <ui_parse_message>
      {
        if ((byteCounter++) >= file_size ) end_of_file=true;
      }
      //After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
      iAudioByteCnt=0;
      while(iAudioByteCnt<k)
    2faa:	92 e0       	ldi	r25, 0x02	; 2
    2fac:	00 30       	cpi	r16, 0x00	; 0
    2fae:	19 07       	cpc	r17, r25
    2fb0:	10 f4       	brcc	.+4      	; 0x2fb6 <play_mp3_file+0x1b2>
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	c2 cf       	rjmp	.-124    	; 0x2f3a <play_mp3_file+0x136>
        if(usart_ui_message_ready) //If a message ready from the user interface, process it
        {
          ui_parse_message(true);
        }
      }
      if(end_of_file)
    2fb6:	22 20       	and	r2, r2
    2fb8:	19 f0       	breq	.+6      	; 0x2fc0 <play_mp3_file+0x1bc>
      { 
        playing_sound = false;
    2fba:	10 92 1c 09 	sts	0x091C, r1
    2fbe:	26 c0       	rjmp	.+76     	; 0x300c <play_mp3_file+0x208>
  vs1053_skip_play=false;
  while(1)
  {
    first_sector = get_first_sector (cluster);

    for(j=0; j<sector_per_cluster; j++)
    2fc0:	33 94       	inc	r3
    2fc2:	cd 82       	std	Y+5, r12	; 0x05
    2fc4:	de 82       	std	Y+6, r13	; 0x06
    2fc6:	ef 82       	std	Y+7, r14	; 0x07
    2fc8:	f8 86       	std	Y+8, r15	; 0x08
    2fca:	20 91 f5 08 	lds	r18, 0x08F5
    2fce:	30 91 f6 08 	lds	r19, 0x08F6
    2fd2:	83 2d       	mov	r24, r3
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	82 17       	cp	r24, r18
    2fd8:	93 07       	cpc	r25, r19
    2fda:	08 f4       	brcc	.+2      	; 0x2fde <play_mp3_file+0x1da>
    2fdc:	84 cf       	rjmp	.-248    	; 0x2ee6 <play_mp3_file+0xe2>
        return 0;
      }

    }

    cluster = get_set_next_cluster (cluster, GET, 0);
    2fde:	c5 01       	movw	r24, r10
    2fe0:	b4 01       	movw	r22, r8
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	00 e0       	ldi	r16, 0x00	; 0
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <get_set_next_cluster>
    2ff0:	4b 01       	movw	r8, r22
    2ff2:	5c 01       	movw	r10, r24
    if(cluster == 0) 
    2ff4:	61 15       	cp	r22, r1
    2ff6:	71 05       	cpc	r23, r1
    2ff8:	81 05       	cpc	r24, r1
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <play_mp3_file+0x1fc>
    2ffe:	55 cf       	rjmp	.-342    	; 0x2eaa <play_mp3_file+0xa6>
    {
      playing_sound = false;
    3000:	10 92 1c 09 	sts	0x091C, r1
      usart_transmit_string_to_pc_from_flash(PSTR("Error in getting cluster")); 
    3004:	85 e3       	ldi	r24, 0x35	; 53
    3006:	92 e0       	ldi	r25, 0x02	; 2
    3008:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
      return 0;
    300c:	80 e0       	ldi	r24, 0x00	; 0
    }
  }

  playing_sound = false;
  return 0;
}
    300e:	2a 96       	adiw	r28, 0x0a	; 10
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	ff 90       	pop	r15
    3024:	ef 90       	pop	r14
    3026:	df 90       	pop	r13
    3028:	cf 90       	pop	r12
    302a:	bf 90       	pop	r11
    302c:	af 90       	pop	r10
    302e:	9f 90       	pop	r9
    3030:	8f 90       	pop	r8
    3032:	7f 90       	pop	r7
    3034:	6f 90       	pop	r6
    3036:	5f 90       	pop	r5
    3038:	4f 90       	pop	r4
    303a:	3f 90       	pop	r3
    303c:	2f 90       	pop	r2
    303e:	08 95       	ret

00003040 <ui_calculate_crc>:
 * @brief calculate CRC (cyclic redundancy check)
 * @param message message (?)
 * @return CRC value
 */
uint16_t ui_calculate_crc(unsigned char* message)
{
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	fc 01       	movw	r30, r24
  unsigned char msglen = *(message + 2) - 5; // Not including the checksum bytes
    304a:	b2 81       	ldd	r27, Z+2	; 0x02
  uint16_t chksum = 0;

  message += 3;
    304c:	8c 01       	movw	r16, r24
    304e:	0d 5f       	subi	r16, 0xFD	; 253
    3050:	1f 4f       	sbci	r17, 0xFF	; 255
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	70 e0       	ldi	r23, 0x00	; 0
 * @brief calculate CRC (cyclic redundancy check)
 * @param message message (?)
 * @return CRC value
 */
uint16_t ui_calculate_crc(unsigned char* message)
{
    3056:	b5 50       	subi	r27, 0x05	; 5
  unsigned char msglen = *(message + 2) - 5; // Not including the checksum bytes
  uint16_t chksum = 0;

  message += 3;
  while(msglen > 1)
    3058:	ab 2f       	mov	r26, r27
    305a:	a6 95       	lsr	r26
    305c:	ca 2f       	mov	r28, r26
    305e:	d0 e0       	ldi	r29, 0x00	; 0
    3060:	ae 01       	movw	r20, r28
    3062:	4f 5f       	subi	r20, 0xFF	; 255
    3064:	5f 4f       	sbci	r21, 0xFF	; 255
    3066:	44 0f       	add	r20, r20
    3068:	55 1f       	adc	r21, r21
    306a:	4e 0f       	add	r20, r30
    306c:	5f 1f       	adc	r21, r31
    306e:	08 c0       	rjmp	.+16     	; 0x3080 <ui_calculate_crc+0x40>
  {
    chksum += (*(message) << 8) | *(message + 1);
    3070:	31 81       	ldd	r19, Z+1	; 0x01
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	82 2b       	or	r24, r18
    307a:	93 2b       	or	r25, r19
    307c:	68 0f       	add	r22, r24
    307e:	79 1f       	adc	r23, r25
    3080:	32 96       	adiw	r30, 0x02	; 2
{
  unsigned char msglen = *(message + 2) - 5; // Not including the checksum bytes
  uint16_t chksum = 0;

  message += 3;
  while(msglen > 1)
    3082:	e4 17       	cp	r30, r20
    3084:	f5 07       	cpc	r31, r21
    3086:	a1 f7       	brne	.-24     	; 0x3070 <ui_calculate_crc+0x30>
 * @brief calculate CRC (cyclic redundancy check)
 * @param message message (?)
 * @return CRC value
 */
uint16_t ui_calculate_crc(unsigned char* message)
{
    3088:	aa 0f       	add	r26, r26
    308a:	fe 01       	movw	r30, r28
    308c:	ee 0f       	add	r30, r30
    308e:	ff 1f       	adc	r31, r31
    3090:	e0 0f       	add	r30, r16
    3092:	f1 1f       	adc	r31, r17
    chksum += (*(message) << 8) | *(message + 1);
    chksum = chksum & 0xffff;
    msglen -= 2;
    message += 2;
  }
  if(msglen > 0) //If the packet size is odd numbered
    3094:	ba 17       	cp	r27, r26
    3096:	21 f0       	breq	.+8      	; 0x30a0 <ui_calculate_crc+0x60>
  {
    chksum = chksum ^ (int)*(message++);
    3098:	80 81       	ld	r24, Z
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	68 27       	eor	r22, r24
    309e:	79 27       	eor	r23, r25
  }
  return chksum;
}
    30a0:	cb 01       	movw	r24, r22
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

000030ac <ui_reset_the_current_mode>:
 * @brief input the reset command to the current mode
 * @return Void
 */
void ui_reset_the_current_mode(void)
{
  if(ui_mode_selected){
    30ac:	80 91 4f 0b 	lds	r24, 0x0B4F
    30b0:	88 23       	and	r24, r24
    30b2:	19 f1       	breq	.+70     	; 0x30fa <ui_reset_the_current_mode+0x4e>
    switch(ui_current_mode)
    30b4:	80 91 69 0b 	lds	r24, 0x0B69
    30b8:	83 30       	cpi	r24, 0x03	; 3
    30ba:	a1 f0       	breq	.+40     	; 0x30e4 <ui_reset_the_current_mode+0x38>
    30bc:	84 30       	cpi	r24, 0x04	; 4
    30be:	28 f4       	brcc	.+10     	; 0x30ca <ui_reset_the_current_mode+0x1e>
    30c0:	81 30       	cpi	r24, 0x01	; 1
    30c2:	51 f0       	breq	.+20     	; 0x30d8 <ui_reset_the_current_mode+0x2c>
    30c4:	82 30       	cpi	r24, 0x02	; 2
    30c6:	c9 f4       	brne	.+50     	; 0x30fa <ui_reset_the_current_mode+0x4e>
    30c8:	0a c0       	rjmp	.+20     	; 0x30de <ui_reset_the_current_mode+0x32>
    30ca:	85 30       	cpi	r24, 0x05	; 5
    30cc:	89 f0       	breq	.+34     	; 0x30f0 <ui_reset_the_current_mode+0x44>
    30ce:	85 30       	cpi	r24, 0x05	; 5
    30d0:	60 f0       	brcs	.+24     	; 0x30ea <ui_reset_the_current_mode+0x3e>
    30d2:	86 30       	cpi	r24, 0x06	; 6
    30d4:	91 f4       	brne	.+36     	; 0x30fa <ui_reset_the_current_mode+0x4e>
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <ui_reset_the_current_mode+0x4a>
    {
      case 1:
        md1_reset();
    30d8:	0e 94 14 1c 	call	0x3828	; 0x3828 <md1_reset>
    30dc:	08 95       	ret
        break;
      case 2:
        md2_reset();
    30de:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <md2_reset>
    30e2:	08 95       	ret
        break;
      case 3:
        md3_reset();
    30e4:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <md3_reset>
    30e8:	08 95       	ret
        break;
      case 4:
        md4_reset();
    30ea:	0e 94 f5 22 	call	0x45ea	; 0x45ea <md4_reset>
    30ee:	08 95       	ret
        break;
      case 5:
        md5_reset();
    30f0:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <md5_reset>
    30f4:	08 95       	ret
        break;
	  case 6:
	  	md6_reset();
    30f6:	0e 94 94 29 	call	0x5328	; 0x5328 <md6_reset>
    30fa:	08 95       	ret

000030fc <ui_run_main_of_current_mode>:
 * @brief   Decides which of the three UI modes to go into based on ui_current_mode
 * @return  Void
 */
void ui_run_main_of_current_mode(void)
{
  if(ui_mode_selected){
    30fc:	80 91 4f 0b 	lds	r24, 0x0B4F
    3100:	88 23       	and	r24, r24
    3102:	19 f1       	breq	.+70     	; 0x314a <ui_run_main_of_current_mode+0x4e>
    switch(ui_current_mode)
    3104:	80 91 69 0b 	lds	r24, 0x0B69
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	a1 f0       	breq	.+40     	; 0x3134 <ui_run_main_of_current_mode+0x38>
    310c:	84 30       	cpi	r24, 0x04	; 4
    310e:	28 f4       	brcc	.+10     	; 0x311a <ui_run_main_of_current_mode+0x1e>
    3110:	81 30       	cpi	r24, 0x01	; 1
    3112:	51 f0       	breq	.+20     	; 0x3128 <ui_run_main_of_current_mode+0x2c>
    3114:	82 30       	cpi	r24, 0x02	; 2
    3116:	c9 f4       	brne	.+50     	; 0x314a <ui_run_main_of_current_mode+0x4e>
    3118:	0a c0       	rjmp	.+20     	; 0x312e <ui_run_main_of_current_mode+0x32>
    311a:	85 30       	cpi	r24, 0x05	; 5
    311c:	89 f0       	breq	.+34     	; 0x3140 <ui_run_main_of_current_mode+0x44>
    311e:	85 30       	cpi	r24, 0x05	; 5
    3120:	60 f0       	brcs	.+24     	; 0x313a <ui_run_main_of_current_mode+0x3e>
    3122:	86 30       	cpi	r24, 0x06	; 6
    3124:	91 f4       	brne	.+36     	; 0x314a <ui_run_main_of_current_mode+0x4e>
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <ui_run_main_of_current_mode+0x4a>
    {
      case 1:
        md1_main();
    3128:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <md1_main>
    312c:	08 95       	ret
        break;
      case 2:
        md2_main();
    312e:	0e 94 67 1e 	call	0x3cce	; 0x3cce <md2_main>
    3132:	08 95       	ret
        break;
      case 3:
        md3_main();
    3134:	0e 94 1d 21 	call	0x423a	; 0x423a <md3_main>
    3138:	08 95       	ret
        break;
      case 4:
        md4_main();
    313a:	0e 94 17 24 	call	0x482e	; 0x482e <md4_main>
    313e:	08 95       	ret
        break;
      case 5:
        md5_main();
    3140:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <md5_main>
    3144:	08 95       	ret
        break;
	  case 6:
	  	md6_main();
    3146:	0e 94 b0 29 	call	0x5360	; 0x5360 <md6_main>
    314a:	08 95       	ret

0000314c <ui_input_cell_to_current_mode>:
 * @brief input a cell to the current mode
 * @return Void
 */
void ui_input_cell_to_current_mode(char this_cell)
{
  switch(ui_current_mode)
    314c:	90 91 69 0b 	lds	r25, 0x0B69
    3150:	93 30       	cpi	r25, 0x03	; 3
    3152:	a1 f0       	breq	.+40     	; 0x317c <ui_input_cell_to_current_mode+0x30>
    3154:	94 30       	cpi	r25, 0x04	; 4
    3156:	28 f4       	brcc	.+10     	; 0x3162 <ui_input_cell_to_current_mode+0x16>
    3158:	91 30       	cpi	r25, 0x01	; 1
    315a:	51 f0       	breq	.+20     	; 0x3170 <ui_input_cell_to_current_mode+0x24>
    315c:	92 30       	cpi	r25, 0x02	; 2
    315e:	c9 f4       	brne	.+50     	; 0x3192 <ui_input_cell_to_current_mode+0x46>
    3160:	0a c0       	rjmp	.+20     	; 0x3176 <ui_input_cell_to_current_mode+0x2a>
    3162:	95 30       	cpi	r25, 0x05	; 5
    3164:	89 f0       	breq	.+34     	; 0x3188 <ui_input_cell_to_current_mode+0x3c>
    3166:	95 30       	cpi	r25, 0x05	; 5
    3168:	60 f0       	brcs	.+24     	; 0x3182 <ui_input_cell_to_current_mode+0x36>
    316a:	96 30       	cpi	r25, 0x06	; 6
    316c:	91 f4       	brne	.+36     	; 0x3192 <ui_input_cell_to_current_mode+0x46>
    316e:	0f c0       	rjmp	.+30     	; 0x318e <ui_input_cell_to_current_mode+0x42>
  {
    case 1:
      md1_input_cell(this_cell);
    3170:	0e 94 23 1c 	call	0x3846	; 0x3846 <md1_input_cell>
    3174:	08 95       	ret
      break;
    case 2:
      md2_input_cell(this_cell);
    3176:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <md2_input_cell>
    317a:	08 95       	ret
      break;
    case 3:
      md3_input_cell(this_cell);
    317c:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <md3_input_cell>
    3180:	08 95       	ret
      break;
    case 4:
      md4_input_cell(this_cell);
    3182:	0e 94 fe 22 	call	0x45fc	; 0x45fc <md4_input_cell>
    3186:	08 95       	ret
      break;
    case 5:
      md5_input_cell(this_cell);
    3188:	0e 94 e7 25 	call	0x4bce	; 0x4bce <md5_input_cell>
    318c:	08 95       	ret
	  break;
	case 6:
	  md6_input_cell(this_cell);
    318e:	0e 94 a8 29 	call	0x5350	; 0x5350 <md6_input_cell>
    3192:	08 95       	ret

00003194 <ui_input_dot_to_current_mode>:
 * @brief input a dot to the current mode
 * @return Void
 */
void ui_input_dot_to_current_mode(char this_dot)
{
  switch(ui_current_mode)
    3194:	90 91 69 0b 	lds	r25, 0x0B69
    3198:	93 30       	cpi	r25, 0x03	; 3
    319a:	a1 f0       	breq	.+40     	; 0x31c4 <ui_input_dot_to_current_mode+0x30>
    319c:	94 30       	cpi	r25, 0x04	; 4
    319e:	28 f4       	brcc	.+10     	; 0x31aa <ui_input_dot_to_current_mode+0x16>
    31a0:	91 30       	cpi	r25, 0x01	; 1
    31a2:	51 f0       	breq	.+20     	; 0x31b8 <ui_input_dot_to_current_mode+0x24>
    31a4:	92 30       	cpi	r25, 0x02	; 2
    31a6:	c9 f4       	brne	.+50     	; 0x31da <ui_input_dot_to_current_mode+0x46>
    31a8:	0a c0       	rjmp	.+20     	; 0x31be <ui_input_dot_to_current_mode+0x2a>
    31aa:	95 30       	cpi	r25, 0x05	; 5
    31ac:	89 f0       	breq	.+34     	; 0x31d0 <ui_input_dot_to_current_mode+0x3c>
    31ae:	95 30       	cpi	r25, 0x05	; 5
    31b0:	60 f0       	brcs	.+24     	; 0x31ca <ui_input_dot_to_current_mode+0x36>
    31b2:	96 30       	cpi	r25, 0x06	; 6
    31b4:	91 f4       	brne	.+36     	; 0x31da <ui_input_dot_to_current_mode+0x46>
    31b6:	0f c0       	rjmp	.+30     	; 0x31d6 <ui_input_dot_to_current_mode+0x42>
  {
    case 1:
      md1_input_dot(this_dot);
    31b8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <md1_input_dot>
    31bc:	08 95       	ret
      break;
    case 2:
      md2_input_dot(this_dot);
    31be:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <md2_input_dot>
    31c2:	08 95       	ret
      break;
    case 3:
      md3_input_dot(this_dot);
    31c4:	0e 94 0a 20 	call	0x4014	; 0x4014 <md3_input_dot>
    31c8:	08 95       	ret
      break;
    case 4:
      md4_input_dot(this_dot);
    31ca:	0e 94 67 23 	call	0x46ce	; 0x46ce <md4_input_dot>
    31ce:	08 95       	ret
      break;
    case 5:
      md5_input_dot(this_dot);
    31d0:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <md5_input_dot>
    31d4:	08 95       	ret
	  break;
	case 6:
	  md6_input_dot(this_dot);
    31d6:	0e 94 a5 29 	call	0x534a	; 0x534a <md6_input_dot>
    31da:	08 95       	ret

000031dc <ui_call_mode_no_answer>:
 * @brief input the exit command to the current mode
 * @return Void
 */
void ui_call_mode_no_answer(void)
{
  switch(ui_current_mode)
    31dc:	80 91 69 0b 	lds	r24, 0x0B69
    31e0:	83 30       	cpi	r24, 0x03	; 3
    31e2:	a1 f0       	breq	.+40     	; 0x320c <ui_call_mode_no_answer+0x30>
    31e4:	84 30       	cpi	r24, 0x04	; 4
    31e6:	28 f4       	brcc	.+10     	; 0x31f2 <ui_call_mode_no_answer+0x16>
    31e8:	81 30       	cpi	r24, 0x01	; 1
    31ea:	51 f0       	breq	.+20     	; 0x3200 <ui_call_mode_no_answer+0x24>
    31ec:	82 30       	cpi	r24, 0x02	; 2
    31ee:	c9 f4       	brne	.+50     	; 0x3222 <ui_call_mode_no_answer+0x46>
    31f0:	0a c0       	rjmp	.+20     	; 0x3206 <ui_call_mode_no_answer+0x2a>
    31f2:	85 30       	cpi	r24, 0x05	; 5
    31f4:	89 f0       	breq	.+34     	; 0x3218 <ui_call_mode_no_answer+0x3c>
    31f6:	85 30       	cpi	r24, 0x05	; 5
    31f8:	60 f0       	brcs	.+24     	; 0x3212 <ui_call_mode_no_answer+0x36>
    31fa:	86 30       	cpi	r24, 0x06	; 6
    31fc:	91 f4       	brne	.+36     	; 0x3222 <ui_call_mode_no_answer+0x46>
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <ui_call_mode_no_answer+0x42>
  {
    case 1:
      md1_call_mode_no_answer();
    3200:	0e 94 19 1c 	call	0x3832	; 0x3832 <md1_call_mode_no_answer>
    3204:	08 95       	ret
      break;
    case 2:
      md2_call_mode_no_answer();
    3206:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <md2_call_mode_no_answer>
    320a:	08 95       	ret
      break;
    case 3:
      md3_call_mode_no_answer();
    320c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <md3_call_mode_no_answer>
    3210:	08 95       	ret
      break;
    case 4:
      md4_call_mode_no_answer();
    3212:	0e 94 fd 22 	call	0x45fa	; 0x45fa <md4_call_mode_no_answer>
    3216:	08 95       	ret
      break;
    case 5:
      md5_call_mode_no_answer();
    3218:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <md5_call_mode_no_answer>
    321c:	08 95       	ret
	  break;
	case 6:
	  md6_call_mode_no_answer();
    321e:	0e 94 a4 29 	call	0x5348	; 0x5348 <md6_call_mode_no_answer>
    3222:	08 95       	ret

00003224 <ui_call_mode_yes_answer>:
 * @brief input the enter button to the current mode
 * @return Void
 */
void ui_call_mode_yes_answer(void)
{
  switch(ui_current_mode)
    3224:	80 91 69 0b 	lds	r24, 0x0B69
    3228:	83 30       	cpi	r24, 0x03	; 3
    322a:	a1 f0       	breq	.+40     	; 0x3254 <ui_call_mode_yes_answer+0x30>
    322c:	84 30       	cpi	r24, 0x04	; 4
    322e:	28 f4       	brcc	.+10     	; 0x323a <ui_call_mode_yes_answer+0x16>
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	51 f0       	breq	.+20     	; 0x3248 <ui_call_mode_yes_answer+0x24>
    3234:	82 30       	cpi	r24, 0x02	; 2
    3236:	c9 f4       	brne	.+50     	; 0x326a <ui_call_mode_yes_answer+0x46>
    3238:	0a c0       	rjmp	.+20     	; 0x324e <ui_call_mode_yes_answer+0x2a>
    323a:	85 30       	cpi	r24, 0x05	; 5
    323c:	89 f0       	breq	.+34     	; 0x3260 <ui_call_mode_yes_answer+0x3c>
    323e:	85 30       	cpi	r24, 0x05	; 5
    3240:	60 f0       	brcs	.+24     	; 0x325a <ui_call_mode_yes_answer+0x36>
    3242:	86 30       	cpi	r24, 0x06	; 6
    3244:	91 f4       	brne	.+36     	; 0x326a <ui_call_mode_yes_answer+0x46>
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <ui_call_mode_yes_answer+0x42>
  {
    case 1:
      md1_call_mode_yes_answer();
    3248:	0e 94 24 1c 	call	0x3848	; 0x3848 <md1_call_mode_yes_answer>
    324c:	08 95       	ret
      break;
    case 2:
      md2_call_mode_yes_answer();
    324e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <md2_call_mode_yes_answer>
    3252:	08 95       	ret
      break;
    case 3:
      md3_call_mode_yes_answer();
    3254:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <md3_call_mode_yes_answer>
    3258:	08 95       	ret
      break;
    case 4:
      md4_call_mode_yes_answer();
    325a:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <md4_call_mode_yes_answer>
    325e:	08 95       	ret
      break;
    case 5:
      md5_call_mode_yes_answer();
    3260:	0e 94 e5 25 	call	0x4bca	; 0x4bca <md5_call_mode_yes_answer>
    3264:	08 95       	ret
	  break;
	case 6:
	  md6_call_mode_yes_answer();
    3266:	0e 94 99 29 	call	0x5332	; 0x5332 <md6_call_mode_yes_answer>
    326a:	08 95       	ret

0000326c <ui_play_intro_current_mode>:
/**
 * @brief play the MP3 associated with the current mode
 * @return Void
 */
void ui_play_intro_current_mode(void)
{
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	2b 97       	sbiw	r28, 0x0b	; 11
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
  char buf[11];
  if(ui_current_mode <= number_of_modes)
    3284:	90 91 69 0b 	lds	r25, 0x0B69
    3288:	80 91 90 0d 	lds	r24, 0x0D90
    328c:	89 17       	cp	r24, r25
    328e:	18 f1       	brcs	.+70     	; 0x32d6 <ui_play_intro_current_mode+0x6a>
  {
    sprintf(buf, "MD%i.MP3", ui_current_mode);
    3290:	20 91 69 0b 	lds	r18, 0x0B69
    3294:	00 d0       	rcall	.+0      	; 0x3296 <ui_play_intro_current_mode+0x2a>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <ui_play_intro_current_mode+0x2c>
    3298:	00 d0       	rcall	.+0      	; 0x329a <ui_play_intro_current_mode+0x2e>
    329a:	ed b7       	in	r30, 0x3d	; 61
    329c:	fe b7       	in	r31, 0x3e	; 62
    329e:	31 96       	adiw	r30, 0x01	; 1
    32a0:	8e 01       	movw	r16, r28
    32a2:	0f 5f       	subi	r16, 0xFF	; 255
    32a4:	1f 4f       	sbci	r17, 0xFF	; 255
    32a6:	ad b7       	in	r26, 0x3d	; 61
    32a8:	be b7       	in	r27, 0x3e	; 62
    32aa:	12 96       	adiw	r26, 0x02	; 2
    32ac:	1c 93       	st	X, r17
    32ae:	0e 93       	st	-X, r16
    32b0:	11 97       	sbiw	r26, 0x01	; 1
    32b2:	89 e9       	ldi	r24, 0x99	; 153
    32b4:	91 e0       	ldi	r25, 0x01	; 1
    32b6:	93 83       	std	Z+3, r25	; 0x03
    32b8:	82 83       	std	Z+2, r24	; 0x02
    32ba:	24 83       	std	Z+4, r18	; 0x04
    32bc:	15 82       	std	Z+5, r1	; 0x05
    32be:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
    request_to_play_mp3_file(buf);
    32c2:	8d b7       	in	r24, 0x3d	; 61
    32c4:	9e b7       	in	r25, 0x3e	; 62
    32c6:	06 96       	adiw	r24, 0x06	; 6
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	9e bf       	out	0x3e, r25	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	8d bf       	out	0x3d, r24	; 61
    32d2:	c8 01       	movw	r24, r16
    32d4:	02 c0       	rjmp	.+4      	; 0x32da <ui_play_intro_current_mode+0x6e>
  }
  else
    request_to_play_mp3_file("ERR1.MP3");
    32d6:	82 ea       	ldi	r24, 0xA2	; 162
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    32de:	2b 96       	adiw	r28, 0x0b	; 11
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	08 95       	ret

000032f4 <ui_control_key_pressed>:
 * control)
 * @return Void
 */
void ui_control_key_pressed(void)
{
  switch(usart_ui_received_packet[5])
    32f4:	20 91 59 0b 	lds	r18, 0x0B59
    32f8:	23 30       	cpi	r18, 0x03	; 3
    32fa:	b9 f1       	breq	.+110    	; 0x336a <ui_control_key_pressed+0x76>
    32fc:	24 30       	cpi	r18, 0x04	; 4
    32fe:	30 f4       	brcc	.+12     	; 0x330c <ui_control_key_pressed+0x18>
    3300:	21 30       	cpi	r18, 0x01	; 1
    3302:	71 f0       	breq	.+28     	; 0x3320 <ui_control_key_pressed+0x2c>
    3304:	22 30       	cpi	r18, 0x02	; 2
    3306:	09 f0       	breq	.+2      	; 0x330a <ui_control_key_pressed+0x16>
    3308:	92 c0       	rjmp	.+292    	; 0x342e <ui_control_key_pressed+0x13a>
    330a:	1c c0       	rjmp	.+56     	; 0x3344 <ui_control_key_pressed+0x50>
    330c:	25 30       	cpi	r18, 0x05	; 5
    330e:	09 f4       	brne	.+2      	; 0x3312 <ui_control_key_pressed+0x1e>
    3310:	6d c0       	rjmp	.+218    	; 0x33ec <ui_control_key_pressed+0xf8>
    3312:	25 30       	cpi	r18, 0x05	; 5
    3314:	08 f4       	brcc	.+2      	; 0x3318 <ui_control_key_pressed+0x24>
    3316:	42 c0       	rjmp	.+132    	; 0x339c <ui_control_key_pressed+0xa8>
    3318:	26 30       	cpi	r18, 0x06	; 6
    331a:	09 f0       	breq	.+2      	; 0x331e <ui_control_key_pressed+0x2a>
    331c:	88 c0       	rjmp	.+272    	; 0x342e <ui_control_key_pressed+0x13a>
    331e:	77 c0       	rjmp	.+238    	; 0x340e <ui_control_key_pressed+0x11a>
  {
    case UI_CMD_NONE:
      break;
    
    case UI_CMD_ENT1: // Enter a mode
      if(!ui_mode_selected) //Then this command is to select the mode
    3320:	80 91 4f 0b 	lds	r24, 0x0B4F
    3324:	88 23       	and	r24, r24
    3326:	59 f4       	brne	.+22     	; 0x333e <ui_control_key_pressed+0x4a>
      {
        if(ui_selected_mode >= 0)
    3328:	80 91 fd 08 	lds	r24, 0x08FD
    332c:	90 91 fe 08 	lds	r25, 0x08FE
    3330:	97 fd       	sbrc	r25, 7
    3332:	7d c0       	rjmp	.+250    	; 0x342e <ui_control_key_pressed+0x13a>
        {
          ui_mode_selected = true;
    3334:	20 93 4f 0b 	sts	0x0B4F, r18
          ui_reset_the_current_mode();
    3338:	0e 94 56 18 	call	0x30ac	; 0x30ac <ui_reset_the_current_mode>
    333c:	08 95       	ret
          //request_to_play_mp3_file("ERR1.MP3");
        }
      }
      else //Then this the "YES" command in the mode, so call the function in the mode
      {
        ui_call_mode_yes_answer();
    333e:	0e 94 12 19 	call	0x3224	; 0x3224 <ui_call_mode_yes_answer>
    3342:	08 95       	ret
      }
      break;
    
    case UI_CMD_ENT2: // Exit a mode
      //This might be an exit from mode command or "NO" command in the mode
      if(ui_mode_selected) 
    3344:	80 91 4f 0b 	lds	r24, 0x0B4F
    3348:	88 23       	and	r24, r24
    334a:	09 f4       	brne	.+2      	; 0x334e <ui_control_key_pressed+0x5a>
    334c:	70 c0       	rjmp	.+224    	; 0x342e <ui_control_key_pressed+0x13a>
      {
        // If the next byte is 'E', this is exit command 
        // (when the user pressed E2 for more than 5 secs)
        if(usart_ui_received_packet[6] == 69) 
    334e:	80 91 5a 0b 	lds	r24, 0x0B5A
    3352:	85 34       	cpi	r24, 0x45	; 69
    3354:	39 f4       	brne	.+14     	; 0x3364 <ui_control_key_pressed+0x70>
        {
          ui_mode_selected = false;
    3356:	10 92 4f 0b 	sts	0x0B4F, r1
          request_to_play_mp3_file("MM.MP3");
    335a:	8b ea       	ldi	r24, 0xAB	; 171
    335c:	91 e0       	ldi	r25, 0x01	; 1
    335e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
    3362:	08 95       	ret
        }
        else //Then this a "NO" answer, call the mode function for this
        {
          ui_call_mode_no_answer();
    3364:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ui_call_mode_no_answer>
    3368:	08 95       	ret
      }
      //This has no effect when no mode is selected
      break;
    
    case UI_CMD_MFOR: // Move forward in list of modes
      if(!ui_mode_selected)
    336a:	80 91 4f 0b 	lds	r24, 0x0B4F
    336e:	88 23       	and	r24, r24
    3370:	09 f0       	breq	.+2      	; 0x3374 <ui_control_key_pressed+0x80>
    3372:	5d c0       	rjmp	.+186    	; 0x342e <ui_control_key_pressed+0x13a>
      {
        //ui_selected_mode = (ui_selected_mode + 1) % number_of_modes;
        ui_selected_mode = ui_selected_mode + 1 > number_of_modes - 1 ? 0 : ui_selected_mode + 1;
    3374:	20 91 fd 08 	lds	r18, 0x08FD
    3378:	30 91 fe 08 	lds	r19, 0x08FE
    337c:	80 91 90 0d 	lds	r24, 0x0D90
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	28 17       	cp	r18, r24
    3386:	39 07       	cpc	r19, r25
    3388:	1c f0       	brlt	.+6      	; 0x3390 <ui_control_key_pressed+0x9c>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	1b c0       	rjmp	.+54     	; 0x33c6 <ui_control_key_pressed+0xd2>
    3390:	80 91 fd 08 	lds	r24, 0x08FD
    3394:	90 91 fe 08 	lds	r25, 0x08FE
    3398:	01 96       	adiw	r24, 0x01	; 1
    339a:	15 c0       	rjmp	.+42     	; 0x33c6 <ui_control_key_pressed+0xd2>
        ui_play_intro_current_mode();
      }
      break;
    
    case UI_CMD_MREV: // Move backwards in list of modes
      if(!ui_mode_selected)
    339c:	80 91 4f 0b 	lds	r24, 0x0B4F
    33a0:	88 23       	and	r24, r24
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <ui_control_key_pressed+0xb2>
    33a4:	44 c0       	rjmp	.+136    	; 0x342e <ui_control_key_pressed+0x13a>
      {
        ui_selected_mode = ui_selected_mode - 1 < 0 ? number_of_modes - 1 : ui_selected_mode - 1;
    33a6:	80 91 fd 08 	lds	r24, 0x08FD
    33aa:	90 91 fe 08 	lds	r25, 0x08FE
    33ae:	18 16       	cp	r1, r24
    33b0:	19 06       	cpc	r1, r25
    33b2:	24 f0       	brlt	.+8      	; 0x33bc <ui_control_key_pressed+0xc8>
    33b4:	80 91 90 0d 	lds	r24, 0x0D90
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <ui_control_key_pressed+0xd0>
    33bc:	80 91 fd 08 	lds	r24, 0x08FD
    33c0:	90 91 fe 08 	lds	r25, 0x08FE
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	90 93 fe 08 	sts	0x08FE, r25
    33ca:	80 93 fd 08 	sts	0x08FD, r24
        ui_current_mode = ui_modes[ui_selected_mode];
    33ce:	e0 91 fd 08 	lds	r30, 0x08FD
    33d2:	f0 91 fe 08 	lds	r31, 0x08FE
    33d6:	eb 5d       	subi	r30, 0xDB	; 219
    33d8:	f6 4f       	sbci	r31, 0xF6	; 246
    33da:	80 81       	ld	r24, Z
    33dc:	80 93 69 0b 	sts	0x0B69, r24
        vs1053_skip_play = true;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 89 0d 	sts	0x0D89, r24
        ui_play_intro_current_mode();
    33e6:	0e 94 36 19 	call	0x326c	; 0x326c <ui_play_intro_current_mode>
    33ea:	08 95       	ret
      }
      break;

    case UI_CMD_VOLU: // Volume Up
      //only increase sound if you are not playing a sound
      if(!playing_sound){
    33ec:	80 91 1c 09 	lds	r24, 0x091C
    33f0:	88 23       	and	r24, r24
    33f2:	e9 f4       	brne	.+58     	; 0x342e <ui_control_key_pressed+0x13a>
        usart_transmit_string_to_pc_from_flash(PSTR("Vol UP pressed"));
    33f4:	8e ee       	ldi	r24, 0xEE	; 238
    33f6:	92 e0       	ldi	r25, 0x02	; 2
    33f8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
        TX_NEWLINE_PC;
    33fc:	8d e0       	ldi	r24, 0x0D	; 13
    33fe:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    3402:	8a e0       	ldi	r24, 0x0A	; 10
    3404:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
        vs1053_increase_vol();
    3408:	0e 94 af 04 	call	0x95e	; 0x95e <vs1053_increase_vol>
    340c:	08 95       	ret
      }
      break;
    case UI_CMD_VOLD: // Volume down
      //only increase sound if you are not playing a sound
      if(!playing_sound){
    340e:	80 91 1c 09 	lds	r24, 0x091C
    3412:	88 23       	and	r24, r24
    3414:	61 f4       	brne	.+24     	; 0x342e <ui_control_key_pressed+0x13a>
        usart_transmit_string_to_pc_from_flash(PSTR("Vol DOWN pressed"));
    3416:	8d ed       	ldi	r24, 0xDD	; 221
    3418:	92 e0       	ldi	r25, 0x02	; 2
    341a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
        TX_NEWLINE_PC;
    341e:	8d e0       	ldi	r24, 0x0D	; 13
    3420:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    3424:	8a e0       	ldi	r24, 0x0A	; 10
    3426:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
        vs1053_decrease_vol();
    342a:	0e 94 77 04 	call	0x8ee	; 0x8ee <vs1053_decrease_vol>
    342e:	08 95       	ret

00003430 <ui_parse_message>:
 * msgtypes: 
 * @param  IsPlaying -  bool    determines whether or not an MP3 Files is playing
 * @return  bool - returns true if succesfully parsed, understood, and used message
 */
bool ui_parse_message(bool mp3_is_playing)
{
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	2a 97       	sbiw	r28, 0x0a	; 10
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	f8 94       	cli
    3442:	de bf       	out	0x3e, r29	; 62
    3444:	0f be       	out	0x3f, r0	; 63
    3446:	cd bf       	out	0x3d, r28	; 61
    3448:	18 2f       	mov	r17, r24
  //First things first, check the CRC
  unsigned char message_len = usart_ui_received_packet[2];
    344a:	00 91 56 0b 	lds	r16, 0x0B56
  unsigned char message_number;
  unsigned char message_type;
  unsigned char adc_message[10];
  uint16_t chksum = ui_calculate_crc((unsigned char*)&usart_ui_received_packet);
    344e:	84 e5       	ldi	r24, 0x54	; 84
    3450:	9b e0       	ldi	r25, 0x0B	; 11
    3452:	0e 94 20 18 	call	0x3040	; 0x3040 <ui_calculate_crc>

  // Check the checksum
  if (chksum == (usart_ui_received_packet[message_len - 2] << 8 
    3456:	a0 2f       	mov	r26, r16
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	fd 01       	movw	r30, r26
    345c:	ee 5a       	subi	r30, 0xAE	; 174
    345e:	f4 4f       	sbci	r31, 0xF4	; 244
    3460:	60 81       	ld	r22, Z
    3462:	ad 5a       	subi	r26, 0xAD	; 173
    3464:	b4 4f       	sbci	r27, 0xF4	; 244
    3466:	4c 91       	ld	r20, X
    3468:	36 2f       	mov	r19, r22
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	24 2b       	or	r18, r20
    3470:	35 2b       	or	r19, r21
    3472:	82 17       	cp	r24, r18
    3474:	93 07       	cpc	r25, r19
    3476:	09 f0       	breq	.+2      	; 0x347a <ui_parse_message+0x4a>
    3478:	7b c0       	rjmp	.+246    	; 0x3570 <ui_parse_message+0x140>
        | usart_ui_received_packet[message_len - 1]))
  {
    // If correct, store the message elements
    message_number = usart_ui_received_packet[3];
    347a:	80 91 57 0b 	lds	r24, 0x0B57
    message_type = usart_ui_received_packet[4];
    347e:	80 91 58 0b 	lds	r24, 0x0B58

    // Process the message
    if(mp3_is_playing) //If a MP3 file is being played, only the commands are processed
    3482:	11 23       	and	r17, r17
    3484:	41 f0       	breq	.+16     	; 0x3496 <ui_parse_message+0x66>
    {
      if(message_type == 'D')               // Control key pressed
    3486:	84 34       	cpi	r24, 0x44	; 68
    3488:	31 f4       	brne	.+12     	; 0x3496 <ui_parse_message+0x66>
      {
        ui_control_key_pressed();
    348a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <ui_control_key_pressed>
        usart_ui_message_ready = true;      // Once control handled, exit
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	80 93 1d 09 	sts	0x091D, r24
    3494:	74 c0       	rjmp	.+232    	; 0x357e <ui_parse_message+0x14e>
        return true;
      }
    }

    // Handle each type of message separately
    switch(message_type)
    3496:	83 34       	cpi	r24, 0x43	; 67
    3498:	c1 f0       	breq	.+48     	; 0x34ca <ui_parse_message+0x9a>
    349a:	84 34       	cpi	r24, 0x44	; 68
    349c:	30 f4       	brcc	.+12     	; 0x34aa <ui_parse_message+0x7a>
    349e:	81 34       	cpi	r24, 0x41	; 65
    34a0:	51 f0       	breq	.+20     	; 0x34b6 <ui_parse_message+0x86>
    34a2:	82 34       	cpi	r24, 0x42	; 66
    34a4:	09 f0       	breq	.+2      	; 0x34a8 <ui_parse_message+0x78>
    34a6:	68 c0       	rjmp	.+208    	; 0x3578 <ui_parse_message+0x148>
    34a8:	0b c0       	rjmp	.+22     	; 0x34c0 <ui_parse_message+0x90>
    34aa:	84 34       	cpi	r24, 0x44	; 68
    34ac:	99 f0       	breq	.+38     	; 0x34d4 <ui_parse_message+0xa4>
    34ae:	85 34       	cpi	r24, 0x45	; 69
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <ui_parse_message+0x84>
    34b2:	62 c0       	rjmp	.+196    	; 0x3578 <ui_parse_message+0x148>
    34b4:	12 c0       	rjmp	.+36     	; 0x34da <ui_parse_message+0xaa>
    {
      case 'A':                             // Single braille dot
        ui_input_dot_to_current_mode(usart_ui_received_packet[5]);
    34b6:	80 91 59 0b 	lds	r24, 0x0B59
    34ba:	0e 94 ca 18 	call	0x3194	; 0x3194 <ui_input_dot_to_current_mode>
    34be:	5c c0       	rjmp	.+184    	; 0x3578 <ui_parse_message+0x148>
        break;
      case 'B':  
        ui_input_cell_to_current_mode(usart_ui_received_packet[5]);
    34c0:	80 91 59 0b 	lds	r24, 0x0B59
    34c4:	0e 94 a6 18 	call	0x314c	; 0x314c <ui_input_cell_to_current_mode>
    34c8:	57 c0       	rjmp	.+174    	; 0x3578 <ui_parse_message+0x148>
        break;
      case 'C':                             // Error message
        PRINTF("[ui_parse_message] An error occurred in the UI.");
    34ca:	82 eb       	ldi	r24, 0xB2	; 178
    34cc:	91 e0       	ldi	r25, 0x01	; 1
    34ce:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
    34d2:	52 c0       	rjmp	.+164    	; 0x3578 <ui_parse_message+0x148>
        break;
      case 'D':                             // Control button
        //PRINTF("CONTROL BUTTON PRESSED");
        ui_control_key_pressed();
    34d4:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <ui_control_key_pressed>
    34d8:	4f c0       	rjmp	.+158    	; 0x3578 <ui_parse_message+0x148>
        break;
      case 'E':                             // Acknowledgement
        // TODO what does this section do? 'E' marked misceaneous in doc
        adc_message[0] = usart_ui_received_packet[5];
    34da:	80 91 59 0b 	lds	r24, 0x0B59
    34de:	89 83       	std	Y+1, r24	; 0x01
        adc_message[1] = usart_ui_received_packet[6];
    34e0:	80 91 5a 0b 	lds	r24, 0x0B5A
    34e4:	8a 83       	std	Y+2, r24	; 0x02
        adc_message[2] = usart_ui_received_packet[7];
    34e6:	80 91 5b 0b 	lds	r24, 0x0B5B
    34ea:	8b 83       	std	Y+3, r24	; 0x03
        usart_transmit_string_to_pc_from_flash(PSTR("Analog Input channel,MSB,LSB :"));
    34ec:	8d ef       	ldi	r24, 0xFD	; 253
    34ee:	92 e0       	ldi	r25, 0x02	; 2
    34f0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
        sprintf((char*)adc_message,
    34f4:	20 91 59 0b 	lds	r18, 0x0B59
    34f8:	30 91 5a 0b 	lds	r19, 0x0B5A
    34fc:	40 91 5b 0b 	lds	r20, 0x0B5B
    3500:	8d b7       	in	r24, 0x3d	; 61
    3502:	9e b7       	in	r25, 0x3e	; 62
    3504:	0a 97       	sbiw	r24, 0x0a	; 10
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	9e bf       	out	0x3e, r25	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	8d bf       	out	0x3d, r24	; 61
    3510:	ed b7       	in	r30, 0x3d	; 61
    3512:	fe b7       	in	r31, 0x3e	; 62
    3514:	31 96       	adiw	r30, 0x01	; 1
    3516:	8e 01       	movw	r16, r28
    3518:	0f 5f       	subi	r16, 0xFF	; 255
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	ad b7       	in	r26, 0x3d	; 61
    351e:	be b7       	in	r27, 0x3e	; 62
    3520:	12 96       	adiw	r26, 0x02	; 2
    3522:	1c 93       	st	X, r17
    3524:	0e 93       	st	-X, r16
    3526:	11 97       	sbiw	r26, 0x01	; 1
    3528:	82 ee       	ldi	r24, 0xE2	; 226
    352a:	91 e0       	ldi	r25, 0x01	; 1
    352c:	93 83       	std	Z+3, r25	; 0x03
    352e:	82 83       	std	Z+2, r24	; 0x02
    3530:	24 83       	std	Z+4, r18	; 0x04
    3532:	15 82       	std	Z+5, r1	; 0x05
    3534:	36 83       	std	Z+6, r19	; 0x06
    3536:	17 82       	std	Z+7, r1	; 0x07
    3538:	40 87       	std	Z+8, r20	; 0x08
    353a:	11 86       	std	Z+9, r1	; 0x09
    353c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
            "%d,%d,%d",
            usart_ui_received_packet[5],
            usart_ui_received_packet[6],
            usart_ui_received_packet[7]);
        usart_transmit_string_to_pc((unsigned char*)&adc_message);
    3540:	8d b7       	in	r24, 0x3d	; 61
    3542:	9e b7       	in	r25, 0x3e	; 62
    3544:	0a 96       	adiw	r24, 0x0a	; 10
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	9e bf       	out	0x3e, r25	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	8d bf       	out	0x3d, r24	; 61
    3550:	c8 01       	movw	r24, r16
    3552:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
        TX_NEWLINE_PC;
    3556:	8d e0       	ldi	r24, 0x0D	; 13
    3558:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    355c:	8a e0       	ldi	r24, 0x0A	; 10
    355e:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
        TX_NEWLINE_PC;
    3562:	8d e0       	ldi	r24, 0x0D	; 13
    3564:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    3568:	8a e0       	ldi	r24, 0x0A	; 10
    356a:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <ui_parse_message+0x148>
    // In the end: send acknowledgement to the sender 
    // (with the message number, of course !!!)
  } 
  else // Checksum not valid
  {
    usart_ui_message_ready = false;
    3570:	10 92 1d 09 	sts	0x091D, r1
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	03 c0       	rjmp	.+6      	; 0x357e <ui_parse_message+0x14e>
    return false;
  }

  usart_ui_message_ready = false;
    3578:	10 92 1d 09 	sts	0x091D, r1
    357c:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
    357e:	2a 96       	adiw	r28, 0x0a	; 10
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	08 95       	ret

00003594 <ui_check_modes>:
 *         what they are
 * @return bool  - return true on succesful completion of transmission, false on 
 *         failure
 */
bool ui_check_modes(void)
{
    3594:	af 92       	push	r10
    3596:	bf 92       	push	r11
    3598:	df 92       	push	r13
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	c9 56       	subi	r28, 0x69	; 105
    35ac:	d0 40       	sbci	r29, 0x00	; 0
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
  unsigned char pc_print_content[2];
  int i = 0, mode_number = 0;
  bool parsing_mode_descriptor;
  const char* modes_file = "MODES.DAT";

  number_of_modes = 0;
    35b8:	10 92 90 0d 	sts	0x0D90, r1
    35bc:	46 e0       	ldi	r20, 0x06	; 6
    35be:	e4 2e       	mov	r14, r20
    35c0:	f1 2c       	mov	r15, r1
    35c2:	ec 0e       	add	r14, r28
    35c4:	fd 1e       	adc	r15, r29
    35c6:	f7 01       	movw	r30, r14

  // Clear file content array  
  for(i = 0; i < 100; i++)
    35c8:	c7 01       	movw	r24, r14
    35ca:	1e 2d       	mov	r17, r14
    35cc:	09 2f       	mov	r16, r25
    35ce:	ce 01       	movw	r24, r28
    35d0:	86 59       	subi	r24, 0x96	; 150
    35d2:	9f 4f       	sbci	r25, 0xFF	; 255
    file_content[i] = 0;
    35d4:	11 92       	st	Z+, r1
  const char* modes_file = "MODES.DAT";

  number_of_modes = 0;

  // Clear file content array  
  for(i = 0; i < 100; i++)
    35d6:	e8 17       	cp	r30, r24
    35d8:	f9 07       	cpc	r31, r25
    35da:	e1 f7       	brne	.-8      	; 0x35d4 <ui_check_modes+0x40>
    file_content[i] = 0;

  // Populate file content
  if(read_and_retrieve_file_contents((unsigned char*)modes_file, &file_content[0]) > 0)
    35dc:	8b ee       	ldi	r24, 0xEB	; 235
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	61 2f       	mov	r22, r17
    35e2:	70 2f       	mov	r23, r16
    35e4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <read_and_retrieve_file_contents>
    35e8:	88 23       	and	r24, r24
    35ea:	39 f0       	breq	.+14     	; 0x35fa <ui_check_modes+0x66>
  {
    TX_NEWLINE_PC;
    35ec:	8d e0       	ldi	r24, 0x0D	; 13
    35ee:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    35f2:	8a e0       	ldi	r24, 0x0A	; 10
    35f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    35f8:	33 c0       	rjmp	.+102    	; 0x3660 <ui_check_modes+0xcc>
    return false;
  }

  // Print file contents to debug stream
  usart_transmit_string_to_pc(&file_content[0]);
    35fa:	81 2f       	mov	r24, r17
    35fc:	90 2f       	mov	r25, r16
    35fe:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
  TX_NEWLINE_PC;
    3602:	8d e0       	ldi	r24, 0x0D	; 13
    3604:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    3608:	8a e0       	ldi	r24, 0x0A	; 10
    360a:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	20 e0       	ldi	r18, 0x00	; 0
    {
      if(mode_number == 3)
      {
        return false;
      }
      mode_id[mode_number++] = file_content[i];
    3614:	33 e0       	ldi	r19, 0x03	; 3
    3616:	a3 2e       	mov	r10, r19
    3618:	b1 2c       	mov	r11, r1
    361a:	ac 0e       	add	r10, r28
    361c:	bd 1e       	adc	r11, r29
    361e:	2e c0       	rjmp	.+92     	; 0x367c <ui_check_modes+0xe8>
  i = 0;
  // '$' signifies end of file, <i> signifies mode i active
  while(file_content[i] != '$')
  {
    // at end of mode descriptor
    if(file_content[i] == '>')
    3620:	3e e3       	ldi	r19, 0x3E	; 62
    3622:	d3 16       	cp	r13, r19
    3624:	89 f4       	brne	.+34     	; 0x3648 <ui_check_modes+0xb4>
    {
      ui_modes[number_of_modes] = atoi((char*)&mode_id[0]);
    3626:	80 91 90 0d 	lds	r24, 0x0D90
    362a:	08 2f       	mov	r16, r24
    362c:	10 e0       	ldi	r17, 0x00	; 0
    362e:	c5 01       	movw	r24, r10
    3630:	0e 94 1f 2c 	call	0x583e	; 0x583e <atoi>
    3634:	0b 5d       	subi	r16, 0xDB	; 219
    3636:	16 4f       	sbci	r17, 0xF6	; 246
    3638:	d8 01       	movw	r26, r16
    363a:	8c 93       	st	X, r24
      number_of_modes++;
    363c:	80 91 90 0d 	lds	r24, 0x0D90
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	80 93 90 0d 	sts	0x0D90, r24
    3646:	02 c0       	rjmp	.+4      	; 0x364c <ui_check_modes+0xb8>
      parsing_mode_descriptor = false;
    }

    // if not at a mode descriptor, clear everything
    if(!parsing_mode_descriptor)
    3648:	22 23       	and	r18, r18
    364a:	39 f4       	brne	.+14     	; 0x365a <ui_check_modes+0xc6>
    {
      mode_id[0] = 0;
    364c:	1b 82       	std	Y+3, r1	; 0x03
      mode_id[1] = 0;
    364e:	1c 82       	std	Y+4, r1	; 0x04
      mode_id[2] = 0;
    3650:	1d 82       	std	Y+5, r1	; 0x05
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	0a c0       	rjmp	.+20     	; 0x366e <ui_check_modes+0xda>
      mode_number = 0;
    }
    else
    {
      if(mode_number == 3)
    365a:	83 30       	cpi	r24, 0x03	; 3
    365c:	91 05       	cpc	r25, r1
    365e:	11 f4       	brne	.+4      	; 0x3664 <ui_check_modes+0xd0>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	74 c0       	rjmp	.+232    	; 0x374c <ui_check_modes+0x1b8>
      {
        return false;
      }
      mode_id[mode_number++] = file_content[i];
    3664:	f5 01       	movw	r30, r10
    3666:	e8 0f       	add	r30, r24
    3668:	f9 1f       	adc	r31, r25
    366a:	d0 82       	st	Z, r13
    366c:	01 96       	adiw	r24, 0x01	; 1
    }

    // if at new mode descriptor
    if(file_content[i] == '<')
    366e:	bc e3       	ldi	r27, 0x3C	; 60
    3670:	db 16       	cp	r13, r27
    3672:	09 f4       	brne	.+2      	; 0x3676 <ui_check_modes+0xe2>
    3674:	21 e0       	ldi	r18, 0x01	; 1
    3676:	08 94       	sec
    3678:	e1 1c       	adc	r14, r1
    367a:	f1 1c       	adc	r15, r1

  parsing_mode_descriptor = false;

  i = 0;
  // '$' signifies end of file, <i> signifies mode i active
  while(file_content[i] != '$')
    367c:	f7 01       	movw	r30, r14
    367e:	d0 80       	ld	r13, Z
    3680:	f4 e2       	ldi	r31, 0x24	; 36
    3682:	df 16       	cp	r13, r31
    3684:	69 f6       	brne	.-102    	; 0x3620 <ui_check_modes+0x8c>
      parsing_mode_descriptor = true;
    }
    i++;    
  }

  pc_print_content[0] = 0;
    3686:	19 82       	std	Y+1, r1	; 0x01
  pc_print_content[1] = 0;
    3688:	1a 82       	std	Y+2, r1	; 0x02

  // Print the number of modes found to a string
  sprintf((char*)&pc_print_content[0], "%d", number_of_modes);
    368a:	20 91 90 0d 	lds	r18, 0x0D90
    368e:	00 d0       	rcall	.+0      	; 0x3690 <ui_check_modes+0xfc>
    3690:	00 d0       	rcall	.+0      	; 0x3692 <ui_check_modes+0xfe>
    3692:	00 d0       	rcall	.+0      	; 0x3694 <ui_check_modes+0x100>
    3694:	ed b7       	in	r30, 0x3d	; 61
    3696:	fe b7       	in	r31, 0x3e	; 62
    3698:	31 96       	adiw	r30, 0x01	; 1
    369a:	8e 01       	movw	r16, r28
    369c:	0f 5f       	subi	r16, 0xFF	; 255
    369e:	1f 4f       	sbci	r17, 0xFF	; 255
    36a0:	ad b7       	in	r26, 0x3d	; 61
    36a2:	be b7       	in	r27, 0x3e	; 62
    36a4:	12 96       	adiw	r26, 0x02	; 2
    36a6:	1c 93       	st	X, r17
    36a8:	0e 93       	st	-X, r16
    36aa:	11 97       	sbiw	r26, 0x01	; 1
    36ac:	85 ef       	ldi	r24, 0xF5	; 245
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	93 83       	std	Z+3, r25	; 0x03
    36b2:	82 83       	std	Z+2, r24	; 0x02
    36b4:	24 83       	std	Z+4, r18	; 0x04
    36b6:	15 82       	std	Z+5, r1	; 0x05
    36b8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>

  // Send the actual modes
  usart_transmit_string_to_pc_from_flash(PSTR("And the modes are; "));
    36bc:	ed b7       	in	r30, 0x3d	; 61
    36be:	fe b7       	in	r31, 0x3e	; 62
    36c0:	36 96       	adiw	r30, 0x06	; 6
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	fe bf       	out	0x3e, r31	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	ed bf       	out	0x3d, r30	; 61
    36cc:	8c e1       	ldi	r24, 0x1C	; 28
    36ce:	93 e0       	ldi	r25, 0x03	; 3
    36d0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    36d4:	ee 24       	eor	r14, r14
    36d6:	ff 24       	eor	r15, r15
  for(i = 0; i < number_of_modes; i++)
  {
    sprintf((char*)&pc_print_content[0], "%d, ", ui_modes[i]);
    36d8:	d0 2e       	mov	r13, r16
    36da:	01 2f       	mov	r16, r17
    36dc:	28 ef       	ldi	r18, 0xF8	; 248
    36de:	a2 2e       	mov	r10, r18
    36e0:	21 e0       	ldi	r18, 0x01	; 1
    36e2:	b2 2e       	mov	r11, r18
    36e4:	26 c0       	rjmp	.+76     	; 0x3732 <ui_check_modes+0x19e>
    36e6:	f7 01       	movw	r30, r14
    36e8:	eb 5d       	subi	r30, 0xDB	; 219
    36ea:	f6 4f       	sbci	r31, 0xF6	; 246
    36ec:	80 81       	ld	r24, Z
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <ui_check_modes+0x15c>
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <ui_check_modes+0x15e>
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <ui_check_modes+0x160>
    36f4:	ed b7       	in	r30, 0x3d	; 61
    36f6:	fe b7       	in	r31, 0x3e	; 62
    36f8:	31 96       	adiw	r30, 0x01	; 1
    36fa:	ad b7       	in	r26, 0x3d	; 61
    36fc:	be b7       	in	r27, 0x3e	; 62
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	dc 92       	st	X, r13
    3702:	11 97       	sbiw	r26, 0x01	; 1
    3704:	12 96       	adiw	r26, 0x02	; 2
    3706:	0c 93       	st	X, r16
    3708:	b3 82       	std	Z+3, r11	; 0x03
    370a:	a2 82       	std	Z+2, r10	; 0x02
    370c:	84 83       	std	Z+4, r24	; 0x04
    370e:	15 82       	std	Z+5, r1	; 0x05
    3710:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
    usart_transmit_string_to_pc(&pc_print_content[0]);
    3714:	ed b7       	in	r30, 0x3d	; 61
    3716:	fe b7       	in	r31, 0x3e	; 62
    3718:	36 96       	adiw	r30, 0x06	; 6
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	fe bf       	out	0x3e, r31	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	ed bf       	out	0x3d, r30	; 61
    3724:	8d 2d       	mov	r24, r13
    3726:	90 2f       	mov	r25, r16
    3728:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
  // Print the number of modes found to a string
  sprintf((char*)&pc_print_content[0], "%d", number_of_modes);

  // Send the actual modes
  usart_transmit_string_to_pc_from_flash(PSTR("And the modes are; "));
  for(i = 0; i < number_of_modes; i++)
    372c:	08 94       	sec
    372e:	e1 1c       	adc	r14, r1
    3730:	f1 1c       	adc	r15, r1
    3732:	80 91 90 0d 	lds	r24, 0x0D90
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	e8 16       	cp	r14, r24
    373a:	f9 06       	cpc	r15, r25
    373c:	a4 f2       	brlt	.-88     	; 0x36e6 <ui_check_modes+0x152>
  {
    sprintf((char*)&pc_print_content[0], "%d, ", ui_modes[i]);
    usart_transmit_string_to_pc(&pc_print_content[0]);
  }
  TX_NEWLINE_PC;
    373e:	8d e0       	ldi	r24, 0x0D	; 13
    3740:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    3744:	8a e0       	ldi	r24, 0x0A	; 10
    3746:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    374a:	81 e0       	ldi	r24, 0x01	; 1

  return true; 
}
    374c:	c7 59       	subi	r28, 0x97	; 151
    374e:	df 4f       	sbci	r29, 0xFF	; 255
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	ff 90       	pop	r15
    3764:	ef 90       	pop	r14
    3766:	df 90       	pop	r13
    3768:	bf 90       	pop	r11
    376a:	af 90       	pop	r10
    376c:	08 95       	ret

0000376e <random_number_as_char>:
 *        a psuedo-random number. Turn that into a number from 1 - 6
 *        return the charachter of that number;
 * @return char - charachter representation of a number from 1 - 6
 */
char random_number_as_char()
{
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
  int num = TCNT1;
    3772:	20 91 84 00 	lds	r18, 0x0084
    3776:	30 91 85 00 	lds	r19, 0x0085
  int i;

  num *= PRIME;
  num = (abs(num) % 6);
    377a:	85 e3       	ldi	r24, 0x35	; 53
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	28 9f       	mul	r18, r24
    3780:	a0 01       	movw	r20, r0
    3782:	29 9f       	mul	r18, r25
    3784:	50 0d       	add	r21, r0
    3786:	38 9f       	mul	r19, r24
    3788:	50 0d       	add	r21, r0
    378a:	11 24       	eor	r1, r1
    378c:	57 ff       	sbrs	r21, 7
    378e:	03 c0       	rjmp	.+6      	; 0x3796 <random_number_as_char+0x28>
    3790:	50 95       	com	r21
    3792:	41 95       	neg	r20
    3794:	5f 4f       	sbci	r21, 0xFF	; 255
    3796:	ca 01       	movw	r24, r20
    3798:	66 e0       	ldi	r22, 0x06	; 6
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    37a0:	ac 01       	movw	r20, r24
  //while you are looking at a full section of the array
  while(used_number[num])
  {
    num = TCNT1;
    num *= PRIME;
    num = (abs(num) % 6);
    37a2:	c5 e3       	ldi	r28, 0x35	; 53
    37a4:	d0 e0       	ldi	r29, 0x00	; 0
    37a6:	16 c0       	rjmp	.+44     	; 0x37d4 <random_number_as_char+0x66>
  num = (abs(num) % 6);

  //while you are looking at a full section of the array
  while(used_number[num])
  {
    num = TCNT1;
    37a8:	80 91 84 00 	lds	r24, 0x0084
    37ac:	90 91 85 00 	lds	r25, 0x0085
    num *= PRIME;
    num = (abs(num) % 6);
    37b0:	8c 9f       	mul	r24, r28
    37b2:	90 01       	movw	r18, r0
    37b4:	8d 9f       	mul	r24, r29
    37b6:	30 0d       	add	r19, r0
    37b8:	9c 9f       	mul	r25, r28
    37ba:	30 0d       	add	r19, r0
    37bc:	11 24       	eor	r1, r1
    37be:	37 ff       	sbrs	r19, 7
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <random_number_as_char+0x5a>
    37c2:	30 95       	com	r19
    37c4:	21 95       	neg	r18
    37c6:	3f 4f       	sbci	r19, 0xFF	; 255
    37c8:	c9 01       	movw	r24, r18
    37ca:	66 e0       	ldi	r22, 0x06	; 6
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    37d2:	ac 01       	movw	r20, r24

  num *= PRIME;
  num = (abs(num) % 6);

  //while you are looking at a full section of the array
  while(used_number[num])
    37d4:	fa 01       	movw	r30, r20
    37d6:	ea 55       	subi	r30, 0x5A	; 90
    37d8:	f7 4f       	sbci	r31, 0xF7	; 247
    37da:	80 81       	ld	r24, Z
    37dc:	88 23       	and	r24, r24
    37de:	21 f7       	brne	.-56     	; 0x37a8 <random_number_as_char+0x3a>
    num = TCNT1;
    num *= PRIME;
    num = (abs(num) % 6);
  }

  used_number[num] = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	80 83       	st	Z, r24
  used_num_cnt ++;
    37e4:	80 91 fc 0d 	lds	r24, 0x0DFC
    37e8:	8f 5f       	subi	r24, 0xFF	; 255
    37ea:	80 93 fc 0d 	sts	0x0DFC, r24

  //if you find that you have used all of the letters, clear both the array and the count
  if(used_num_cnt == NUM_DOTS)
    37ee:	86 30       	cpi	r24, 0x06	; 6
    37f0:	71 f4       	brne	.+28     	; 0x380e <random_number_as_char+0xa0>
  {
    for(i = 0; i < NUM_DOTS; i ++)
      used_number[i] = 0;
    37f2:	10 92 a6 08 	sts	0x08A6, r1
    37f6:	10 92 a7 08 	sts	0x08A7, r1
    37fa:	10 92 a8 08 	sts	0x08A8, r1
    37fe:	10 92 a9 08 	sts	0x08A9, r1
    3802:	10 92 aa 08 	sts	0x08AA, r1
    3806:	10 92 ab 08 	sts	0x08AB, r1
    used_num_cnt = 0;
    380a:	10 92 fc 0d 	sts	0x0DFC, r1
  }

  //change from range 0-5 to 1-6
  num += 1;
    380e:	9a 01       	movw	r18, r20
    3810:	2f 5f       	subi	r18, 0xFF	; 255
    3812:	3f 4f       	sbci	r19, 0xFF	; 255

  // Return the number as a character
  if (num >= 1 && num <= 6) return '0' + num;
    3814:	46 30       	cpi	r20, 0x06	; 6
    3816:	51 05       	cpc	r21, r1
    3818:	10 f0       	brcs	.+4      	; 0x381e <random_number_as_char+0xb0>
    381a:	80 e3       	ldi	r24, 0x30	; 48
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <random_number_as_char+0xb4>
    381e:	82 2f       	mov	r24, r18
    3820:	80 5d       	subi	r24, 0xD0	; 208

  // Default behavior, could not generate a valid char
  return '0';
}
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	08 95       	ret

00003828 <md1_reset>:
 *        Should be useful for error handling
 * @return Void
 */
void md1_reset(void)
{
  current_state = STATE_INITIAL;
    3828:	10 92 b2 0d 	sts	0x0DB2, r1
    382c:	10 92 b1 0d 	sts	0x0DB1, r1
}
    3830:	08 95       	ret

00003832 <md1_call_mode_no_answer>:
{
  request_to_play_mp3_file("find_dot.MP3");
  current_state = STATE_REQUEST_INPUT2;
}

void md1_call_mode_no_answer(void) {}
    3832:	08 95       	ret

00003834 <md1_input_dot>:
 * @param this_dot the dot being input
 * @return Void
 */
void md1_input_dot(char this_dot)
{
  last_dot = this_dot;
    3834:	80 93 ac 08 	sts	0x08AC, r24
  current_state = STATE_PROC_INPUT;
    3838:	84 e0       	ldi	r24, 0x04	; 4
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	90 93 b2 0d 	sts	0x0DB2, r25
    3840:	80 93 b1 0d 	sts	0x0DB1, r24
}
    3844:	08 95       	ret

00003846 <md1_input_cell>:
/**
 * @brief register cell input
 * @param this_cell the cell being input
 * @return void
 */
void md1_input_cell(char this_cell) {}
    3846:	08 95       	ret

00003848 <md1_call_mode_yes_answer>:
 * @brief in mode 1, enter button just replays the current prompt
 * @return Void
 */
void md1_call_mode_yes_answer(void)
{
  request_to_play_mp3_file("find_dot.MP3");
    3848:	8d ef       	ldi	r24, 0xFD	; 253
    384a:	91 e0       	ldi	r25, 0x01	; 1
    384c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
  current_state = STATE_REQUEST_INPUT2;
    3850:	82 e0       	ldi	r24, 0x02	; 2
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	90 93 b2 0d 	sts	0x0DB2, r25
    3858:	80 93 b1 0d 	sts	0x0DB1, r24
}
    385c:	08 95       	ret

0000385e <md1_play_requested_dot>:
 * @brief echo the number of the dot pressed
 * @param last_dot - unsigned char. Which dot to play
 * @return Void
 */
void md1_play_requested_dot(unsigned char last_dot)
{
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	2a 97       	sbiw	r28, 0x0a	; 10
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	28 2f       	mov	r18, r24
  char buf[10];

  // Check for validity of number
  if (last_dot >= '1' && last_dot <= '6')
    3878:	81 53       	subi	r24, 0x31	; 49
    387a:	86 30       	cpi	r24, 0x06	; 6
    387c:	10 f5       	brcc	.+68     	; 0x38c2 <md1_play_requested_dot+0x64>
  {
    sprintf(buf, "dot_%c.MP3", last_dot);
    387e:	00 d0       	rcall	.+0      	; 0x3880 <md1_play_requested_dot+0x22>
    3880:	00 d0       	rcall	.+0      	; 0x3882 <md1_play_requested_dot+0x24>
    3882:	00 d0       	rcall	.+0      	; 0x3884 <md1_play_requested_dot+0x26>
    3884:	ed b7       	in	r30, 0x3d	; 61
    3886:	fe b7       	in	r31, 0x3e	; 62
    3888:	31 96       	adiw	r30, 0x01	; 1
    388a:	8e 01       	movw	r16, r28
    388c:	0f 5f       	subi	r16, 0xFF	; 255
    388e:	1f 4f       	sbci	r17, 0xFF	; 255
    3890:	ad b7       	in	r26, 0x3d	; 61
    3892:	be b7       	in	r27, 0x3e	; 62
    3894:	12 96       	adiw	r26, 0x02	; 2
    3896:	1c 93       	st	X, r17
    3898:	0e 93       	st	-X, r16
    389a:	11 97       	sbiw	r26, 0x01	; 1
    389c:	8a e0       	ldi	r24, 0x0A	; 10
    389e:	92 e0       	ldi	r25, 0x02	; 2
    38a0:	93 83       	std	Z+3, r25	; 0x03
    38a2:	82 83       	std	Z+2, r24	; 0x02
    38a4:	24 83       	std	Z+4, r18	; 0x04
    38a6:	15 82       	std	Z+5, r1	; 0x05
    38a8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
    request_to_play_mp3_file(buf);
    38ac:	8d b7       	in	r24, 0x3d	; 61
    38ae:	9e b7       	in	r25, 0x3e	; 62
    38b0:	06 96       	adiw	r24, 0x06	; 6
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	9e bf       	out	0x3e, r25	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	8d bf       	out	0x3d, r24	; 61
    38bc:	c8 01       	movw	r24, r16
    38be:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
  }
}
    38c2:	2a 96       	adiw	r28, 0x0a	; 10
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	de bf       	out	0x3e, r29	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	cd bf       	out	0x3d, r28	; 61
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	08 95       	ret

000038d8 <md1_main>:
 * whether they pressed the correct dot
 * @return Void
 */
void md1_main(void)
{
  switch(current_state)
    38d8:	80 91 b1 0d 	lds	r24, 0x0DB1
    38dc:	90 91 b2 0d 	lds	r25, 0x0DB2
    38e0:	82 30       	cpi	r24, 0x02	; 2
    38e2:	91 05       	cpc	r25, r1
    38e4:	41 f1       	breq	.+80     	; 0x3936 <md1_main+0x5e>
    38e6:	83 30       	cpi	r24, 0x03	; 3
    38e8:	91 05       	cpc	r25, r1
    38ea:	34 f4       	brge	.+12     	; 0x38f8 <md1_main+0x20>
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	59 f0       	breq	.+22     	; 0x3906 <md1_main+0x2e>
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	09 f0       	breq	.+2      	; 0x38f6 <md1_main+0x1e>
    38f4:	4b c0       	rjmp	.+150    	; 0x398c <md1_main+0xb4>
    38f6:	14 c0       	rjmp	.+40     	; 0x3920 <md1_main+0x48>
    38f8:	83 30       	cpi	r24, 0x03	; 3
    38fa:	91 05       	cpc	r25, r1
    38fc:	09 f1       	breq	.+66     	; 0x3940 <md1_main+0x68>
    38fe:	04 97       	sbiw	r24, 0x04	; 4
    3900:	09 f0       	breq	.+2      	; 0x3904 <md1_main+0x2c>
    3902:	44 c0       	rjmp	.+136    	; 0x398c <md1_main+0xb4>
    3904:	24 c0       	rjmp	.+72     	; 0x394e <md1_main+0x76>
  {
    case STATE_INITIAL:
      PRINTF("[MD1] Entering MD1\n\r");
    3906:	85 e1       	ldi	r24, 0x15	; 21
    3908:	92 e0       	ldi	r25, 0x02	; 2
    390a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
      used_num_cnt = 0;
    390e:	10 92 fc 0d 	sts	0x0DFC, r1
      // Play the introductory message for Mode 1
      request_to_play_mp3_file("MD1INT.MP3");
    3912:	8a e2       	ldi	r24, 0x2A	; 42
    3914:	92 e0       	ldi	r25, 0x02	; 2
    3916:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      current_state = STATE_REQUEST_INPUT1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	25 c0       	rjmp	.+74     	; 0x396a <md1_main+0x92>
      break;
    case STATE_REQUEST_INPUT1:
      request_to_play_mp3_file("find_dot.MP3");
    3920:	8d ef       	ldi	r24, 0xFD	; 253
    3922:	91 e0       	ldi	r25, 0x01	; 1
    3924:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      expected_dot = random_number_as_char();
    3928:	0e 94 b7 1b 	call	0x376e	; 0x376e <random_number_as_char>
    392c:	80 93 bf 0d 	sts	0x0DBF, r24
      current_state = STATE_REQUEST_INPUT2;
    3930:	82 e0       	ldi	r24, 0x02	; 2
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	1a c0       	rjmp	.+52     	; 0x396a <md1_main+0x92>
      break;
    case STATE_REQUEST_INPUT2:
      // Generate a random char from '1' to '6'
      md1_play_requested_dot(expected_dot);
    3936:	80 91 bf 0d 	lds	r24, 0x0DBF
    393a:	0e 94 2f 1c 	call	0x385e	; 0x385e <md1_play_requested_dot>
    393e:	13 c0       	rjmp	.+38     	; 0x3966 <md1_main+0x8e>
      current_state = STATE_WAIT_INPUT;
      break;
    case STATE_WAIT_INPUT:
      if(last_dot != 0)
    3940:	80 91 ac 08 	lds	r24, 0x08AC
    3944:	88 23       	and	r24, r24
    3946:	11 f1       	breq	.+68     	; 0x398c <md1_main+0xb4>
        current_state = STATE_PROC_INPUT;
    3948:	84 e0       	ldi	r24, 0x04	; 4
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e c0       	rjmp	.+28     	; 0x396a <md1_main+0x92>
      break;
    case STATE_PROC_INPUT:
      if(last_dot != expected_dot)
    394e:	90 91 ac 08 	lds	r25, 0x08AC
    3952:	80 91 bf 0d 	lds	r24, 0x0DBF
    3956:	98 17       	cp	r25, r24
    3958:	69 f0       	breq	.+26     	; 0x3974 <md1_main+0x9c>
      {
        request_to_play_mp3_file("no.MP3");
    395a:	85 e3       	ldi	r24, 0x35	; 53
    395c:	92 e0       	ldi	r25, 0x02	; 2
    395e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        last_dot = 0;
    3962:	10 92 ac 08 	sts	0x08AC, r1
        current_state = STATE_WAIT_INPUT;
    3966:	83 e0       	ldi	r24, 0x03	; 3
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	90 93 b2 0d 	sts	0x0DB2, r25
    396e:	80 93 b1 0d 	sts	0x0DB1, r24
    3972:	08 95       	ret
      }
      else
      {
        request_to_play_mp3_file("good.MP3");
    3974:	8c e3       	ldi	r24, 0x3C	; 60
    3976:	92 e0       	ldi	r25, 0x02	; 2
    3978:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        last_dot = 0;
    397c:	10 92 ac 08 	sts	0x08AC, r1
        current_state = STATE_REQUEST_INPUT1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	90 93 b2 0d 	sts	0x0DB2, r25
    3988:	80 93 b1 0d 	sts	0x0DB1, r24
    398c:	08 95       	ret

0000398e <generate_random_number>:
 * @brief generates a psuedo random number based on the system clock
 * @return int- random number
 */
int generate_random_number()
{
  int ret = TCNT1;
    398e:	80 91 84 00 	lds	r24, 0x0084
    3992:	90 91 85 00 	lds	r25, 0x0085
    3996:	25 e3       	ldi	r18, 0x35	; 53
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	a9 01       	movw	r20, r18
    399c:	84 9f       	mul	r24, r20
    399e:	90 01       	movw	r18, r0
    39a0:	85 9f       	mul	r24, r21
    39a2:	30 0d       	add	r19, r0
    39a4:	94 9f       	mul	r25, r20
    39a6:	30 0d       	add	r19, r0
    39a8:	11 24       	eor	r1, r1

  ret *= PRIME;
  return ret;
}
    39aa:	c9 01       	movw	r24, r18
    39ac:	08 95       	ret

000039ae <prop_rand_number>:
 * @brief given a random number, and that you have 5 letters, looks in used letter to see
 * if valid
 * @return int - index into the letters being used
 */
int prop_rand_number()
{
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
 * @brief generates a psuedo random number based on the system clock
 * @return int- random number
 */
int generate_random_number()
{
  int ret = TCNT1;
    39b2:	20 91 84 00 	lds	r18, 0x0084
    39b6:	30 91 85 00 	lds	r19, 0x0085
int prop_rand_number()
{
  int ret_int;
  int i;

  ret_int = (generate_random_number() % LET_CLST_SIZE);
    39ba:	85 e3       	ldi	r24, 0x35	; 53
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	ac 01       	movw	r20, r24
    39c0:	24 9f       	mul	r18, r20
    39c2:	c0 01       	movw	r24, r0
    39c4:	25 9f       	mul	r18, r21
    39c6:	90 0d       	add	r25, r0
    39c8:	34 9f       	mul	r19, r20
    39ca:	90 0d       	add	r25, r0
    39cc:	11 24       	eor	r1, r1
    39ce:	65 e0       	ldi	r22, 0x05	; 5
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    39d6:	9c 01       	movw	r18, r24
  while(used_letter[ret_int]){ret_int = generate_random_number() % LET_CLST_SIZE;}
    39d8:	c5 e3       	ldi	r28, 0x35	; 53
    39da:	d0 e0       	ldi	r29, 0x00	; 0
    39dc:	11 c0       	rjmp	.+34     	; 0x3a00 <prop_rand_number+0x52>
 * @brief generates a psuedo random number based on the system clock
 * @return int- random number
 */
int generate_random_number()
{
  int ret = TCNT1;
    39de:	80 91 84 00 	lds	r24, 0x0084
    39e2:	90 91 85 00 	lds	r25, 0x0085
{
  int ret_int;
  int i;

  ret_int = (generate_random_number() % LET_CLST_SIZE);
  while(used_letter[ret_int]){ret_int = generate_random_number() % LET_CLST_SIZE;}
    39e6:	9c 01       	movw	r18, r24
    39e8:	2c 9f       	mul	r18, r28
    39ea:	c0 01       	movw	r24, r0
    39ec:	2d 9f       	mul	r18, r29
    39ee:	90 0d       	add	r25, r0
    39f0:	3c 9f       	mul	r19, r28
    39f2:	90 0d       	add	r25, r0
    39f4:	11 24       	eor	r1, r1
    39f6:	65 e0       	ldi	r22, 0x05	; 5
    39f8:	70 e0       	ldi	r23, 0x00	; 0
    39fa:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    39fe:	9c 01       	movw	r18, r24
    3a00:	f9 01       	movw	r30, r18
    3a02:	e3 55       	subi	r30, 0x53	; 83
    3a04:	f7 4f       	sbci	r31, 0xF7	; 247
    3a06:	80 81       	ld	r24, Z
    3a08:	88 23       	and	r24, r24
    3a0a:	49 f7       	brne	.-46     	; 0x39de <prop_rand_number+0x30>

  used_letter[ret_int] = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	80 83       	st	Z, r24
  used_let_cnt ++;
    3a10:	80 91 c1 0d 	lds	r24, 0x0DC1
    3a14:	8f 5f       	subi	r24, 0xFF	; 255
    3a16:	80 93 c1 0d 	sts	0x0DC1, r24

  //if you find that you ahve used all of the letters, clear both the array and the count
  if(used_let_cnt == LET_CLST_SIZE)
    3a1a:	85 30       	cpi	r24, 0x05	; 5
    3a1c:	61 f4       	brne	.+24     	; 0x3a36 <prop_rand_number+0x88>
  {
    for(i = 0; i < LET_CLST_SIZE; i ++)
      used_letter[i] = 0;
    3a1e:	10 92 ad 08 	sts	0x08AD, r1
    3a22:	10 92 ae 08 	sts	0x08AE, r1
    3a26:	10 92 af 08 	sts	0x08AF, r1
    3a2a:	10 92 b0 08 	sts	0x08B0, r1
    3a2e:	10 92 b1 08 	sts	0x08B1, r1
    used_let_cnt = 0;
    3a32:	10 92 c1 0d 	sts	0x0DC1, r1
  }

  return ret_int;
}
    3a36:	c9 01       	movw	r24, r18
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	08 95       	ret

00003a3e <get_bits_from_letters>:
 * @param let - char, charachter letter want to change to bits 
 * @return char - letter that corresponds to buttons pressed 
 *                on error - not found bits, return -1
 */
char get_bits_from_letters(char let)
{
    3a3e:	98 2f       	mov	r25, r24
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
  int alphbt_len = 26;
  int i;

  for(i = 0; i < alphbt_len; i ++)
  {
    if(letter_arr[i] == let)
    3a44:	fd 01       	movw	r30, r26
    3a46:	eb 52       	subi	r30, 0x2B	; 43
    3a48:	fd 4f       	sbci	r31, 0xFD	; 253
    3a4a:	80 81       	ld	r24, Z
    3a4c:	89 17       	cp	r24, r25
    3a4e:	21 f4       	brne	.+8      	; 0x3a58 <get_bits_from_letters+0x1a>
      return letter_bits_arr[i];
    3a50:	a5 54       	subi	r26, 0x45	; 69
    3a52:	bd 4f       	sbci	r27, 0xFD	; 253
    3a54:	8c 91       	ld	r24, X
    3a56:	08 95       	ret
char get_bits_from_letters(char let)
{
  int alphbt_len = 26;
  int i;

  for(i = 0; i < alphbt_len; i ++)
    3a58:	11 96       	adiw	r26, 0x01	; 1
    3a5a:	aa 31       	cpi	r26, 0x1A	; 26
    3a5c:	b1 05       	cpc	r27, r1
    3a5e:	91 f7       	brne	.-28     	; 0x3a44 <get_bits_from_letters+0x6>
    3a60:	8f ef       	ldi	r24, 0xFF	; 255
  {
    if(letter_arr[i] == let)
      return letter_bits_arr[i];
  }
  return -1;
}
    3a62:	08 95       	ret

00003a64 <get_letter_from_bits>:
 * @param bits - char, bits that correspond to the buttons pressed
 * @return char - letter that corresponds to buttons pressed 
 *                on error - not found bits, return -1
 */
char get_letter_from_bits(char bits)
{
    3a64:	98 2f       	mov	r25, r24
    3a66:	a0 e0       	ldi	r26, 0x00	; 0
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
  int alphabet_len = 26;
  int i;

  for(i = 0; i < alphabet_len; i++)
  {
    if(letter_bits_arr[i] == bits)
    3a6a:	fd 01       	movw	r30, r26
    3a6c:	e5 54       	subi	r30, 0x45	; 69
    3a6e:	fd 4f       	sbci	r31, 0xFD	; 253
    3a70:	80 81       	ld	r24, Z
    3a72:	89 17       	cp	r24, r25
    3a74:	21 f4       	brne	.+8      	; 0x3a7e <get_letter_from_bits+0x1a>
      return letter_arr[i];
    3a76:	ab 52       	subi	r26, 0x2B	; 43
    3a78:	bd 4f       	sbci	r27, 0xFD	; 253
    3a7a:	8c 91       	ld	r24, X
    3a7c:	08 95       	ret
char get_letter_from_bits(char bits)
{
  int alphabet_len = 26;
  int i;

  for(i = 0; i < alphabet_len; i++)
    3a7e:	11 96       	adiw	r26, 0x01	; 1
    3a80:	aa 31       	cpi	r26, 0x1A	; 26
    3a82:	b1 05       	cpc	r27, r1
    3a84:	91 f7       	brne	.-28     	; 0x3a6a <get_letter_from_bits+0x6>
    3a86:	8f ef       	ldi	r24, 0xFF	; 255
      return letter_arr[i];
  }

  // Return error on failure (letter not present in array)
  return -1;
}
    3a88:	08 95       	ret

00003a8a <md2_reset>:
 * @brief  Reset the current state
 * @return Void
 */
void md2_reset(void)
{
  current_state = 0;
    3a8a:	10 92 b2 0d 	sts	0x0DB2, r1
    3a8e:	10 92 b1 0d 	sts	0x0DB1, r1
  md2_last_dot = 0;
    3a92:	10 92 fd 0d 	sts	0x0DFD, r1
}
    3a96:	08 95       	ret

00003a98 <setup_initial>:
 * @brief This function sets up in the initial values needed to make the program work
 * @return Void
 */
void setup_initial()
{
  button_bits = 0;
    3a98:	10 92 b2 08 	sts	0x08B2, r1
  letter_set = 0;
    3a9c:	10 92 ae 0d 	sts	0x0DAE, r1
  current_count = 0;
    3aa0:	10 92 af 0d 	sts	0x0DAF, r1
  random_count = 0;
    3aa4:	10 92 b6 0d 	sts	0x0DB6, r1
  current_random_letter = 0;
    3aa8:	10 92 b7 0d 	sts	0x0DB7, r1
  initial_letter = 'a';
    3aac:	81 e6       	ldi	r24, 0x61	; 97
    3aae:	80 93 d3 0d 	sts	0x0DD3, r24
  use_random_letter = 0;
    3ab2:	10 92 c0 0d 	sts	0x0DC0, r1
  used_let_cnt = 0;
    3ab6:	10 92 c1 0d 	sts	0x0DC1, r1
}
    3aba:	08 95       	ret

00003abc <md2_call_mode_yes_answer>:
 * @return Void
 */
void md2_call_mode_yes_answer(void)
{
  //if you have not entered any buttons yet, replay prompt
  if(button_bits == 0)
    3abc:	80 91 b2 08 	lds	r24, 0x08B2
    3ac0:	88 23       	and	r24, r24
    3ac2:	39 f4       	brne	.+14     	; 0x3ad2 <md2_call_mode_yes_answer+0x16>
    current_state = STATE_REQUEST_INPUT_1;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	90 93 b2 0d 	sts	0x0DB2, r25
    3acc:	80 93 b1 0d 	sts	0x0DB1, r24
    3ad0:	08 95       	ret
  else
    last_dot = ENTER;
    3ad2:	8f ef       	ldi	r24, 0xFF	; 255
    3ad4:	80 93 b3 08 	sts	0x08B3, r24
    3ad8:	08 95       	ret

00003ada <md2_call_mode_no_answer>:
}

void md2_call_mode_no_answer(void)
{
}
    3ada:	08 95       	ret

00003adc <md2_input_dot>:
 * @brief  Set the dot the from input
 * @return Void
 */
void md2_input_dot(char this_dot)
{
  last_dot = this_dot;
    3adc:	80 93 b3 08 	sts	0x08B3, r24
  md2_last_dot = this_dot;
    3ae0:	80 93 fd 0d 	sts	0x0DFD, r24
}
    3ae4:	08 95       	ret

00003ae6 <md2_input_cell>:
 * @brief handle cell input
 * @param this_cell the input cell
 * @return Void
 */
void md2_input_cell(char this_cell)
{
    3ae6:	98 2f       	mov	r25, r24
  if(md2_last_dot != 0)
    3ae8:	80 91 fd 0d 	lds	r24, 0x0DFD
    3aec:	88 23       	and	r24, r24
    3aee:	11 f0       	breq	.+4      	; 0x3af4 <md2_input_cell+0xe>
  {
    last_cell = this_cell;
    3af0:	90 93 fe 0d 	sts	0x0DFE, r25
    3af4:	08 95       	ret

00003af6 <check_if_correct>:
 *        have been pressed
 * @param current_letter - char, letter that the bits should be matching
 * @return bool - return true if they match, and false, if they do not
 */
bool check_if_correct(char button_bits, char current_letter)
{
    3af6:	df 92       	push	r13
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	2a 97       	sbiw	r28, 0x0a	; 10
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	28 2f       	mov	r18, r24
    3b14:	d6 2e       	mov	r13, r22
    3b16:	a0 e0       	ldi	r26, 0x00	; 0
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
  int alphabet_len = 26;
  int i;

  for(i = 0; i < alphabet_len; i++)
  {
    if(letter_bits_arr[i] == bits)
    3b1a:	fd 01       	movw	r30, r26
    3b1c:	e5 54       	subi	r30, 0x45	; 69
    3b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b20:	80 81       	ld	r24, Z
    3b22:	82 17       	cp	r24, r18
    3b24:	21 f4       	brne	.+8      	; 0x3b2e <check_if_correct+0x38>
      return letter_arr[i];
    3b26:	ab 52       	subi	r26, 0x2B	; 43
    3b28:	bd 4f       	sbci	r27, 0xFD	; 253
    3b2a:	0c 91       	ld	r16, X
    3b2c:	05 c0       	rjmp	.+10     	; 0x3b38 <check_if_correct+0x42>
char get_letter_from_bits(char bits)
{
  int alphabet_len = 26;
  int i;

  for(i = 0; i < alphabet_len; i++)
    3b2e:	11 96       	adiw	r26, 0x01	; 1
    3b30:	aa 31       	cpi	r26, 0x1A	; 26
    3b32:	b1 05       	cpc	r27, r1
    3b34:	91 f7       	brne	.-28     	; 0x3b1a <check_if_correct+0x24>
    3b36:	0f ef       	ldi	r16, 0xFF	; 255
bool check_if_correct(char button_bits, char current_letter)
{
  char letter_from_bits = get_letter_from_bits(button_bits);
  char buf[10];

  sprintf(buf, "%d, %d, %d\r\n", button_bits, current_letter, letter_from_bits);
    3b38:	8d b7       	in	r24, 0x3d	; 61
    3b3a:	9e b7       	in	r25, 0x3e	; 62
    3b3c:	0a 97       	sbiw	r24, 0x0a	; 10
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	9e bf       	out	0x3e, r25	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	8d bf       	out	0x3d, r24	; 61
    3b48:	ed b7       	in	r30, 0x3d	; 61
    3b4a:	fe b7       	in	r31, 0x3e	; 62
    3b4c:	31 96       	adiw	r30, 0x01	; 1
    3b4e:	7e 01       	movw	r14, r28
    3b50:	08 94       	sec
    3b52:	e1 1c       	adc	r14, r1
    3b54:	f1 1c       	adc	r15, r1
    3b56:	ad b7       	in	r26, 0x3d	; 61
    3b58:	be b7       	in	r27, 0x3e	; 62
    3b5a:	12 96       	adiw	r26, 0x02	; 2
    3b5c:	fc 92       	st	X, r15
    3b5e:	ee 92       	st	-X, r14
    3b60:	11 97       	sbiw	r26, 0x01	; 1
    3b62:	85 e4       	ldi	r24, 0x45	; 69
    3b64:	92 e0       	ldi	r25, 0x02	; 2
    3b66:	93 83       	std	Z+3, r25	; 0x03
    3b68:	82 83       	std	Z+2, r24	; 0x02
    3b6a:	24 83       	std	Z+4, r18	; 0x04
    3b6c:	15 82       	std	Z+5, r1	; 0x05
    3b6e:	d6 82       	std	Z+6, r13	; 0x06
    3b70:	17 82       	std	Z+7, r1	; 0x07
    3b72:	00 87       	std	Z+8, r16	; 0x08
    3b74:	11 86       	std	Z+9, r1	; 0x09
    3b76:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  PRINTF(buf);
    3b7a:	8d b7       	in	r24, 0x3d	; 61
    3b7c:	9e b7       	in	r25, 0x3e	; 62
    3b7e:	0a 96       	adiw	r24, 0x0a	; 10
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	9e bf       	out	0x3e, r25	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	8d bf       	out	0x3d, r24	; 61
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	0d 15       	cp	r16, r13
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <check_if_correct+0xa2>
    3b96:	81 e0       	ldi	r24, 0x01	; 1

  return (letter_from_bits == current_letter);
}
    3b98:	2a 96       	adiw	r28, 0x0a	; 10
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	0f 91       	pop	r16
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	df 90       	pop	r13
    3bb0:	08 95       	ret

00003bb2 <md2_play_requested_dot>:
 * @brief  Given a char, in last_cell, play the corresponding number
 *         sound file
 * @return Void
 */
void md2_play_requested_dot(char md2_last_dot)
{
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	2a 97       	sbiw	r28, 0x0a	; 10
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
  // This will hold formatted file to access
  char req_mp3[10];
  
  sprintf((char*)req_mp3, "dot_%c.MP3", md2_last_dot);
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <md2_play_requested_dot+0x1a>
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <md2_play_requested_dot+0x1c>
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <md2_play_requested_dot+0x1e>
    3bd0:	ed b7       	in	r30, 0x3d	; 61
    3bd2:	fe b7       	in	r31, 0x3e	; 62
    3bd4:	31 96       	adiw	r30, 0x01	; 1
    3bd6:	8e 01       	movw	r16, r28
    3bd8:	0f 5f       	subi	r16, 0xFF	; 255
    3bda:	1f 4f       	sbci	r17, 0xFF	; 255
    3bdc:	ad b7       	in	r26, 0x3d	; 61
    3bde:	be b7       	in	r27, 0x3e	; 62
    3be0:	12 96       	adiw	r26, 0x02	; 2
    3be2:	1c 93       	st	X, r17
    3be4:	0e 93       	st	-X, r16
    3be6:	11 97       	sbiw	r26, 0x01	; 1
    3be8:	22 e5       	ldi	r18, 0x52	; 82
    3bea:	32 e0       	ldi	r19, 0x02	; 2
    3bec:	33 83       	std	Z+3, r19	; 0x03
    3bee:	22 83       	std	Z+2, r18	; 0x02
    3bf0:	84 83       	std	Z+4, r24	; 0x04
    3bf2:	15 82       	std	Z+5, r1	; 0x05
    3bf4:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  request_to_play_mp3_file(req_mp3);
    3bf8:	8d b7       	in	r24, 0x3d	; 61
    3bfa:	9e b7       	in	r25, 0x3e	; 62
    3bfc:	06 96       	adiw	r24, 0x06	; 6
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	9e bf       	out	0x3e, r25	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	8d bf       	out	0x3d, r24	; 61
    3c08:	c8 01       	movw	r24, r16
    3c0a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    3c0e:	2a 96       	adiw	r28, 0x0a	; 10
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	08 95       	ret

00003c24 <play_requested_cell>:
 * @brief  Given a char, in last_cell, play the corresponding letter 
 *         sound file 
 * @return Void
 */
void play_requested_cell(char last_cell)
{
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	2a 97       	sbiw	r28, 0x0a	; 10
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	28 2f       	mov	r18, r24
  // This will hold formatted file to access
  char req_mp3[10];

  if (last_cell >= 'a' && last_cell <= 'z')
    3c3e:	81 56       	subi	r24, 0x61	; 97
    3c40:	8a 31       	cpi	r24, 0x1A	; 26
    3c42:	08 f5       	brcc	.+66     	; 0x3c86 <play_requested_cell+0x62>
  {
    sprintf((char*)req_mp3, "%c.MP3", last_cell);
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <play_requested_cell+0x22>
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <play_requested_cell+0x24>
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <play_requested_cell+0x26>
    3c4a:	ed b7       	in	r30, 0x3d	; 61
    3c4c:	fe b7       	in	r31, 0x3e	; 62
    3c4e:	31 96       	adiw	r30, 0x01	; 1
    3c50:	8e 01       	movw	r16, r28
    3c52:	0f 5f       	subi	r16, 0xFF	; 255
    3c54:	1f 4f       	sbci	r17, 0xFF	; 255
    3c56:	ad b7       	in	r26, 0x3d	; 61
    3c58:	be b7       	in	r27, 0x3e	; 62
    3c5a:	12 96       	adiw	r26, 0x02	; 2
    3c5c:	1c 93       	st	X, r17
    3c5e:	0e 93       	st	-X, r16
    3c60:	11 97       	sbiw	r26, 0x01	; 1
    3c62:	8d e5       	ldi	r24, 0x5D	; 93
    3c64:	92 e0       	ldi	r25, 0x02	; 2
    3c66:	93 83       	std	Z+3, r25	; 0x03
    3c68:	82 83       	std	Z+2, r24	; 0x02
    3c6a:	24 83       	std	Z+4, r18	; 0x04
    3c6c:	15 82       	std	Z+5, r1	; 0x05
    3c6e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
    request_to_play_mp3_file(req_mp3);
    3c72:	8d b7       	in	r24, 0x3d	; 61
    3c74:	9e b7       	in	r25, 0x3e	; 62
    3c76:	06 96       	adiw	r24, 0x06	; 6
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	9e bf       	out	0x3e, r25	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	8d bf       	out	0x3d, r24	; 61
    3c82:	c8 01       	movw	r24, r16
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <play_requested_cell+0x66>
  } else
    request_to_play_mp3_file("INVPAT.MP3");
    3c86:	84 e6       	ldi	r24, 0x64	; 100
    3c88:	92 e0       	ldi	r25, 0x02	; 2
    3c8a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    3c8e:	2a 96       	adiw	r28, 0x0a	; 10
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	08 95       	ret

00003ca4 <play_requested_bits>:
 *         sound file
 * @param bits - char, bitmask that should representa  braile letter 
 * @return Void
 */
void play_requested_bits(char bits)
{
    3ca4:	98 2f       	mov	r25, r24
    3ca6:	a0 e0       	ldi	r26, 0x00	; 0
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
  int alphabet_len = 26;
  int i;

  for(i = 0; i < alphabet_len; i++)
  {
    if(letter_bits_arr[i] == bits)
    3caa:	fd 01       	movw	r30, r26
    3cac:	e5 54       	subi	r30, 0x45	; 69
    3cae:	fd 4f       	sbci	r31, 0xFD	; 253
    3cb0:	80 81       	ld	r24, Z
    3cb2:	89 17       	cp	r24, r25
    3cb4:	21 f4       	brne	.+8      	; 0x3cbe <play_requested_bits+0x1a>
      return letter_arr[i];
    3cb6:	ab 52       	subi	r26, 0x2B	; 43
    3cb8:	bd 4f       	sbci	r27, 0xFD	; 253
    3cba:	8c 91       	ld	r24, X
    3cbc:	05 c0       	rjmp	.+10     	; 0x3cc8 <play_requested_bits+0x24>
char get_letter_from_bits(char bits)
{
  int alphabet_len = 26;
  int i;

  for(i = 0; i < alphabet_len; i++)
    3cbe:	11 96       	adiw	r26, 0x01	; 1
    3cc0:	aa 31       	cpi	r26, 0x1A	; 26
    3cc2:	b1 05       	cpc	r27, r1
    3cc4:	91 f7       	brne	.-28     	; 0x3caa <play_requested_bits+0x6>
    3cc6:	8f ef       	ldi	r24, 0xFF	; 255
  char letter = get_letter_from_bits(bits);

  if (letter == -1)
    request_to_play_mp3_file("INVPAT.MP3");
  else
    play_requested_cell(letter);
    3cc8:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <play_requested_cell>
}
    3ccc:	08 95       	ret

00003cce <md2_main>:
/**
 * @brief  Step through the main stages in the code.
 * @return Void
 */
void md2_main(void)
{
    3cce:	ef 92       	push	r14
    3cd0:	ff 92       	push	r15
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
  switch(current_state)
    3cd6:	80 91 b1 0d 	lds	r24, 0x0DB1
    3cda:	90 91 b2 0d 	lds	r25, 0x0DB2
    3cde:	85 30       	cpi	r24, 0x05	; 5
    3ce0:	91 05       	cpc	r25, r1
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <md2_main+0x18>
    3ce4:	30 c1       	rjmp	.+608    	; 0x3f46 <md2_main+0x278>
    3ce6:	86 30       	cpi	r24, 0x06	; 6
    3ce8:	91 05       	cpc	r25, r1
    3cea:	94 f4       	brge	.+36     	; 0x3d10 <md2_main+0x42>
    3cec:	81 30       	cpi	r24, 0x01	; 1
    3cee:	91 05       	cpc	r25, r1
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <md2_main+0x26>
    3cf2:	50 c0       	rjmp	.+160    	; 0x3d94 <md2_main+0xc6>
    3cf4:	82 30       	cpi	r24, 0x02	; 2
    3cf6:	91 05       	cpc	r25, r1
    3cf8:	1c f4       	brge	.+6      	; 0x3d00 <md2_main+0x32>
    3cfa:	89 2b       	or	r24, r25
    3cfc:	c1 f0       	breq	.+48     	; 0x3d2e <md2_main+0x60>
    3cfe:	36 c1       	rjmp	.+620    	; 0x3f6c <md2_main+0x29e>
    3d00:	82 30       	cpi	r24, 0x02	; 2
    3d02:	91 05       	cpc	r25, r1
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <md2_main+0x3a>
    3d06:	4d c0       	rjmp	.+154    	; 0x3da2 <md2_main+0xd4>
    3d08:	03 97       	sbiw	r24, 0x03	; 3
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <md2_main+0x40>
    3d0c:	2f c1       	rjmp	.+606    	; 0x3f6c <md2_main+0x29e>
    3d0e:	9d c0       	rjmp	.+314    	; 0x3e4a <md2_main+0x17c>
    3d10:	87 30       	cpi	r24, 0x07	; 7
    3d12:	91 05       	cpc	r25, r1
    3d14:	a9 f0       	breq	.+42     	; 0x3d40 <md2_main+0x72>
    3d16:	87 30       	cpi	r24, 0x07	; 7
    3d18:	91 05       	cpc	r25, r1
    3d1a:	0c f4       	brge	.+2      	; 0x3d1e <md2_main+0x50>
    3d1c:	1b c1       	rjmp	.+566    	; 0x3f54 <md2_main+0x286>
    3d1e:	88 30       	cpi	r24, 0x08	; 8
    3d20:	91 05       	cpc	r25, r1
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <md2_main+0x58>
    3d24:	50 c0       	rjmp	.+160    	; 0x3dc6 <md2_main+0xf8>
    3d26:	09 97       	sbiw	r24, 0x09	; 9
    3d28:	09 f0       	breq	.+2      	; 0x3d2c <md2_main+0x5e>
    3d2a:	20 c1       	rjmp	.+576    	; 0x3f6c <md2_main+0x29e>
    3d2c:	53 c0       	rjmp	.+166    	; 0x3dd4 <md2_main+0x106>
  {
    case STATE_INITIAL:
      setup_initial();
    3d2e:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <setup_initial>
      request_to_play_mp3_file("MD2INT.MP3");
    3d32:	8f e6       	ldi	r24, 0x6F	; 111
    3d34:	92 e0       	ldi	r25, 0x02	; 2
    3d36:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      current_state = SET_LETTER_VALS;
    3d3a:	87 e0       	ldi	r24, 0x07	; 7
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	12 c1       	rjmp	.+548    	; 0x3f64 <md2_main+0x296>
      break;

    case SET_LETTER_VALS:
      curr_button = '0';
    3d40:	80 e3       	ldi	r24, 0x30	; 48
    3d42:	80 93 b5 0d 	sts	0x0DB5, r24
      current_random_letter = (initial_letter + ((letter_set * 5 
    3d46:	f0 90 d3 0d 	lds	r15, 0x0DD3
    3d4a:	00 91 ae 0d 	lds	r16, 0x0DAE
    3d4e:	85 e0       	ldi	r24, 0x05	; 5
    3d50:	e8 2e       	mov	r14, r24
    3d52:	0e 9d       	mul	r16, r14
    3d54:	80 01       	movw	r16, r0
    3d56:	11 24       	eor	r1, r1
    3d58:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <prop_rand_number>
    3d5c:	80 0f       	add	r24, r16
    3d5e:	91 1f       	adc	r25, r17
    3d60:	6a e1       	ldi	r22, 0x1A	; 26
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    3d68:	f8 0e       	add	r15, r24
    3d6a:	f0 92 b7 0d 	sts	0x0DB7, r15
              + (prop_rand_number())) % 26));
      current_letter = (initial_letter + ((letter_set*5 + current_count) % 26));
    3d6e:	80 91 ae 0d 	lds	r24, 0x0DAE
    3d72:	8e 9d       	mul	r24, r14
    3d74:	c0 01       	movw	r24, r0
    3d76:	11 24       	eor	r1, r1
    3d78:	20 91 af 0d 	lds	r18, 0x0DAF
    3d7c:	82 0f       	add	r24, r18
    3d7e:	91 1d       	adc	r25, r1
    3d80:	6a e1       	ldi	r22, 0x1A	; 26
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    3d88:	90 91 d3 0d 	lds	r25, 0x0DD3
    3d8c:	98 0f       	add	r25, r24
    3d8e:	90 93 ba 0d 	sts	0x0DBA, r25
    3d92:	e6 c0       	rjmp	.+460    	; 0x3f60 <md2_main+0x292>
      current_state = STATE_REQUEST_INPUT1;
      break;

    case STATE_REQUEST_INPUT1:
      request_to_play_mp3_file("pls_wrt.MP3");
    3d94:	8a e7       	ldi	r24, 0x7A	; 122
    3d96:	92 e0       	ldi	r25, 0x02	; 2
    3d98:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      current_state = STATE_REQUEST_INPUT2;
    3d9c:	82 e0       	ldi	r24, 0x02	; 2
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	e1 c0       	rjmp	.+450    	; 0x3f64 <md2_main+0x296>
      break;

    case STATE_REQUEST_INPUT2:
      if(use_random_letter){
    3da2:	80 91 c0 0d 	lds	r24, 0x0DC0
    3da6:	88 23       	and	r24, r24
    3da8:	39 f0       	breq	.+14     	; 0x3db8 <md2_main+0xea>
        play_requested_cell(current_random_letter);
    3daa:	80 91 b7 0d 	lds	r24, 0x0DB7
    3dae:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <play_requested_cell>
        current_state = STATE_WAIT_INPUT;
    3db2:	83 e0       	ldi	r24, 0x03	; 3
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	d6 c0       	rjmp	.+428    	; 0x3f64 <md2_main+0x296>
      }
      else
      {
        play_requested_cell(current_letter);
    3db8:	80 91 ba 0d 	lds	r24, 0x0DBA
    3dbc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <play_requested_cell>
        current_state = STATE_BUTT_TO_PRESS_1;
    3dc0:	88 e0       	ldi	r24, 0x08	; 8
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	cf c0       	rjmp	.+414    	; 0x3f64 <md2_main+0x296>
      }
      break;

    case STATE_BUTT_TO_PRESS_1:
      request_to_play_mp3_file("press.MP3");
    3dc6:	86 e8       	ldi	r24, 0x86	; 134
    3dc8:	92 e0       	ldi	r25, 0x02	; 2
    3dca:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      current_state = STATE_BUTT_TO_PRESS_2;
    3dce:	89 e0       	ldi	r24, 0x09	; 9
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	c8 c0       	rjmp	.+400    	; 0x3f64 <md2_main+0x296>
      break;

    case STATE_BUTT_TO_PRESS_2:
      curr_button += 1;
    3dd4:	80 91 b5 0d 	lds	r24, 0x0DB5
    3dd8:	8f 5f       	subi	r24, 0xFF	; 255
    3dda:	80 93 b5 0d 	sts	0x0DB5, r24

      PRINTF(&curr_button);
    3dde:	85 eb       	ldi	r24, 0xB5	; 181
    3de0:	9d e0       	ldi	r25, 0x0D	; 13
    3de2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
      char bits = get_bits_from_letters(current_letter);
    3de6:	90 91 ba 0d 	lds	r25, 0x0DBA
    3dea:	a0 e0       	ldi	r26, 0x00	; 0
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
  int alphbt_len = 26;
  int i;

  for(i = 0; i < alphbt_len; i ++)
  {
    if(letter_arr[i] == let)
    3dee:	fd 01       	movw	r30, r26
    3df0:	eb 52       	subi	r30, 0x2B	; 43
    3df2:	fd 4f       	sbci	r31, 0xFD	; 253
    3df4:	80 81       	ld	r24, Z
    3df6:	89 17       	cp	r24, r25
    3df8:	21 f4       	brne	.+8      	; 0x3e02 <md2_main+0x134>
      return letter_bits_arr[i];
    3dfa:	a5 54       	subi	r26, 0x45	; 69
    3dfc:	bd 4f       	sbci	r27, 0xFD	; 253
    3dfe:	2c 91       	ld	r18, X
    3e00:	05 c0       	rjmp	.+10     	; 0x3e0c <md2_main+0x13e>
char get_bits_from_letters(char let)
{
  int alphbt_len = 26;
  int i;

  for(i = 0; i < alphbt_len; i ++)
    3e02:	11 96       	adiw	r26, 0x01	; 1
    3e04:	aa 31       	cpi	r26, 0x1A	; 26
    3e06:	b1 05       	cpc	r27, r1
    3e08:	91 f7       	brne	.-28     	; 0x3dee <md2_main+0x120>
    3e0a:	2f ef       	ldi	r18, 0xFF	; 255
    case STATE_BUTT_TO_PRESS_2:
      curr_button += 1;

      PRINTF(&curr_button);
      char bits = get_bits_from_letters(current_letter);
      char curr_bit = (bits >> (CHARTOINT(curr_button) - 1)) & 1;
    3e0c:	40 91 b5 0d 	lds	r20, 0x0DB5
      //get the bits for each depending on button count - and play sound if bit is set
      if(curr_bit){
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	84 2f       	mov	r24, r20
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	c1 97       	sbiw	r24, 0x31	; 49
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <md2_main+0x150>
    3e1a:	35 95       	asr	r19
    3e1c:	27 95       	ror	r18
    3e1e:	8a 95       	dec	r24
    3e20:	e2 f7       	brpl	.-8      	; 0x3e1a <md2_main+0x14c>
    3e22:	20 ff       	sbrs	r18, 0
    3e24:	03 c0       	rjmp	.+6      	; 0x3e2c <md2_main+0x15e>
        md2_play_requested_dot(curr_button);
    3e26:	84 2f       	mov	r24, r20
    3e28:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <md2_play_requested_dot>
      }

      if(CHARTOINT(curr_button) == NUM_BUT)
    3e2c:	80 91 b5 0d 	lds	r24, 0x0DB5
    3e30:	86 33       	cpi	r24, 0x36	; 54
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <md2_main+0x168>
    3e34:	9b c0       	rjmp	.+310    	; 0x3f6c <md2_main+0x29e>
      {
        current_state = STATE_WAIT_INPUT;
    3e36:	83 e0       	ldi	r24, 0x03	; 3
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	90 93 b2 0d 	sts	0x0DB2, r25
    3e3e:	80 93 b1 0d 	sts	0x0DB1, r24
        curr_button = '0'; 
    3e42:	80 e3       	ldi	r24, 0x30	; 48
    3e44:	80 93 b5 0d 	sts	0x0DB5, r24
    3e48:	91 c0       	rjmp	.+290    	; 0x3f6c <md2_main+0x29e>
      }
      break;

    case STATE_WAIT_INPUT:
      if(last_dot != 0)
    3e4a:	40 91 b3 08 	lds	r20, 0x08B3
    3e4e:	44 23       	and	r20, r20
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <md2_main+0x186>
    3e52:	8c c0       	rjmp	.+280    	; 0x3f6c <md2_main+0x29e>
      {
        //The user just input their word
        if(last_dot == ENTER)
    3e54:	4f 3f       	cpi	r20, 0xFF	; 255
    3e56:	09 f0       	breq	.+2      	; 0x3e5a <md2_main+0x18c>
    3e58:	5d c0       	rjmp	.+186    	; 0x3f14 <md2_main+0x246>
        {
          //they got the word right, change letter unless you are at 5
          //already then enter random mode.

          if(!use_random_letter)
    3e5a:	80 91 c0 0d 	lds	r24, 0x0DC0
    3e5e:	88 23       	and	r24, r24
    3e60:	31 f5       	brne	.+76     	; 0x3eae <md2_main+0x1e0>
          {
            PRINTF("checkifcorrect");
    3e62:	80 e9       	ldi	r24, 0x90	; 144
    3e64:	92 e0       	ldi	r25, 0x02	; 2
    3e66:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
            TX_NEWLINE_PC;
    3e6a:	8d e0       	ldi	r24, 0x0D	; 13
    3e6c:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    3e70:	8a e0       	ldi	r24, 0x0A	; 10
    3e72:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
            if(check_if_correct(button_bits, current_letter))
    3e76:	80 91 b2 08 	lds	r24, 0x08B2
    3e7a:	60 91 ba 0d 	lds	r22, 0x0DBA
    3e7e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <check_if_correct>
    3e82:	88 23       	and	r24, r24
    3e84:	e1 f1       	breq	.+120    	; 0x3efe <md2_main+0x230>
            {
              request_to_play_mp3_file("good.MP3");
    3e86:	8f e9       	ldi	r24, 0x9F	; 159
    3e88:	92 e0       	ldi	r25, 0x02	; 2
    3e8a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
              //if you have successfully completed this letter set
              if(current_count == 4)
    3e8e:	80 91 af 0d 	lds	r24, 0x0DAF
    3e92:	84 30       	cpi	r24, 0x04	; 4
    3e94:	41 f4       	brne	.+16     	; 0x3ea6 <md2_main+0x1d8>
              {
                use_random_letter = 1;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	80 93 c0 0d 	sts	0x0DC0, r24
                current_count = 0;
    3e9c:	10 92 af 0d 	sts	0x0DAF, r1
                random_count = 0;
    3ea0:	10 92 b6 0d 	sts	0x0DB6, r1
    3ea4:	23 c0       	rjmp	.+70     	; 0x3eec <md2_main+0x21e>
                current_state = SET_LETTER_VALS;
              }
              //successfully completed a letter in letter set
              else
              {
                current_count++;
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	80 93 af 0d 	sts	0x0DAF, r24
    3eac:	1f c0       	rjmp	.+62     	; 0x3eec <md2_main+0x21e>
            }
          }

          else
          {
            if(check_if_correct(button_bits, current_random_letter))
    3eae:	80 91 b2 08 	lds	r24, 0x08B2
    3eb2:	60 91 b7 0d 	lds	r22, 0x0DB7
    3eb6:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <check_if_correct>
    3eba:	88 23       	and	r24, r24
    3ebc:	01 f1       	breq	.+64     	; 0x3efe <md2_main+0x230>
            {
              request_to_play_mp3_file("good.MP3");
    3ebe:	8f e9       	ldi	r24, 0x9F	; 159
    3ec0:	92 e0       	ldi	r25, 0x02	; 2
    3ec2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>

              // If you have successfully completed this letter set
              if(random_count == 4)
    3ec6:	80 91 b6 0d 	lds	r24, 0x0DB6
    3eca:	84 30       	cpi	r24, 0x04	; 4
    3ecc:	61 f4       	brne	.+24     	; 0x3ee6 <md2_main+0x218>
              {
                use_random_letter = 0;
    3ece:	10 92 c0 0d 	sts	0x0DC0, r1
                current_count = 0;
    3ed2:	10 92 af 0d 	sts	0x0DAF, r1
                random_count = 0;
    3ed6:	10 92 b6 0d 	sts	0x0DB6, r1
                letter_set++;
    3eda:	80 91 ae 0d 	lds	r24, 0x0DAE
    3ede:	8f 5f       	subi	r24, 0xFF	; 255
    3ee0:	80 93 ae 0d 	sts	0x0DAE, r24
    3ee4:	03 c0       	rjmp	.+6      	; 0x3eec <md2_main+0x21e>
                current_state = SET_LETTER_VALS;
              }
              //successfully completed a letter in letter set
              else
              {
                random_count++;
    3ee6:	8f 5f       	subi	r24, 0xFF	; 255
    3ee8:	80 93 b6 0d 	sts	0x0DB6, r24
                current_state = SET_LETTER_VALS;
    3eec:	87 e0       	ldi	r24, 0x07	; 7
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	90 93 b2 0d 	sts	0x0DB2, r25
    3ef4:	80 93 b1 0d 	sts	0x0DB1, r24
              }
              button_bits = 0;
    3ef8:	10 92 b2 08 	sts	0x08B2, r1
    3efc:	21 c0       	rjmp	.+66     	; 0x3f40 <md2_main+0x272>
            }

            //move to an error state so you can tell the user what they input
            else
            {
              request_to_play_mp3_file("no.MP3");
    3efe:	88 ea       	ldi	r24, 0xA8	; 168
    3f00:	92 e0       	ldi	r25, 0x02	; 2
    3f02:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
              current_state = STATE_ERROR_1;
    3f06:	85 e0       	ldi	r24, 0x05	; 5
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	90 93 b2 0d 	sts	0x0DB2, r25
    3f0e:	80 93 b1 0d 	sts	0x0DB1, r24
    3f12:	16 c0       	rjmp	.+44     	; 0x3f40 <md2_main+0x272>
            }
          }
        }
        else if((last_dot >= '1') && (last_dot <= '6'))
    3f14:	84 2f       	mov	r24, r20
    3f16:	81 53       	subi	r24, 0x31	; 49
    3f18:	86 30       	cpi	r24, 0x06	; 6
    3f1a:	90 f4       	brcc	.+36     	; 0x3f40 <md2_main+0x272>
        {
          button_bits |= 1 << (CHARTOINT(last_dot) - 1);
    3f1c:	84 2f       	mov	r24, r20
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	c1 97       	sbiw	r24, 0x31	; 49
    3f22:	21 e0       	ldi	r18, 0x01	; 1
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <md2_main+0x25e>
    3f28:	22 0f       	add	r18, r18
    3f2a:	33 1f       	adc	r19, r19
    3f2c:	8a 95       	dec	r24
    3f2e:	e2 f7       	brpl	.-8      	; 0x3f28 <md2_main+0x25a>
    3f30:	80 91 b2 08 	lds	r24, 0x08B2
    3f34:	82 2b       	or	r24, r18
    3f36:	80 93 b2 08 	sts	0x08B2, r24
          md2_play_requested_dot(last_dot);
    3f3a:	84 2f       	mov	r24, r20
    3f3c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <md2_play_requested_dot>
        }
        last_dot = 0;
    3f40:	10 92 b3 08 	sts	0x08B3, r1
    3f44:	13 c0       	rjmp	.+38     	; 0x3f6c <md2_main+0x29e>
      }
      break;

    case STATE_ERROR_1:
      request_to_play_mp3_file("u_prssd.MP3");
    3f46:	8f ea       	ldi	r24, 0xAF	; 175
    3f48:	92 e0       	ldi	r25, 0x02	; 2
    3f4a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      current_state = STATE_ERROR_2;
    3f4e:	86 e0       	ldi	r24, 0x06	; 6
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	08 c0       	rjmp	.+16     	; 0x3f64 <md2_main+0x296>
      break;

    case STATE_ERROR_2:
      play_requested_bits(button_bits);
    3f54:	80 91 b2 08 	lds	r24, 0x08B2
    3f58:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <play_requested_bits>
      button_bits = 0;
    3f5c:	10 92 b2 08 	sts	0x08B2, r1
      current_state = STATE_REQUEST_INPUT_1;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	90 93 b2 0d 	sts	0x0DB2, r25
    3f68:	80 93 b1 0d 	sts	0x0DB1, r24
      break;
  }
}
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	ff 90       	pop	r15
    3f72:	ef 90       	pop	r14
    3f74:	08 95       	ret

00003f76 <md3_reset>:
  request_to_play_mp3_file(req_mp3);
}

void md3_reset(void)
{
  md3_current_state = 0;
    3f76:	10 92 00 0e 	sts	0x0E00, r1
    3f7a:	10 92 ff 0d 	sts	0x0DFF, r1
  md3_last_dot = 0;
    3f7e:	10 92 01 0e 	sts	0x0E01, r1
}
    3f82:	08 95       	ret

00003f84 <md3_call_mode_yes_answer>:
 * @brief Handle enter button presses in mode 3
 * @return Void
 */
void md3_call_mode_yes_answer(void)
{
}
    3f84:	08 95       	ret

00003f86 <md3_call_mode_no_answer>:
 * @brief Handle exit buton presses in this mode
 * @return Void
 */
void md3_call_mode_no_answer(void)
{
}
    3f86:	08 95       	ret

00003f88 <md3_input_cell>:
 * @brief handle cell input
 * @param this_cell the entered cell
 * @return Void
 */
void md3_input_cell(char this_cell)
{
    3f88:	98 2f       	mov	r25, r24
  if(md3_last_dot != 0)
    3f8a:	80 91 01 0e 	lds	r24, 0x0E01
    3f8e:	88 23       	and	r24, r24
    3f90:	29 f0       	breq	.+10     	; 0x3f9c <md3_input_cell+0x14>
  {
    last_cell = this_cell;
    3f92:	90 93 fe 0d 	sts	0x0DFE, r25
    got_input = true;
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	80 93 f7 0d 	sts	0x0DF7, r24
    3f9c:	08 95       	ret

00003f9e <play_requested_dot>:
 * @brief  Given a char, in last_cell, play the corresponding number
 *         sound file
 * @return Void
 */
void play_requested_dot(void)
{
    3f9e:	0f 93       	push	r16
    3fa0:	1f 93       	push	r17
    3fa2:	df 93       	push	r29
    3fa4:	cf 93       	push	r28
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	2a 97       	sbiw	r28, 0x0a	; 10
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	de bf       	out	0x3e, r29	; 62
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	cd bf       	out	0x3d, r28	; 61
  // This will hold formatted file to access
  char req_mp3[10];
  sprintf((char*)req_mp3, "dot_%c.MP3", md3_last_dot);
    3fb6:	00 d0       	rcall	.+0      	; 0x3fb8 <play_requested_dot+0x1a>
    3fb8:	00 d0       	rcall	.+0      	; 0x3fba <play_requested_dot+0x1c>
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <play_requested_dot+0x1e>
    3fbc:	ed b7       	in	r30, 0x3d	; 61
    3fbe:	fe b7       	in	r31, 0x3e	; 62
    3fc0:	31 96       	adiw	r30, 0x01	; 1
    3fc2:	8e 01       	movw	r16, r28
    3fc4:	0f 5f       	subi	r16, 0xFF	; 255
    3fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc8:	ad b7       	in	r26, 0x3d	; 61
    3fca:	be b7       	in	r27, 0x3e	; 62
    3fcc:	12 96       	adiw	r26, 0x02	; 2
    3fce:	1c 93       	st	X, r17
    3fd0:	0e 93       	st	-X, r16
    3fd2:	11 97       	sbiw	r26, 0x01	; 1
    3fd4:	8f ee       	ldi	r24, 0xEF	; 239
    3fd6:	92 e0       	ldi	r25, 0x02	; 2
    3fd8:	93 83       	std	Z+3, r25	; 0x03
    3fda:	82 83       	std	Z+2, r24	; 0x02
    3fdc:	80 91 01 0e 	lds	r24, 0x0E01
    3fe0:	84 83       	std	Z+4, r24	; 0x04
    3fe2:	15 82       	std	Z+5, r1	; 0x05
    3fe4:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  request_to_play_mp3_file(req_mp3);
    3fe8:	8d b7       	in	r24, 0x3d	; 61
    3fea:	9e b7       	in	r25, 0x3e	; 62
    3fec:	06 96       	adiw	r24, 0x06	; 6
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	f8 94       	cli
    3ff2:	9e bf       	out	0x3e, r25	; 62
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	8d bf       	out	0x3d, r24	; 61
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    3ffe:	2a 96       	adiw	r28, 0x0a	; 10
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	1f 91       	pop	r17
    4010:	0f 91       	pop	r16
    4012:	08 95       	ret

00004014 <md3_input_dot>:
 * @param this_dot the entered dot
 * @return Void
 */
void md3_input_dot(char this_dot)
{
  md3_last_dot = this_dot;
    4014:	80 93 01 0e 	sts	0x0E01, r24
  play_requested_dot();
    4018:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <play_requested_dot>
}
    401c:	08 95       	ret

0000401e <valid_letter>:
 *        have been pressed
 * @return bool - true if a valid letter, false if not
 */
bool valid_letter(char button_bits)
{
  char letter_from_bits = get_letter_from_bits(button_bits);
    401e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <get_letter_from_bits>
    4022:	98 2f       	mov	r25, r24

  if((letter_from_bits >= 'a') && (letter_from_bits <= 'z'))
    4024:	81 56       	subi	r24, 0x61	; 97
    4026:	8a 31       	cpi	r24, 0x1A	; 26
    4028:	10 f0       	brcs	.+4      	; 0x402e <valid_letter+0x10>
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	08 95       	ret
  {
    entered_letter = letter_from_bits;
    402e:	90 93 b0 0d 	sts	0x0DB0, r25
    4032:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }

  return false;
}
    4034:	08 95       	ret

00004036 <choose_animal>:
 *        animals have been played already to be sure to play all of
 *        the different animals before repeating the list.
 * @return int - number between 1 - 11 corresponding to the animal file to play
 */
int choose_animal()
{
    4036:	8f 92       	push	r8
    4038:	9f 92       	push	r9
    403a:	af 92       	push	r10
    403c:	bf 92       	push	r11
    403e:	cf 92       	push	r12
    4040:	df 92       	push	r13
    4042:	ef 92       	push	r14
    4044:	ff 92       	push	r15
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	df 93       	push	r29
    404c:	cf 93       	push	r28
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	2a 97       	sbiw	r28, 0x0a	; 10
    4054:	0f b6       	in	r0, 0x3f	; 63
    4056:	f8 94       	cli
    4058:	de bf       	out	0x3e, r29	; 62
    405a:	0f be       	out	0x3f, r0	; 63
    405c:	cd bf       	out	0x3d, r28	; 61
  int num = TCNT1;
    405e:	20 91 84 00 	lds	r18, 0x0084
    4062:	30 91 85 00 	lds	r19, 0x0085
  int i;

  num *= PRIME;
  num = (abs(num) % 11);
    4066:	85 e3       	ldi	r24, 0x35	; 53
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	28 9f       	mul	r18, r24
    406c:	a0 01       	movw	r20, r0
    406e:	29 9f       	mul	r18, r25
    4070:	50 0d       	add	r21, r0
    4072:	38 9f       	mul	r19, r24
    4074:	50 0d       	add	r21, r0
    4076:	11 24       	eor	r1, r1
    4078:	57 ff       	sbrs	r21, 7
    407a:	03 c0       	rjmp	.+6      	; 0x4082 <choose_animal+0x4c>
    407c:	50 95       	com	r21
    407e:	41 95       	neg	r20
    4080:	5f 4f       	sbci	r21, 0xFF	; 255
    4082:	ca 01       	movw	r24, r20
    4084:	6b e0       	ldi	r22, 0x0B	; 11
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    408c:	6c 01       	movw	r12, r24

  char buf[10];
  sprintf(buf, "num=%i\r\n", num);
    408e:	00 d0       	rcall	.+0      	; 0x4090 <choose_animal+0x5a>
    4090:	00 d0       	rcall	.+0      	; 0x4092 <choose_animal+0x5c>
    4092:	00 d0       	rcall	.+0      	; 0x4094 <choose_animal+0x5e>
    4094:	ed b7       	in	r30, 0x3d	; 61
    4096:	fe b7       	in	r31, 0x3e	; 62
    4098:	31 96       	adiw	r30, 0x01	; 1
    409a:	8e 01       	movw	r16, r28
    409c:	0f 5f       	subi	r16, 0xFF	; 255
    409e:	1f 4f       	sbci	r17, 0xFF	; 255
    40a0:	ad b7       	in	r26, 0x3d	; 61
    40a2:	be b7       	in	r27, 0x3e	; 62
    40a4:	12 96       	adiw	r26, 0x02	; 2
    40a6:	1c 93       	st	X, r17
    40a8:	0e 93       	st	-X, r16
    40aa:	11 97       	sbiw	r26, 0x01	; 1
    40ac:	8a ef       	ldi	r24, 0xFA	; 250
    40ae:	92 e0       	ldi	r25, 0x02	; 2
    40b0:	93 83       	std	Z+3, r25	; 0x03
    40b2:	82 83       	std	Z+2, r24	; 0x02
    40b4:	d5 82       	std	Z+5, r13	; 0x05
    40b6:	c4 82       	std	Z+4, r12	; 0x04
    40b8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  PRINTF(buf);
    40bc:	ed b7       	in	r30, 0x3d	; 61
    40be:	fe b7       	in	r31, 0x3e	; 62
    40c0:	36 96       	adiw	r30, 0x06	; 6
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	fe bf       	out	0x3e, r31	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	ed bf       	out	0x3d, r30	; 61
    40cc:	c8 01       	movw	r24, r16
    40ce:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>

  while(animals_used_list[num])
  {
    num = TCNT1;
    num *= PRIME;
    num = (abs(num) % 11);
    40d2:	05 e3       	ldi	r16, 0x35	; 53
    40d4:	10 e0       	ldi	r17, 0x00	; 0
    40d6:	16 c0       	rjmp	.+44     	; 0x4104 <__stack+0x5>
  sprintf(buf, "num=%i\r\n", num);
  PRINTF(buf);

  while(animals_used_list[num])
  {
    num = TCNT1;
    40d8:	80 91 84 00 	lds	r24, 0x0084
    40dc:	90 91 85 00 	lds	r25, 0x0085
    num *= PRIME;
    num = (abs(num) % 11);
    40e0:	80 9f       	mul	r24, r16
    40e2:	90 01       	movw	r18, r0
    40e4:	81 9f       	mul	r24, r17
    40e6:	30 0d       	add	r19, r0
    40e8:	90 9f       	mul	r25, r16
    40ea:	30 0d       	add	r19, r0
    40ec:	11 24       	eor	r1, r1
    40ee:	37 ff       	sbrs	r19, 7
    40f0:	03 c0       	rjmp	.+6      	; 0x40f8 <choose_animal+0xc2>
    40f2:	30 95       	com	r19
    40f4:	21 95       	neg	r18
    40f6:	3f 4f       	sbci	r19, 0xFF	; 255
    40f8:	c9 01       	movw	r24, r18
    40fa:	6b e0       	ldi	r22, 0x0B	; 11
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    4102:	6c 01       	movw	r12, r24

  char buf[10];
  sprintf(buf, "num=%i\r\n", num);
  PRINTF(buf);

  while(animals_used_list[num])
    4104:	f6 01       	movw	r30, r12
    4106:	ee 0f       	add	r30, r30
    4108:	ff 1f       	adc	r31, r31
    410a:	ec 52       	subi	r30, 0x2C	; 44
    410c:	f2 4f       	sbci	r31, 0xF2	; 242
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	89 2b       	or	r24, r25
    4114:	09 f7       	brne	.-62     	; 0x40d8 <choose_animal+0xa2>
    num = TCNT1;
    num *= PRIME;
    num = (abs(num) % 11);
  }

  animals_used_list[num] = 1;
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	91 83       	std	Z+1, r25	; 0x01
    411c:	80 83       	st	Z, r24
    411e:	94 ed       	ldi	r25, 0xD4	; 212
    4120:	e9 2e       	mov	r14, r25
    4122:	9d e0       	ldi	r25, 0x0D	; 13
    4124:	f9 2e       	mov	r15, r25
    4126:	87 01       	movw	r16, r14

  for(i = 0; i < 11; i ++)
  {
    sprintf(buf, "arr=%i, ",animals_used_list[i] );
    4128:	5e 01       	movw	r10, r28
    412a:	08 94       	sec
    412c:	a1 1c       	adc	r10, r1
    412e:	b1 1c       	adc	r11, r1
    4130:	83 e0       	ldi	r24, 0x03	; 3
    4132:	88 2e       	mov	r8, r24
    4134:	83 e0       	ldi	r24, 0x03	; 3
    4136:	98 2e       	mov	r9, r24
    4138:	00 d0       	rcall	.+0      	; 0x413a <__stack+0x3b>
    413a:	00 d0       	rcall	.+0      	; 0x413c <__stack+0x3d>
    413c:	00 d0       	rcall	.+0      	; 0x413e <__stack+0x3f>
    413e:	ed b7       	in	r30, 0x3d	; 61
    4140:	fe b7       	in	r31, 0x3e	; 62
    4142:	31 96       	adiw	r30, 0x01	; 1
    4144:	ad b7       	in	r26, 0x3d	; 61
    4146:	be b7       	in	r27, 0x3e	; 62
    4148:	12 96       	adiw	r26, 0x02	; 2
    414a:	bc 92       	st	X, r11
    414c:	ae 92       	st	-X, r10
    414e:	11 97       	sbiw	r26, 0x01	; 1
    4150:	93 82       	std	Z+3, r9	; 0x03
    4152:	82 82       	std	Z+2, r8	; 0x02
    4154:	d8 01       	movw	r26, r16
    4156:	8d 91       	ld	r24, X+
    4158:	9d 91       	ld	r25, X+
    415a:	8d 01       	movw	r16, r26
    415c:	95 83       	std	Z+5, r25	; 0x05
    415e:	84 83       	std	Z+4, r24	; 0x04
    4160:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
    PRINTF(buf);
    4164:	ed b7       	in	r30, 0x3d	; 61
    4166:	fe b7       	in	r31, 0x3e	; 62
    4168:	36 96       	adiw	r30, 0x06	; 6
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	f8 94       	cli
    416e:	fe bf       	out	0x3e, r31	; 62
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	ed bf       	out	0x3d, r30	; 61
    4174:	c5 01       	movw	r24, r10
    4176:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
    num = (abs(num) % 11);
  }

  animals_used_list[num] = 1;

  for(i = 0; i < 11; i ++)
    417a:	fd e0       	ldi	r31, 0x0D	; 13
    417c:	0a 3e       	cpi	r16, 0xEA	; 234
    417e:	1f 07       	cpc	r17, r31
    4180:	d9 f6       	brne	.-74     	; 0x4138 <__stack+0x39>
  {
    sprintf(buf, "arr=%i, ",animals_used_list[i] );
    PRINTF(buf);
  }

  TX_NEWLINE_PC;
    4182:	8d e0       	ldi	r24, 0x0D	; 13
    4184:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    4188:	8a e0       	ldi	r24, 0x0A	; 10
    418a:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
  sprintf(buf, "cnt=%i", animals_used+1);
    418e:	00 d0       	rcall	.+0      	; 0x4190 <__stack+0x91>
    4190:	00 d0       	rcall	.+0      	; 0x4192 <__stack+0x93>
    4192:	00 d0       	rcall	.+0      	; 0x4194 <__stack+0x95>
    4194:	ed b7       	in	r30, 0x3d	; 61
    4196:	fe b7       	in	r31, 0x3e	; 62
    4198:	31 96       	adiw	r30, 0x01	; 1
    419a:	ad b7       	in	r26, 0x3d	; 61
    419c:	be b7       	in	r27, 0x3e	; 62
    419e:	12 96       	adiw	r26, 0x02	; 2
    41a0:	bc 92       	st	X, r11
    41a2:	ae 92       	st	-X, r10
    41a4:	11 97       	sbiw	r26, 0x01	; 1
    41a6:	8c e0       	ldi	r24, 0x0C	; 12
    41a8:	93 e0       	ldi	r25, 0x03	; 3
    41aa:	93 83       	std	Z+3, r25	; 0x03
    41ac:	82 83       	std	Z+2, r24	; 0x02
    41ae:	80 91 c2 0d 	lds	r24, 0x0DC2
    41b2:	90 91 c3 0d 	lds	r25, 0x0DC3
    41b6:	01 96       	adiw	r24, 0x01	; 1
    41b8:	95 83       	std	Z+5, r25	; 0x05
    41ba:	84 83       	std	Z+4, r24	; 0x04
    41bc:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  PRINTF(buf);
    41c0:	ed b7       	in	r30, 0x3d	; 61
    41c2:	fe b7       	in	r31, 0x3e	; 62
    41c4:	36 96       	adiw	r30, 0x06	; 6
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	f8 94       	cli
    41ca:	fe bf       	out	0x3e, r31	; 62
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	ed bf       	out	0x3d, r30	; 61
    41d0:	c5 01       	movw	r24, r10
    41d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
  TX_NEWLINE_PC;
    41d6:	8d e0       	ldi	r24, 0x0D	; 13
    41d8:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    41dc:	8a e0       	ldi	r24, 0x0A	; 10
    41de:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>

  // increment animals_used until we've used all 11 animals then reset everything
  animals_used++;
    41e2:	80 91 c2 0d 	lds	r24, 0x0DC2
    41e6:	90 91 c3 0d 	lds	r25, 0x0DC3
    41ea:	01 96       	adiw	r24, 0x01	; 1
    41ec:	90 93 c3 0d 	sts	0x0DC3, r25
    41f0:	80 93 c2 0d 	sts	0x0DC2, r24
  if (animals_used == 11)
    41f4:	0b 97       	sbiw	r24, 0x0b	; 11
    41f6:	69 f4       	brne	.+26     	; 0x4212 <__stack+0x113>
  {
    animals_used = 0;
    41f8:	10 92 c3 0d 	sts	0x0DC3, r1
    41fc:	10 92 c2 0d 	sts	0x0DC2, r1
    for (i = 0; i < 11; i++)
      animals_used_list[i] = 0;
    4200:	d7 01       	movw	r26, r14
    4202:	1d 92       	st	X+, r1
    4204:	1d 92       	st	X+, r1
    4206:	7d 01       	movw	r14, r26
  // increment animals_used until we've used all 11 animals then reset everything
  animals_used++;
  if (animals_used == 11)
  {
    animals_used = 0;
    for (i = 0; i < 11; i++)
    4208:	ba ee       	ldi	r27, 0xEA	; 234
    420a:	eb 16       	cp	r14, r27
    420c:	bd e0       	ldi	r27, 0x0D	; 13
    420e:	fb 06       	cpc	r15, r27
    4210:	b9 f7       	brne	.-18     	; 0x4200 <__stack+0x101>
      animals_used_list[i] = 0;
  }

  return num;
}
    4212:	c6 01       	movw	r24, r12
    4214:	2a 96       	adiw	r28, 0x0a	; 10
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	cf 91       	pop	r28
    4222:	df 91       	pop	r29
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	df 90       	pop	r13
    422e:	cf 90       	pop	r12
    4230:	bf 90       	pop	r11
    4232:	af 90       	pop	r10
    4234:	9f 90       	pop	r9
    4236:	8f 90       	pop	r8
    4238:	08 95       	ret

0000423a <md3_main>:
 *         cannot handle 2 calls in quick succession.
 * @return Void
 * @TODO record MD3INT.MP3
 */
void md3_main(void)
{
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	df 93       	push	r29
    4240:	cf 93       	push	r28
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	a0 97       	sbiw	r28, 0x20	; 32
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	0f be       	out	0x3f, r0	; 63
    4250:	cd bf       	out	0x3d, r28	; 61
  char animal_file[16];
  switch(md3_current_state)
    4252:	80 91 ff 0d 	lds	r24, 0x0DFF
    4256:	90 91 00 0e 	lds	r25, 0x0E00
    425a:	84 30       	cpi	r24, 0x04	; 4
    425c:	91 05       	cpc	r25, r1
    425e:	09 f4       	brne	.+2      	; 0x4262 <md3_main+0x28>
    4260:	87 c0       	rjmp	.+270    	; 0x4370 <md3_main+0x136>
    4262:	85 30       	cpi	r24, 0x05	; 5
    4264:	91 05       	cpc	r25, r1
    4266:	8c f4       	brge	.+34     	; 0x428a <md3_main+0x50>
    4268:	81 30       	cpi	r24, 0x01	; 1
    426a:	91 05       	cpc	r25, r1
    426c:	b1 f1       	breq	.+108    	; 0x42da <md3_main+0xa0>
    426e:	82 30       	cpi	r24, 0x02	; 2
    4270:	91 05       	cpc	r25, r1
    4272:	1c f4       	brge	.+6      	; 0x427a <md3_main+0x40>
    4274:	89 2b       	or	r24, r25
    4276:	01 f1       	breq	.+64     	; 0x42b8 <md3_main+0x7e>
    4278:	46 c1       	rjmp	.+652    	; 0x4506 <md3_main+0x2cc>
    427a:	82 30       	cpi	r24, 0x02	; 2
    427c:	91 05       	cpc	r25, r1
    427e:	09 f4       	brne	.+2      	; 0x4282 <md3_main+0x48>
    4280:	48 c0       	rjmp	.+144    	; 0x4312 <md3_main+0xd8>
    4282:	03 97       	sbiw	r24, 0x03	; 3
    4284:	09 f0       	breq	.+2      	; 0x4288 <md3_main+0x4e>
    4286:	3f c1       	rjmp	.+638    	; 0x4506 <md3_main+0x2cc>
    4288:	69 c0       	rjmp	.+210    	; 0x435c <md3_main+0x122>
    428a:	87 30       	cpi	r24, 0x07	; 7
    428c:	91 05       	cpc	r25, r1
    428e:	09 f4       	brne	.+2      	; 0x4292 <md3_main+0x58>
    4290:	22 c1       	rjmp	.+580    	; 0x44d6 <md3_main+0x29c>
    4292:	88 30       	cpi	r24, 0x08	; 8
    4294:	91 05       	cpc	r25, r1
    4296:	44 f4       	brge	.+16     	; 0x42a8 <md3_main+0x6e>
    4298:	85 30       	cpi	r24, 0x05	; 5
    429a:	91 05       	cpc	r25, r1
    429c:	09 f4       	brne	.+2      	; 0x42a0 <md3_main+0x66>
    429e:	f2 c0       	rjmp	.+484    	; 0x4484 <md3_main+0x24a>
    42a0:	06 97       	sbiw	r24, 0x06	; 6
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <md3_main+0x6c>
    42a4:	30 c1       	rjmp	.+608    	; 0x4506 <md3_main+0x2cc>
    42a6:	97 c0       	rjmp	.+302    	; 0x43d6 <md3_main+0x19c>
    42a8:	88 30       	cpi	r24, 0x08	; 8
    42aa:	91 05       	cpc	r25, r1
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <md3_main+0x76>
    42ae:	1a c1       	rjmp	.+564    	; 0x44e4 <md3_main+0x2aa>
    42b0:	09 97       	sbiw	r24, 0x09	; 9
    42b2:	09 f0       	breq	.+2      	; 0x42b6 <md3_main+0x7c>
    42b4:	28 c1       	rjmp	.+592    	; 0x4506 <md3_main+0x2cc>
    42b6:	1d c1       	rjmp	.+570    	; 0x44f2 <md3_main+0x2b8>
  {
    case STATE_INITIAL:
      request_to_play_mp3_file("MD3INT.mp3");
    42b8:	83 e1       	ldi	r24, 0x13	; 19
    42ba:	93 e0       	ldi	r25, 0x03	; 3
    42bc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md3_current_state = STATE_REQUEST_INPUT1;
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	90 93 00 0e 	sts	0x0E00, r25
    42c8:	80 93 ff 0d 	sts	0x0DFF, r24
      animals_used = 0;
    42cc:	10 92 c3 0d 	sts	0x0DC3, r1
    42d0:	10 92 c2 0d 	sts	0x0DC2, r1
      got_input = false;
    42d4:	10 92 f7 0d 	sts	0x0DF7, r1
    42d8:	16 c1       	rjmp	.+556    	; 0x4506 <md3_main+0x2cc>
      break;

    case STATE_REQUEST_INPUT1:
      request_to_play_mp3_file("MD3PLS.mp3");
    42da:	8e e1       	ldi	r24, 0x1E	; 30
    42dc:	93 e0       	ldi	r25, 0x03	; 3
    42de:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      length_entered_word = 0;
    42e2:	10 92 f6 0d 	sts	0x0DF6, r1
    42e6:	10 92 f5 0d 	sts	0x0DF5, r1
      current_word_index = 0;
    42ea:	10 92 b4 0d 	sts	0x0DB4, r1
    42ee:	10 92 b3 0d 	sts	0x0DB3, r1
      animal = animal_list[choose_animal()];
    42f2:	0e 94 1b 20 	call	0x4036	; 0x4036 <choose_animal>
    42f6:	fc 01       	movw	r30, r24
    42f8:	ee 0f       	add	r30, r30
    42fa:	ff 1f       	adc	r31, r31
    42fc:	e9 56       	subi	r30, 0x69	; 105
    42fe:	fc 4f       	sbci	r31, 0xFC	; 252
    4300:	80 81       	ld	r24, Z
    4302:	91 81       	ldd	r25, Z+1	; 0x01
    4304:	90 93 c5 0d 	sts	0x0DC5, r25
    4308:	80 93 c4 0d 	sts	0x0DC4, r24
      md3_current_state = STATE_REQUEST_INPUT2;
    430c:	82 e0       	ldi	r24, 0x02	; 2
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	f6 c0       	rjmp	.+492    	; 0x44fe <md3_main+0x2c4>
      break;

    case STATE_REQUEST_INPUT2:

      sprintf(animal_file, "%s.mp3", animal);
    4312:	00 d0       	rcall	.+0      	; 0x4314 <md3_main+0xda>
    4314:	00 d0       	rcall	.+0      	; 0x4316 <md3_main+0xdc>
    4316:	00 d0       	rcall	.+0      	; 0x4318 <md3_main+0xde>
    4318:	ed b7       	in	r30, 0x3d	; 61
    431a:	fe b7       	in	r31, 0x3e	; 62
    431c:	31 96       	adiw	r30, 0x01	; 1
    431e:	8e 01       	movw	r16, r28
    4320:	0f 5f       	subi	r16, 0xFF	; 255
    4322:	1f 4f       	sbci	r17, 0xFF	; 255
    4324:	ad b7       	in	r26, 0x3d	; 61
    4326:	be b7       	in	r27, 0x3e	; 62
    4328:	12 96       	adiw	r26, 0x02	; 2
    432a:	1c 93       	st	X, r17
    432c:	0e 93       	st	-X, r16
    432e:	11 97       	sbiw	r26, 0x01	; 1
    4330:	89 e2       	ldi	r24, 0x29	; 41
    4332:	93 e0       	ldi	r25, 0x03	; 3
    4334:	93 83       	std	Z+3, r25	; 0x03
    4336:	82 83       	std	Z+2, r24	; 0x02
    4338:	80 91 c4 0d 	lds	r24, 0x0DC4
    433c:	90 91 c5 0d 	lds	r25, 0x0DC5
    4340:	95 83       	std	Z+5, r25	; 0x05
    4342:	84 83       	std	Z+4, r24	; 0x04
    4344:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
      request_to_play_mp3_file(animal_file);
    4348:	ed b7       	in	r30, 0x3d	; 61
    434a:	fe b7       	in	r31, 0x3e	; 62
    434c:	36 96       	adiw	r30, 0x06	; 6
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	fe bf       	out	0x3e, r31	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	ed bf       	out	0x3d, r30	; 61
    4358:	c8 01       	movw	r24, r16
    435a:	c6 c0       	rjmp	.+396    	; 0x44e8 <md3_main+0x2ae>

      md3_current_state = STATE_WAIT_INPUT;
      break;

    case STATE_WAIT_INPUT:
      if(got_input)
    435c:	80 91 f7 0d 	lds	r24, 0x0DF7
    4360:	88 23       	and	r24, r24
    4362:	09 f4       	brne	.+2      	; 0x4366 <md3_main+0x12c>
    4364:	d0 c0       	rjmp	.+416    	; 0x4506 <md3_main+0x2cc>
      {
        got_input = false;
    4366:	10 92 f7 0d 	sts	0x0DF7, r1
        md3_current_state = STATE_PROC_INPUT;
    436a:	84 e0       	ldi	r24, 0x04	; 4
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	c7 c0       	rjmp	.+398    	; 0x44fe <md3_main+0x2c4>
      }
      break;

    case STATE_PROC_INPUT:
      // set entered_letter in valid_letter(), but return 1 or 0
      if (last_cell == 0)
    4370:	80 91 fe 0d 	lds	r24, 0x0DFE
    4374:	88 23       	and	r24, r24
    4376:	09 f4       	brne	.+2      	; 0x437a <md3_main+0x140>
    4378:	b2 c0       	rjmp	.+356    	; 0x44de <md3_main+0x2a4>
      {
        md3_current_state = STATE_READ_ENTERED_LETTERS;
      } else if (valid_letter(last_cell))
    437a:	0e 94 0f 20 	call	0x401e	; 0x401e <valid_letter>
    437e:	88 23       	and	r24, r24
    4380:	39 f1       	breq	.+78     	; 0x43d0 <md3_main+0x196>
      {
        char buf[16];
        sprintf(buf, "%c.mp3", entered_letter);
    4382:	00 d0       	rcall	.+0      	; 0x4384 <md3_main+0x14a>
    4384:	00 d0       	rcall	.+0      	; 0x4386 <md3_main+0x14c>
    4386:	00 d0       	rcall	.+0      	; 0x4388 <md3_main+0x14e>
    4388:	ed b7       	in	r30, 0x3d	; 61
    438a:	fe b7       	in	r31, 0x3e	; 62
    438c:	31 96       	adiw	r30, 0x01	; 1
    438e:	8e 01       	movw	r16, r28
    4390:	0f 5e       	subi	r16, 0xEF	; 239
    4392:	1f 4f       	sbci	r17, 0xFF	; 255
    4394:	ad b7       	in	r26, 0x3d	; 61
    4396:	be b7       	in	r27, 0x3e	; 62
    4398:	12 96       	adiw	r26, 0x02	; 2
    439a:	1c 93       	st	X, r17
    439c:	0e 93       	st	-X, r16
    439e:	11 97       	sbiw	r26, 0x01	; 1
    43a0:	80 e3       	ldi	r24, 0x30	; 48
    43a2:	93 e0       	ldi	r25, 0x03	; 3
    43a4:	93 83       	std	Z+3, r25	; 0x03
    43a6:	82 83       	std	Z+2, r24	; 0x02
    43a8:	80 91 b0 0d 	lds	r24, 0x0DB0
    43ac:	84 83       	std	Z+4, r24	; 0x04
    43ae:	15 82       	std	Z+5, r1	; 0x05
    43b0:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(buf);
    43b4:	ed b7       	in	r30, 0x3d	; 61
    43b6:	fe b7       	in	r31, 0x3e	; 62
    43b8:	36 96       	adiw	r30, 0x06	; 6
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	fe bf       	out	0x3e, r31	; 62
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	ed bf       	out	0x3d, r30	; 61
    43c4:	c8 01       	movw	r24, r16
    43c6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md3_current_state = STATE_CHECK_IF_CORRECT;
    43ca:	85 e0       	ldi	r24, 0x05	; 5
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	97 c0       	rjmp	.+302    	; 0x44fe <md3_main+0x2c4>
      } else 
      {
        request_to_play_mp3_file("INVPAT.mp3");
    43d0:	87 e3       	ldi	r24, 0x37	; 55
    43d2:	93 e0       	ldi	r25, 0x03	; 3
    43d4:	82 c0       	rjmp	.+260    	; 0x44da <md3_main+0x2a0>
        md3_current_state = STATE_READ_ENTERED_LETTERS;
      }
      break;

    case STATE_READ_ENTERED_LETTERS:
      if(length_entered_word > 0)
    43d6:	80 91 f5 0d 	lds	r24, 0x0DF5
    43da:	90 91 f6 0d 	lds	r25, 0x0DF6
    43de:	18 16       	cp	r1, r24
    43e0:	19 06       	cpc	r1, r25
    43e2:	cc f5       	brge	.+114    	; 0x4456 <md3_main+0x21c>
      {
        char buf[16];
        sprintf(buf, "%c.mp3", animal[current_word_index]);
    43e4:	00 d0       	rcall	.+0      	; 0x43e6 <md3_main+0x1ac>
    43e6:	00 d0       	rcall	.+0      	; 0x43e8 <md3_main+0x1ae>
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <md3_main+0x1b0>
    43ea:	ad b7       	in	r26, 0x3d	; 61
    43ec:	be b7       	in	r27, 0x3e	; 62
    43ee:	11 96       	adiw	r26, 0x01	; 1
    43f0:	8e 01       	movw	r16, r28
    43f2:	0f 5e       	subi	r16, 0xEF	; 239
    43f4:	1f 4f       	sbci	r17, 0xFF	; 255
    43f6:	ed b7       	in	r30, 0x3d	; 61
    43f8:	fe b7       	in	r31, 0x3e	; 62
    43fa:	12 83       	std	Z+2, r17	; 0x02
    43fc:	01 83       	std	Z+1, r16	; 0x01
    43fe:	80 e3       	ldi	r24, 0x30	; 48
    4400:	93 e0       	ldi	r25, 0x03	; 3
    4402:	13 96       	adiw	r26, 0x03	; 3
    4404:	9c 93       	st	X, r25
    4406:	8e 93       	st	-X, r24
    4408:	12 97       	sbiw	r26, 0x02	; 2
    440a:	e0 91 c4 0d 	lds	r30, 0x0DC4
    440e:	f0 91 c5 0d 	lds	r31, 0x0DC5
    4412:	80 91 b3 0d 	lds	r24, 0x0DB3
    4416:	90 91 b4 0d 	lds	r25, 0x0DB4
    441a:	e8 0f       	add	r30, r24
    441c:	f9 1f       	adc	r31, r25
    441e:	80 81       	ld	r24, Z
    4420:	14 96       	adiw	r26, 0x04	; 4
    4422:	8c 93       	st	X, r24
    4424:	14 97       	sbiw	r26, 0x04	; 4
    4426:	15 96       	adiw	r26, 0x05	; 5
    4428:	1c 92       	st	X, r1
    442a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(buf);
    442e:	8d b7       	in	r24, 0x3d	; 61
    4430:	9e b7       	in	r25, 0x3e	; 62
    4432:	06 96       	adiw	r24, 0x06	; 6
    4434:	0f b6       	in	r0, 0x3f	; 63
    4436:	f8 94       	cli
    4438:	9e bf       	out	0x3e, r25	; 62
    443a:	0f be       	out	0x3f, r0	; 63
    443c:	8d bf       	out	0x3d, r24	; 61
    443e:	c8 01       	movw	r24, r16
    4440:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        current_word_index++;
    4444:	80 91 b3 0d 	lds	r24, 0x0DB3
    4448:	90 91 b4 0d 	lds	r25, 0x0DB4
    444c:	01 96       	adiw	r24, 0x01	; 1
    444e:	90 93 b4 0d 	sts	0x0DB4, r25
    4452:	80 93 b3 0d 	sts	0x0DB3, r24
      }

      if (current_word_index == length_entered_word)
    4456:	20 91 b3 0d 	lds	r18, 0x0DB3
    445a:	30 91 b4 0d 	lds	r19, 0x0DB4
    445e:	80 91 f5 0d 	lds	r24, 0x0DF5
    4462:	90 91 f6 0d 	lds	r25, 0x0DF6
    4466:	28 17       	cp	r18, r24
    4468:	39 07       	cpc	r19, r25
    446a:	09 f0       	breq	.+2      	; 0x446e <md3_main+0x234>
    446c:	4c c0       	rjmp	.+152    	; 0x4506 <md3_main+0x2cc>
      {
        md3_current_state = STATE_WAIT_INPUT;
    446e:	83 e0       	ldi	r24, 0x03	; 3
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	90 93 00 0e 	sts	0x0E00, r25
    4476:	80 93 ff 0d 	sts	0x0DFF, r24
        current_word_index = 0; 
    447a:	10 92 b4 0d 	sts	0x0DB4, r1
    447e:	10 92 b3 0d 	sts	0x0DB3, r1
    4482:	41 c0       	rjmp	.+130    	; 0x4506 <md3_main+0x2cc>
      }
      break;

    case STATE_CHECK_IF_CORRECT:
      if (animal[length_entered_word] == entered_letter)
    4484:	20 91 c4 0d 	lds	r18, 0x0DC4
    4488:	30 91 c5 0d 	lds	r19, 0x0DC5
    448c:	40 91 f5 0d 	lds	r20, 0x0DF5
    4490:	50 91 f6 0d 	lds	r21, 0x0DF6
    4494:	f9 01       	movw	r30, r18
    4496:	e4 0f       	add	r30, r20
    4498:	f5 1f       	adc	r31, r21
    449a:	90 81       	ld	r25, Z
    449c:	80 91 b0 0d 	lds	r24, 0x0DB0
    44a0:	98 17       	cp	r25, r24
    44a2:	b1 f4       	brne	.+44     	; 0x44d0 <md3_main+0x296>
      {
        length_entered_word++;
    44a4:	ca 01       	movw	r24, r20
    44a6:	01 96       	adiw	r24, 0x01	; 1
    44a8:	90 93 f6 0d 	sts	0x0DF6, r25
    44ac:	80 93 f5 0d 	sts	0x0DF5, r24

        if (length_entered_word != strlen(animal))
    44b0:	f9 01       	movw	r30, r18
    44b2:	01 90       	ld	r0, Z+
    44b4:	00 20       	and	r0, r0
    44b6:	e9 f7       	brne	.-6      	; 0x44b2 <md3_main+0x278>
    44b8:	31 97       	sbiw	r30, 0x01	; 1
    44ba:	e2 1b       	sub	r30, r18
    44bc:	f3 0b       	sbc	r31, r19
    44be:	8e 17       	cp	r24, r30
    44c0:	9f 07       	cpc	r25, r31
    44c2:	19 f0       	breq	.+6      	; 0x44ca <md3_main+0x290>
          md3_current_state = STATE_CORRECT_INPUT;
    44c4:	88 e0       	ldi	r24, 0x08	; 8
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	1a c0       	rjmp	.+52     	; 0x44fe <md3_main+0x2c4>
        else
          md3_current_state = STATE_DONE_WITH_CURRENT_ANIMAL;
    44ca:	89 e0       	ldi	r24, 0x09	; 9
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	17 c0       	rjmp	.+46     	; 0x44fe <md3_main+0x2c4>
      } else 
      {
        md3_current_state = STATE_WRONG_INPUT;
    44d0:	87 e0       	ldi	r24, 0x07	; 7
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	14 c0       	rjmp	.+40     	; 0x44fe <md3_main+0x2c4>
      }
      break;

    case STATE_WRONG_INPUT:
      request_to_play_mp3_file("no.mp3");
    44d6:	82 e4       	ldi	r24, 0x42	; 66
    44d8:	93 e0       	ldi	r25, 0x03	; 3
    44da:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md3_current_state = STATE_READ_ENTERED_LETTERS;
    44de:	86 e0       	ldi	r24, 0x06	; 6
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0d c0       	rjmp	.+26     	; 0x44fe <md3_main+0x2c4>
      break;

    case STATE_CORRECT_INPUT:
      request_to_play_mp3_file("good.mp3");
    44e4:	89 e4       	ldi	r24, 0x49	; 73
    44e6:	93 e0       	ldi	r25, 0x03	; 3
    44e8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md3_current_state = STATE_WAIT_INPUT;
    44ec:	83 e0       	ldi	r24, 0x03	; 3
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	06 c0       	rjmp	.+12     	; 0x44fe <md3_main+0x2c4>
      break;

    case STATE_DONE_WITH_CURRENT_ANIMAL:
      request_to_play_mp3_file("nc_wrk.mp3");
    44f2:	82 e5       	ldi	r24, 0x52	; 82
    44f4:	93 e0       	ldi	r25, 0x03	; 3
    44f6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md3_current_state = STATE_REQUEST_INPUT1;
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	90 93 00 0e 	sts	0x0E00, r25
    4502:	80 93 ff 0d 	sts	0x0DFF, r24
      break;
  }
}
    4506:	a0 96       	adiw	r28, 0x20	; 32
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	cf 91       	pop	r28
    4514:	df 91       	pop	r29
    4516:	1f 91       	pop	r17
    4518:	0f 91       	pop	r16
    451a:	08 95       	ret

0000451c <pc_requests_to_modify_modes_file>:
 *        message variable USART_PC_RecievedPacket.  
 *        The message size can at most be 20 charachters - writing_file_content
 * @return Void
 */
void pc_requests_to_modify_modes_file(void)
{
    451c:	0f 93       	push	r16
    451e:	1f 93       	push	r17
    4520:	df 93       	push	r29
    4522:	cf 93       	push	r28
    4524:	cd b7       	in	r28, 0x3d	; 61
    4526:	de b7       	in	r29, 0x3e	; 62
    4528:	64 97       	sbiw	r28, 0x14	; 20
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	8e 01       	movw	r16, r28
    4536:	0f 5f       	subi	r16, 0xFF	; 255
    4538:	1f 4f       	sbci	r17, 0xFF	; 255
    453a:	f8 01       	movw	r30, r16
  const char* modes_file = "MODES.DAT";
  unsigned char writing_file_content[20];

  // Clear the buffer
  int t = 0;
  for(t = 0; t < 20; t++)
    453c:	ce 01       	movw	r24, r28
    453e:	45 96       	adiw	r24, 0x15	; 21
  {
    writing_file_content[t]=0x00;
    4540:	11 92       	st	Z+, r1
  const char* modes_file = "MODES.DAT";
  unsigned char writing_file_content[20];

  // Clear the buffer
  int t = 0;
  for(t = 0; t < 20; t++)
    4542:	e8 17       	cp	r30, r24
    4544:	f9 07       	cpc	r31, r25
    4546:	e1 f7       	brne	.-8      	; 0x4540 <pc_requests_to_modify_modes_file+0x24>
  {
    writing_file_content[t]=0x00;
  }

  init_sd_card(false);
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <init_sd_card>
    454e:	23 e0       	ldi	r18, 0x03	; 3
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	09 c0       	rjmp	.+18     	; 0x4566 <pc_requests_to_modify_modes_file+0x4a>

  // Copy over the modes in the form <1><2>...<n>. Ignoring the "PCM" header
  for(t = 3; t < usart_pc_received_payload_len; t++)
  {
    writing_file_content[t - 3] = usart_pc_received_packet[t];
    4554:	f9 01       	movw	r30, r18
    4556:	eb 58       	subi	r30, 0x8B	; 139
    4558:	f2 4f       	sbci	r31, 0xF2	; 242
    455a:	80 81       	ld	r24, Z
    455c:	f8 01       	movw	r30, r16
    455e:	81 93       	st	Z+, r24
    4560:	8f 01       	movw	r16, r30
  }

  init_sd_card(false);

  // Copy over the modes in the form <1><2>...<n>. Ignoring the "PCM" header
  for(t = 3; t < usart_pc_received_payload_len; t++)
    4562:	2f 5f       	subi	r18, 0xFF	; 255
    4564:	3f 4f       	sbci	r19, 0xFF	; 255
    4566:	80 91 f3 08 	lds	r24, 0x08F3
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	28 17       	cp	r18, r24
    456e:	39 07       	cpc	r19, r25
    4570:	8c f3       	brlt	.-30     	; 0x4554 <pc_requests_to_modify_modes_file+0x38>
  {
    writing_file_content[t - 3] = usart_pc_received_packet[t];
  }

  if(replace_the_contents_of_this_file_with(
    4572:	8d ea       	ldi	r24, 0xAD	; 173
    4574:	93 e0       	ldi	r25, 0x03	; 3
    4576:	be 01       	movw	r22, r28
    4578:	6f 5f       	subi	r22, 0xFF	; 255
    457a:	7f 4f       	sbci	r23, 0xFF	; 255
    457c:	0e 94 df 12 	call	0x25be	; 0x25be <replace_the_contents_of_this_file_with>
    4580:	89 2b       	or	r24, r25
    4582:	19 f4       	brne	.+6      	; 0x458a <pc_requests_to_modify_modes_file+0x6e>
        (unsigned char*)modes_file, writing_file_content) == 0)
  {
    usart_transmit_string_to_pc_from_flash(PSTR("SABT-OK"));
    4584:	8a e3       	ldi	r24, 0x3A	; 58
    4586:	93 e0       	ldi	r25, 0x03	; 3
    4588:	02 c0       	rjmp	.+4      	; 0x458e <pc_requests_to_modify_modes_file+0x72>
    TX_NEWLINE_PC;
  }
  else
  {
    usart_transmit_string_to_pc_from_flash(PSTR("SABT-FAIL"));
    458a:	80 e3       	ldi	r24, 0x30	; 48
    458c:	93 e0       	ldi	r25, 0x03	; 3
    458e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
    TX_NEWLINE_PC;
    4592:	8d e0       	ldi	r24, 0x0D	; 13
    4594:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    4598:	8a e0       	ldi	r24, 0x0A	; 10
    459a:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
  }
}
    459e:	64 96       	adiw	r28, 0x14	; 20
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	1f 91       	pop	r17
    45b0:	0f 91       	pop	r16
    45b2:	08 95       	ret

000045b4 <pc_parse_message>:
 */
void pc_parse_message()
{
  unsigned char message_type;

  usart_pc_message_ready = false;
    45b4:	10 92 f4 08 	sts	0x08F4, r1
  message_type = usart_pc_received_packet[2];
    45b8:	80 91 77 0d 	lds	r24, 0x0D77

  switch(message_type)
    45bc:	8d 34       	cpi	r24, 0x4D	; 77
    45be:	69 f0       	breq	.+26     	; 0x45da <pc_parse_message+0x26>
    45c0:	88 37       	cpi	r24, 0x78	; 120
    45c2:	71 f4       	brne	.+28     	; 0x45e0 <pc_parse_message+0x2c>
  {
    // Send a confirmation that the board received the message
    case PC_CMD_INIT:
      usart_transmit_string_to_pc_from_flash(PSTR("SABT-v2.1"));
    45c4:	82 e4       	ldi	r24, 0x42	; 66
    45c6:	93 e0       	ldi	r25, 0x03	; 3
    45c8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <usart_transmit_string_to_pc_from_flash>
      TX_NEWLINE_PC;      
    45cc:	8d e0       	ldi	r24, 0x0D	; 13
    45ce:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    45d2:	8a e0       	ldi	r24, 0x0A	; 10
    45d4:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    45d8:	08 95       	ret
      break;
      // Modify the current modes
    case PC_CMD_NEWMODES:
      pc_requests_to_modify_modes_file();
    45da:	0e 94 8e 22 	call	0x451c	; 0x451c <pc_requests_to_modify_modes_file>
    45de:	08 95       	ret
      break;
      // Incorrect message type
    default:
      PRINTF("SABT-INCORRECT MESSAGE TYPE! MUST BE 'M' OR 'x'.\r\n");
    45e0:	87 eb       	ldi	r24, 0xB7	; 183
    45e2:	93 e0       	ldi	r25, 0x03	; 3
    45e4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
    45e8:	08 95       	ret

000045ea <md4_reset>:
  request_to_play_mp3_file(req_mp3);
}

void md4_reset(void)
{
  md4_current_state = 0;
    45ea:	10 92 04 0e 	sts	0x0E04, r1
    45ee:	10 92 03 0e 	sts	0x0E03, r1
  md4_last_dot = 0;
    45f2:	10 92 02 0e 	sts	0x0E02, r1
}
    45f6:	08 95       	ret

000045f8 <md4_call_mode_yes_answer>:
 * @brief Handle pressing enter in mode 4
 * @return Void
 */
void md4_call_mode_yes_answer(void)
{
}
    45f8:	08 95       	ret

000045fa <md4_call_mode_no_answer>:
 * @brief Handle pressing exit in mode 4
 * @return Void
 */
void md4_call_mode_no_answer(void)
{
}
    45fa:	08 95       	ret

000045fc <md4_input_cell>:
 * @brief handle cell input
 * @param this_cell the input cell
 * @return Void
 */
void md4_input_cell(char this_cell)
{
    45fc:	98 2f       	mov	r25, r24
  if(md4_last_dot != 0)
    45fe:	80 91 02 0e 	lds	r24, 0x0E02
    4602:	88 23       	and	r24, r24
    4604:	29 f0       	breq	.+10     	; 0x4610 <md4_input_cell+0x14>
  {
    last_cell = this_cell;
    4606:	90 93 fe 0d 	sts	0x0DFE, r25
    got_input = true;
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	80 93 f7 0d 	sts	0x0DF7, r24
    4610:	08 95       	ret

00004612 <place_letter>:
bool place_letter()
{
  int i;
  bool found_match = false;

  for (i = 0; i < strlen(current_word); i++)
    4612:	40 91 d1 0d 	lds	r20, 0x0DD1
    4616:	50 91 d2 0d 	lds	r21, 0x0DD2
  {
    if (entered_letter == current_word[i])
    461a:	60 91 b0 0d 	lds	r22, 0x0DB0
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	0d c0       	rjmp	.+26     	; 0x4640 <place_letter+0x2e>
    4626:	fa 01       	movw	r30, r20
    4628:	e2 0f       	add	r30, r18
    462a:	f3 1f       	adc	r31, r19
    462c:	80 81       	ld	r24, Z
    462e:	68 17       	cp	r22, r24
    4630:	29 f4       	brne	.+10     	; 0x463c <place_letter+0x2a>
    {
      input_word[i] = entered_letter;
    4632:	f9 01       	movw	r30, r18
    4634:	ea 53       	subi	r30, 0x3A	; 58
    4636:	f2 4f       	sbci	r31, 0xF2	; 242
    4638:	60 83       	st	Z, r22
    463a:	91 e0       	ldi	r25, 0x01	; 1
bool place_letter()
{
  int i;
  bool found_match = false;

  for (i = 0; i < strlen(current_word); i++)
    463c:	2f 5f       	subi	r18, 0xFF	; 255
    463e:	3f 4f       	sbci	r19, 0xFF	; 255
    4640:	fa 01       	movw	r30, r20
    4642:	01 90       	ld	r0, Z+
    4644:	00 20       	and	r0, r0
    4646:	e9 f7       	brne	.-6      	; 0x4642 <place_letter+0x30>
    4648:	31 97       	sbiw	r30, 0x01	; 1
    464a:	e4 1b       	sub	r30, r20
    464c:	f5 0b       	sbc	r31, r21
    464e:	2e 17       	cp	r18, r30
    4650:	3f 07       	cpc	r19, r31
    4652:	48 f3       	brcs	.-46     	; 0x4626 <place_letter+0x14>
      found_match = true;
    }
  }

  return found_match;
}
    4654:	89 2f       	mov	r24, r25
    4656:	08 95       	ret

00004658 <md4_play_requested_dot>:
 * @brief  Given a char, in last_cell, play the corresponding number
 *         sound file
 * @return Void
 */
void md4_play_requested_dot(void)
{
    4658:	0f 93       	push	r16
    465a:	1f 93       	push	r17
    465c:	df 93       	push	r29
    465e:	cf 93       	push	r28
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	2a 97       	sbiw	r28, 0x0a	; 10
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
  // This will hold formatted file to access
  char req_mp3[10];
  sprintf((char*)req_mp3, "dot_%c.MP3", md4_last_dot);
    4670:	00 d0       	rcall	.+0      	; 0x4672 <md4_play_requested_dot+0x1a>
    4672:	00 d0       	rcall	.+0      	; 0x4674 <md4_play_requested_dot+0x1c>
    4674:	00 d0       	rcall	.+0      	; 0x4676 <md4_play_requested_dot+0x1e>
    4676:	ed b7       	in	r30, 0x3d	; 61
    4678:	fe b7       	in	r31, 0x3e	; 62
    467a:	31 96       	adiw	r30, 0x01	; 1
    467c:	8e 01       	movw	r16, r28
    467e:	0f 5f       	subi	r16, 0xFF	; 255
    4680:	1f 4f       	sbci	r17, 0xFF	; 255
    4682:	ad b7       	in	r26, 0x3d	; 61
    4684:	be b7       	in	r27, 0x3e	; 62
    4686:	12 96       	adiw	r26, 0x02	; 2
    4688:	1c 93       	st	X, r17
    468a:	0e 93       	st	-X, r16
    468c:	11 97       	sbiw	r26, 0x01	; 1
    468e:	8a ee       	ldi	r24, 0xEA	; 234
    4690:	93 e0       	ldi	r25, 0x03	; 3
    4692:	93 83       	std	Z+3, r25	; 0x03
    4694:	82 83       	std	Z+2, r24	; 0x02
    4696:	80 91 02 0e 	lds	r24, 0x0E02
    469a:	84 83       	std	Z+4, r24	; 0x04
    469c:	15 82       	std	Z+5, r1	; 0x05
    469e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  request_to_play_mp3_file(req_mp3);
    46a2:	8d b7       	in	r24, 0x3d	; 61
    46a4:	9e b7       	in	r25, 0x3e	; 62
    46a6:	06 96       	adiw	r24, 0x06	; 6
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	f8 94       	cli
    46ac:	9e bf       	out	0x3e, r25	; 62
    46ae:	0f be       	out	0x3f, r0	; 63
    46b0:	8d bf       	out	0x3d, r24	; 61
    46b2:	c8 01       	movw	r24, r16
    46b4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    46b8:	2a 96       	adiw	r28, 0x0a	; 10
    46ba:	0f b6       	in	r0, 0x3f	; 63
    46bc:	f8 94       	cli
    46be:	de bf       	out	0x3e, r29	; 62
    46c0:	0f be       	out	0x3f, r0	; 63
    46c2:	cd bf       	out	0x3d, r28	; 61
    46c4:	cf 91       	pop	r28
    46c6:	df 91       	pop	r29
    46c8:	1f 91       	pop	r17
    46ca:	0f 91       	pop	r16
    46cc:	08 95       	ret

000046ce <md4_input_dot>:
 * @param this_dot the input dot
 * @return Void
 */
void md4_input_dot(char this_dot)
{
  md4_last_dot = this_dot;
    46ce:	80 93 02 0e 	sts	0x0E02, r24
  md4_play_requested_dot();
    46d2:	0e 94 2c 23 	call	0x4658	; 0x4658 <md4_play_requested_dot>
}
    46d6:	08 95       	ret

000046d8 <md4_valid_letter>:
 *        have been pressed
 * @return bool - true if a valid letter, false if not
 */
bool md4_valid_letter(char button_bits)
{
  char letter_from_bits = get_letter_from_bits(button_bits);
    46d8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <get_letter_from_bits>
    46dc:	98 2f       	mov	r25, r24
  if((letter_from_bits >= 'a') && (letter_from_bits <= 'z'))
    46de:	81 56       	subi	r24, 0x61	; 97
    46e0:	8a 31       	cpi	r24, 0x1A	; 26
    46e2:	10 f0       	brcs	.+4      	; 0x46e8 <md4_valid_letter+0x10>
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	08 95       	ret
  {
    entered_letter = letter_from_bits;
    46e8:	90 93 b0 0d 	sts	0x0DB0, r25
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }
  return false;
}
    46ee:	08 95       	ret

000046f0 <choose_word>:
/*
 * @brief Choose random word from item list
 * @return char* - Random chosen word
 */
int choose_word()
{
    46f0:	ef 92       	push	r14
    46f2:	ff 92       	push	r15
    46f4:	0f 93       	push	r16
    46f6:	1f 93       	push	r17
    46f8:	df 93       	push	r29
    46fa:	cf 93       	push	r28
    46fc:	cd b7       	in	r28, 0x3d	; 61
    46fe:	de b7       	in	r29, 0x3e	; 62
    4700:	2a 97       	sbiw	r28, 0x0a	; 10
    4702:	0f b6       	in	r0, 0x3f	; 63
    4704:	f8 94       	cli
    4706:	de bf       	out	0x3e, r29	; 62
    4708:	0f be       	out	0x3f, r0	; 63
    470a:	cd bf       	out	0x3d, r28	; 61
  int num = TCNT1;
    470c:	20 91 84 00 	lds	r18, 0x0084
    4710:	30 91 85 00 	lds	r19, 0x0085
  int i;

  num *= PRIME;
  num = (abs(num) % 11);
    4714:	85 e3       	ldi	r24, 0x35	; 53
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	28 9f       	mul	r18, r24
    471a:	a0 01       	movw	r20, r0
    471c:	29 9f       	mul	r18, r25
    471e:	50 0d       	add	r21, r0
    4720:	38 9f       	mul	r19, r24
    4722:	50 0d       	add	r21, r0
    4724:	11 24       	eor	r1, r1
    4726:	57 ff       	sbrs	r21, 7
    4728:	03 c0       	rjmp	.+6      	; 0x4730 <choose_word+0x40>
    472a:	50 95       	com	r21
    472c:	41 95       	neg	r20
    472e:	5f 4f       	sbci	r21, 0xFF	; 255
    4730:	ca 01       	movw	r24, r20
    4732:	6b e0       	ldi	r22, 0x0B	; 11
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divmodhi4>
    473a:	f8 2e       	mov	r15, r24
    473c:	e9 2e       	mov	r14, r25

  char buf[10];
  sprintf(buf, "num=%i\r\n", num);
    473e:	00 d0       	rcall	.+0      	; 0x4740 <choose_word+0x50>
    4740:	00 d0       	rcall	.+0      	; 0x4742 <choose_word+0x52>
    4742:	00 d0       	rcall	.+0      	; 0x4744 <choose_word+0x54>
    4744:	ed b7       	in	r30, 0x3d	; 61
    4746:	fe b7       	in	r31, 0x3e	; 62
    4748:	31 96       	adiw	r30, 0x01	; 1
    474a:	8e 01       	movw	r16, r28
    474c:	0f 5f       	subi	r16, 0xFF	; 255
    474e:	1f 4f       	sbci	r17, 0xFF	; 255
    4750:	ad b7       	in	r26, 0x3d	; 61
    4752:	be b7       	in	r27, 0x3e	; 62
    4754:	12 96       	adiw	r26, 0x02	; 2
    4756:	1c 93       	st	X, r17
    4758:	0e 93       	st	-X, r16
    475a:	11 97       	sbiw	r26, 0x01	; 1
    475c:	85 ef       	ldi	r24, 0xF5	; 245
    475e:	93 e0       	ldi	r25, 0x03	; 3
    4760:	93 83       	std	Z+3, r25	; 0x03
    4762:	82 83       	std	Z+2, r24	; 0x02
    4764:	f4 82       	std	Z+4, r15	; 0x04
    4766:	e5 82       	std	Z+5, r14	; 0x05
    4768:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  PRINTF(buf);
    476c:	8d b7       	in	r24, 0x3d	; 61
    476e:	9e b7       	in	r25, 0x3e	; 62
    4770:	06 96       	adiw	r24, 0x06	; 6
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	f8 94       	cli
    4776:	9e bf       	out	0x3e, r25	; 62
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	8d bf       	out	0x3d, r24	; 61
    477c:	c8 01       	movw	r24, r16
    477e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>

  TX_NEWLINE_PC;
    4782:	8d e0       	ldi	r24, 0x0D	; 13
    4784:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    4788:	8a e0       	ldi	r24, 0x0A	; 10
    478a:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
  sprintf(buf, "cnt=%i", items_used + 1);
    478e:	00 d0       	rcall	.+0      	; 0x4790 <choose_word+0xa0>
    4790:	00 d0       	rcall	.+0      	; 0x4792 <choose_word+0xa2>
    4792:	00 d0       	rcall	.+0      	; 0x4794 <choose_word+0xa4>
    4794:	ed b7       	in	r30, 0x3d	; 61
    4796:	fe b7       	in	r31, 0x3e	; 62
    4798:	31 96       	adiw	r30, 0x01	; 1
    479a:	ad b7       	in	r26, 0x3d	; 61
    479c:	be b7       	in	r27, 0x3e	; 62
    479e:	12 96       	adiw	r26, 0x02	; 2
    47a0:	1c 93       	st	X, r17
    47a2:	0e 93       	st	-X, r16
    47a4:	11 97       	sbiw	r26, 0x01	; 1
    47a6:	8e ef       	ldi	r24, 0xFE	; 254
    47a8:	93 e0       	ldi	r25, 0x03	; 3
    47aa:	93 83       	std	Z+3, r25	; 0x03
    47ac:	82 83       	std	Z+2, r24	; 0x02
    47ae:	80 91 b8 0d 	lds	r24, 0x0DB8
    47b2:	90 91 b9 0d 	lds	r25, 0x0DB9
    47b6:	01 96       	adiw	r24, 0x01	; 1
    47b8:	95 83       	std	Z+5, r25	; 0x05
    47ba:	84 83       	std	Z+4, r24	; 0x04
    47bc:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  PRINTF(buf);
    47c0:	8d b7       	in	r24, 0x3d	; 61
    47c2:	9e b7       	in	r25, 0x3e	; 62
    47c4:	06 96       	adiw	r24, 0x06	; 6
    47c6:	0f b6       	in	r0, 0x3f	; 63
    47c8:	f8 94       	cli
    47ca:	9e bf       	out	0x3e, r25	; 62
    47cc:	0f be       	out	0x3f, r0	; 63
    47ce:	8d bf       	out	0x3d, r24	; 61
    47d0:	c8 01       	movw	r24, r16
    47d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
  TX_NEWLINE_PC;
    47d6:	8d e0       	ldi	r24, 0x0D	; 13
    47d8:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>
    47dc:	8a e0       	ldi	r24, 0x0A	; 10
    47de:	0e 94 56 03 	call	0x6ac	; 0x6ac <usart_transmit_byte_to_pc>

  // increment items_used until we've used all 11 items then reset everything
  items_used++;
    47e2:	80 91 b8 0d 	lds	r24, 0x0DB8
    47e6:	90 91 b9 0d 	lds	r25, 0x0DB9
    47ea:	01 96       	adiw	r24, 0x01	; 1
    47ec:	90 93 b9 0d 	sts	0x0DB9, r25
    47f0:	80 93 b8 0d 	sts	0x0DB8, r24
  if (items_used == 11)
    47f4:	0b 97       	sbiw	r24, 0x0b	; 11
    47f6:	61 f4       	brne	.+24     	; 0x4810 <choose_word+0x120>
  {
    items_used = 0;
    47f8:	10 92 b9 0d 	sts	0x0DB9, r1
    47fc:	10 92 b8 0d 	sts	0x0DB8, r1
    4800:	ea ec       	ldi	r30, 0xCA	; 202
    4802:	f8 e0       	ldi	r31, 0x08	; 8
    for (i = 0; i < 11; i++)
      items_used_list[i] = 0;
    4804:	11 92       	st	Z+, r1
    4806:	11 92       	st	Z+, r1
  // increment items_used until we've used all 11 items then reset everything
  items_used++;
  if (items_used == 11)
  {
    items_used = 0;
    for (i = 0; i < 11; i++)
    4808:	98 e0       	ldi	r25, 0x08	; 8
    480a:	e0 3e       	cpi	r30, 0xE0	; 224
    480c:	f9 07       	cpc	r31, r25
    480e:	d1 f7       	brne	.-12     	; 0x4804 <choose_word+0x114>
      items_used_list[i] = 0;
  }

  return num;
}
    4810:	8f 2d       	mov	r24, r15
    4812:	9e 2d       	mov	r25, r14
    4814:	2a 96       	adiw	r28, 0x0a	; 10
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	f8 94       	cli
    481a:	de bf       	out	0x3e, r29	; 62
    481c:	0f be       	out	0x3f, r0	; 63
    481e:	cd bf       	out	0x3d, r28	; 61
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	1f 91       	pop	r17
    4826:	0f 91       	pop	r16
    4828:	ff 90       	pop	r15
    482a:	ef 90       	pop	r14
    482c:	08 95       	ret

0000482e <md4_main>:
/*
 * @brief  Step through the main stages in the code.
 * @return Void
 */
void md4_main(void)
{
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
    483a:	6b 97       	sbiw	r28, 0x1b	; 27
    483c:	0f b6       	in	r0, 0x3f	; 63
    483e:	f8 94       	cli
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	0f be       	out	0x3f, r0	; 63
    4844:	cd bf       	out	0x3d, r28	; 61
  char bufff[10];
  switch(md4_current_state)
    4846:	80 91 03 0e 	lds	r24, 0x0E03
    484a:	90 91 04 0e 	lds	r25, 0x0E04
    484e:	84 30       	cpi	r24, 0x04	; 4
    4850:	91 05       	cpc	r25, r1
    4852:	09 f4       	brne	.+2      	; 0x4856 <md4_main+0x28>
    4854:	bc c0       	rjmp	.+376    	; 0x49ce <md4_main+0x1a0>
    4856:	85 30       	cpi	r24, 0x05	; 5
    4858:	91 05       	cpc	r25, r1
    485a:	8c f4       	brge	.+34     	; 0x487e <md4_main+0x50>
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	91 05       	cpc	r25, r1
    4860:	41 f1       	breq	.+80     	; 0x48b2 <md4_main+0x84>
    4862:	82 30       	cpi	r24, 0x02	; 2
    4864:	91 05       	cpc	r25, r1
    4866:	1c f4       	brge	.+6      	; 0x486e <md4_main+0x40>
    4868:	89 2b       	or	r24, r25
    486a:	01 f1       	breq	.+64     	; 0x48ac <md4_main+0x7e>
    486c:	9c c1       	rjmp	.+824    	; 0x4ba6 <md4_main+0x378>
    486e:	82 30       	cpi	r24, 0x02	; 2
    4870:	91 05       	cpc	r25, r1
    4872:	09 f4       	brne	.+2      	; 0x4876 <md4_main+0x48>
    4874:	40 c0       	rjmp	.+128    	; 0x48f6 <md4_main+0xc8>
    4876:	03 97       	sbiw	r24, 0x03	; 3
    4878:	09 f0       	breq	.+2      	; 0x487c <md4_main+0x4e>
    487a:	95 c1       	rjmp	.+810    	; 0x4ba6 <md4_main+0x378>
    487c:	7f c0       	rjmp	.+254    	; 0x497c <md4_main+0x14e>
    487e:	87 30       	cpi	r24, 0x07	; 7
    4880:	91 05       	cpc	r25, r1
    4882:	09 f4       	brne	.+2      	; 0x4886 <md4_main+0x58>
    4884:	e8 c0       	rjmp	.+464    	; 0x4a56 <md4_main+0x228>
    4886:	88 30       	cpi	r24, 0x08	; 8
    4888:	91 05       	cpc	r25, r1
    488a:	44 f4       	brge	.+16     	; 0x489c <md4_main+0x6e>
    488c:	85 30       	cpi	r24, 0x05	; 5
    488e:	91 05       	cpc	r25, r1
    4890:	09 f4       	brne	.+2      	; 0x4894 <md4_main+0x66>
    4892:	a4 c0       	rjmp	.+328    	; 0x49dc <md4_main+0x1ae>
    4894:	06 97       	sbiw	r24, 0x06	; 6
    4896:	09 f0       	breq	.+2      	; 0x489a <md4_main+0x6c>
    4898:	86 c1       	rjmp	.+780    	; 0x4ba6 <md4_main+0x378>
    489a:	aa c0       	rjmp	.+340    	; 0x49f0 <md4_main+0x1c2>
    489c:	88 30       	cpi	r24, 0x08	; 8
    489e:	91 05       	cpc	r25, r1
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <md4_main+0x76>
    48a2:	f2 c0       	rjmp	.+484    	; 0x4a88 <md4_main+0x25a>
    48a4:	09 97       	sbiw	r24, 0x09	; 9
    48a6:	09 f0       	breq	.+2      	; 0x48aa <md4_main+0x7c>
    48a8:	7e c1       	rjmp	.+764    	; 0x4ba6 <md4_main+0x378>
    48aa:	2d c1       	rjmp	.+602    	; 0x4b06 <md4_main+0x2d8>
  {
    case MD4_STATE_INITIAL:
      request_to_play_mp3_file("MD4INT.mp3");
    48ac:	85 e0       	ldi	r24, 0x05	; 5
    48ae:	94 e0       	ldi	r25, 0x04	; 4
    48b0:	42 c1       	rjmp	.+644    	; 0x4b36 <md4_main+0x308>
      md4_current_state = MD4_STATE_CHOOSE_WORD;
      break;

    case MD4_STATE_CHOOSE_WORD:
      current_word = item_list[choose_word()];
    48b2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <choose_word>
    48b6:	fc 01       	movw	r30, r24
    48b8:	ee 0f       	add	r30, r30
    48ba:	ff 1f       	adc	r31, r31
    48bc:	ea 53       	subi	r30, 0x3A	; 58
    48be:	fb 4f       	sbci	r31, 0xFB	; 251
    48c0:	80 81       	ld	r24, Z
    48c2:	91 81       	ldd	r25, Z+1	; 0x01
    48c4:	90 93 d2 0d 	sts	0x0DD2, r25
    48c8:	80 93 d1 0d 	sts	0x0DD1, r24
      input_word_index = 0;
    48cc:	10 92 fb 0d 	sts	0x0DFB, r1
    48d0:	10 92 fa 0d 	sts	0x0DFA, r1
      num_mistakes = 0;
    48d4:	10 92 f9 0d 	sts	0x0DF9, r1
    48d8:	10 92 f8 0d 	sts	0x0DF8, r1
      game_status = 0;
    48dc:	10 92 be 0d 	sts	0x0DBE, r1
    48e0:	10 92 bd 0d 	sts	0x0DBD, r1
    48e4:	e6 ec       	ldi	r30, 0xC6	; 198
    48e6:	fd e0       	ldi	r31, 0x0D	; 13

      int i;
      for (i = 0; i < 11; i++) {
        input_word[i] = '0';
    48e8:	80 e3       	ldi	r24, 0x30	; 48
    48ea:	81 93       	st	Z+, r24
      input_word_index = 0;
      num_mistakes = 0;
      game_status = 0;

      int i;
      for (i = 0; i < 11; i++) {
    48ec:	9d e0       	ldi	r25, 0x0D	; 13
    48ee:	e1 3d       	cpi	r30, 0xD1	; 209
    48f0:	f9 07       	cpc	r31, r25
    48f2:	d9 f7       	brne	.-10     	; 0x48ea <md4_main+0xbc>
    48f4:	ff c0       	rjmp	.+510    	; 0x4af4 <md4_main+0x2c6>

      md4_current_state = MD4_STATE_SAY_STATUS;
      break;

    case MD4_STATE_SAY_STATUS:
      if (input_word_index == strlen(current_word))
    48f6:	80 91 fa 0d 	lds	r24, 0x0DFA
    48fa:	90 91 fb 0d 	lds	r25, 0x0DFB
    48fe:	a0 91 d1 0d 	lds	r26, 0x0DD1
    4902:	b0 91 d2 0d 	lds	r27, 0x0DD2
    4906:	fd 01       	movw	r30, r26
    4908:	01 90       	ld	r0, Z+
    490a:	00 20       	and	r0, r0
    490c:	e9 f7       	brne	.-6      	; 0x4908 <md4_main+0xda>
    490e:	31 97       	sbiw	r30, 0x01	; 1
    4910:	ea 1b       	sub	r30, r26
    4912:	fb 0b       	sbc	r31, r27
    4914:	8e 17       	cp	r24, r30
    4916:	9f 07       	cpc	r25, r31
    4918:	99 f4       	brne	.+38     	; 0x4940 <md4_main+0x112>
      {
        input_word_index = 0;
    491a:	10 92 fb 0d 	sts	0x0DFB, r1
    491e:	10 92 fa 0d 	sts	0x0DFA, r1
        if (num_mistakes > 0)
    4922:	80 91 f8 0d 	lds	r24, 0x0DF8
    4926:	90 91 f9 0d 	lds	r25, 0x0DF9
    492a:	18 16       	cp	r1, r24
    492c:	19 06       	cpc	r1, r25
    492e:	0c f0       	brlt	.+2      	; 0x4932 <md4_main+0x104>
    4930:	4b c0       	rjmp	.+150    	; 0x49c8 <md4_main+0x19a>
        {
          request_to_play_mp3_file("and_mstk.mp3");
    4932:	80 e1       	ldi	r24, 0x10	; 16
    4934:	94 e0       	ldi	r25, 0x04	; 4
    4936:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
          md4_current_state = MD4_STATE_SAY_MISTAKES;
    493a:	83 e0       	ldi	r24, 0x03	; 3
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	ff c0       	rjmp	.+510    	; 0x4b3e <md4_main+0x310>
        } else
          md4_current_state = MD4_STATE_ASK_FOR_GUESS;
      } else
      {
        if (input_word[input_word_index] != '0')
    4940:	8a 53       	subi	r24, 0x3A	; 58
    4942:	92 4f       	sbci	r25, 0xF2	; 242
    4944:	dc 01       	movw	r26, r24
    4946:	2c 91       	ld	r18, X
    4948:	20 33       	cpi	r18, 0x30	; 48
    494a:	a9 f0       	breq	.+42     	; 0x4976 <md4_main+0x148>
        {
          char buf[10];
          sprintf(buf, "%c.mp3", input_word[input_word_index]);
    494c:	00 d0       	rcall	.+0      	; 0x494e <md4_main+0x120>
    494e:	00 d0       	rcall	.+0      	; 0x4950 <md4_main+0x122>
    4950:	00 d0       	rcall	.+0      	; 0x4952 <md4_main+0x124>
    4952:	ed b7       	in	r30, 0x3d	; 61
    4954:	fe b7       	in	r31, 0x3e	; 62
    4956:	31 96       	adiw	r30, 0x01	; 1
    4958:	8e 01       	movw	r16, r28
    495a:	0e 5e       	subi	r16, 0xEE	; 238
    495c:	1f 4f       	sbci	r17, 0xFF	; 255
    495e:	ad b7       	in	r26, 0x3d	; 61
    4960:	be b7       	in	r27, 0x3e	; 62
    4962:	12 96       	adiw	r26, 0x02	; 2
    4964:	1c 93       	st	X, r17
    4966:	0e 93       	st	-X, r16
    4968:	11 97       	sbiw	r26, 0x01	; 1
    496a:	8d e1       	ldi	r24, 0x1D	; 29
    496c:	94 e0       	ldi	r25, 0x04	; 4
    496e:	93 83       	std	Z+3, r25	; 0x03
    4970:	82 83       	std	Z+2, r24	; 0x02
    4972:	24 83       	std	Z+4, r18	; 0x04
    4974:	01 c1       	rjmp	.+514    	; 0x4b78 <md4_main+0x34a>
          request_to_play_mp3_file(buf);
        } else
        {
          request_to_play_mp3_file("blank.mp3");
    4976:	84 e2       	ldi	r24, 0x24	; 36
    4978:	94 e0       	ldi	r25, 0x04	; 4
    497a:	0a c1       	rjmp	.+532    	; 0x4b90 <md4_main+0x362>
        input_word_index++;
      }
      break;

    case MD4_STATE_SAY_MISTAKES:
      sprintf(bufff, "%d_mstks.mp3", num_mistakes);
    497c:	00 d0       	rcall	.+0      	; 0x497e <md4_main+0x150>
    497e:	00 d0       	rcall	.+0      	; 0x4980 <md4_main+0x152>
    4980:	00 d0       	rcall	.+0      	; 0x4982 <md4_main+0x154>
    4982:	ed b7       	in	r30, 0x3d	; 61
    4984:	fe b7       	in	r31, 0x3e	; 62
    4986:	31 96       	adiw	r30, 0x01	; 1
    4988:	8e 01       	movw	r16, r28
    498a:	08 5f       	subi	r16, 0xF8	; 248
    498c:	1f 4f       	sbci	r17, 0xFF	; 255
    498e:	ad b7       	in	r26, 0x3d	; 61
    4990:	be b7       	in	r27, 0x3e	; 62
    4992:	12 96       	adiw	r26, 0x02	; 2
    4994:	1c 93       	st	X, r17
    4996:	0e 93       	st	-X, r16
    4998:	11 97       	sbiw	r26, 0x01	; 1
    499a:	8e e2       	ldi	r24, 0x2E	; 46
    499c:	94 e0       	ldi	r25, 0x04	; 4
    499e:	93 83       	std	Z+3, r25	; 0x03
    49a0:	82 83       	std	Z+2, r24	; 0x02
    49a2:	80 91 f8 0d 	lds	r24, 0x0DF8
    49a6:	90 91 f9 0d 	lds	r25, 0x0DF9
    49aa:	95 83       	std	Z+5, r25	; 0x05
    49ac:	84 83       	std	Z+4, r24	; 0x04
    49ae:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
      request_to_play_mp3_file(bufff);
    49b2:	ed b7       	in	r30, 0x3d	; 61
    49b4:	fe b7       	in	r31, 0x3e	; 62
    49b6:	36 96       	adiw	r30, 0x06	; 6
    49b8:	0f b6       	in	r0, 0x3f	; 63
    49ba:	f8 94       	cli
    49bc:	fe bf       	out	0x3e, r31	; 62
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	ed bf       	out	0x3d, r30	; 61
    49c2:	c8 01       	movw	r24, r16
    49c4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md4_current_state = MD4_STATE_ASK_FOR_GUESS;
    49c8:	84 e0       	ldi	r24, 0x04	; 4
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	b8 c0       	rjmp	.+368    	; 0x4b3e <md4_main+0x310>
      break;

    case MD4_STATE_ASK_FOR_GUESS:
      request_to_play_mp3_file("guess.mp3");
    49ce:	8b e3       	ldi	r24, 0x3B	; 59
    49d0:	94 e0       	ldi	r25, 0x04	; 4
    49d2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md4_current_state = MD4_STATE_WAIT_INPUT;
    49d6:	85 e0       	ldi	r24, 0x05	; 5
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	b1 c0       	rjmp	.+354    	; 0x4b3e <md4_main+0x310>
      break;

    case MD4_STATE_WAIT_INPUT:
      if(got_input)
    49dc:	80 91 f7 0d 	lds	r24, 0x0DF7
    49e0:	88 23       	and	r24, r24
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <md4_main+0x1b8>
    49e4:	e0 c0       	rjmp	.+448    	; 0x4ba6 <md4_main+0x378>
      {
        got_input = false;
    49e6:	10 92 f7 0d 	sts	0x0DF7, r1
        md4_current_state = MD4_STATE_PROC_INPUT;
    49ea:	86 e0       	ldi	r24, 0x06	; 6
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	a7 c0       	rjmp	.+334    	; 0x4b3e <md4_main+0x310>
      }
      break;

    case MD4_STATE_PROC_INPUT:
      // nothing was entered so we repeat the word
      if (last_cell == 0)
    49f0:	80 91 fe 0d 	lds	r24, 0x0DFE
    49f4:	88 23       	and	r24, r24
    49f6:	09 f4       	brne	.+2      	; 0x49fa <md4_main+0x1cc>
    49f8:	44 c0       	rjmp	.+136    	; 0x4a82 <md4_main+0x254>
      {
        md4_current_state = MD4_STATE_EVALUATE_GAME;
      } else if (md4_valid_letter(last_cell))
    49fa:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <md4_valid_letter>
    49fe:	88 23       	and	r24, r24
    4a00:	39 f1       	breq	.+78     	; 0x4a50 <md4_main+0x222>
      { // set entered_letter in valid_letter(), but return true or false
        char buff[7];
        sprintf(buff, "%c.mp3", entered_letter);
    4a02:	00 d0       	rcall	.+0      	; 0x4a04 <md4_main+0x1d6>
    4a04:	00 d0       	rcall	.+0      	; 0x4a06 <md4_main+0x1d8>
    4a06:	00 d0       	rcall	.+0      	; 0x4a08 <md4_main+0x1da>
    4a08:	ed b7       	in	r30, 0x3d	; 61
    4a0a:	fe b7       	in	r31, 0x3e	; 62
    4a0c:	31 96       	adiw	r30, 0x01	; 1
    4a0e:	8e 01       	movw	r16, r28
    4a10:	0f 5f       	subi	r16, 0xFF	; 255
    4a12:	1f 4f       	sbci	r17, 0xFF	; 255
    4a14:	ad b7       	in	r26, 0x3d	; 61
    4a16:	be b7       	in	r27, 0x3e	; 62
    4a18:	12 96       	adiw	r26, 0x02	; 2
    4a1a:	1c 93       	st	X, r17
    4a1c:	0e 93       	st	-X, r16
    4a1e:	11 97       	sbiw	r26, 0x01	; 1
    4a20:	8d e1       	ldi	r24, 0x1D	; 29
    4a22:	94 e0       	ldi	r25, 0x04	; 4
    4a24:	93 83       	std	Z+3, r25	; 0x03
    4a26:	82 83       	std	Z+2, r24	; 0x02
    4a28:	80 91 b0 0d 	lds	r24, 0x0DB0
    4a2c:	84 83       	std	Z+4, r24	; 0x04
    4a2e:	15 82       	std	Z+5, r1	; 0x05
    4a30:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(buff);
    4a34:	ed b7       	in	r30, 0x3d	; 61
    4a36:	fe b7       	in	r31, 0x3e	; 62
    4a38:	36 96       	adiw	r30, 0x06	; 6
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	fe bf       	out	0x3e, r31	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	ed bf       	out	0x3d, r30	; 61
    4a44:	c8 01       	movw	r24, r16
    4a46:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md4_current_state = MD4_STATE_CHECK_MATCH;
    4a4a:	87 e0       	ldi	r24, 0x07	; 7
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	77 c0       	rjmp	.+238    	; 0x4b3e <md4_main+0x310>
      } else
      {
        request_to_play_mp3_file("INVPAT.mp3");
    4a50:	85 e4       	ldi	r24, 0x45	; 69
    4a52:	94 e0       	ldi	r25, 0x04	; 4
    4a54:	0b c0       	rjmp	.+22     	; 0x4a6c <md4_main+0x23e>

    case MD4_STATE_CHECK_MATCH:
      // place_letter() returns true if the letter guessed is found in
      // the word, false otherwise. If true, it will place the entered_letter
      // into input_word.
      if (place_letter())
    4a56:	0e 94 09 23 	call	0x4612	; 0x4612 <place_letter>
    4a5a:	88 23       	and	r24, r24
    4a5c:	29 f0       	breq	.+10     	; 0x4a68 <md4_main+0x23a>
      {
        request_to_play_mp3_file("yes.mp3");
    4a5e:	80 e5       	ldi	r24, 0x50	; 80
    4a60:	94 e0       	ldi	r25, 0x04	; 4
    4a62:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
    4a66:	0d c0       	rjmp	.+26     	; 0x4a82 <md4_main+0x254>
      } else
      {
        request_to_play_mp3_file("no.mp3");
    4a68:	88 e5       	ldi	r24, 0x58	; 88
    4a6a:	94 e0       	ldi	r25, 0x04	; 4
    4a6c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        num_mistakes++;
    4a70:	80 91 f8 0d 	lds	r24, 0x0DF8
    4a74:	90 91 f9 0d 	lds	r25, 0x0DF9
    4a78:	01 96       	adiw	r24, 0x01	; 1
    4a7a:	90 93 f9 0d 	sts	0x0DF9, r25
    4a7e:	80 93 f8 0d 	sts	0x0DF8, r24
      }

      md4_current_state = MD4_STATE_EVALUATE_GAME;
    4a82:	88 e0       	ldi	r24, 0x08	; 8
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	5b c0       	rjmp	.+182    	; 0x4b3e <md4_main+0x310>
      break;

    case MD4_STATE_EVALUATE_GAME:
      if (!strncmp(input_word, current_word, strlen(current_word)))
    4a88:	60 91 d1 0d 	lds	r22, 0x0DD1
    4a8c:	70 91 d2 0d 	lds	r23, 0x0DD2
    4a90:	fb 01       	movw	r30, r22
    4a92:	df 01       	movw	r26, r30
    4a94:	0d 90       	ld	r0, X+
    4a96:	00 20       	and	r0, r0
    4a98:	e9 f7       	brne	.-6      	; 0x4a94 <md4_main+0x266>
    4a9a:	11 97       	sbiw	r26, 0x01	; 1
    4a9c:	ae 1b       	sub	r26, r30
    4a9e:	bf 0b       	sbc	r27, r31
    4aa0:	86 ec       	ldi	r24, 0xC6	; 198
    4aa2:	9d e0       	ldi	r25, 0x0D	; 13
    4aa4:	ad 01       	movw	r20, r26
    4aa6:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <strncmp>
    4aaa:	00 97       	sbiw	r24, 0x00	; 0
    4aac:	49 f4       	brne	.+18     	; 0x4ac0 <md4_main+0x292>
      {
        game_status = 1;
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	90 93 be 0d 	sts	0x0DBE, r25
    4ab6:	80 93 bd 0d 	sts	0x0DBD, r24
        request_to_play_mp3_file("you_win.mp3");  // "you have guessed the word!"
    4aba:	8f e5       	ldi	r24, 0x5F	; 95
    4abc:	94 e0       	ldi	r25, 0x04	; 4
    4abe:	0e c0       	rjmp	.+28     	; 0x4adc <md4_main+0x2ae>
      } else if (num_mistakes == 7)
    4ac0:	80 91 f8 0d 	lds	r24, 0x0DF8
    4ac4:	90 91 f9 0d 	lds	r25, 0x0DF9
    4ac8:	07 97       	sbiw	r24, 0x07	; 7
    4aca:	51 f4       	brne	.+20     	; 0x4ae0 <md4_main+0x2b2>
      {
        game_status = 1;
    4acc:	81 e0       	ldi	r24, 0x01	; 1
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	90 93 be 0d 	sts	0x0DBE, r25
    4ad4:	80 93 bd 0d 	sts	0x0DBD, r24
        request_to_play_mp3_file("you_lose.mp3"); // "you have made 7 mistakes the word you missed was"
    4ad8:	8b e6       	ldi	r24, 0x6B	; 107
    4ada:	94 e0       	ldi	r25, 0x04	; 4
    4adc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      }

      if (game_status == 0)
    4ae0:	80 91 bd 0d 	lds	r24, 0x0DBD
    4ae4:	90 91 be 0d 	lds	r25, 0x0DBE
    4ae8:	00 97       	sbiw	r24, 0x00	; 0
    4aea:	39 f4       	brne	.+14     	; 0x4afa <md4_main+0x2cc>
      {
        request_to_play_mp3_file("so_far.mp3");
    4aec:	88 e7       	ldi	r24, 0x78	; 120
    4aee:	94 e0       	ldi	r25, 0x04	; 4
    4af0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md4_current_state = MD4_STATE_SAY_STATUS;
    4af4:	82 e0       	ldi	r24, 0x02	; 2
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	22 c0       	rjmp	.+68     	; 0x4b3e <md4_main+0x310>
      } else if (game_status == 1)
    4afa:	01 97       	sbiw	r24, 0x01	; 1
    4afc:	09 f0       	breq	.+2      	; 0x4b00 <md4_main+0x2d2>
    4afe:	53 c0       	rjmp	.+166    	; 0x4ba6 <md4_main+0x378>
      {
        md4_current_state = MD4_STATE_READ_WORD;
    4b00:	89 e0       	ldi	r24, 0x09	; 9
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	1c c0       	rjmp	.+56     	; 0x4b3e <md4_main+0x310>
      }
      break;

    case MD4_STATE_READ_WORD:
      if (input_word_index == strlen(current_word))
    4b06:	40 91 fa 0d 	lds	r20, 0x0DFA
    4b0a:	50 91 fb 0d 	lds	r21, 0x0DFB
    4b0e:	20 91 d1 0d 	lds	r18, 0x0DD1
    4b12:	30 91 d2 0d 	lds	r19, 0x0DD2
    4b16:	f9 01       	movw	r30, r18
    4b18:	01 90       	ld	r0, Z+
    4b1a:	00 20       	and	r0, r0
    4b1c:	e9 f7       	brne	.-6      	; 0x4b18 <md4_main+0x2ea>
    4b1e:	31 97       	sbiw	r30, 0x01	; 1
    4b20:	e2 1b       	sub	r30, r18
    4b22:	f3 0b       	sbc	r31, r19
    4b24:	4e 17       	cp	r20, r30
    4b26:	5f 07       	cpc	r21, r31
    4b28:	79 f4       	brne	.+30     	; 0x4b48 <md4_main+0x31a>
      {
        input_word_index = 0;
    4b2a:	10 92 fb 0d 	sts	0x0DFB, r1
    4b2e:	10 92 fa 0d 	sts	0x0DFA, r1
        request_to_play_mp3_file("new_word.mp3");
    4b32:	83 e8       	ldi	r24, 0x83	; 131
    4b34:	94 e0       	ldi	r25, 0x04	; 4
    4b36:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md4_current_state = MD4_STATE_CHOOSE_WORD;
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	90 93 04 0e 	sts	0x0E04, r25
    4b42:	80 93 03 0e 	sts	0x0E03, r24
    4b46:	2f c0       	rjmp	.+94     	; 0x4ba6 <md4_main+0x378>
      } else
      {
        char nom[10];
        sprintf(nom, "%c.mp3", current_word[input_word_index]);
    4b48:	00 d0       	rcall	.+0      	; 0x4b4a <md4_main+0x31c>
    4b4a:	00 d0       	rcall	.+0      	; 0x4b4c <md4_main+0x31e>
    4b4c:	00 d0       	rcall	.+0      	; 0x4b4e <md4_main+0x320>
    4b4e:	ed b7       	in	r30, 0x3d	; 61
    4b50:	fe b7       	in	r31, 0x3e	; 62
    4b52:	31 96       	adiw	r30, 0x01	; 1
    4b54:	8e 01       	movw	r16, r28
    4b56:	0e 5e       	subi	r16, 0xEE	; 238
    4b58:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5a:	ad b7       	in	r26, 0x3d	; 61
    4b5c:	be b7       	in	r27, 0x3e	; 62
    4b5e:	12 96       	adiw	r26, 0x02	; 2
    4b60:	1c 93       	st	X, r17
    4b62:	0e 93       	st	-X, r16
    4b64:	11 97       	sbiw	r26, 0x01	; 1
    4b66:	8d e1       	ldi	r24, 0x1D	; 29
    4b68:	94 e0       	ldi	r25, 0x04	; 4
    4b6a:	93 83       	std	Z+3, r25	; 0x03
    4b6c:	82 83       	std	Z+2, r24	; 0x02
    4b6e:	24 0f       	add	r18, r20
    4b70:	35 1f       	adc	r19, r21
    4b72:	d9 01       	movw	r26, r18
    4b74:	8c 91       	ld	r24, X
    4b76:	84 83       	std	Z+4, r24	; 0x04
    4b78:	15 82       	std	Z+5, r1	; 0x05
    4b7a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(nom);
    4b7e:	ed b7       	in	r30, 0x3d	; 61
    4b80:	fe b7       	in	r31, 0x3e	; 62
    4b82:	36 96       	adiw	r30, 0x06	; 6
    4b84:	0f b6       	in	r0, 0x3f	; 63
    4b86:	f8 94       	cli
    4b88:	fe bf       	out	0x3e, r31	; 62
    4b8a:	0f be       	out	0x3f, r0	; 63
    4b8c:	ed bf       	out	0x3d, r30	; 61
    4b8e:	c8 01       	movw	r24, r16
    4b90:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        input_word_index++;
    4b94:	80 91 fa 0d 	lds	r24, 0x0DFA
    4b98:	90 91 fb 0d 	lds	r25, 0x0DFB
    4b9c:	01 96       	adiw	r24, 0x01	; 1
    4b9e:	90 93 fb 0d 	sts	0x0DFB, r25
    4ba2:	80 93 fa 0d 	sts	0x0DFA, r24
      }
      break;
  }
}
    4ba6:	6b 96       	adiw	r28, 0x1b	; 27
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	1f 91       	pop	r17
    4bb8:	0f 91       	pop	r16
    4bba:	08 95       	ret

00004bbc <md5_reset>:
  request_to_play_mp3_file(req_mp3);
}

void md5_reset(void)
{
  md5_current_state = 0;
    4bbc:	10 92 06 0e 	sts	0x0E06, r1
    4bc0:	10 92 05 0e 	sts	0x0E05, r1
  md5_last_dot = 0;
    4bc4:	10 92 07 0e 	sts	0x0E07, r1
}
    4bc8:	08 95       	ret

00004bca <md5_call_mode_yes_answer>:
 * @brief Handle pressing the enter button in mode 5
 * @return Void
 */
void md5_call_mode_yes_answer(void)
{
}
    4bca:	08 95       	ret

00004bcc <md5_call_mode_no_answer>:
 * @brief Handle pressing the exit button in mode 5
 * @return Void
 */
void md5_call_mode_no_answer(void)
{
}
    4bcc:	08 95       	ret

00004bce <md5_input_cell>:
 * @brief handle cell input
 * @param this_cell the cell input
 * @return Void
 */
void md5_input_cell(char this_cell)
{
    4bce:	98 2f       	mov	r25, r24
  if(md5_last_dot != 0)
    4bd0:	80 91 07 0e 	lds	r24, 0x0E07
    4bd4:	88 23       	and	r24, r24
    4bd6:	29 f0       	breq	.+10     	; 0x4be2 <md5_input_cell+0x14>
  {
    last_cell = this_cell;
    4bd8:	90 93 fe 0d 	sts	0x0DFE, r25
    got_input = true;
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	80 93 f7 0d 	sts	0x0DF7, r24
    4be2:	08 95       	ret

00004be4 <md5_play_requested_dot>:
 * @brief  Given a char, in last_cell, play the corresponding number
 *         sound file
 * @return Void
 */
void md5_play_requested_dot(void)
{
    4be4:	0f 93       	push	r16
    4be6:	1f 93       	push	r17
    4be8:	df 93       	push	r29
    4bea:	cf 93       	push	r28
    4bec:	cd b7       	in	r28, 0x3d	; 61
    4bee:	de b7       	in	r29, 0x3e	; 62
    4bf0:	2a 97       	sbiw	r28, 0x0a	; 10
    4bf2:	0f b6       	in	r0, 0x3f	; 63
    4bf4:	f8 94       	cli
    4bf6:	de bf       	out	0x3e, r29	; 62
    4bf8:	0f be       	out	0x3f, r0	; 63
    4bfa:	cd bf       	out	0x3d, r28	; 61
  // This will hold formatted file to access
  char req_mp3[10];
  sprintf((char*)req_mp3, "dot_%c.MP3", md5_last_dot);
    4bfc:	00 d0       	rcall	.+0      	; 0x4bfe <md5_play_requested_dot+0x1a>
    4bfe:	00 d0       	rcall	.+0      	; 0x4c00 <md5_play_requested_dot+0x1c>
    4c00:	00 d0       	rcall	.+0      	; 0x4c02 <md5_play_requested_dot+0x1e>
    4c02:	ed b7       	in	r30, 0x3d	; 61
    4c04:	fe b7       	in	r31, 0x3e	; 62
    4c06:	31 96       	adiw	r30, 0x01	; 1
    4c08:	8e 01       	movw	r16, r28
    4c0a:	0f 5f       	subi	r16, 0xFF	; 255
    4c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c0e:	ad b7       	in	r26, 0x3d	; 61
    4c10:	be b7       	in	r27, 0x3e	; 62
    4c12:	12 96       	adiw	r26, 0x02	; 2
    4c14:	1c 93       	st	X, r17
    4c16:	0e 93       	st	-X, r16
    4c18:	11 97       	sbiw	r26, 0x01	; 1
    4c1a:	8c ed       	ldi	r24, 0xDC	; 220
    4c1c:	94 e0       	ldi	r25, 0x04	; 4
    4c1e:	93 83       	std	Z+3, r25	; 0x03
    4c20:	82 83       	std	Z+2, r24	; 0x02
    4c22:	80 91 07 0e 	lds	r24, 0x0E07
    4c26:	84 83       	std	Z+4, r24	; 0x04
    4c28:	15 82       	std	Z+5, r1	; 0x05
    4c2a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
  request_to_play_mp3_file(req_mp3);
    4c2e:	8d b7       	in	r24, 0x3d	; 61
    4c30:	9e b7       	in	r25, 0x3e	; 62
    4c32:	06 96       	adiw	r24, 0x06	; 6
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	f8 94       	cli
    4c38:	9e bf       	out	0x3e, r25	; 62
    4c3a:	0f be       	out	0x3f, r0	; 63
    4c3c:	8d bf       	out	0x3d, r24	; 61
    4c3e:	c8 01       	movw	r24, r16
    4c40:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    4c44:	2a 96       	adiw	r28, 0x0a	; 10
    4c46:	0f b6       	in	r0, 0x3f	; 63
    4c48:	f8 94       	cli
    4c4a:	de bf       	out	0x3e, r29	; 62
    4c4c:	0f be       	out	0x3f, r0	; 63
    4c4e:	cd bf       	out	0x3d, r28	; 61
    4c50:	cf 91       	pop	r28
    4c52:	df 91       	pop	r29
    4c54:	1f 91       	pop	r17
    4c56:	0f 91       	pop	r16
    4c58:	08 95       	ret

00004c5a <md5_input_dot>:
 * @param this_dot the dot input
 * @return Void
 */
void md5_input_dot(char this_dot)
{
  md5_last_dot = this_dot;
    4c5a:	80 93 07 0e 	sts	0x0E07, r24
  md5_play_requested_dot();
    4c5e:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <md5_play_requested_dot>
}
    4c62:	08 95       	ret

00004c64 <md5_place_letter>:
  int i;
  bool found_match = false;

  for (i = 0; i < strlen(player1_word); i++)
  {
    if (entered_letter == player1_word[i])
    4c64:	40 91 b0 0d 	lds	r20, 0x0DB0
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
bool md5_place_letter()
{
  int i;
  bool found_match = false;

  for (i = 0; i < strlen(player1_word); i++)
    4c6e:	aa ee       	ldi	r26, 0xEA	; 234
    4c70:	bd e0       	ldi	r27, 0x0D	; 13
    4c72:	0d c0       	rjmp	.+26     	; 0x4c8e <md5_place_letter+0x2a>
  {
    if (entered_letter == player1_word[i])
    4c74:	f9 01       	movw	r30, r18
    4c76:	e6 51       	subi	r30, 0x16	; 22
    4c78:	f2 4f       	sbci	r31, 0xF2	; 242
    4c7a:	80 81       	ld	r24, Z
    4c7c:	48 17       	cp	r20, r24
    4c7e:	29 f4       	brne	.+10     	; 0x4c8a <md5_place_letter+0x26>
    {
      input_word[i] = entered_letter;
    4c80:	f9 01       	movw	r30, r18
    4c82:	ea 53       	subi	r30, 0x3A	; 58
    4c84:	f2 4f       	sbci	r31, 0xF2	; 242
    4c86:	40 83       	st	Z, r20
    4c88:	91 e0       	ldi	r25, 0x01	; 1
bool md5_place_letter()
{
  int i;
  bool found_match = false;

  for (i = 0; i < strlen(player1_word); i++)
    4c8a:	2f 5f       	subi	r18, 0xFF	; 255
    4c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8e:	fd 01       	movw	r30, r26
    4c90:	01 90       	ld	r0, Z+
    4c92:	00 20       	and	r0, r0
    4c94:	e9 f7       	brne	.-6      	; 0x4c90 <md5_place_letter+0x2c>
    4c96:	31 97       	sbiw	r30, 0x01	; 1
    4c98:	ea 5e       	subi	r30, 0xEA	; 234
    4c9a:	fd 40       	sbci	r31, 0x0D	; 13
    4c9c:	2e 17       	cp	r18, r30
    4c9e:	3f 07       	cpc	r19, r31
    4ca0:	48 f3       	brcs	.-46     	; 0x4c74 <md5_place_letter+0x10>
      found_match = true;
    }
  }

  return found_match;
}
    4ca2:	89 2f       	mov	r24, r25
    4ca4:	08 95       	ret

00004ca6 <md5_valid_letter>:
 *        have been pressed
 * @return bool - true if a valid letter, false if not
 */
bool md5_valid_letter(char button_bits)
{
  char letter_from_bits = get_letter_from_bits(button_bits);
    4ca6:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <get_letter_from_bits>
    4caa:	98 2f       	mov	r25, r24
  if((letter_from_bits >= 'a') && (letter_from_bits <= 'z'))
    4cac:	81 56       	subi	r24, 0x61	; 97
    4cae:	8a 31       	cpi	r24, 0x1A	; 26
    4cb0:	10 f0       	brcs	.+4      	; 0x4cb6 <md5_valid_letter+0x10>
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	08 95       	ret
  {
    entered_letter = letter_from_bits;
    4cb6:	90 93 b0 0d 	sts	0x0DB0, r25
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }
  return false;
}
    4cbc:	08 95       	ret

00004cbe <md5_main>:
/*
 * @brief  Step through the main stages in the code.
 * @return Void
 */
void md5_main(void)
{
    4cbe:	ef 92       	push	r14
    4cc0:	ff 92       	push	r15
    4cc2:	0f 93       	push	r16
    4cc4:	1f 93       	push	r17
    4cc6:	df 93       	push	r29
    4cc8:	cf 93       	push	r28
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    4cce:	a5 97       	sbiw	r28, 0x25	; 37
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	f8 94       	cli
    4cd4:	de bf       	out	0x3e, r29	; 62
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	cd bf       	out	0x3d, r28	; 61
  char huff[10];
  char bufff[10];
  int i;

  switch(md5_current_state)
    4cda:	80 91 05 0e 	lds	r24, 0x0E05
    4cde:	90 91 06 0e 	lds	r25, 0x0E06
    4ce2:	86 30       	cpi	r24, 0x06	; 6
    4ce4:	91 05       	cpc	r25, r1
    4ce6:	09 f4       	brne	.+2      	; 0x4cea <md5_main+0x2c>
    4ce8:	51 c1       	rjmp	.+674    	; 0x4f8c <md5_main+0x2ce>
    4cea:	87 30       	cpi	r24, 0x07	; 7
    4cec:	91 05       	cpc	r25, r1
    4cee:	ac f4       	brge	.+42     	; 0x4d1a <md5_main+0x5c>
    4cf0:	82 30       	cpi	r24, 0x02	; 2
    4cf2:	91 05       	cpc	r25, r1
    4cf4:	09 f4       	brne	.+2      	; 0x4cf8 <md5_main+0x3a>
    4cf6:	4b c0       	rjmp	.+150    	; 0x4d8e <md5_main+0xd0>
    4cf8:	83 30       	cpi	r24, 0x03	; 3
    4cfa:	91 05       	cpc	r25, r1
    4cfc:	34 f4       	brge	.+12     	; 0x4d0a <md5_main+0x4c>
    4cfe:	00 97       	sbiw	r24, 0x00	; 0
    4d00:	39 f1       	breq	.+78     	; 0x4d50 <md5_main+0x92>
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	09 f0       	breq	.+2      	; 0x4d08 <md5_main+0x4a>
    4d06:	51 c2       	rjmp	.+1186   	; 0x51aa <md5_main+0x4ec>
    4d08:	26 c0       	rjmp	.+76     	; 0x4d56 <md5_main+0x98>
    4d0a:	84 30       	cpi	r24, 0x04	; 4
    4d0c:	91 05       	cpc	r25, r1
    4d0e:	09 f4       	brne	.+2      	; 0x4d12 <md5_main+0x54>
    4d10:	c2 c0       	rjmp	.+388    	; 0x4e96 <md5_main+0x1d8>
    4d12:	05 97       	sbiw	r24, 0x05	; 5
    4d14:	0c f0       	brlt	.+2      	; 0x4d18 <md5_main+0x5a>
    4d16:	c9 c0       	rjmp	.+402    	; 0x4eaa <md5_main+0x1ec>
    4d18:	44 c0       	rjmp	.+136    	; 0x4da2 <md5_main+0xe4>
    4d1a:	89 30       	cpi	r24, 0x09	; 9
    4d1c:	91 05       	cpc	r25, r1
    4d1e:	09 f4       	brne	.+2      	; 0x4d22 <md5_main+0x64>
    4d20:	6f c1       	rjmp	.+734    	; 0x5000 <md5_main+0x342>
    4d22:	8a 30       	cpi	r24, 0x0A	; 10
    4d24:	91 05       	cpc	r25, r1
    4d26:	44 f4       	brge	.+16     	; 0x4d38 <md5_main+0x7a>
    4d28:	87 30       	cpi	r24, 0x07	; 7
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <md5_main+0x72>
    4d2e:	57 c1       	rjmp	.+686    	; 0x4fde <md5_main+0x320>
    4d30:	08 97       	sbiw	r24, 0x08	; 8
    4d32:	09 f0       	breq	.+2      	; 0x4d36 <md5_main+0x78>
    4d34:	3a c2       	rjmp	.+1140   	; 0x51aa <md5_main+0x4ec>
    4d36:	5a c1       	rjmp	.+692    	; 0x4fec <md5_main+0x32e>
    4d38:	8b 30       	cpi	r24, 0x0B	; 11
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	09 f4       	brne	.+2      	; 0x4d40 <md5_main+0x82>
    4d3e:	ac c1       	rjmp	.+856    	; 0x5098 <md5_main+0x3da>
    4d40:	8b 30       	cpi	r24, 0x0B	; 11
    4d42:	91 05       	cpc	r25, r1
    4d44:	0c f4       	brge	.+2      	; 0x4d48 <md5_main+0x8a>
    4d46:	8f c1       	rjmp	.+798    	; 0x5066 <md5_main+0x3a8>
    4d48:	0c 97       	sbiw	r24, 0x0c	; 12
    4d4a:	09 f0       	breq	.+2      	; 0x4d4e <md5_main+0x90>
    4d4c:	2e c2       	rjmp	.+1116   	; 0x51aa <md5_main+0x4ec>
    4d4e:	e1 c1       	rjmp	.+962    	; 0x5112 <md5_main+0x454>
  {
    case MD5_STATE_INITIAL:
      request_to_play_mp3_file("MD5INT.mp3");
    4d50:	87 ee       	ldi	r24, 0xE7	; 231
    4d52:	94 e0       	ldi	r25, 0x04	; 4
    4d54:	f3 c1       	rjmp	.+998    	; 0x513c <md5_main+0x47e>
      md5_current_state = MD5_STATE_SETUP_VARS;
      break;
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	90 e0       	ldi	r25, 0x00	; 0

    case MD5_STATE_SETUP_VARS:
      for (i = 0; i < MAX_LEN + 1; i++)
      {
        player1_word[i] = '0';
    4d5a:	20 e3       	ldi	r18, 0x30	; 48
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	e6 51       	subi	r30, 0x16	; 22
    4d60:	f2 4f       	sbci	r31, 0xF2	; 242
    4d62:	20 83       	st	Z, r18
        input_word[i] = '0';
    4d64:	fc 01       	movw	r30, r24
    4d66:	ea 53       	subi	r30, 0x3A	; 58
    4d68:	f2 4f       	sbci	r31, 0xF2	; 242
    4d6a:	20 83       	st	Z, r18
      request_to_play_mp3_file("MD5INT.mp3");
      md5_current_state = MD5_STATE_SETUP_VARS;
      break;

    case MD5_STATE_SETUP_VARS:
      for (i = 0; i < MAX_LEN + 1; i++)
    4d6c:	01 96       	adiw	r24, 0x01	; 1
    4d6e:	8b 30       	cpi	r24, 0x0B	; 11
    4d70:	91 05       	cpc	r25, r1
    4d72:	a1 f7       	brne	.-24     	; 0x4d5c <md5_main+0x9e>
      {
        player1_word[i] = '0';
        input_word[i] = '0';
      }
      input_word_index = 0;
    4d74:	10 92 fb 0d 	sts	0x0DFB, r1
    4d78:	10 92 fa 0d 	sts	0x0DFA, r1
      num_mistakes = 0;
    4d7c:	10 92 f9 0d 	sts	0x0DF9, r1
    4d80:	10 92 f8 0d 	sts	0x0DF8, r1
      game_status = 0;
    4d84:	10 92 be 0d 	sts	0x0DBE, r1
    4d88:	10 92 bd 0d 	sts	0x0DBD, r1
    4d8c:	81 c0       	rjmp	.+258    	; 0x4e90 <md5_main+0x1d2>
      md5_current_state = MD5_STATE_WAIT_INPUT_1;
      break;

    case MD5_STATE_WAIT_INPUT_1:
      if(got_input)
    4d8e:	80 91 f7 0d 	lds	r24, 0x0DF7
    4d92:	88 23       	and	r24, r24
    4d94:	09 f4       	brne	.+2      	; 0x4d98 <md5_main+0xda>
    4d96:	09 c2       	rjmp	.+1042   	; 0x51aa <md5_main+0x4ec>
      {
        got_input = false;
    4d98:	10 92 f7 0d 	sts	0x0DF7, r1
        md5_current_state = MD5_STATE_PROC_INPUT_1;
    4d9c:	83 e0       	ldi	r24, 0x03	; 3
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	d1 c1       	rjmp	.+930    	; 0x5144 <md5_main+0x486>
      }
      break;

    case MD5_STATE_PROC_INPUT_1:
      // Enter was pressed, but nothing was entered so we check to see if it was a valid word
      if (last_cell == 0)
    4da2:	80 91 fe 0d 	lds	r24, 0x0DFE
    4da6:	88 23       	and	r24, r24
    4da8:	29 f5       	brne	.+74     	; 0x4df4 <md5_main+0x136>
      {
        player1_word[input_word_index] = '\0';
    4daa:	e0 91 fa 0d 	lds	r30, 0x0DFA
    4dae:	f0 91 fb 0d 	lds	r31, 0x0DFB
    4db2:	e6 51       	subi	r30, 0x16	; 22
    4db4:	f2 4f       	sbci	r31, 0xF2	; 242
    4db6:	10 82       	st	Z, r1
        //@todo - find better way to inlude dictionary file name
        if (bin_srch_dict((unsigned char *)player1_word))
    4db8:	8a ee       	ldi	r24, 0xEA	; 234
    4dba:	9d e0       	ldi	r25, 0x0D	; 13
    4dbc:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <bin_srch_dict>
    4dc0:	88 23       	and	r24, r24
    4dc2:	59 f0       	breq	.+22     	; 0x4dda <md5_main+0x11c>
        {
          // valid word so move on to player 2's turn
          request_to_play_mp3_file("fnd_wrd.mp3"); // @TODO "valid word, please hand device to player 2 and press enter when ready"
    4dc4:	82 ef       	ldi	r24, 0xF2	; 242
    4dc6:	94 e0       	ldi	r25, 0x04	; 4
    4dc8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
          input_word_index = 0;
    4dcc:	10 92 fb 0d 	sts	0x0DFB, r1
    4dd0:	10 92 fa 0d 	sts	0x0DFA, r1
          md5_current_state = MD5_STATE_WAIT4P2;
    4dd4:	84 e0       	ldi	r24, 0x04	; 4
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	b5 c1       	rjmp	.+874    	; 0x5144 <md5_main+0x486>
        } else 
        {
          // word not found in dictionary, clear variables and try again
          request_to_play_mp3_file("not_fnd.mp3"); // @TODO "word not found in dictionary, please try again"
    4dda:	8e ef       	ldi	r24, 0xFE	; 254
    4ddc:	94 e0       	ldi	r25, 0x04	; 4
    4dde:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
    4de2:	ea ee       	ldi	r30, 0xEA	; 234
    4de4:	fd e0       	ldi	r31, 0x0D	; 13

          int i;
          for (i = 0; i < MAX_LEN + 1; i++)
          {
            player1_word[i] = '0';
    4de6:	80 e3       	ldi	r24, 0x30	; 48
    4de8:	81 93       	st	Z+, r24
        {
          // word not found in dictionary, clear variables and try again
          request_to_play_mp3_file("not_fnd.mp3"); // @TODO "word not found in dictionary, please try again"

          int i;
          for (i = 0; i < MAX_LEN + 1; i++)
    4dea:	9d e0       	ldi	r25, 0x0D	; 13
    4dec:	e5 3f       	cpi	r30, 0xF5	; 245
    4dee:	f9 07       	cpc	r31, r25
    4df0:	d9 f7       	brne	.-10     	; 0x4de8 <md5_main+0x12a>
    4df2:	38 c0       	rjmp	.+112    	; 0x4e64 <md5_main+0x1a6>
          }
          input_word_index = 0;

          md5_current_state = MD5_STATE_WAIT_INPUT_1;
        }
      } else if (md5_valid_letter(last_cell))
    4df4:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <md5_valid_letter>
    4df8:	88 23       	and	r24, r24
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <md5_main+0x140>
    4dfc:	45 c0       	rjmp	.+138    	; 0x4e88 <md5_main+0x1ca>
      {  // set entered_letter in valid_letter(), but return true or false
        char buff[7];
        sprintf(buff, "%c.mp3", entered_letter);
    4dfe:	00 d0       	rcall	.+0      	; 0x4e00 <md5_main+0x142>
    4e00:	00 d0       	rcall	.+0      	; 0x4e02 <md5_main+0x144>
    4e02:	00 d0       	rcall	.+0      	; 0x4e04 <md5_main+0x146>
    4e04:	ed b7       	in	r30, 0x3d	; 61
    4e06:	fe b7       	in	r31, 0x3e	; 62
    4e08:	31 96       	adiw	r30, 0x01	; 1
    4e0a:	8e 01       	movw	r16, r28
    4e0c:	0f 5f       	subi	r16, 0xFF	; 255
    4e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e10:	ad b7       	in	r26, 0x3d	; 61
    4e12:	be b7       	in	r27, 0x3e	; 62
    4e14:	12 96       	adiw	r26, 0x02	; 2
    4e16:	1c 93       	st	X, r17
    4e18:	0e 93       	st	-X, r16
    4e1a:	11 97       	sbiw	r26, 0x01	; 1
    4e1c:	8a e0       	ldi	r24, 0x0A	; 10
    4e1e:	95 e0       	ldi	r25, 0x05	; 5
    4e20:	93 83       	std	Z+3, r25	; 0x03
    4e22:	82 83       	std	Z+2, r24	; 0x02
    4e24:	80 91 b0 0d 	lds	r24, 0x0DB0
    4e28:	84 83       	std	Z+4, r24	; 0x04
    4e2a:	15 82       	std	Z+5, r1	; 0x05
    4e2c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(buff);
    4e30:	ed b7       	in	r30, 0x3d	; 61
    4e32:	fe b7       	in	r31, 0x3e	; 62
    4e34:	36 96       	adiw	r30, 0x06	; 6
    4e36:	0f b6       	in	r0, 0x3f	; 63
    4e38:	f8 94       	cli
    4e3a:	fe bf       	out	0x3e, r31	; 62
    4e3c:	0f be       	out	0x3f, r0	; 63
    4e3e:	ed bf       	out	0x3d, r30	; 61
    4e40:	c8 01       	movw	r24, r16
    4e42:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>

        // reset because too many letters were input
        if (input_word_index == MAX_LEN)
    4e46:	20 91 fa 0d 	lds	r18, 0x0DFA
    4e4a:	30 91 fb 0d 	lds	r19, 0x0DFB
    4e4e:	2a 30       	cpi	r18, 0x0A	; 10
    4e50:	31 05       	cpc	r19, r1
    4e52:	69 f4       	brne	.+26     	; 0x4e6e <md5_main+0x1b0>
    4e54:	ea ee       	ldi	r30, 0xEA	; 234
    4e56:	fd e0       	ldi	r31, 0x0D	; 13
        {
          int i;
          for (i = 0; i < MAX_LEN + 1; i++)
          {
            player1_word[i] = '0';
    4e58:	80 e3       	ldi	r24, 0x30	; 48
    4e5a:	81 93       	st	Z+, r24

        // reset because too many letters were input
        if (input_word_index == MAX_LEN)
        {
          int i;
          for (i = 0; i < MAX_LEN + 1; i++)
    4e5c:	9d e0       	ldi	r25, 0x0D	; 13
    4e5e:	e5 3f       	cpi	r30, 0xF5	; 245
    4e60:	f9 07       	cpc	r31, r25
    4e62:	d9 f7       	brne	.-10     	; 0x4e5a <md5_main+0x19c>
          {
            player1_word[i] = '0';
          }
          input_word_index = 0;
    4e64:	10 92 fb 0d 	sts	0x0DFB, r1
    4e68:	10 92 fa 0d 	sts	0x0DFA, r1
    4e6c:	11 c0       	rjmp	.+34     	; 0x4e90 <md5_main+0x1d2>

          md5_current_state = MD5_STATE_WAIT_INPUT_1;
          break;
        }

        player1_word[input_word_index] = entered_letter;
    4e6e:	f9 01       	movw	r30, r18
    4e70:	e6 51       	subi	r30, 0x16	; 22
    4e72:	f2 4f       	sbci	r31, 0xF2	; 242
    4e74:	80 91 b0 0d 	lds	r24, 0x0DB0
    4e78:	80 83       	st	Z, r24
        input_word_index++;
    4e7a:	2f 5f       	subi	r18, 0xFF	; 255
    4e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e7e:	30 93 fb 0d 	sts	0x0DFB, r19
    4e82:	20 93 fa 0d 	sts	0x0DFA, r18
    4e86:	04 c0       	rjmp	.+8      	; 0x4e90 <md5_main+0x1d2>

        md5_current_state = MD5_STATE_WAIT_INPUT_1;
      } else
      {
        request_to_play_mp3_file("MD5_INV.mp3");  // @TODO "invalid pattern, please enter another letter"
    4e88:	81 e1       	ldi	r24, 0x11	; 17
    4e8a:	95 e0       	ldi	r25, 0x05	; 5
    4e8c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md5_current_state = MD5_STATE_WAIT_INPUT_1;
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	57 c1       	rjmp	.+686    	; 0x5144 <md5_main+0x486>
      }
      break;

    case MD5_STATE_WAIT4P2:
      if(got_input)
    4e96:	80 91 f7 0d 	lds	r24, 0x0DF7
    4e9a:	88 23       	and	r24, r24
    4e9c:	09 f4       	brne	.+2      	; 0x4ea0 <md5_main+0x1e2>
    4e9e:	85 c1       	rjmp	.+778    	; 0x51aa <md5_main+0x4ec>
      {
        got_input = false;
    4ea0:	10 92 f7 0d 	sts	0x0DF7, r1
        request_to_play_mp3_file("your_wrd.mp3"); // @ TODO "your word is"
    4ea4:	8d e1       	ldi	r24, 0x1D	; 29
    4ea6:	95 e0       	ldi	r25, 0x05	; 5
    4ea8:	29 c1       	rjmp	.+594    	; 0x50fc <md5_main+0x43e>
        md5_current_state = MD5_STATE_SAY_STATUS;
      }
      break;

    case MD5_STATE_SAY_STATUS:
      sprintf(huff, "%s\r\n", player1_word);
    4eaa:	00 d0       	rcall	.+0      	; 0x4eac <md5_main+0x1ee>
    4eac:	00 d0       	rcall	.+0      	; 0x4eae <md5_main+0x1f0>
    4eae:	00 d0       	rcall	.+0      	; 0x4eb0 <md5_main+0x1f2>
    4eb0:	ed b7       	in	r30, 0x3d	; 61
    4eb2:	fe b7       	in	r31, 0x3e	; 62
    4eb4:	31 96       	adiw	r30, 0x01	; 1
    4eb6:	88 e0       	ldi	r24, 0x08	; 8
    4eb8:	e8 2e       	mov	r14, r24
    4eba:	f1 2c       	mov	r15, r1
    4ebc:	ec 0e       	add	r14, r28
    4ebe:	fd 1e       	adc	r15, r29
    4ec0:	ad b7       	in	r26, 0x3d	; 61
    4ec2:	be b7       	in	r27, 0x3e	; 62
    4ec4:	12 96       	adiw	r26, 0x02	; 2
    4ec6:	fc 92       	st	X, r15
    4ec8:	ee 92       	st	-X, r14
    4eca:	11 97       	sbiw	r26, 0x01	; 1
    4ecc:	8a e2       	ldi	r24, 0x2A	; 42
    4ece:	95 e0       	ldi	r25, 0x05	; 5
    4ed0:	93 83       	std	Z+3, r25	; 0x03
    4ed2:	82 83       	std	Z+2, r24	; 0x02
    4ed4:	0a ee       	ldi	r16, 0xEA	; 234
    4ed6:	1d e0       	ldi	r17, 0x0D	; 13
    4ed8:	15 83       	std	Z+5, r17	; 0x05
    4eda:	04 83       	std	Z+4, r16	; 0x04
    4edc:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
      PRINTF(huff);
    4ee0:	ed b7       	in	r30, 0x3d	; 61
    4ee2:	fe b7       	in	r31, 0x3e	; 62
    4ee4:	36 96       	adiw	r30, 0x06	; 6
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	fe bf       	out	0x3e, r31	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	ed bf       	out	0x3d, r30	; 61
    4ef0:	c7 01       	movw	r24, r14
    4ef2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
      if (input_word_index == strlen(player1_word))
    4ef6:	e0 91 fa 0d 	lds	r30, 0x0DFA
    4efa:	f0 91 fb 0d 	lds	r31, 0x0DFB
    4efe:	d8 01       	movw	r26, r16
    4f00:	0d 90       	ld	r0, X+
    4f02:	00 20       	and	r0, r0
    4f04:	e9 f7       	brne	.-6      	; 0x4f00 <md5_main+0x242>
    4f06:	8d 01       	movw	r16, r26
    4f08:	01 50       	subi	r16, 0x01	; 1
    4f0a:	10 40       	sbci	r17, 0x00	; 0
    4f0c:	0a 5e       	subi	r16, 0xEA	; 234
    4f0e:	1d 40       	sbci	r17, 0x0D	; 13
    4f10:	e0 17       	cp	r30, r16
    4f12:	f1 07       	cpc	r31, r17
    4f14:	99 f4       	brne	.+38     	; 0x4f3c <md5_main+0x27e>
      {
        input_word_index = 0;
    4f16:	10 92 fb 0d 	sts	0x0DFB, r1
    4f1a:	10 92 fa 0d 	sts	0x0DFA, r1
        if (num_mistakes > 0)
    4f1e:	80 91 f8 0d 	lds	r24, 0x0DF8
    4f22:	90 91 f9 0d 	lds	r25, 0x0DF9
    4f26:	18 16       	cp	r1, r24
    4f28:	19 06       	cpc	r1, r25
    4f2a:	0c f0       	brlt	.+2      	; 0x4f2e <md5_main+0x270>
    4f2c:	55 c0       	rjmp	.+170    	; 0x4fd8 <md5_main+0x31a>
        {
          request_to_play_mp3_file("and_mstk.mp3");
    4f2e:	8f e2       	ldi	r24, 0x2F	; 47
    4f30:	95 e0       	ldi	r25, 0x05	; 5
    4f32:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
          md5_current_state = MD5_STATE_SAY_MISTAKES;
    4f36:	86 e0       	ldi	r24, 0x06	; 6
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	04 c1       	rjmp	.+520    	; 0x5144 <md5_main+0x486>
        } else
          md5_current_state = MD5_STATE_ASK_FOR_GUESS;
      } else
      {
        if (input_word[input_word_index] != '0')
    4f3c:	ea 53       	subi	r30, 0x3A	; 58
    4f3e:	f2 4f       	sbci	r31, 0xF2	; 242
    4f40:	20 81       	ld	r18, Z
    4f42:	20 33       	cpi	r18, 0x30	; 48
    4f44:	01 f1       	breq	.+64     	; 0x4f86 <md5_main+0x2c8>
        {
          char buf[10];
          sprintf(buf, "%c.mp3", input_word[input_word_index]);
    4f46:	00 d0       	rcall	.+0      	; 0x4f48 <md5_main+0x28a>
    4f48:	00 d0       	rcall	.+0      	; 0x4f4a <md5_main+0x28c>
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <md5_main+0x28e>
    4f4c:	ed b7       	in	r30, 0x3d	; 61
    4f4e:	fe b7       	in	r31, 0x3e	; 62
    4f50:	31 96       	adiw	r30, 0x01	; 1
    4f52:	8e 01       	movw	r16, r28
    4f54:	04 5e       	subi	r16, 0xE4	; 228
    4f56:	1f 4f       	sbci	r17, 0xFF	; 255
    4f58:	ad b7       	in	r26, 0x3d	; 61
    4f5a:	be b7       	in	r27, 0x3e	; 62
    4f5c:	12 96       	adiw	r26, 0x02	; 2
    4f5e:	1c 93       	st	X, r17
    4f60:	0e 93       	st	-X, r16
    4f62:	11 97       	sbiw	r26, 0x01	; 1
    4f64:	8a e0       	ldi	r24, 0x0A	; 10
    4f66:	95 e0       	ldi	r25, 0x05	; 5
    4f68:	93 83       	std	Z+3, r25	; 0x03
    4f6a:	82 83       	std	Z+2, r24	; 0x02
    4f6c:	24 83       	std	Z+4, r18	; 0x04
    4f6e:	15 82       	std	Z+5, r1	; 0x05
    4f70:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
          request_to_play_mp3_file(buf);
    4f74:	ed b7       	in	r30, 0x3d	; 61
    4f76:	fe b7       	in	r31, 0x3e	; 62
    4f78:	36 96       	adiw	r30, 0x06	; 6
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	f8 94       	cli
    4f7e:	fe bf       	out	0x3e, r31	; 62
    4f80:	0f be       	out	0x3f, r0	; 63
    4f82:	ed bf       	out	0x3d, r30	; 61
    4f84:	06 c1       	rjmp	.+524    	; 0x5192 <md5_main+0x4d4>
        } else
        {
          request_to_play_mp3_file("blank.mp3");
    4f86:	8c e3       	ldi	r24, 0x3C	; 60
    4f88:	95 e0       	ldi	r25, 0x05	; 5
    4f8a:	04 c1       	rjmp	.+520    	; 0x5194 <md5_main+0x4d6>
        input_word_index++;
      }
      break;

    case MD5_STATE_SAY_MISTAKES:
      sprintf(bufff, "%d_mstks.mp3", num_mistakes);
    4f8c:	00 d0       	rcall	.+0      	; 0x4f8e <md5_main+0x2d0>
    4f8e:	00 d0       	rcall	.+0      	; 0x4f90 <md5_main+0x2d2>
    4f90:	00 d0       	rcall	.+0      	; 0x4f92 <md5_main+0x2d4>
    4f92:	ed b7       	in	r30, 0x3d	; 61
    4f94:	fe b7       	in	r31, 0x3e	; 62
    4f96:	31 96       	adiw	r30, 0x01	; 1
    4f98:	8e 01       	movw	r16, r28
    4f9a:	0e 5e       	subi	r16, 0xEE	; 238
    4f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9e:	ad b7       	in	r26, 0x3d	; 61
    4fa0:	be b7       	in	r27, 0x3e	; 62
    4fa2:	12 96       	adiw	r26, 0x02	; 2
    4fa4:	1c 93       	st	X, r17
    4fa6:	0e 93       	st	-X, r16
    4fa8:	11 97       	sbiw	r26, 0x01	; 1
    4faa:	86 e4       	ldi	r24, 0x46	; 70
    4fac:	95 e0       	ldi	r25, 0x05	; 5
    4fae:	93 83       	std	Z+3, r25	; 0x03
    4fb0:	82 83       	std	Z+2, r24	; 0x02
    4fb2:	80 91 f8 0d 	lds	r24, 0x0DF8
    4fb6:	90 91 f9 0d 	lds	r25, 0x0DF9
    4fba:	95 83       	std	Z+5, r25	; 0x05
    4fbc:	84 83       	std	Z+4, r24	; 0x04
    4fbe:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
      request_to_play_mp3_file(bufff);
    4fc2:	ed b7       	in	r30, 0x3d	; 61
    4fc4:	fe b7       	in	r31, 0x3e	; 62
    4fc6:	36 96       	adiw	r30, 0x06	; 6
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	f8 94       	cli
    4fcc:	fe bf       	out	0x3e, r31	; 62
    4fce:	0f be       	out	0x3f, r0	; 63
    4fd0:	ed bf       	out	0x3d, r30	; 61
    4fd2:	c8 01       	movw	r24, r16
    4fd4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md5_current_state = MD5_STATE_ASK_FOR_GUESS;
    4fd8:	87 e0       	ldi	r24, 0x07	; 7
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	b3 c0       	rjmp	.+358    	; 0x5144 <md5_main+0x486>
      break;

    case MD5_STATE_ASK_FOR_GUESS:
      request_to_play_mp3_file("guess.mp3");
    4fde:	83 e5       	ldi	r24, 0x53	; 83
    4fe0:	95 e0       	ldi	r25, 0x05	; 5
    4fe2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      md5_current_state = MD5_STATE_WAIT_INPUT_2;
    4fe6:	88 e0       	ldi	r24, 0x08	; 8
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	ac c0       	rjmp	.+344    	; 0x5144 <md5_main+0x486>
      break;

    case MD5_STATE_WAIT_INPUT_2:
      if(got_input)
    4fec:	80 91 f7 0d 	lds	r24, 0x0DF7
    4ff0:	88 23       	and	r24, r24
    4ff2:	09 f4       	brne	.+2      	; 0x4ff6 <md5_main+0x338>
    4ff4:	da c0       	rjmp	.+436    	; 0x51aa <md5_main+0x4ec>
      {
        got_input = false;
    4ff6:	10 92 f7 0d 	sts	0x0DF7, r1
        md5_current_state = MD5_STATE_PROC_INPUT_2;
    4ffa:	89 e0       	ldi	r24, 0x09	; 9
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	a2 c0       	rjmp	.+324    	; 0x5144 <md5_main+0x486>
      }
      break;

    case MD5_STATE_PROC_INPUT_2:
      // nothing was entered so we repeat the word
      if (last_cell == 0)
    5000:	80 91 fe 0d 	lds	r24, 0x0DFE
    5004:	88 23       	and	r24, r24
    5006:	09 f4       	brne	.+2      	; 0x500a <md5_main+0x34c>
    5008:	44 c0       	rjmp	.+136    	; 0x5092 <md5_main+0x3d4>
      {
        md5_current_state = MD5_STATE_EVALUATE_GAME;
      } else if (md5_valid_letter(last_cell))
    500a:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <md5_valid_letter>
    500e:	88 23       	and	r24, r24
    5010:	39 f1       	breq	.+78     	; 0x5060 <md5_main+0x3a2>
      {  // set entered_letter in valid_letter(), but return true or false
        char buff[7];
        sprintf(buff, "%c.mp3", entered_letter);
    5012:	00 d0       	rcall	.+0      	; 0x5014 <md5_main+0x356>
    5014:	00 d0       	rcall	.+0      	; 0x5016 <md5_main+0x358>
    5016:	00 d0       	rcall	.+0      	; 0x5018 <md5_main+0x35a>
    5018:	ed b7       	in	r30, 0x3d	; 61
    501a:	fe b7       	in	r31, 0x3e	; 62
    501c:	31 96       	adiw	r30, 0x01	; 1
    501e:	8e 01       	movw	r16, r28
    5020:	0f 5f       	subi	r16, 0xFF	; 255
    5022:	1f 4f       	sbci	r17, 0xFF	; 255
    5024:	ad b7       	in	r26, 0x3d	; 61
    5026:	be b7       	in	r27, 0x3e	; 62
    5028:	12 96       	adiw	r26, 0x02	; 2
    502a:	1c 93       	st	X, r17
    502c:	0e 93       	st	-X, r16
    502e:	11 97       	sbiw	r26, 0x01	; 1
    5030:	8a e0       	ldi	r24, 0x0A	; 10
    5032:	95 e0       	ldi	r25, 0x05	; 5
    5034:	93 83       	std	Z+3, r25	; 0x03
    5036:	82 83       	std	Z+2, r24	; 0x02
    5038:	80 91 b0 0d 	lds	r24, 0x0DB0
    503c:	84 83       	std	Z+4, r24	; 0x04
    503e:	15 82       	std	Z+5, r1	; 0x05
    5040:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(buff);
    5044:	ed b7       	in	r30, 0x3d	; 61
    5046:	fe b7       	in	r31, 0x3e	; 62
    5048:	36 96       	adiw	r30, 0x06	; 6
    504a:	0f b6       	in	r0, 0x3f	; 63
    504c:	f8 94       	cli
    504e:	fe bf       	out	0x3e, r31	; 62
    5050:	0f be       	out	0x3f, r0	; 63
    5052:	ed bf       	out	0x3d, r30	; 61
    5054:	c8 01       	movw	r24, r16
    5056:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md5_current_state = MD5_STATE_CHECK_MATCH;
    505a:	8a e0       	ldi	r24, 0x0A	; 10
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	72 c0       	rjmp	.+228    	; 0x5144 <md5_main+0x486>
      } else
      {
        request_to_play_mp3_file("INVPAT.mp3");
    5060:	8d e5       	ldi	r24, 0x5D	; 93
    5062:	95 e0       	ldi	r25, 0x05	; 5
    5064:	0b c0       	rjmp	.+22     	; 0x507c <md5_main+0x3be>

    case MD5_STATE_CHECK_MATCH:
      // place_letter() returns true if the letter guessed is found in
      // the word, false otherwise. If true, it will place the entered_letter
      // into input_word.
      if (md5_place_letter())
    5066:	0e 94 32 26 	call	0x4c64	; 0x4c64 <md5_place_letter>
    506a:	88 23       	and	r24, r24
    506c:	29 f0       	breq	.+10     	; 0x5078 <md5_main+0x3ba>
      {
        request_to_play_mp3_file("yes.mp3");
    506e:	88 e6       	ldi	r24, 0x68	; 104
    5070:	95 e0       	ldi	r25, 0x05	; 5
    5072:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
    5076:	0d c0       	rjmp	.+26     	; 0x5092 <md5_main+0x3d4>
      } else
      {
        request_to_play_mp3_file("no.mp3");
    5078:	80 e7       	ldi	r24, 0x70	; 112
    507a:	95 e0       	ldi	r25, 0x05	; 5
    507c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        num_mistakes++;
    5080:	80 91 f8 0d 	lds	r24, 0x0DF8
    5084:	90 91 f9 0d 	lds	r25, 0x0DF9
    5088:	01 96       	adiw	r24, 0x01	; 1
    508a:	90 93 f9 0d 	sts	0x0DF9, r25
    508e:	80 93 f8 0d 	sts	0x0DF8, r24
      }
      md5_current_state = MD5_STATE_EVALUATE_GAME;
    5092:	8b e0       	ldi	r24, 0x0B	; 11
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	56 c0       	rjmp	.+172    	; 0x5144 <md5_main+0x486>
      break;

    case MD5_STATE_EVALUATE_GAME:
      if (!strncmp(input_word, player1_word, strlen(player1_word)))
    5098:	aa ee       	ldi	r26, 0xEA	; 234
    509a:	bd e0       	ldi	r27, 0x0D	; 13
    509c:	fd 01       	movw	r30, r26
    509e:	01 90       	ld	r0, Z+
    50a0:	00 20       	and	r0, r0
    50a2:	e9 f7       	brne	.-6      	; 0x509e <md5_main+0x3e0>
    50a4:	31 97       	sbiw	r30, 0x01	; 1
    50a6:	ea 1b       	sub	r30, r26
    50a8:	fb 0b       	sbc	r31, r27
    50aa:	86 ec       	ldi	r24, 0xC6	; 198
    50ac:	9d e0       	ldi	r25, 0x0D	; 13
    50ae:	bd 01       	movw	r22, r26
    50b0:	af 01       	movw	r20, r30
    50b2:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <strncmp>
    50b6:	00 97       	sbiw	r24, 0x00	; 0
    50b8:	49 f4       	brne	.+18     	; 0x50cc <md5_main+0x40e>
      {
        game_status = 1;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	90 93 be 0d 	sts	0x0DBE, r25
    50c2:	80 93 bd 0d 	sts	0x0DBD, r24
        request_to_play_mp3_file("you_win.mp3");  // "you have guessed the word!"
    50c6:	87 e7       	ldi	r24, 0x77	; 119
    50c8:	95 e0       	ldi	r25, 0x05	; 5
    50ca:	0e c0       	rjmp	.+28     	; 0x50e8 <md5_main+0x42a>
      } else if (num_mistakes == 7)
    50cc:	80 91 f8 0d 	lds	r24, 0x0DF8
    50d0:	90 91 f9 0d 	lds	r25, 0x0DF9
    50d4:	07 97       	sbiw	r24, 0x07	; 7
    50d6:	51 f4       	brne	.+20     	; 0x50ec <md5_main+0x42e>
      {
        game_status = 1;
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	90 93 be 0d 	sts	0x0DBE, r25
    50e0:	80 93 bd 0d 	sts	0x0DBD, r24
        request_to_play_mp3_file("you_lose.mp3"); // "you have made 7 mistakes the word you missed was"
    50e4:	83 e8       	ldi	r24, 0x83	; 131
    50e6:	95 e0       	ldi	r25, 0x05	; 5
    50e8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      }
      if (game_status == 0)
    50ec:	80 91 bd 0d 	lds	r24, 0x0DBD
    50f0:	90 91 be 0d 	lds	r25, 0x0DBE
    50f4:	00 97       	sbiw	r24, 0x00	; 0
    50f6:	39 f4       	brne	.+14     	; 0x5106 <md5_main+0x448>
      {
        request_to_play_mp3_file("so_far.mp3");
    50f8:	80 e9       	ldi	r24, 0x90	; 144
    50fa:	95 e0       	ldi	r25, 0x05	; 5
    50fc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md5_current_state = MD5_STATE_SAY_STATUS;
    5100:	85 e0       	ldi	r24, 0x05	; 5
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	1f c0       	rjmp	.+62     	; 0x5144 <md5_main+0x486>
      } else if (game_status == 1)
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	09 f0       	breq	.+2      	; 0x510c <md5_main+0x44e>
    510a:	4f c0       	rjmp	.+158    	; 0x51aa <md5_main+0x4ec>
      {
        md5_current_state = MD5_STATE_READ_WORD;
    510c:	8c e0       	ldi	r24, 0x0C	; 12
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	19 c0       	rjmp	.+50     	; 0x5144 <md5_main+0x486>
      }
      break;

    case MD5_STATE_READ_WORD:
      if (input_word_index == strlen(player1_word))
    5112:	a0 91 fa 0d 	lds	r26, 0x0DFA
    5116:	b0 91 fb 0d 	lds	r27, 0x0DFB
    511a:	ea ee       	ldi	r30, 0xEA	; 234
    511c:	fd e0       	ldi	r31, 0x0D	; 13
    511e:	01 90       	ld	r0, Z+
    5120:	00 20       	and	r0, r0
    5122:	e9 f7       	brne	.-6      	; 0x511e <md5_main+0x460>
    5124:	31 97       	sbiw	r30, 0x01	; 1
    5126:	ea 5e       	subi	r30, 0xEA	; 234
    5128:	fd 40       	sbci	r31, 0x0D	; 13
    512a:	ae 17       	cp	r26, r30
    512c:	bf 07       	cpc	r27, r31
    512e:	79 f4       	brne	.+30     	; 0x514e <md5_main+0x490>
      {
        input_word_index = 0;
    5130:	10 92 fb 0d 	sts	0x0DFB, r1
    5134:	10 92 fa 0d 	sts	0x0DFA, r1
        request_to_play_mp3_file("new_game.mp3");
    5138:	8b e9       	ldi	r24, 0x9B	; 155
    513a:	95 e0       	ldi	r25, 0x05	; 5
    513c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        md5_current_state = MD5_STATE_SETUP_VARS;
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	90 93 06 0e 	sts	0x0E06, r25
    5148:	80 93 05 0e 	sts	0x0E05, r24
    514c:	2e c0       	rjmp	.+92     	; 0x51aa <md5_main+0x4ec>
      } else
      {
        char nom[10];
        sprintf(nom, "%c.mp3", player1_word[input_word_index]);
    514e:	00 d0       	rcall	.+0      	; 0x5150 <md5_main+0x492>
    5150:	00 d0       	rcall	.+0      	; 0x5152 <md5_main+0x494>
    5152:	00 d0       	rcall	.+0      	; 0x5154 <md5_main+0x496>
    5154:	2d b7       	in	r18, 0x3d	; 61
    5156:	3e b7       	in	r19, 0x3e	; 62
    5158:	2f 5f       	subi	r18, 0xFF	; 255
    515a:	3f 4f       	sbci	r19, 0xFF	; 255
    515c:	8e 01       	movw	r16, r28
    515e:	04 5e       	subi	r16, 0xE4	; 228
    5160:	1f 4f       	sbci	r17, 0xFF	; 255
    5162:	ed b7       	in	r30, 0x3d	; 61
    5164:	fe b7       	in	r31, 0x3e	; 62
    5166:	12 83       	std	Z+2, r17	; 0x02
    5168:	01 83       	std	Z+1, r16	; 0x01
    516a:	8a e0       	ldi	r24, 0x0A	; 10
    516c:	95 e0       	ldi	r25, 0x05	; 5
    516e:	f9 01       	movw	r30, r18
    5170:	93 83       	std	Z+3, r25	; 0x03
    5172:	82 83       	std	Z+2, r24	; 0x02
    5174:	a6 51       	subi	r26, 0x16	; 22
    5176:	b2 4f       	sbci	r27, 0xF2	; 242
    5178:	8c 91       	ld	r24, X
    517a:	84 83       	std	Z+4, r24	; 0x04
    517c:	15 82       	std	Z+5, r1	; 0x05
    517e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
        request_to_play_mp3_file(nom);
    5182:	8d b7       	in	r24, 0x3d	; 61
    5184:	9e b7       	in	r25, 0x3e	; 62
    5186:	06 96       	adiw	r24, 0x06	; 6
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	9e bf       	out	0x3e, r25	; 62
    518e:	0f be       	out	0x3f, r0	; 63
    5190:	8d bf       	out	0x3d, r24	; 61
    5192:	c8 01       	movw	r24, r16
    5194:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
        input_word_index++;
    5198:	80 91 fa 0d 	lds	r24, 0x0DFA
    519c:	90 91 fb 0d 	lds	r25, 0x0DFB
    51a0:	01 96       	adiw	r24, 0x01	; 1
    51a2:	90 93 fb 0d 	sts	0x0DFB, r25
    51a6:	80 93 fa 0d 	sts	0x0DFA, r24
      }
      break;
  }
}
    51aa:	a5 96       	adiw	r28, 0x25	; 37
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	cf 91       	pop	r28
    51b8:	df 91       	pop	r29
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	ff 90       	pop	r15
    51c0:	ef 90       	pop	r14
    51c2:	08 95       	ret

000051c4 <play_dot>:
/**
 * @brief Play dot sound file
 * @param char dot
 * @return void
 */
void play_dot(char dot) {
    51c4:	0f 93       	push	r16
    51c6:	1f 93       	push	r17
    51c8:	df 93       	push	r29
    51ca:	cf 93       	push	r28
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
    51d0:	2a 97       	sbiw	r28, 0x0a	; 10
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
	char file[10];
	sprintf((char*)file, "dot_%c.mp3", dot);
    51dc:	00 d0       	rcall	.+0      	; 0x51de <play_dot+0x1a>
    51de:	00 d0       	rcall	.+0      	; 0x51e0 <play_dot+0x1c>
    51e0:	00 d0       	rcall	.+0      	; 0x51e2 <play_dot+0x1e>
    51e2:	ed b7       	in	r30, 0x3d	; 61
    51e4:	fe b7       	in	r31, 0x3e	; 62
    51e6:	31 96       	adiw	r30, 0x01	; 1
    51e8:	8e 01       	movw	r16, r28
    51ea:	0f 5f       	subi	r16, 0xFF	; 255
    51ec:	1f 4f       	sbci	r17, 0xFF	; 255
    51ee:	ad b7       	in	r26, 0x3d	; 61
    51f0:	be b7       	in	r27, 0x3e	; 62
    51f2:	12 96       	adiw	r26, 0x02	; 2
    51f4:	1c 93       	st	X, r17
    51f6:	0e 93       	st	-X, r16
    51f8:	11 97       	sbiw	r26, 0x01	; 1
    51fa:	28 ea       	ldi	r18, 0xA8	; 168
    51fc:	35 e0       	ldi	r19, 0x05	; 5
    51fe:	33 83       	std	Z+3, r19	; 0x03
    5200:	22 83       	std	Z+2, r18	; 0x02
    5202:	84 83       	std	Z+4, r24	; 0x04
    5204:	15 82       	std	Z+5, r1	; 0x05
    5206:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
	request_to_play_mp3_file(file);
    520a:	8d b7       	in	r24, 0x3d	; 61
    520c:	9e b7       	in	r25, 0x3e	; 62
    520e:	06 96       	adiw	r24, 0x06	; 6
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	9e bf       	out	0x3e, r25	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	8d bf       	out	0x3d, r24	; 61
    521a:	c8 01       	movw	r24, r16
    521c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    5220:	2a 96       	adiw	r28, 0x0a	; 10
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	de bf       	out	0x3e, r29	; 62
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	cd bf       	out	0x3d, r28	; 61
    522c:	cf 91       	pop	r28
    522e:	df 91       	pop	r29
    5230:	1f 91       	pop	r17
    5232:	0f 91       	pop	r16
    5234:	08 95       	ret

00005236 <play_dot_sequence>:
/**
 * @brief Play dot sequence corresponding to an alphabet, checks for NULL arg
 * @param alphabet_t *alpha
 * @return void
 */
void play_dot_sequence(alphabet_t *alpha) {
    5236:	ef 92       	push	r14
    5238:	ff 92       	push	r15
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
    523e:	df 93       	push	r29
    5240:	cf 93       	push	r28
    5242:	00 d0       	rcall	.+0      	; 0x5244 <play_dot_sequence+0xe>
    5244:	cd b7       	in	r28, 0x3d	; 61
    5246:	de b7       	in	r29, 0x3e	; 62
    5248:	fc 01       	movw	r30, r24
	char bit_pattern = 0;
	int i = 0;
	char dot[2] = "0";
    524a:	80 91 be 05 	lds	r24, 0x05BE
    524e:	90 91 bf 05 	lds	r25, 0x05BF
    5252:	9a 83       	std	Y+2, r25	; 0x02
    5254:	89 83       	std	Y+1, r24	; 0x01
	if (alpha != NULL) {
    5256:	30 97       	sbiw	r30, 0x00	; 0
    5258:	d1 f0       	breq	.+52     	; 0x528e <play_dot_sequence+0x58>
		bit_pattern = alpha->bit_pattern;
    525a:	80 81       	ld	r24, Z
		while (bit_pattern != 0) {
    525c:	88 23       	and	r24, r24
    525e:	d9 f0       	breq	.+54     	; 0x5296 <play_dot_sequence+0x60>
			if (bit_pattern & 0x01) {
    5260:	08 2f       	mov	r16, r24
    5262:	10 e0       	ldi	r17, 0x00	; 0
    5264:	01 70       	andi	r16, 0x01	; 1
    5266:	10 70       	andi	r17, 0x00	; 0
				play_dot((itoa(i, dot, 10))[0]);
    5268:	7e 01       	movw	r14, r28
    526a:	08 94       	sec
    526c:	e1 1c       	adc	r14, r1
    526e:	f1 1c       	adc	r15, r1
	int i = 0;
	char dot[2] = "0";
	if (alpha != NULL) {
		bit_pattern = alpha->bit_pattern;
		while (bit_pattern != 0) {
			if (bit_pattern & 0x01) {
    5270:	01 15       	cp	r16, r1
    5272:	11 05       	cpc	r17, r1
    5274:	e9 f3       	breq	.-6      	; 0x5270 <play_dot_sequence+0x3a>
				play_dot((itoa(i, dot, 10))[0]);
    5276:	80 e0       	ldi	r24, 0x00	; 0
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	b7 01       	movw	r22, r14
    527c:	4a e0       	ldi	r20, 0x0A	; 10
    527e:	50 e0       	ldi	r21, 0x00	; 0
    5280:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <itoa>
    5284:	fc 01       	movw	r30, r24
    5286:	80 81       	ld	r24, Z
    5288:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <play_dot>
    528c:	f1 cf       	rjmp	.-30     	; 0x5270 <play_dot_sequence+0x3a>
			}
		}
	} else {
		request_to_play_mp3_file("INVPAT.mp3");
    528e:	83 eb       	ldi	r24, 0xB3	; 179
    5290:	95 e0       	ldi	r25, 0x05	; 5
    5292:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
	}
}
    5296:	0f 90       	pop	r0
    5298:	0f 90       	pop	r0
    529a:	cf 91       	pop	r28
    529c:	df 91       	pop	r29
    529e:	1f 91       	pop	r17
    52a0:	0f 91       	pop	r16
    52a2:	ff 90       	pop	r15
    52a4:	ef 90       	pop	r14
    52a6:	08 95       	ret

000052a8 <play_alphabet>:
/**
 * @brief Play sound file corresponding to an alphabet, checks for NULL arg
 * @param alphabet_t* alpha
 * @return void
 */
void play_alphabet(alphabet_t *alpha) {
    52a8:	df 93       	push	r29
    52aa:	cf 93       	push	r28
    52ac:	cd b7       	in	r28, 0x3d	; 61
    52ae:	de b7       	in	r29, 0x3e	; 62
    52b0:	2a 97       	sbiw	r28, 0x0a	; 10
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	de bf       	out	0x3e, r29	; 62
    52b8:	0f be       	out	0x3f, r0	; 63
    52ba:	cd bf       	out	0x3d, r28	; 61
    52bc:	9c 01       	movw	r18, r24
    52be:	ce 01       	movw	r24, r28
    52c0:	01 96       	adiw	r24, 0x01	; 1
	char file[10];
	if (alpha != NULL)
    52c2:	21 15       	cp	r18, r1
    52c4:	31 05       	cpc	r19, r1
    52c6:	f9 f0       	breq	.+62     	; 0x5306 <play_alphabet+0x5e>
		sprintf((char*)file, "%s.mp3", alpha->sound);
    52c8:	00 d0       	rcall	.+0      	; 0x52ca <play_alphabet+0x22>
    52ca:	00 d0       	rcall	.+0      	; 0x52cc <play_alphabet+0x24>
    52cc:	00 d0       	rcall	.+0      	; 0x52ce <play_alphabet+0x26>
    52ce:	ed b7       	in	r30, 0x3d	; 61
    52d0:	fe b7       	in	r31, 0x3e	; 62
    52d2:	31 96       	adiw	r30, 0x01	; 1
    52d4:	ad b7       	in	r26, 0x3d	; 61
    52d6:	be b7       	in	r27, 0x3e	; 62
    52d8:	12 96       	adiw	r26, 0x02	; 2
    52da:	9c 93       	st	X, r25
    52dc:	8e 93       	st	-X, r24
    52de:	11 97       	sbiw	r26, 0x01	; 1
    52e0:	80 ec       	ldi	r24, 0xC0	; 192
    52e2:	95 e0       	ldi	r25, 0x05	; 5
    52e4:	93 83       	std	Z+3, r25	; 0x03
    52e6:	82 83       	std	Z+2, r24	; 0x02
    52e8:	2f 5f       	subi	r18, 0xFF	; 255
    52ea:	3f 4f       	sbci	r19, 0xFF	; 255
    52ec:	35 83       	std	Z+5, r19	; 0x05
    52ee:	24 83       	std	Z+4, r18	; 0x04
    52f0:	0e 94 8b 2c 	call	0x5916	; 0x5916 <sprintf>
    52f4:	8d b7       	in	r24, 0x3d	; 61
    52f6:	9e b7       	in	r25, 0x3e	; 62
    52f8:	06 96       	adiw	r24, 0x06	; 6
    52fa:	0f b6       	in	r0, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	9e bf       	out	0x3e, r25	; 62
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	8d bf       	out	0x3d, r24	; 61
    5304:	04 c0       	rjmp	.+8      	; 0x530e <play_alphabet+0x66>
	else
		sprintf((char*)file, "INVPAT.mp3");
    5306:	63 eb       	ldi	r22, 0xB3	; 179
    5308:	75 e0       	ldi	r23, 0x05	; 5
    530a:	0e 94 4d 2c 	call	0x589a	; 0x589a <strcpy>
	request_to_play_mp3_file(file);
    530e:	ce 01       	movw	r24, r28
    5310:	01 96       	adiw	r24, 0x01	; 1
    5312:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
}
    5316:	2a 96       	adiw	r28, 0x0a	; 10
    5318:	0f b6       	in	r0, 0x3f	; 63
    531a:	f8 94       	cli
    531c:	de bf       	out	0x3e, r29	; 62
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	cd bf       	out	0x3d, r28	; 61
    5322:	cf 91       	pop	r28
    5324:	df 91       	pop	r29
    5326:	08 95       	ret

00005328 <md6_reset>:
/**
 * @brief Resets free play mode
 * @return void
 */
void md6_reset(void) {
  next_state = MD6_STATE_INITIAL;
    5328:	10 92 e3 08 	sts	0x08E3, r1
  last_dot = 0;
    532c:	10 92 e0 08 	sts	0x08E0, r1
}
    5330:	08 95       	ret

00005332 <md6_call_mode_yes_answer>:
 * @brief Implements ENTER button functionality for free play mode
 * @return void
 */
void md6_call_mode_yes_answer(void) {
  // If no input received, replay prompty, otherwise process as ENTER
  if (button_bits == 0)
    5332:	80 91 e2 08 	lds	r24, 0x08E2
    5336:	88 23       	and	r24, r24
    5338:	19 f4       	brne	.+6      	; 0x5340 <md6_call_mode_yes_answer+0xe>
    next_state = MD6_STATE_INITIAL;
    533a:	10 92 e3 08 	sts	0x08E3, r1
    533e:	08 95       	ret
  else
    last_dot = ENTER;
    5340:	8f ef       	ldi	r24, 0xFF	; 255
    5342:	80 93 e0 08 	sts	0x08E0, r24
    5346:	08 95       	ret

00005348 <md6_call_mode_no_answer>:
 * @brief Implements CANCEL button functionality for free play mode
 * @return void
 */
void md6_call_mode_no_answer(void) {
  // Does nothing
}
    5348:	08 95       	ret

0000534a <md6_input_dot>:
/**
 * @brief Implements dot input functionality for free play mode
 * @return void
 */
void md6_input_dot(char this_dot) {
  last_dot = this_dot;
    534a:	80 93 e0 08 	sts	0x08E0, r24
}
    534e:	08 95       	ret

00005350 <md6_input_cell>:

/**
 * @brief Implements cell input functionality for free play mode
 * @return void
 */
void md6_input_cell(char this_cell) {
    5350:	98 2f       	mov	r25, r24
  if (last_dot != 0) {
    5352:	80 91 e0 08 	lds	r24, 0x08E0
    5356:	88 23       	and	r24, r24
    5358:	11 f0       	breq	.+4      	; 0x535e <md6_input_cell+0xe>
    last_cell = this_cell;
    535a:	90 93 e1 08 	sts	0x08E1, r25
    535e:	08 95       	ret

00005360 <md6_main>:
/**
 * @brief Implements core state machine for free play mode
 * @return void
 */
void md6_main(void) {
  switch (next_state) {
    5360:	80 91 e3 08 	lds	r24, 0x08E3
    5364:	81 30       	cpi	r24, 0x01	; 1
    5366:	91 f0       	breq	.+36     	; 0x538c <md6_main+0x2c>
    5368:	81 30       	cpi	r24, 0x01	; 1
    536a:	20 f0       	brcs	.+8      	; 0x5374 <md6_main+0x14>
    536c:	82 30       	cpi	r24, 0x02	; 2
    536e:	09 f0       	breq	.+2      	; 0x5372 <md6_main+0x12>
    5370:	41 c0       	rjmp	.+130    	; 0x53f4 <md6_main+0x94>
    5372:	2f c0       	rjmp	.+94     	; 0x53d2 <md6_main+0x72>
    
    case MD6_STATE_INITIAL:
      PRINTF("MD6 Free Play\n\r");
    5374:	87 ec       	ldi	r24, 0xC7	; 199
    5376:	95 e0       	ldi	r25, 0x05	; 5
    5378:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <usart_transmit_string_to_pc>
      request_to_play_mp3_file("MD6INT.MP3");
    537c:	87 ed       	ldi	r24, 0xD7	; 215
    537e:	95 e0       	ldi	r25, 0x05	; 5
    5380:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
      next_state = MD6_STATE_ACCEPT_DOTS;
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	80 93 e3 08 	sts	0x08E3, r24
    538a:	08 95       	ret
      break;

    case MD6_STATE_ACCEPT_DOTS:
      if (last_dot != 0) {
    538c:	40 91 e0 08 	lds	r20, 0x08E0
    5390:	44 23       	and	r20, r20
    5392:	81 f1       	breq	.+96     	; 0x53f4 <md6_main+0x94>
        // If last button pressed is ENTER, check the dots input so far
        //  otherwise continue to accept more dots
        if (last_dot == ENTER) {
    5394:	4f 3f       	cpi	r20, 0xFF	; 255
    5396:	21 f4       	brne	.+8      	; 0x53a0 <md6_main+0x40>
          next_state = MD6_STATE_CHECK_DOTS;
    5398:	82 e0       	ldi	r24, 0x02	; 2
    539a:	80 93 e3 08 	sts	0x08E3, r24
    539e:	16 c0       	rjmp	.+44     	; 0x53cc <md6_main+0x6c>
        } else if ((last_dot >= '1') && (last_dot <= '6')) {
    53a0:	84 2f       	mov	r24, r20
    53a2:	81 53       	subi	r24, 0x31	; 49
    53a4:	86 30       	cpi	r24, 0x06	; 6
    53a6:	90 f4       	brcc	.+36     	; 0x53cc <md6_main+0x6c>
          button_bits |= 1 << (CHARTOINT(last_dot) - 1);
    53a8:	84 2f       	mov	r24, r20
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	c1 97       	sbiw	r24, 0x31	; 49
    53ae:	21 e0       	ldi	r18, 0x01	; 1
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	02 c0       	rjmp	.+4      	; 0x53b8 <md6_main+0x58>
    53b4:	22 0f       	add	r18, r18
    53b6:	33 1f       	adc	r19, r19
    53b8:	8a 95       	dec	r24
    53ba:	e2 f7       	brpl	.-8      	; 0x53b4 <md6_main+0x54>
    53bc:	80 91 e2 08 	lds	r24, 0x08E2
    53c0:	82 2b       	or	r24, r18
    53c2:	80 93 e2 08 	sts	0x08E2, r24
          play_dot(last_dot);
    53c6:	84 2f       	mov	r24, r20
    53c8:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <play_dot>
        }
        last_dot = 0;
    53cc:	10 92 e0 08 	sts	0x08E0, r1
    53d0:	08 95       	ret
      break;

    case MD6_STATE_CHECK_DOTS:
      // If user presses ENTER, then check dot sequence for valid letter
      //  and provide feedback
      this_alpha = get_alphabet_by_bits(button_bits, this_script);
    53d2:	80 91 e2 08 	lds	r24, 0x08E2
    53d6:	62 ee       	ldi	r22, 0xE2	; 226
    53d8:	75 e0       	ldi	r23, 0x05	; 5
    53da:	0e 94 4d 2a 	call	0x549a	; 0x549a <get_alphabet_by_bits>
    53de:	90 93 e5 08 	sts	0x08E5, r25
    53e2:	80 93 e4 08 	sts	0x08E4, r24
      play_alphabet(this_alpha);
    53e6:	0e 94 54 29 	call	0x52a8	; 0x52a8 <play_alphabet>
      next_state = MD6_STATE_ACCEPT_DOTS;
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	80 93 e3 08 	sts	0x08E3, r24
	  button_bits = 0;
    53f0:	10 92 e2 08 	sts	0x08E2, r1
    53f4:	08 95       	ret

000053f6 <md7_initialise>:
static char button_bits = 0b00000000;
static char last_dot = 0b00000000;
static short current_letters[] = {0, 0, 0, 0, 0};

void md7_initialise() {
	button_bits = 0b00000000;
    53f6:	10 92 e8 08 	sts	0x08E8, r1
	last_dot = 0b00000000;
    53fa:	10 92 e6 08 	sts	0x08E6, r1
	for (int i = 0; i < 5; i++) {
		current_letters[i] = 0;
    53fe:	10 92 ea 08 	sts	0x08EA, r1
    5402:	10 92 e9 08 	sts	0x08E9, r1
    5406:	10 92 ec 08 	sts	0x08EC, r1
    540a:	10 92 eb 08 	sts	0x08EB, r1
    540e:	10 92 ee 08 	sts	0x08EE, r1
    5412:	10 92 ed 08 	sts	0x08ED, r1
    5416:	10 92 f0 08 	sts	0x08F0, r1
    541a:	10 92 ef 08 	sts	0x08EF, r1
    541e:	10 92 f2 08 	sts	0x08F2, r1
    5422:	10 92 f1 08 	sts	0x08F1, r1
	}
}
    5426:	08 95       	ret

00005428 <md7_reset>:
			break;
	}
}

void md7_reset(void) {
	next_state = STATE_INITIAL;
    5428:	10 92 e7 08 	sts	0x08E7, r1
	button_bits = 0b00000000;
    542c:	10 92 e8 08 	sts	0x08E8, r1
	last_dot = 0b00000000;
    5430:	10 92 e6 08 	sts	0x08E6, r1
}
    5434:	08 95       	ret

00005436 <md7_call_mode_yes_answer>:

void md7_call_mode_yes_answer(void) {

}
    5436:	08 95       	ret

00005438 <md7_call_mode_no_answer>:

void md7_call_mode_no_answer(void) {

}
    5438:	08 95       	ret

0000543a <md7_input_dot>:

void md7_input_dot(char this_dot) {
	last_dot = this_dot;
    543a:	80 93 e6 08 	sts	0x08E6, r24
}
    543e:	08 95       	ret

00005440 <md7_input_cell>:

void md7_input_cell(char this_cell) {

}
    5440:	08 95       	ret

00005442 <md7_main>:
	for (int i = 0; i < 5; i++) {
		current_letters[i] = 0;
	}
}

void md7_main(void) {
    5442:	1f 93       	push	r17
	switch(next_state) {
    5444:	10 91 e7 08 	lds	r17, 0x08E7
    5448:	11 23       	and	r17, r17
    544a:	19 f0       	breq	.+6      	; 0x5452 <md7_main+0x10>
    544c:	11 30       	cpi	r17, 0x01	; 1
    544e:	19 f5       	brne	.+70     	; 0x5496 <md7_main+0x54>
    5450:	0a c0       	rjmp	.+20     	; 0x5466 <md7_main+0x24>

		//Mode state machine initial state, plays prompt
		case STATE_INITIAL:
			md7_initialise();
    5452:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <md7_initialise>
			request_to_play_mp3_file("MD7INT.MP3");
    5456:	84 e0       	ldi	r24, 0x04	; 4
    5458:	97 e0       	ldi	r25, 0x07	; 7
    545a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
			next_state = STATE_SUBMODE;
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	80 93 e7 08 	sts	0x08E7, r24
    5464:	18 c0       	rjmp	.+48     	; 0x5496 <md7_main+0x54>
			break;

		//Lets user choose between learn and game submode
		case STATE_SUBMODE:
			request_to_play_mp3_file("MD7_SUBMENU.MP3");
    5466:	8f e0       	ldi	r24, 0x0F	; 15
    5468:	97 e0       	ldi	r25, 0x07	; 7
    546a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
			if (last_dot == '1')
    546e:	80 91 e6 08 	lds	r24, 0x08E6
    5472:	81 33       	cpi	r24, 0x31	; 49
    5474:	11 f4       	brne	.+4      	; 0x547a <md7_main+0x38>
				next_state = STATE_LEARN;
    5476:	82 e0       	ldi	r24, 0x02	; 2
    5478:	03 c0       	rjmp	.+6      	; 0x5480 <md7_main+0x3e>
			else if (last_dot == '2')
    547a:	82 33       	cpi	r24, 0x32	; 50
    547c:	21 f4       	brne	.+8      	; 0x5486 <md7_main+0x44>
				next_state = STATE_PLAY;
    547e:	83 e0       	ldi	r24, 0x03	; 3
    5480:	80 93 e7 08 	sts	0x08E7, r24
    5484:	06 c0       	rjmp	.+12     	; 0x5492 <md7_main+0x50>
			else {
				request_to_play_mp3_file("INVPAT.MP3");
    5486:	8f e1       	ldi	r24, 0x1F	; 31
    5488:	97 e0       	ldi	r25, 0x07	; 7
    548a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <request_to_play_mp3_file>
				next_state = STATE_SUBMODE;
    548e:	10 93 e7 08 	sts	0x08E7, r17
			}
			last_dot = 0;
    5492:	10 92 e6 08 	sts	0x08E6, r1

			break;
		default:
			break;
	}
}
    5496:	1f 91       	pop	r17
    5498:	08 95       	ret

0000549a <get_alphabet_by_bits>:
/**
 * @brief Finds an alphabet from a specified script based on a bit pattern
 * @param char bit_pattern, script_t* this_script
 * @return alphabet_t* corresponding to alphabet it found, NULL if not found
 */
alphabet_t* get_alphabet_by_bits(char bit_pattern, script_t* this_script) {
    549a:	98 2f       	mov	r25, r24
    549c:	fb 01       	movw	r30, r22
	alphabet_t* this_alphabet = NULL;
	alphabet_t* script_alphabets = this_script->alphabets;
	short script_length = this_script->length;
    549e:	60 81       	ld	r22, Z
    54a0:	71 81       	ldd	r23, Z+1	; 0x01
    54a2:	02 80       	ldd	r0, Z+2	; 0x02
    54a4:	f3 81       	ldd	r31, Z+3	; 0x03
    54a6:	e0 2d       	mov	r30, r0
    54a8:	40 e0       	ldi	r20, 0x00	; 0
    54aa:	50 e0       	ldi	r21, 0x00	; 0
    54ac:	07 c0       	rjmp	.+14     	; 0x54bc <get_alphabet_by_bits+0x22>
	for (int i = 0; i < script_length; i++) {
    54ae:	9f 01       	movw	r18, r30
		this_alphabet = &script_alphabets[i];
		if (this_alphabet->bit_pattern == bit_pattern) {
    54b0:	80 81       	ld	r24, Z
    54b2:	3b 96       	adiw	r30, 0x0b	; 11
    54b4:	89 17       	cp	r24, r25
    54b6:	39 f0       	breq	.+14     	; 0x54c6 <get_alphabet_by_bits+0x2c>
 */
alphabet_t* get_alphabet_by_bits(char bit_pattern, script_t* this_script) {
	alphabet_t* this_alphabet = NULL;
	alphabet_t* script_alphabets = this_script->alphabets;
	short script_length = this_script->length;
	for (int i = 0; i < script_length; i++) {
    54b8:	4f 5f       	subi	r20, 0xFF	; 255
    54ba:	5f 4f       	sbci	r21, 0xFF	; 255
    54bc:	46 17       	cp	r20, r22
    54be:	57 07       	cpc	r21, r23
    54c0:	b4 f3       	brlt	.-20     	; 0x54ae <get_alphabet_by_bits+0x14>
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
		if (this_alphabet->bit_pattern == bit_pattern) {
			return this_alphabet;
		}
	}
	return NULL;
}
    54c6:	c9 01       	movw	r24, r18
    54c8:	08 95       	ret

000054ca <get_alphabet_by_sound>:
/**
 * @brief Finds an alphabet from a specified script based on sound
 * @param char* sound, script_t* this_script
 * @return alphabet_t* corresponding to alphabet it found, NULL if not found
 */
alphabet_t* get_alphabet_by_sound(char* sound, script_t* this_script) {
    54ca:	af 92       	push	r10
    54cc:	bf 92       	push	r11
    54ce:	cf 92       	push	r12
    54d0:	df 92       	push	r13
    54d2:	ef 92       	push	r14
    54d4:	ff 92       	push	r15
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	cf 93       	push	r28
    54dc:	df 93       	push	r29
    54de:	5c 01       	movw	r10, r24
    54e0:	fb 01       	movw	r30, r22
	alphabet_t* this_alphabet = NULL;
	alphabet_t* script_alphabets = this_script->alphabets;
	short script_length = this_script->length;
    54e2:	c0 80       	ld	r12, Z
    54e4:	d1 80       	ldd	r13, Z+1	; 0x01
    54e6:	02 81       	ldd	r16, Z+2	; 0x02
    54e8:	13 81       	ldd	r17, Z+3	; 0x03
    54ea:	ee 24       	eor	r14, r14
    54ec:	ff 24       	eor	r15, r15
    54ee:	0d c0       	rjmp	.+26     	; 0x550a <get_alphabet_by_sound+0x40>
	for (int i = 0; i < script_length; i++) {
    54f0:	e8 01       	movw	r28, r16
		this_alphabet = &script_alphabets[i];
		if (strcmp(this_alphabet->sound, sound) == 0) {
    54f2:	c8 01       	movw	r24, r16
    54f4:	01 96       	adiw	r24, 0x01	; 1
    54f6:	b5 01       	movw	r22, r10
    54f8:	0e 94 44 2c 	call	0x5888	; 0x5888 <strcmp>
    54fc:	05 5f       	subi	r16, 0xF5	; 245
    54fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	41 f0       	breq	.+16     	; 0x5514 <get_alphabet_by_sound+0x4a>
 */
alphabet_t* get_alphabet_by_sound(char* sound, script_t* this_script) {
	alphabet_t* this_alphabet = NULL;
	alphabet_t* script_alphabets = this_script->alphabets;
	short script_length = this_script->length;
	for (int i = 0; i < script_length; i++) {
    5504:	08 94       	sec
    5506:	e1 1c       	adc	r14, r1
    5508:	f1 1c       	adc	r15, r1
    550a:	ec 14       	cp	r14, r12
    550c:	fd 04       	cpc	r15, r13
    550e:	84 f3       	brlt	.-32     	; 0x54f0 <get_alphabet_by_sound+0x26>
    5510:	c0 e0       	ldi	r28, 0x00	; 0
    5512:	d0 e0       	ldi	r29, 0x00	; 0
		if (strcmp(this_alphabet->sound, sound) == 0) {
			return this_alphabet;
		}
	}
	return NULL;
}
    5514:	ce 01       	movw	r24, r28
    5516:	df 91       	pop	r29
    5518:	cf 91       	pop	r28
    551a:	1f 91       	pop	r17
    551c:	0f 91       	pop	r16
    551e:	ff 90       	pop	r15
    5520:	ef 90       	pop	r14
    5522:	df 90       	pop	r13
    5524:	cf 90       	pop	r12
    5526:	bf 90       	pop	r11
    5528:	af 90       	pop	r10
    552a:	08 95       	ret

0000552c <__mulsi3>:
    552c:	62 9f       	mul	r22, r18
    552e:	d0 01       	movw	r26, r0
    5530:	73 9f       	mul	r23, r19
    5532:	f0 01       	movw	r30, r0
    5534:	82 9f       	mul	r24, r18
    5536:	e0 0d       	add	r30, r0
    5538:	f1 1d       	adc	r31, r1
    553a:	64 9f       	mul	r22, r20
    553c:	e0 0d       	add	r30, r0
    553e:	f1 1d       	adc	r31, r1
    5540:	92 9f       	mul	r25, r18
    5542:	f0 0d       	add	r31, r0
    5544:	83 9f       	mul	r24, r19
    5546:	f0 0d       	add	r31, r0
    5548:	74 9f       	mul	r23, r20
    554a:	f0 0d       	add	r31, r0
    554c:	65 9f       	mul	r22, r21
    554e:	f0 0d       	add	r31, r0
    5550:	99 27       	eor	r25, r25
    5552:	72 9f       	mul	r23, r18
    5554:	b0 0d       	add	r27, r0
    5556:	e1 1d       	adc	r30, r1
    5558:	f9 1f       	adc	r31, r25
    555a:	63 9f       	mul	r22, r19
    555c:	b0 0d       	add	r27, r0
    555e:	e1 1d       	adc	r30, r1
    5560:	f9 1f       	adc	r31, r25
    5562:	bd 01       	movw	r22, r26
    5564:	cf 01       	movw	r24, r30
    5566:	11 24       	eor	r1, r1
    5568:	08 95       	ret

0000556a <__divmodhi4>:
    556a:	97 fb       	bst	r25, 7
    556c:	09 2e       	mov	r0, r25
    556e:	07 26       	eor	r0, r23
    5570:	0a d0       	rcall	.+20     	; 0x5586 <__divmodhi4_neg1>
    5572:	77 fd       	sbrc	r23, 7
    5574:	04 d0       	rcall	.+8      	; 0x557e <__divmodhi4_neg2>
    5576:	2e d0       	rcall	.+92     	; 0x55d4 <__udivmodhi4>
    5578:	06 d0       	rcall	.+12     	; 0x5586 <__divmodhi4_neg1>
    557a:	00 20       	and	r0, r0
    557c:	1a f4       	brpl	.+6      	; 0x5584 <__divmodhi4_exit>

0000557e <__divmodhi4_neg2>:
    557e:	70 95       	com	r23
    5580:	61 95       	neg	r22
    5582:	7f 4f       	sbci	r23, 0xFF	; 255

00005584 <__divmodhi4_exit>:
    5584:	08 95       	ret

00005586 <__divmodhi4_neg1>:
    5586:	f6 f7       	brtc	.-4      	; 0x5584 <__divmodhi4_exit>
    5588:	90 95       	com	r25
    558a:	81 95       	neg	r24
    558c:	9f 4f       	sbci	r25, 0xFF	; 255
    558e:	08 95       	ret

00005590 <__udivmodsi4>:
    5590:	a1 e2       	ldi	r26, 0x21	; 33
    5592:	1a 2e       	mov	r1, r26
    5594:	aa 1b       	sub	r26, r26
    5596:	bb 1b       	sub	r27, r27
    5598:	fd 01       	movw	r30, r26
    559a:	0d c0       	rjmp	.+26     	; 0x55b6 <__udivmodsi4_ep>

0000559c <__udivmodsi4_loop>:
    559c:	aa 1f       	adc	r26, r26
    559e:	bb 1f       	adc	r27, r27
    55a0:	ee 1f       	adc	r30, r30
    55a2:	ff 1f       	adc	r31, r31
    55a4:	a2 17       	cp	r26, r18
    55a6:	b3 07       	cpc	r27, r19
    55a8:	e4 07       	cpc	r30, r20
    55aa:	f5 07       	cpc	r31, r21
    55ac:	20 f0       	brcs	.+8      	; 0x55b6 <__udivmodsi4_ep>
    55ae:	a2 1b       	sub	r26, r18
    55b0:	b3 0b       	sbc	r27, r19
    55b2:	e4 0b       	sbc	r30, r20
    55b4:	f5 0b       	sbc	r31, r21

000055b6 <__udivmodsi4_ep>:
    55b6:	66 1f       	adc	r22, r22
    55b8:	77 1f       	adc	r23, r23
    55ba:	88 1f       	adc	r24, r24
    55bc:	99 1f       	adc	r25, r25
    55be:	1a 94       	dec	r1
    55c0:	69 f7       	brne	.-38     	; 0x559c <__udivmodsi4_loop>
    55c2:	60 95       	com	r22
    55c4:	70 95       	com	r23
    55c6:	80 95       	com	r24
    55c8:	90 95       	com	r25
    55ca:	9b 01       	movw	r18, r22
    55cc:	ac 01       	movw	r20, r24
    55ce:	bd 01       	movw	r22, r26
    55d0:	cf 01       	movw	r24, r30
    55d2:	08 95       	ret

000055d4 <__udivmodhi4>:
    55d4:	aa 1b       	sub	r26, r26
    55d6:	bb 1b       	sub	r27, r27
    55d8:	51 e1       	ldi	r21, 0x11	; 17
    55da:	07 c0       	rjmp	.+14     	; 0x55ea <__udivmodhi4_ep>

000055dc <__udivmodhi4_loop>:
    55dc:	aa 1f       	adc	r26, r26
    55de:	bb 1f       	adc	r27, r27
    55e0:	a6 17       	cp	r26, r22
    55e2:	b7 07       	cpc	r27, r23
    55e4:	10 f0       	brcs	.+4      	; 0x55ea <__udivmodhi4_ep>
    55e6:	a6 1b       	sub	r26, r22
    55e8:	b7 0b       	sbc	r27, r23

000055ea <__udivmodhi4_ep>:
    55ea:	88 1f       	adc	r24, r24
    55ec:	99 1f       	adc	r25, r25
    55ee:	5a 95       	dec	r21
    55f0:	a9 f7       	brne	.-22     	; 0x55dc <__udivmodhi4_loop>
    55f2:	80 95       	com	r24
    55f4:	90 95       	com	r25
    55f6:	bc 01       	movw	r22, r24
    55f8:	cd 01       	movw	r24, r26
    55fa:	08 95       	ret

000055fc <calloc>:
    55fc:	0f 93       	push	r16
    55fe:	1f 93       	push	r17
    5600:	cf 93       	push	r28
    5602:	df 93       	push	r29
    5604:	68 9f       	mul	r22, r24
    5606:	80 01       	movw	r16, r0
    5608:	69 9f       	mul	r22, r25
    560a:	10 0d       	add	r17, r0
    560c:	78 9f       	mul	r23, r24
    560e:	10 0d       	add	r17, r0
    5610:	11 24       	eor	r1, r1
    5612:	c8 01       	movw	r24, r16
    5614:	0e 94 1a 2b 	call	0x5634	; 0x5634 <malloc>
    5618:	ec 01       	movw	r28, r24
    561a:	00 97       	sbiw	r24, 0x00	; 0
    561c:	29 f0       	breq	.+10     	; 0x5628 <calloc+0x2c>
    561e:	60 e0       	ldi	r22, 0x00	; 0
    5620:	70 e0       	ldi	r23, 0x00	; 0
    5622:	a8 01       	movw	r20, r16
    5624:	0e 94 3d 2c 	call	0x587a	; 0x587a <memset>
    5628:	ce 01       	movw	r24, r28
    562a:	df 91       	pop	r29
    562c:	cf 91       	pop	r28
    562e:	1f 91       	pop	r17
    5630:	0f 91       	pop	r16
    5632:	08 95       	ret

00005634 <malloc>:
    5634:	cf 93       	push	r28
    5636:	df 93       	push	r29
    5638:	bc 01       	movw	r22, r24
    563a:	82 30       	cpi	r24, 0x02	; 2
    563c:	91 05       	cpc	r25, r1
    563e:	10 f4       	brcc	.+4      	; 0x5644 <malloc+0x10>
    5640:	62 e0       	ldi	r22, 0x02	; 2
    5642:	70 e0       	ldi	r23, 0x00	; 0
    5644:	a0 91 0a 0e 	lds	r26, 0x0E0A
    5648:	b0 91 0b 0e 	lds	r27, 0x0E0B
    564c:	ed 01       	movw	r28, r26
    564e:	e0 e0       	ldi	r30, 0x00	; 0
    5650:	f0 e0       	ldi	r31, 0x00	; 0
    5652:	40 e0       	ldi	r20, 0x00	; 0
    5654:	50 e0       	ldi	r21, 0x00	; 0
    5656:	21 c0       	rjmp	.+66     	; 0x569a <malloc+0x66>
    5658:	88 81       	ld	r24, Y
    565a:	99 81       	ldd	r25, Y+1	; 0x01
    565c:	86 17       	cp	r24, r22
    565e:	97 07       	cpc	r25, r23
    5660:	69 f4       	brne	.+26     	; 0x567c <malloc+0x48>
    5662:	8a 81       	ldd	r24, Y+2	; 0x02
    5664:	9b 81       	ldd	r25, Y+3	; 0x03
    5666:	30 97       	sbiw	r30, 0x00	; 0
    5668:	19 f0       	breq	.+6      	; 0x5670 <malloc+0x3c>
    566a:	93 83       	std	Z+3, r25	; 0x03
    566c:	82 83       	std	Z+2, r24	; 0x02
    566e:	04 c0       	rjmp	.+8      	; 0x5678 <malloc+0x44>
    5670:	90 93 0b 0e 	sts	0x0E0B, r25
    5674:	80 93 0a 0e 	sts	0x0E0A, r24
    5678:	fe 01       	movw	r30, r28
    567a:	34 c0       	rjmp	.+104    	; 0x56e4 <malloc+0xb0>
    567c:	68 17       	cp	r22, r24
    567e:	79 07       	cpc	r23, r25
    5680:	38 f4       	brcc	.+14     	; 0x5690 <malloc+0x5c>
    5682:	41 15       	cp	r20, r1
    5684:	51 05       	cpc	r21, r1
    5686:	19 f0       	breq	.+6      	; 0x568e <malloc+0x5a>
    5688:	84 17       	cp	r24, r20
    568a:	95 07       	cpc	r25, r21
    568c:	08 f4       	brcc	.+2      	; 0x5690 <malloc+0x5c>
    568e:	ac 01       	movw	r20, r24
    5690:	fe 01       	movw	r30, r28
    5692:	8a 81       	ldd	r24, Y+2	; 0x02
    5694:	9b 81       	ldd	r25, Y+3	; 0x03
    5696:	9c 01       	movw	r18, r24
    5698:	e9 01       	movw	r28, r18
    569a:	20 97       	sbiw	r28, 0x00	; 0
    569c:	e9 f6       	brne	.-70     	; 0x5658 <malloc+0x24>
    569e:	41 15       	cp	r20, r1
    56a0:	51 05       	cpc	r21, r1
    56a2:	a9 f1       	breq	.+106    	; 0x570e <malloc+0xda>
    56a4:	ca 01       	movw	r24, r20
    56a6:	86 1b       	sub	r24, r22
    56a8:	97 0b       	sbc	r25, r23
    56aa:	04 97       	sbiw	r24, 0x04	; 4
    56ac:	08 f4       	brcc	.+2      	; 0x56b0 <malloc+0x7c>
    56ae:	ba 01       	movw	r22, r20
    56b0:	e0 e0       	ldi	r30, 0x00	; 0
    56b2:	f0 e0       	ldi	r31, 0x00	; 0
    56b4:	2a c0       	rjmp	.+84     	; 0x570a <malloc+0xd6>
    56b6:	8d 91       	ld	r24, X+
    56b8:	9c 91       	ld	r25, X
    56ba:	11 97       	sbiw	r26, 0x01	; 1
    56bc:	84 17       	cp	r24, r20
    56be:	95 07       	cpc	r25, r21
    56c0:	f9 f4       	brne	.+62     	; 0x5700 <malloc+0xcc>
    56c2:	64 17       	cp	r22, r20
    56c4:	75 07       	cpc	r23, r21
    56c6:	81 f4       	brne	.+32     	; 0x56e8 <malloc+0xb4>
    56c8:	12 96       	adiw	r26, 0x02	; 2
    56ca:	8d 91       	ld	r24, X+
    56cc:	9c 91       	ld	r25, X
    56ce:	13 97       	sbiw	r26, 0x03	; 3
    56d0:	30 97       	sbiw	r30, 0x00	; 0
    56d2:	19 f0       	breq	.+6      	; 0x56da <malloc+0xa6>
    56d4:	93 83       	std	Z+3, r25	; 0x03
    56d6:	82 83       	std	Z+2, r24	; 0x02
    56d8:	04 c0       	rjmp	.+8      	; 0x56e2 <malloc+0xae>
    56da:	90 93 0b 0e 	sts	0x0E0B, r25
    56de:	80 93 0a 0e 	sts	0x0E0A, r24
    56e2:	fd 01       	movw	r30, r26
    56e4:	32 96       	adiw	r30, 0x02	; 2
    56e6:	4f c0       	rjmp	.+158    	; 0x5786 <malloc+0x152>
    56e8:	ca 01       	movw	r24, r20
    56ea:	86 1b       	sub	r24, r22
    56ec:	97 0b       	sbc	r25, r23
    56ee:	fd 01       	movw	r30, r26
    56f0:	e8 0f       	add	r30, r24
    56f2:	f9 1f       	adc	r31, r25
    56f4:	61 93       	st	Z+, r22
    56f6:	71 93       	st	Z+, r23
    56f8:	02 97       	sbiw	r24, 0x02	; 2
    56fa:	8d 93       	st	X+, r24
    56fc:	9c 93       	st	X, r25
    56fe:	43 c0       	rjmp	.+134    	; 0x5786 <malloc+0x152>
    5700:	fd 01       	movw	r30, r26
    5702:	82 81       	ldd	r24, Z+2	; 0x02
    5704:	93 81       	ldd	r25, Z+3	; 0x03
    5706:	9c 01       	movw	r18, r24
    5708:	d9 01       	movw	r26, r18
    570a:	10 97       	sbiw	r26, 0x00	; 0
    570c:	a1 f6       	brne	.-88     	; 0x56b6 <malloc+0x82>
    570e:	80 91 08 0e 	lds	r24, 0x0E08
    5712:	90 91 09 0e 	lds	r25, 0x0E09
    5716:	89 2b       	or	r24, r25
    5718:	41 f4       	brne	.+16     	; 0x572a <malloc+0xf6>
    571a:	80 91 9b 08 	lds	r24, 0x089B
    571e:	90 91 9c 08 	lds	r25, 0x089C
    5722:	90 93 09 0e 	sts	0x0E09, r25
    5726:	80 93 08 0e 	sts	0x0E08, r24
    572a:	40 91 9d 08 	lds	r20, 0x089D
    572e:	50 91 9e 08 	lds	r21, 0x089E
    5732:	41 15       	cp	r20, r1
    5734:	51 05       	cpc	r21, r1
    5736:	41 f4       	brne	.+16     	; 0x5748 <malloc+0x114>
    5738:	4d b7       	in	r20, 0x3d	; 61
    573a:	5e b7       	in	r21, 0x3e	; 62
    573c:	80 91 99 08 	lds	r24, 0x0899
    5740:	90 91 9a 08 	lds	r25, 0x089A
    5744:	48 1b       	sub	r20, r24
    5746:	59 0b       	sbc	r21, r25
    5748:	20 91 08 0e 	lds	r18, 0x0E08
    574c:	30 91 09 0e 	lds	r19, 0x0E09
    5750:	24 17       	cp	r18, r20
    5752:	35 07       	cpc	r19, r21
    5754:	b0 f4       	brcc	.+44     	; 0x5782 <malloc+0x14e>
    5756:	ca 01       	movw	r24, r20
    5758:	82 1b       	sub	r24, r18
    575a:	93 0b       	sbc	r25, r19
    575c:	86 17       	cp	r24, r22
    575e:	97 07       	cpc	r25, r23
    5760:	80 f0       	brcs	.+32     	; 0x5782 <malloc+0x14e>
    5762:	ab 01       	movw	r20, r22
    5764:	4e 5f       	subi	r20, 0xFE	; 254
    5766:	5f 4f       	sbci	r21, 0xFF	; 255
    5768:	84 17       	cp	r24, r20
    576a:	95 07       	cpc	r25, r21
    576c:	50 f0       	brcs	.+20     	; 0x5782 <malloc+0x14e>
    576e:	42 0f       	add	r20, r18
    5770:	53 1f       	adc	r21, r19
    5772:	50 93 09 0e 	sts	0x0E09, r21
    5776:	40 93 08 0e 	sts	0x0E08, r20
    577a:	f9 01       	movw	r30, r18
    577c:	61 93       	st	Z+, r22
    577e:	71 93       	st	Z+, r23
    5780:	02 c0       	rjmp	.+4      	; 0x5786 <malloc+0x152>
    5782:	e0 e0       	ldi	r30, 0x00	; 0
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	cf 01       	movw	r24, r30
    5788:	df 91       	pop	r29
    578a:	cf 91       	pop	r28
    578c:	08 95       	ret

0000578e <free>:
    578e:	cf 93       	push	r28
    5790:	df 93       	push	r29
    5792:	00 97       	sbiw	r24, 0x00	; 0
    5794:	09 f4       	brne	.+2      	; 0x5798 <free+0xa>
    5796:	50 c0       	rjmp	.+160    	; 0x5838 <free+0xaa>
    5798:	ec 01       	movw	r28, r24
    579a:	22 97       	sbiw	r28, 0x02	; 2
    579c:	1b 82       	std	Y+3, r1	; 0x03
    579e:	1a 82       	std	Y+2, r1	; 0x02
    57a0:	a0 91 0a 0e 	lds	r26, 0x0E0A
    57a4:	b0 91 0b 0e 	lds	r27, 0x0E0B
    57a8:	10 97       	sbiw	r26, 0x00	; 0
    57aa:	09 f1       	breq	.+66     	; 0x57ee <free+0x60>
    57ac:	40 e0       	ldi	r20, 0x00	; 0
    57ae:	50 e0       	ldi	r21, 0x00	; 0
    57b0:	ac 17       	cp	r26, r28
    57b2:	bd 07       	cpc	r27, r29
    57b4:	08 f1       	brcs	.+66     	; 0x57f8 <free+0x6a>
    57b6:	bb 83       	std	Y+3, r27	; 0x03
    57b8:	aa 83       	std	Y+2, r26	; 0x02
    57ba:	fe 01       	movw	r30, r28
    57bc:	21 91       	ld	r18, Z+
    57be:	31 91       	ld	r19, Z+
    57c0:	e2 0f       	add	r30, r18
    57c2:	f3 1f       	adc	r31, r19
    57c4:	ae 17       	cp	r26, r30
    57c6:	bf 07       	cpc	r27, r31
    57c8:	79 f4       	brne	.+30     	; 0x57e8 <free+0x5a>
    57ca:	8d 91       	ld	r24, X+
    57cc:	9c 91       	ld	r25, X
    57ce:	11 97       	sbiw	r26, 0x01	; 1
    57d0:	28 0f       	add	r18, r24
    57d2:	39 1f       	adc	r19, r25
    57d4:	2e 5f       	subi	r18, 0xFE	; 254
    57d6:	3f 4f       	sbci	r19, 0xFF	; 255
    57d8:	39 83       	std	Y+1, r19	; 0x01
    57da:	28 83       	st	Y, r18
    57dc:	12 96       	adiw	r26, 0x02	; 2
    57de:	8d 91       	ld	r24, X+
    57e0:	9c 91       	ld	r25, X
    57e2:	13 97       	sbiw	r26, 0x03	; 3
    57e4:	9b 83       	std	Y+3, r25	; 0x03
    57e6:	8a 83       	std	Y+2, r24	; 0x02
    57e8:	41 15       	cp	r20, r1
    57ea:	51 05       	cpc	r21, r1
    57ec:	71 f4       	brne	.+28     	; 0x580a <free+0x7c>
    57ee:	d0 93 0b 0e 	sts	0x0E0B, r29
    57f2:	c0 93 0a 0e 	sts	0x0E0A, r28
    57f6:	20 c0       	rjmp	.+64     	; 0x5838 <free+0xaa>
    57f8:	12 96       	adiw	r26, 0x02	; 2
    57fa:	8d 91       	ld	r24, X+
    57fc:	9c 91       	ld	r25, X
    57fe:	13 97       	sbiw	r26, 0x03	; 3
    5800:	ad 01       	movw	r20, r26
    5802:	00 97       	sbiw	r24, 0x00	; 0
    5804:	11 f0       	breq	.+4      	; 0x580a <free+0x7c>
    5806:	dc 01       	movw	r26, r24
    5808:	d3 cf       	rjmp	.-90     	; 0x57b0 <free+0x22>
    580a:	fa 01       	movw	r30, r20
    580c:	d3 83       	std	Z+3, r29	; 0x03
    580e:	c2 83       	std	Z+2, r28	; 0x02
    5810:	21 91       	ld	r18, Z+
    5812:	31 91       	ld	r19, Z+
    5814:	e2 0f       	add	r30, r18
    5816:	f3 1f       	adc	r31, r19
    5818:	ce 17       	cp	r28, r30
    581a:	df 07       	cpc	r29, r31
    581c:	69 f4       	brne	.+26     	; 0x5838 <free+0xaa>
    581e:	88 81       	ld	r24, Y
    5820:	99 81       	ldd	r25, Y+1	; 0x01
    5822:	28 0f       	add	r18, r24
    5824:	39 1f       	adc	r19, r25
    5826:	2e 5f       	subi	r18, 0xFE	; 254
    5828:	3f 4f       	sbci	r19, 0xFF	; 255
    582a:	fa 01       	movw	r30, r20
    582c:	31 83       	std	Z+1, r19	; 0x01
    582e:	20 83       	st	Z, r18
    5830:	8a 81       	ldd	r24, Y+2	; 0x02
    5832:	9b 81       	ldd	r25, Y+3	; 0x03
    5834:	93 83       	std	Z+3, r25	; 0x03
    5836:	82 83       	std	Z+2, r24	; 0x02
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	08 95       	ret

0000583e <atoi>:
    583e:	fc 01       	movw	r30, r24
    5840:	88 27       	eor	r24, r24
    5842:	99 27       	eor	r25, r25
    5844:	e8 94       	clt
    5846:	21 91       	ld	r18, Z+
    5848:	20 32       	cpi	r18, 0x20	; 32
    584a:	e9 f3       	breq	.-6      	; 0x5846 <atoi+0x8>
    584c:	29 30       	cpi	r18, 0x09	; 9
    584e:	10 f0       	brcs	.+4      	; 0x5854 <atoi+0x16>
    5850:	2e 30       	cpi	r18, 0x0E	; 14
    5852:	c8 f3       	brcs	.-14     	; 0x5846 <atoi+0x8>
    5854:	2b 32       	cpi	r18, 0x2B	; 43
    5856:	41 f0       	breq	.+16     	; 0x5868 <atoi+0x2a>
    5858:	2d 32       	cpi	r18, 0x2D	; 45
    585a:	39 f4       	brne	.+14     	; 0x586a <atoi+0x2c>
    585c:	68 94       	set
    585e:	04 c0       	rjmp	.+8      	; 0x5868 <atoi+0x2a>
    5860:	0e 94 83 2c 	call	0x5906	; 0x5906 <__mulhi_const_10>
    5864:	82 0f       	add	r24, r18
    5866:	91 1d       	adc	r25, r1
    5868:	21 91       	ld	r18, Z+
    586a:	20 53       	subi	r18, 0x30	; 48
    586c:	2a 30       	cpi	r18, 0x0A	; 10
    586e:	c0 f3       	brcs	.-16     	; 0x5860 <atoi+0x22>
    5870:	1e f4       	brtc	.+6      	; 0x5878 <atoi+0x3a>
    5872:	90 95       	com	r25
    5874:	81 95       	neg	r24
    5876:	9f 4f       	sbci	r25, 0xFF	; 255
    5878:	08 95       	ret

0000587a <memset>:
    587a:	dc 01       	movw	r26, r24
    587c:	01 c0       	rjmp	.+2      	; 0x5880 <memset+0x6>
    587e:	6d 93       	st	X+, r22
    5880:	41 50       	subi	r20, 0x01	; 1
    5882:	50 40       	sbci	r21, 0x00	; 0
    5884:	e0 f7       	brcc	.-8      	; 0x587e <memset+0x4>
    5886:	08 95       	ret

00005888 <strcmp>:
    5888:	fb 01       	movw	r30, r22
    588a:	dc 01       	movw	r26, r24
    588c:	8d 91       	ld	r24, X+
    588e:	01 90       	ld	r0, Z+
    5890:	80 19       	sub	r24, r0
    5892:	01 10       	cpse	r0, r1
    5894:	d9 f3       	breq	.-10     	; 0x588c <strcmp+0x4>
    5896:	99 0b       	sbc	r25, r25
    5898:	08 95       	ret

0000589a <strcpy>:
    589a:	fb 01       	movw	r30, r22
    589c:	dc 01       	movw	r26, r24
    589e:	01 90       	ld	r0, Z+
    58a0:	0d 92       	st	X+, r0
    58a2:	00 20       	and	r0, r0
    58a4:	e1 f7       	brne	.-8      	; 0x589e <strcpy+0x4>
    58a6:	08 95       	ret

000058a8 <strncmp>:
    58a8:	fb 01       	movw	r30, r22
    58aa:	dc 01       	movw	r26, r24
    58ac:	41 50       	subi	r20, 0x01	; 1
    58ae:	50 40       	sbci	r21, 0x00	; 0
    58b0:	30 f0       	brcs	.+12     	; 0x58be <strncmp+0x16>
    58b2:	8d 91       	ld	r24, X+
    58b4:	01 90       	ld	r0, Z+
    58b6:	80 19       	sub	r24, r0
    58b8:	19 f4       	brne	.+6      	; 0x58c0 <strncmp+0x18>
    58ba:	00 20       	and	r0, r0
    58bc:	b9 f7       	brne	.-18     	; 0x58ac <strncmp+0x4>
    58be:	88 1b       	sub	r24, r24
    58c0:	99 0b       	sbc	r25, r25
    58c2:	08 95       	ret

000058c4 <itoa>:
    58c4:	fb 01       	movw	r30, r22
    58c6:	9f 01       	movw	r18, r30
    58c8:	e8 94       	clt
    58ca:	42 30       	cpi	r20, 0x02	; 2
    58cc:	c4 f0       	brlt	.+48     	; 0x58fe <itoa+0x3a>
    58ce:	45 32       	cpi	r20, 0x25	; 37
    58d0:	b4 f4       	brge	.+44     	; 0x58fe <itoa+0x3a>
    58d2:	4a 30       	cpi	r20, 0x0A	; 10
    58d4:	29 f4       	brne	.+10     	; 0x58e0 <itoa+0x1c>
    58d6:	97 fb       	bst	r25, 7
    58d8:	1e f4       	brtc	.+6      	; 0x58e0 <itoa+0x1c>
    58da:	90 95       	com	r25
    58dc:	81 95       	neg	r24
    58de:	9f 4f       	sbci	r25, 0xFF	; 255
    58e0:	64 2f       	mov	r22, r20
    58e2:	77 27       	eor	r23, r23
    58e4:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <__udivmodhi4>
    58e8:	80 5d       	subi	r24, 0xD0	; 208
    58ea:	8a 33       	cpi	r24, 0x3A	; 58
    58ec:	0c f0       	brlt	.+2      	; 0x58f0 <itoa+0x2c>
    58ee:	89 5d       	subi	r24, 0xD9	; 217
    58f0:	81 93       	st	Z+, r24
    58f2:	cb 01       	movw	r24, r22
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	a1 f7       	brne	.-24     	; 0x58e0 <itoa+0x1c>
    58f8:	16 f4       	brtc	.+4      	; 0x58fe <itoa+0x3a>
    58fa:	5d e2       	ldi	r21, 0x2D	; 45
    58fc:	51 93       	st	Z+, r21
    58fe:	10 82       	st	Z, r1
    5900:	c9 01       	movw	r24, r18
    5902:	0c 94 d8 2e 	jmp	0x5db0	; 0x5db0 <strrev>

00005906 <__mulhi_const_10>:
    5906:	7a e0       	ldi	r23, 0x0A	; 10
    5908:	97 9f       	mul	r25, r23
    590a:	90 2d       	mov	r25, r0
    590c:	87 9f       	mul	r24, r23
    590e:	80 2d       	mov	r24, r0
    5910:	91 0d       	add	r25, r1
    5912:	11 24       	eor	r1, r1
    5914:	08 95       	ret

00005916 <sprintf>:
    5916:	0f 93       	push	r16
    5918:	1f 93       	push	r17
    591a:	df 93       	push	r29
    591c:	cf 93       	push	r28
    591e:	cd b7       	in	r28, 0x3d	; 61
    5920:	de b7       	in	r29, 0x3e	; 62
    5922:	2e 97       	sbiw	r28, 0x0e	; 14
    5924:	0f b6       	in	r0, 0x3f	; 63
    5926:	f8 94       	cli
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	cd bf       	out	0x3d, r28	; 61
    592e:	0d 89       	ldd	r16, Y+21	; 0x15
    5930:	1e 89       	ldd	r17, Y+22	; 0x16
    5932:	86 e0       	ldi	r24, 0x06	; 6
    5934:	8c 83       	std	Y+4, r24	; 0x04
    5936:	1a 83       	std	Y+2, r17	; 0x02
    5938:	09 83       	std	Y+1, r16	; 0x01
    593a:	8f ef       	ldi	r24, 0xFF	; 255
    593c:	9f e7       	ldi	r25, 0x7F	; 127
    593e:	9e 83       	std	Y+6, r25	; 0x06
    5940:	8d 83       	std	Y+5, r24	; 0x05
    5942:	9e 01       	movw	r18, r28
    5944:	27 5e       	subi	r18, 0xE7	; 231
    5946:	3f 4f       	sbci	r19, 0xFF	; 255
    5948:	ce 01       	movw	r24, r28
    594a:	01 96       	adiw	r24, 0x01	; 1
    594c:	6f 89       	ldd	r22, Y+23	; 0x17
    594e:	78 8d       	ldd	r23, Y+24	; 0x18
    5950:	a9 01       	movw	r20, r18
    5952:	0e 94 bc 2c 	call	0x5978	; 0x5978 <vfprintf>
    5956:	2f 81       	ldd	r18, Y+7	; 0x07
    5958:	38 85       	ldd	r19, Y+8	; 0x08
    595a:	02 0f       	add	r16, r18
    595c:	13 1f       	adc	r17, r19
    595e:	f8 01       	movw	r30, r16
    5960:	10 82       	st	Z, r1
    5962:	2e 96       	adiw	r28, 0x0e	; 14
    5964:	0f b6       	in	r0, 0x3f	; 63
    5966:	f8 94       	cli
    5968:	de bf       	out	0x3e, r29	; 62
    596a:	0f be       	out	0x3f, r0	; 63
    596c:	cd bf       	out	0x3d, r28	; 61
    596e:	cf 91       	pop	r28
    5970:	df 91       	pop	r29
    5972:	1f 91       	pop	r17
    5974:	0f 91       	pop	r16
    5976:	08 95       	ret

00005978 <vfprintf>:
    5978:	2f 92       	push	r2
    597a:	3f 92       	push	r3
    597c:	4f 92       	push	r4
    597e:	5f 92       	push	r5
    5980:	6f 92       	push	r6
    5982:	7f 92       	push	r7
    5984:	8f 92       	push	r8
    5986:	9f 92       	push	r9
    5988:	af 92       	push	r10
    598a:	bf 92       	push	r11
    598c:	cf 92       	push	r12
    598e:	df 92       	push	r13
    5990:	ef 92       	push	r14
    5992:	ff 92       	push	r15
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	df 93       	push	r29
    599a:	cf 93       	push	r28
    599c:	cd b7       	in	r28, 0x3d	; 61
    599e:	de b7       	in	r29, 0x3e	; 62
    59a0:	2b 97       	sbiw	r28, 0x0b	; 11
    59a2:	0f b6       	in	r0, 0x3f	; 63
    59a4:	f8 94       	cli
    59a6:	de bf       	out	0x3e, r29	; 62
    59a8:	0f be       	out	0x3f, r0	; 63
    59aa:	cd bf       	out	0x3d, r28	; 61
    59ac:	3c 01       	movw	r6, r24
    59ae:	2b 01       	movw	r4, r22
    59b0:	5a 01       	movw	r10, r20
    59b2:	fc 01       	movw	r30, r24
    59b4:	17 82       	std	Z+7, r1	; 0x07
    59b6:	16 82       	std	Z+6, r1	; 0x06
    59b8:	83 81       	ldd	r24, Z+3	; 0x03
    59ba:	81 fd       	sbrc	r24, 1
    59bc:	03 c0       	rjmp	.+6      	; 0x59c4 <vfprintf+0x4c>
    59be:	6f ef       	ldi	r22, 0xFF	; 255
    59c0:	7f ef       	ldi	r23, 0xFF	; 255
    59c2:	c6 c1       	rjmp	.+908    	; 0x5d50 <vfprintf+0x3d8>
    59c4:	9a e0       	ldi	r25, 0x0A	; 10
    59c6:	89 2e       	mov	r8, r25
    59c8:	1e 01       	movw	r2, r28
    59ca:	08 94       	sec
    59cc:	21 1c       	adc	r2, r1
    59ce:	31 1c       	adc	r3, r1
    59d0:	f3 01       	movw	r30, r6
    59d2:	23 81       	ldd	r18, Z+3	; 0x03
    59d4:	f2 01       	movw	r30, r4
    59d6:	23 fd       	sbrc	r18, 3
    59d8:	85 91       	lpm	r24, Z+
    59da:	23 ff       	sbrs	r18, 3
    59dc:	81 91       	ld	r24, Z+
    59de:	2f 01       	movw	r4, r30
    59e0:	88 23       	and	r24, r24
    59e2:	09 f4       	brne	.+2      	; 0x59e6 <vfprintf+0x6e>
    59e4:	b2 c1       	rjmp	.+868    	; 0x5d4a <vfprintf+0x3d2>
    59e6:	85 32       	cpi	r24, 0x25	; 37
    59e8:	39 f4       	brne	.+14     	; 0x59f8 <vfprintf+0x80>
    59ea:	23 fd       	sbrc	r18, 3
    59ec:	85 91       	lpm	r24, Z+
    59ee:	23 ff       	sbrs	r18, 3
    59f0:	81 91       	ld	r24, Z+
    59f2:	2f 01       	movw	r4, r30
    59f4:	85 32       	cpi	r24, 0x25	; 37
    59f6:	29 f4       	brne	.+10     	; 0x5a02 <vfprintf+0x8a>
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	b3 01       	movw	r22, r6
    59fc:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5a00:	e7 cf       	rjmp	.-50     	; 0x59d0 <vfprintf+0x58>
    5a02:	98 2f       	mov	r25, r24
    5a04:	ff 24       	eor	r15, r15
    5a06:	ee 24       	eor	r14, r14
    5a08:	99 24       	eor	r9, r9
    5a0a:	ff e1       	ldi	r31, 0x1F	; 31
    5a0c:	ff 15       	cp	r31, r15
    5a0e:	d0 f0       	brcs	.+52     	; 0x5a44 <vfprintf+0xcc>
    5a10:	9b 32       	cpi	r25, 0x2B	; 43
    5a12:	69 f0       	breq	.+26     	; 0x5a2e <vfprintf+0xb6>
    5a14:	9c 32       	cpi	r25, 0x2C	; 44
    5a16:	28 f4       	brcc	.+10     	; 0x5a22 <vfprintf+0xaa>
    5a18:	90 32       	cpi	r25, 0x20	; 32
    5a1a:	59 f0       	breq	.+22     	; 0x5a32 <vfprintf+0xba>
    5a1c:	93 32       	cpi	r25, 0x23	; 35
    5a1e:	91 f4       	brne	.+36     	; 0x5a44 <vfprintf+0xcc>
    5a20:	0e c0       	rjmp	.+28     	; 0x5a3e <vfprintf+0xc6>
    5a22:	9d 32       	cpi	r25, 0x2D	; 45
    5a24:	49 f0       	breq	.+18     	; 0x5a38 <vfprintf+0xc0>
    5a26:	90 33       	cpi	r25, 0x30	; 48
    5a28:	69 f4       	brne	.+26     	; 0x5a44 <vfprintf+0xcc>
    5a2a:	41 e0       	ldi	r20, 0x01	; 1
    5a2c:	24 c0       	rjmp	.+72     	; 0x5a76 <vfprintf+0xfe>
    5a2e:	52 e0       	ldi	r21, 0x02	; 2
    5a30:	f5 2a       	or	r15, r21
    5a32:	84 e0       	ldi	r24, 0x04	; 4
    5a34:	f8 2a       	or	r15, r24
    5a36:	28 c0       	rjmp	.+80     	; 0x5a88 <vfprintf+0x110>
    5a38:	98 e0       	ldi	r25, 0x08	; 8
    5a3a:	f9 2a       	or	r15, r25
    5a3c:	25 c0       	rjmp	.+74     	; 0x5a88 <vfprintf+0x110>
    5a3e:	e0 e1       	ldi	r30, 0x10	; 16
    5a40:	fe 2a       	or	r15, r30
    5a42:	22 c0       	rjmp	.+68     	; 0x5a88 <vfprintf+0x110>
    5a44:	f7 fc       	sbrc	r15, 7
    5a46:	29 c0       	rjmp	.+82     	; 0x5a9a <vfprintf+0x122>
    5a48:	89 2f       	mov	r24, r25
    5a4a:	80 53       	subi	r24, 0x30	; 48
    5a4c:	8a 30       	cpi	r24, 0x0A	; 10
    5a4e:	70 f4       	brcc	.+28     	; 0x5a6c <vfprintf+0xf4>
    5a50:	f6 fe       	sbrs	r15, 6
    5a52:	05 c0       	rjmp	.+10     	; 0x5a5e <vfprintf+0xe6>
    5a54:	98 9c       	mul	r9, r8
    5a56:	90 2c       	mov	r9, r0
    5a58:	11 24       	eor	r1, r1
    5a5a:	98 0e       	add	r9, r24
    5a5c:	15 c0       	rjmp	.+42     	; 0x5a88 <vfprintf+0x110>
    5a5e:	e8 9c       	mul	r14, r8
    5a60:	e0 2c       	mov	r14, r0
    5a62:	11 24       	eor	r1, r1
    5a64:	e8 0e       	add	r14, r24
    5a66:	f0 e2       	ldi	r31, 0x20	; 32
    5a68:	ff 2a       	or	r15, r31
    5a6a:	0e c0       	rjmp	.+28     	; 0x5a88 <vfprintf+0x110>
    5a6c:	9e 32       	cpi	r25, 0x2E	; 46
    5a6e:	29 f4       	brne	.+10     	; 0x5a7a <vfprintf+0x102>
    5a70:	f6 fc       	sbrc	r15, 6
    5a72:	6b c1       	rjmp	.+726    	; 0x5d4a <vfprintf+0x3d2>
    5a74:	40 e4       	ldi	r20, 0x40	; 64
    5a76:	f4 2a       	or	r15, r20
    5a78:	07 c0       	rjmp	.+14     	; 0x5a88 <vfprintf+0x110>
    5a7a:	9c 36       	cpi	r25, 0x6C	; 108
    5a7c:	19 f4       	brne	.+6      	; 0x5a84 <vfprintf+0x10c>
    5a7e:	50 e8       	ldi	r21, 0x80	; 128
    5a80:	f5 2a       	or	r15, r21
    5a82:	02 c0       	rjmp	.+4      	; 0x5a88 <vfprintf+0x110>
    5a84:	98 36       	cpi	r25, 0x68	; 104
    5a86:	49 f4       	brne	.+18     	; 0x5a9a <vfprintf+0x122>
    5a88:	f2 01       	movw	r30, r4
    5a8a:	23 fd       	sbrc	r18, 3
    5a8c:	95 91       	lpm	r25, Z+
    5a8e:	23 ff       	sbrs	r18, 3
    5a90:	91 91       	ld	r25, Z+
    5a92:	2f 01       	movw	r4, r30
    5a94:	99 23       	and	r25, r25
    5a96:	09 f0       	breq	.+2      	; 0x5a9a <vfprintf+0x122>
    5a98:	b8 cf       	rjmp	.-144    	; 0x5a0a <vfprintf+0x92>
    5a9a:	89 2f       	mov	r24, r25
    5a9c:	85 54       	subi	r24, 0x45	; 69
    5a9e:	83 30       	cpi	r24, 0x03	; 3
    5aa0:	18 f0       	brcs	.+6      	; 0x5aa8 <vfprintf+0x130>
    5aa2:	80 52       	subi	r24, 0x20	; 32
    5aa4:	83 30       	cpi	r24, 0x03	; 3
    5aa6:	38 f4       	brcc	.+14     	; 0x5ab6 <vfprintf+0x13e>
    5aa8:	44 e0       	ldi	r20, 0x04	; 4
    5aaa:	50 e0       	ldi	r21, 0x00	; 0
    5aac:	a4 0e       	add	r10, r20
    5aae:	b5 1e       	adc	r11, r21
    5ab0:	5f e3       	ldi	r21, 0x3F	; 63
    5ab2:	59 83       	std	Y+1, r21	; 0x01
    5ab4:	0f c0       	rjmp	.+30     	; 0x5ad4 <vfprintf+0x15c>
    5ab6:	93 36       	cpi	r25, 0x63	; 99
    5ab8:	31 f0       	breq	.+12     	; 0x5ac6 <vfprintf+0x14e>
    5aba:	93 37       	cpi	r25, 0x73	; 115
    5abc:	79 f0       	breq	.+30     	; 0x5adc <vfprintf+0x164>
    5abe:	93 35       	cpi	r25, 0x53	; 83
    5ac0:	09 f0       	breq	.+2      	; 0x5ac4 <vfprintf+0x14c>
    5ac2:	56 c0       	rjmp	.+172    	; 0x5b70 <vfprintf+0x1f8>
    5ac4:	20 c0       	rjmp	.+64     	; 0x5b06 <vfprintf+0x18e>
    5ac6:	f5 01       	movw	r30, r10
    5ac8:	80 81       	ld	r24, Z
    5aca:	89 83       	std	Y+1, r24	; 0x01
    5acc:	42 e0       	ldi	r20, 0x02	; 2
    5ace:	50 e0       	ldi	r21, 0x00	; 0
    5ad0:	a4 0e       	add	r10, r20
    5ad2:	b5 1e       	adc	r11, r21
    5ad4:	61 01       	movw	r12, r2
    5ad6:	01 e0       	ldi	r16, 0x01	; 1
    5ad8:	10 e0       	ldi	r17, 0x00	; 0
    5ada:	12 c0       	rjmp	.+36     	; 0x5b00 <vfprintf+0x188>
    5adc:	f5 01       	movw	r30, r10
    5ade:	c0 80       	ld	r12, Z
    5ae0:	d1 80       	ldd	r13, Z+1	; 0x01
    5ae2:	f6 fc       	sbrc	r15, 6
    5ae4:	03 c0       	rjmp	.+6      	; 0x5aec <vfprintf+0x174>
    5ae6:	6f ef       	ldi	r22, 0xFF	; 255
    5ae8:	7f ef       	ldi	r23, 0xFF	; 255
    5aea:	02 c0       	rjmp	.+4      	; 0x5af0 <vfprintf+0x178>
    5aec:	69 2d       	mov	r22, r9
    5aee:	70 e0       	ldi	r23, 0x00	; 0
    5af0:	42 e0       	ldi	r20, 0x02	; 2
    5af2:	50 e0       	ldi	r21, 0x00	; 0
    5af4:	a4 0e       	add	r10, r20
    5af6:	b5 1e       	adc	r11, r21
    5af8:	c6 01       	movw	r24, r12
    5afa:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <strnlen>
    5afe:	8c 01       	movw	r16, r24
    5b00:	5f e7       	ldi	r21, 0x7F	; 127
    5b02:	f5 22       	and	r15, r21
    5b04:	14 c0       	rjmp	.+40     	; 0x5b2e <vfprintf+0x1b6>
    5b06:	f5 01       	movw	r30, r10
    5b08:	c0 80       	ld	r12, Z
    5b0a:	d1 80       	ldd	r13, Z+1	; 0x01
    5b0c:	f6 fc       	sbrc	r15, 6
    5b0e:	03 c0       	rjmp	.+6      	; 0x5b16 <vfprintf+0x19e>
    5b10:	6f ef       	ldi	r22, 0xFF	; 255
    5b12:	7f ef       	ldi	r23, 0xFF	; 255
    5b14:	02 c0       	rjmp	.+4      	; 0x5b1a <vfprintf+0x1a2>
    5b16:	69 2d       	mov	r22, r9
    5b18:	70 e0       	ldi	r23, 0x00	; 0
    5b1a:	42 e0       	ldi	r20, 0x02	; 2
    5b1c:	50 e0       	ldi	r21, 0x00	; 0
    5b1e:	a4 0e       	add	r10, r20
    5b20:	b5 1e       	adc	r11, r21
    5b22:	c6 01       	movw	r24, r12
    5b24:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <strnlen_P>
    5b28:	8c 01       	movw	r16, r24
    5b2a:	50 e8       	ldi	r21, 0x80	; 128
    5b2c:	f5 2a       	or	r15, r21
    5b2e:	f3 fe       	sbrs	r15, 3
    5b30:	07 c0       	rjmp	.+14     	; 0x5b40 <vfprintf+0x1c8>
    5b32:	1a c0       	rjmp	.+52     	; 0x5b68 <vfprintf+0x1f0>
    5b34:	80 e2       	ldi	r24, 0x20	; 32
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	b3 01       	movw	r22, r6
    5b3a:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5b3e:	ea 94       	dec	r14
    5b40:	8e 2d       	mov	r24, r14
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	08 17       	cp	r16, r24
    5b46:	19 07       	cpc	r17, r25
    5b48:	a8 f3       	brcs	.-22     	; 0x5b34 <vfprintf+0x1bc>
    5b4a:	0e c0       	rjmp	.+28     	; 0x5b68 <vfprintf+0x1f0>
    5b4c:	f6 01       	movw	r30, r12
    5b4e:	f7 fc       	sbrc	r15, 7
    5b50:	85 91       	lpm	r24, Z+
    5b52:	f7 fe       	sbrs	r15, 7
    5b54:	81 91       	ld	r24, Z+
    5b56:	6f 01       	movw	r12, r30
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	b3 01       	movw	r22, r6
    5b5c:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5b60:	e1 10       	cpse	r14, r1
    5b62:	ea 94       	dec	r14
    5b64:	01 50       	subi	r16, 0x01	; 1
    5b66:	10 40       	sbci	r17, 0x00	; 0
    5b68:	01 15       	cp	r16, r1
    5b6a:	11 05       	cpc	r17, r1
    5b6c:	79 f7       	brne	.-34     	; 0x5b4c <vfprintf+0x1d4>
    5b6e:	ea c0       	rjmp	.+468    	; 0x5d44 <vfprintf+0x3cc>
    5b70:	94 36       	cpi	r25, 0x64	; 100
    5b72:	11 f0       	breq	.+4      	; 0x5b78 <vfprintf+0x200>
    5b74:	99 36       	cpi	r25, 0x69	; 105
    5b76:	69 f5       	brne	.+90     	; 0x5bd2 <vfprintf+0x25a>
    5b78:	f7 fe       	sbrs	r15, 7
    5b7a:	08 c0       	rjmp	.+16     	; 0x5b8c <vfprintf+0x214>
    5b7c:	f5 01       	movw	r30, r10
    5b7e:	20 81       	ld	r18, Z
    5b80:	31 81       	ldd	r19, Z+1	; 0x01
    5b82:	42 81       	ldd	r20, Z+2	; 0x02
    5b84:	53 81       	ldd	r21, Z+3	; 0x03
    5b86:	84 e0       	ldi	r24, 0x04	; 4
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	0a c0       	rjmp	.+20     	; 0x5ba0 <vfprintf+0x228>
    5b8c:	f5 01       	movw	r30, r10
    5b8e:	80 81       	ld	r24, Z
    5b90:	91 81       	ldd	r25, Z+1	; 0x01
    5b92:	9c 01       	movw	r18, r24
    5b94:	44 27       	eor	r20, r20
    5b96:	37 fd       	sbrc	r19, 7
    5b98:	40 95       	com	r20
    5b9a:	54 2f       	mov	r21, r20
    5b9c:	82 e0       	ldi	r24, 0x02	; 2
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	a8 0e       	add	r10, r24
    5ba2:	b9 1e       	adc	r11, r25
    5ba4:	9f e6       	ldi	r25, 0x6F	; 111
    5ba6:	f9 22       	and	r15, r25
    5ba8:	57 ff       	sbrs	r21, 7
    5baa:	09 c0       	rjmp	.+18     	; 0x5bbe <vfprintf+0x246>
    5bac:	50 95       	com	r21
    5bae:	40 95       	com	r20
    5bb0:	30 95       	com	r19
    5bb2:	21 95       	neg	r18
    5bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb6:	4f 4f       	sbci	r20, 0xFF	; 255
    5bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bba:	e0 e8       	ldi	r30, 0x80	; 128
    5bbc:	fe 2a       	or	r15, r30
    5bbe:	ca 01       	movw	r24, r20
    5bc0:	b9 01       	movw	r22, r18
    5bc2:	a1 01       	movw	r20, r2
    5bc4:	2a e0       	ldi	r18, 0x0A	; 10
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <__ultoa_invert>
    5bcc:	d8 2e       	mov	r13, r24
    5bce:	d2 18       	sub	r13, r2
    5bd0:	40 c0       	rjmp	.+128    	; 0x5c52 <vfprintf+0x2da>
    5bd2:	95 37       	cpi	r25, 0x75	; 117
    5bd4:	29 f4       	brne	.+10     	; 0x5be0 <vfprintf+0x268>
    5bd6:	1f 2d       	mov	r17, r15
    5bd8:	1f 7e       	andi	r17, 0xEF	; 239
    5bda:	2a e0       	ldi	r18, 0x0A	; 10
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	1d c0       	rjmp	.+58     	; 0x5c1a <vfprintf+0x2a2>
    5be0:	1f 2d       	mov	r17, r15
    5be2:	19 7f       	andi	r17, 0xF9	; 249
    5be4:	9f 36       	cpi	r25, 0x6F	; 111
    5be6:	61 f0       	breq	.+24     	; 0x5c00 <vfprintf+0x288>
    5be8:	90 37       	cpi	r25, 0x70	; 112
    5bea:	20 f4       	brcc	.+8      	; 0x5bf4 <vfprintf+0x27c>
    5bec:	98 35       	cpi	r25, 0x58	; 88
    5bee:	09 f0       	breq	.+2      	; 0x5bf2 <vfprintf+0x27a>
    5bf0:	ac c0       	rjmp	.+344    	; 0x5d4a <vfprintf+0x3d2>
    5bf2:	0f c0       	rjmp	.+30     	; 0x5c12 <vfprintf+0x29a>
    5bf4:	90 37       	cpi	r25, 0x70	; 112
    5bf6:	39 f0       	breq	.+14     	; 0x5c06 <vfprintf+0x28e>
    5bf8:	98 37       	cpi	r25, 0x78	; 120
    5bfa:	09 f0       	breq	.+2      	; 0x5bfe <vfprintf+0x286>
    5bfc:	a6 c0       	rjmp	.+332    	; 0x5d4a <vfprintf+0x3d2>
    5bfe:	04 c0       	rjmp	.+8      	; 0x5c08 <vfprintf+0x290>
    5c00:	28 e0       	ldi	r18, 0x08	; 8
    5c02:	30 e0       	ldi	r19, 0x00	; 0
    5c04:	0a c0       	rjmp	.+20     	; 0x5c1a <vfprintf+0x2a2>
    5c06:	10 61       	ori	r17, 0x10	; 16
    5c08:	14 fd       	sbrc	r17, 4
    5c0a:	14 60       	ori	r17, 0x04	; 4
    5c0c:	20 e1       	ldi	r18, 0x10	; 16
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	04 c0       	rjmp	.+8      	; 0x5c1a <vfprintf+0x2a2>
    5c12:	14 fd       	sbrc	r17, 4
    5c14:	16 60       	ori	r17, 0x06	; 6
    5c16:	20 e1       	ldi	r18, 0x10	; 16
    5c18:	32 e0       	ldi	r19, 0x02	; 2
    5c1a:	17 ff       	sbrs	r17, 7
    5c1c:	08 c0       	rjmp	.+16     	; 0x5c2e <vfprintf+0x2b6>
    5c1e:	f5 01       	movw	r30, r10
    5c20:	60 81       	ld	r22, Z
    5c22:	71 81       	ldd	r23, Z+1	; 0x01
    5c24:	82 81       	ldd	r24, Z+2	; 0x02
    5c26:	93 81       	ldd	r25, Z+3	; 0x03
    5c28:	44 e0       	ldi	r20, 0x04	; 4
    5c2a:	50 e0       	ldi	r21, 0x00	; 0
    5c2c:	08 c0       	rjmp	.+16     	; 0x5c3e <vfprintf+0x2c6>
    5c2e:	f5 01       	movw	r30, r10
    5c30:	80 81       	ld	r24, Z
    5c32:	91 81       	ldd	r25, Z+1	; 0x01
    5c34:	bc 01       	movw	r22, r24
    5c36:	80 e0       	ldi	r24, 0x00	; 0
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	42 e0       	ldi	r20, 0x02	; 2
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	a4 0e       	add	r10, r20
    5c40:	b5 1e       	adc	r11, r21
    5c42:	a1 01       	movw	r20, r2
    5c44:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <__ultoa_invert>
    5c48:	d8 2e       	mov	r13, r24
    5c4a:	d2 18       	sub	r13, r2
    5c4c:	8f e7       	ldi	r24, 0x7F	; 127
    5c4e:	f8 2e       	mov	r15, r24
    5c50:	f1 22       	and	r15, r17
    5c52:	f6 fe       	sbrs	r15, 6
    5c54:	0b c0       	rjmp	.+22     	; 0x5c6c <vfprintf+0x2f4>
    5c56:	5e ef       	ldi	r21, 0xFE	; 254
    5c58:	f5 22       	and	r15, r21
    5c5a:	d9 14       	cp	r13, r9
    5c5c:	38 f4       	brcc	.+14     	; 0x5c6c <vfprintf+0x2f4>
    5c5e:	f4 fe       	sbrs	r15, 4
    5c60:	07 c0       	rjmp	.+14     	; 0x5c70 <vfprintf+0x2f8>
    5c62:	f2 fc       	sbrc	r15, 2
    5c64:	05 c0       	rjmp	.+10     	; 0x5c70 <vfprintf+0x2f8>
    5c66:	8f ee       	ldi	r24, 0xEF	; 239
    5c68:	f8 22       	and	r15, r24
    5c6a:	02 c0       	rjmp	.+4      	; 0x5c70 <vfprintf+0x2f8>
    5c6c:	1d 2d       	mov	r17, r13
    5c6e:	01 c0       	rjmp	.+2      	; 0x5c72 <vfprintf+0x2fa>
    5c70:	19 2d       	mov	r17, r9
    5c72:	f4 fe       	sbrs	r15, 4
    5c74:	0d c0       	rjmp	.+26     	; 0x5c90 <vfprintf+0x318>
    5c76:	fe 01       	movw	r30, r28
    5c78:	ed 0d       	add	r30, r13
    5c7a:	f1 1d       	adc	r31, r1
    5c7c:	80 81       	ld	r24, Z
    5c7e:	80 33       	cpi	r24, 0x30	; 48
    5c80:	19 f4       	brne	.+6      	; 0x5c88 <vfprintf+0x310>
    5c82:	99 ee       	ldi	r25, 0xE9	; 233
    5c84:	f9 22       	and	r15, r25
    5c86:	08 c0       	rjmp	.+16     	; 0x5c98 <vfprintf+0x320>
    5c88:	1f 5f       	subi	r17, 0xFF	; 255
    5c8a:	f2 fe       	sbrs	r15, 2
    5c8c:	05 c0       	rjmp	.+10     	; 0x5c98 <vfprintf+0x320>
    5c8e:	03 c0       	rjmp	.+6      	; 0x5c96 <vfprintf+0x31e>
    5c90:	8f 2d       	mov	r24, r15
    5c92:	86 78       	andi	r24, 0x86	; 134
    5c94:	09 f0       	breq	.+2      	; 0x5c98 <vfprintf+0x320>
    5c96:	1f 5f       	subi	r17, 0xFF	; 255
    5c98:	0f 2d       	mov	r16, r15
    5c9a:	f3 fc       	sbrc	r15, 3
    5c9c:	14 c0       	rjmp	.+40     	; 0x5cc6 <vfprintf+0x34e>
    5c9e:	f0 fe       	sbrs	r15, 0
    5ca0:	0f c0       	rjmp	.+30     	; 0x5cc0 <vfprintf+0x348>
    5ca2:	1e 15       	cp	r17, r14
    5ca4:	10 f0       	brcs	.+4      	; 0x5caa <vfprintf+0x332>
    5ca6:	9d 2c       	mov	r9, r13
    5ca8:	0b c0       	rjmp	.+22     	; 0x5cc0 <vfprintf+0x348>
    5caa:	9d 2c       	mov	r9, r13
    5cac:	9e 0c       	add	r9, r14
    5cae:	91 1a       	sub	r9, r17
    5cb0:	1e 2d       	mov	r17, r14
    5cb2:	06 c0       	rjmp	.+12     	; 0x5cc0 <vfprintf+0x348>
    5cb4:	80 e2       	ldi	r24, 0x20	; 32
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	b3 01       	movw	r22, r6
    5cba:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5cbe:	1f 5f       	subi	r17, 0xFF	; 255
    5cc0:	1e 15       	cp	r17, r14
    5cc2:	c0 f3       	brcs	.-16     	; 0x5cb4 <vfprintf+0x33c>
    5cc4:	04 c0       	rjmp	.+8      	; 0x5cce <vfprintf+0x356>
    5cc6:	1e 15       	cp	r17, r14
    5cc8:	10 f4       	brcc	.+4      	; 0x5cce <vfprintf+0x356>
    5cca:	e1 1a       	sub	r14, r17
    5ccc:	01 c0       	rjmp	.+2      	; 0x5cd0 <vfprintf+0x358>
    5cce:	ee 24       	eor	r14, r14
    5cd0:	04 ff       	sbrs	r16, 4
    5cd2:	0f c0       	rjmp	.+30     	; 0x5cf2 <vfprintf+0x37a>
    5cd4:	80 e3       	ldi	r24, 0x30	; 48
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	b3 01       	movw	r22, r6
    5cda:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5cde:	02 ff       	sbrs	r16, 2
    5ce0:	1d c0       	rjmp	.+58     	; 0x5d1c <vfprintf+0x3a4>
    5ce2:	01 fd       	sbrc	r16, 1
    5ce4:	03 c0       	rjmp	.+6      	; 0x5cec <vfprintf+0x374>
    5ce6:	88 e7       	ldi	r24, 0x78	; 120
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	0e c0       	rjmp	.+28     	; 0x5d08 <vfprintf+0x390>
    5cec:	88 e5       	ldi	r24, 0x58	; 88
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	0b c0       	rjmp	.+22     	; 0x5d08 <vfprintf+0x390>
    5cf2:	80 2f       	mov	r24, r16
    5cf4:	86 78       	andi	r24, 0x86	; 134
    5cf6:	91 f0       	breq	.+36     	; 0x5d1c <vfprintf+0x3a4>
    5cf8:	01 ff       	sbrs	r16, 1
    5cfa:	02 c0       	rjmp	.+4      	; 0x5d00 <vfprintf+0x388>
    5cfc:	8b e2       	ldi	r24, 0x2B	; 43
    5cfe:	01 c0       	rjmp	.+2      	; 0x5d02 <vfprintf+0x38a>
    5d00:	80 e2       	ldi	r24, 0x20	; 32
    5d02:	f7 fc       	sbrc	r15, 7
    5d04:	8d e2       	ldi	r24, 0x2D	; 45
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	b3 01       	movw	r22, r6
    5d0a:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5d0e:	06 c0       	rjmp	.+12     	; 0x5d1c <vfprintf+0x3a4>
    5d10:	80 e3       	ldi	r24, 0x30	; 48
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	b3 01       	movw	r22, r6
    5d16:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5d1a:	9a 94       	dec	r9
    5d1c:	d9 14       	cp	r13, r9
    5d1e:	c0 f3       	brcs	.-16     	; 0x5d10 <vfprintf+0x398>
    5d20:	da 94       	dec	r13
    5d22:	f1 01       	movw	r30, r2
    5d24:	ed 0d       	add	r30, r13
    5d26:	f1 1d       	adc	r31, r1
    5d28:	80 81       	ld	r24, Z
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	b3 01       	movw	r22, r6
    5d2e:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5d32:	dd 20       	and	r13, r13
    5d34:	a9 f7       	brne	.-22     	; 0x5d20 <vfprintf+0x3a8>
    5d36:	06 c0       	rjmp	.+12     	; 0x5d44 <vfprintf+0x3cc>
    5d38:	80 e2       	ldi	r24, 0x20	; 32
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	b3 01       	movw	r22, r6
    5d3e:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <fputc>
    5d42:	ea 94       	dec	r14
    5d44:	ee 20       	and	r14, r14
    5d46:	c1 f7       	brne	.-16     	; 0x5d38 <vfprintf+0x3c0>
    5d48:	43 ce       	rjmp	.-890    	; 0x59d0 <vfprintf+0x58>
    5d4a:	f3 01       	movw	r30, r6
    5d4c:	66 81       	ldd	r22, Z+6	; 0x06
    5d4e:	77 81       	ldd	r23, Z+7	; 0x07
    5d50:	cb 01       	movw	r24, r22
    5d52:	2b 96       	adiw	r28, 0x0b	; 11
    5d54:	0f b6       	in	r0, 0x3f	; 63
    5d56:	f8 94       	cli
    5d58:	de bf       	out	0x3e, r29	; 62
    5d5a:	0f be       	out	0x3f, r0	; 63
    5d5c:	cd bf       	out	0x3d, r28	; 61
    5d5e:	cf 91       	pop	r28
    5d60:	df 91       	pop	r29
    5d62:	1f 91       	pop	r17
    5d64:	0f 91       	pop	r16
    5d66:	ff 90       	pop	r15
    5d68:	ef 90       	pop	r14
    5d6a:	df 90       	pop	r13
    5d6c:	cf 90       	pop	r12
    5d6e:	bf 90       	pop	r11
    5d70:	af 90       	pop	r10
    5d72:	9f 90       	pop	r9
    5d74:	8f 90       	pop	r8
    5d76:	7f 90       	pop	r7
    5d78:	6f 90       	pop	r6
    5d7a:	5f 90       	pop	r5
    5d7c:	4f 90       	pop	r4
    5d7e:	3f 90       	pop	r3
    5d80:	2f 90       	pop	r2
    5d82:	08 95       	ret

00005d84 <strnlen_P>:
    5d84:	fc 01       	movw	r30, r24
    5d86:	05 90       	lpm	r0, Z+
    5d88:	61 50       	subi	r22, 0x01	; 1
    5d8a:	70 40       	sbci	r23, 0x00	; 0
    5d8c:	01 10       	cpse	r0, r1
    5d8e:	d8 f7       	brcc	.-10     	; 0x5d86 <strnlen_P+0x2>
    5d90:	80 95       	com	r24
    5d92:	90 95       	com	r25
    5d94:	8e 0f       	add	r24, r30
    5d96:	9f 1f       	adc	r25, r31
    5d98:	08 95       	ret

00005d9a <strnlen>:
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	61 50       	subi	r22, 0x01	; 1
    5d9e:	70 40       	sbci	r23, 0x00	; 0
    5da0:	01 90       	ld	r0, Z+
    5da2:	01 10       	cpse	r0, r1
    5da4:	d8 f7       	brcc	.-10     	; 0x5d9c <strnlen+0x2>
    5da6:	80 95       	com	r24
    5da8:	90 95       	com	r25
    5daa:	8e 0f       	add	r24, r30
    5dac:	9f 1f       	adc	r25, r31
    5dae:	08 95       	ret

00005db0 <strrev>:
    5db0:	dc 01       	movw	r26, r24
    5db2:	fc 01       	movw	r30, r24
    5db4:	67 2f       	mov	r22, r23
    5db6:	71 91       	ld	r23, Z+
    5db8:	77 23       	and	r23, r23
    5dba:	e1 f7       	brne	.-8      	; 0x5db4 <strrev+0x4>
    5dbc:	32 97       	sbiw	r30, 0x02	; 2
    5dbe:	04 c0       	rjmp	.+8      	; 0x5dc8 <strrev+0x18>
    5dc0:	7c 91       	ld	r23, X
    5dc2:	6d 93       	st	X+, r22
    5dc4:	70 83       	st	Z, r23
    5dc6:	62 91       	ld	r22, -Z
    5dc8:	ae 17       	cp	r26, r30
    5dca:	bf 07       	cpc	r27, r31
    5dcc:	c8 f3       	brcs	.-14     	; 0x5dc0 <strrev+0x10>
    5dce:	08 95       	ret

00005dd0 <fputc>:
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	8c 01       	movw	r16, r24
    5dda:	eb 01       	movw	r28, r22
    5ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    5dde:	81 ff       	sbrs	r24, 1
    5de0:	1b c0       	rjmp	.+54     	; 0x5e18 <fputc+0x48>
    5de2:	82 ff       	sbrs	r24, 2
    5de4:	0d c0       	rjmp	.+26     	; 0x5e00 <fputc+0x30>
    5de6:	2e 81       	ldd	r18, Y+6	; 0x06
    5de8:	3f 81       	ldd	r19, Y+7	; 0x07
    5dea:	8c 81       	ldd	r24, Y+4	; 0x04
    5dec:	9d 81       	ldd	r25, Y+5	; 0x05
    5dee:	28 17       	cp	r18, r24
    5df0:	39 07       	cpc	r19, r25
    5df2:	64 f4       	brge	.+24     	; 0x5e0c <fputc+0x3c>
    5df4:	e8 81       	ld	r30, Y
    5df6:	f9 81       	ldd	r31, Y+1	; 0x01
    5df8:	01 93       	st	Z+, r16
    5dfa:	f9 83       	std	Y+1, r31	; 0x01
    5dfc:	e8 83       	st	Y, r30
    5dfe:	06 c0       	rjmp	.+12     	; 0x5e0c <fputc+0x3c>
    5e00:	e8 85       	ldd	r30, Y+8	; 0x08
    5e02:	f9 85       	ldd	r31, Y+9	; 0x09
    5e04:	80 2f       	mov	r24, r16
    5e06:	09 95       	icall
    5e08:	89 2b       	or	r24, r25
    5e0a:	31 f4       	brne	.+12     	; 0x5e18 <fputc+0x48>
    5e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    5e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    5e10:	01 96       	adiw	r24, 0x01	; 1
    5e12:	9f 83       	std	Y+7, r25	; 0x07
    5e14:	8e 83       	std	Y+6, r24	; 0x06
    5e16:	02 c0       	rjmp	.+4      	; 0x5e1c <fputc+0x4c>
    5e18:	0f ef       	ldi	r16, 0xFF	; 255
    5e1a:	1f ef       	ldi	r17, 0xFF	; 255
    5e1c:	c8 01       	movw	r24, r16
    5e1e:	df 91       	pop	r29
    5e20:	cf 91       	pop	r28
    5e22:	1f 91       	pop	r17
    5e24:	0f 91       	pop	r16
    5e26:	08 95       	ret

00005e28 <__ultoa_invert>:
    5e28:	fa 01       	movw	r30, r20
    5e2a:	aa 27       	eor	r26, r26
    5e2c:	28 30       	cpi	r18, 0x08	; 8
    5e2e:	51 f1       	breq	.+84     	; 0x5e84 <__ultoa_invert+0x5c>
    5e30:	20 31       	cpi	r18, 0x10	; 16
    5e32:	81 f1       	breq	.+96     	; 0x5e94 <__ultoa_invert+0x6c>
    5e34:	e8 94       	clt
    5e36:	6f 93       	push	r22
    5e38:	6e 7f       	andi	r22, 0xFE	; 254
    5e3a:	6e 5f       	subi	r22, 0xFE	; 254
    5e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e40:	9f 4f       	sbci	r25, 0xFF	; 255
    5e42:	af 4f       	sbci	r26, 0xFF	; 255
    5e44:	b1 e0       	ldi	r27, 0x01	; 1
    5e46:	3e d0       	rcall	.+124    	; 0x5ec4 <__ultoa_invert+0x9c>
    5e48:	b4 e0       	ldi	r27, 0x04	; 4
    5e4a:	3c d0       	rcall	.+120    	; 0x5ec4 <__ultoa_invert+0x9c>
    5e4c:	67 0f       	add	r22, r23
    5e4e:	78 1f       	adc	r23, r24
    5e50:	89 1f       	adc	r24, r25
    5e52:	9a 1f       	adc	r25, r26
    5e54:	a1 1d       	adc	r26, r1
    5e56:	68 0f       	add	r22, r24
    5e58:	79 1f       	adc	r23, r25
    5e5a:	8a 1f       	adc	r24, r26
    5e5c:	91 1d       	adc	r25, r1
    5e5e:	a1 1d       	adc	r26, r1
    5e60:	6a 0f       	add	r22, r26
    5e62:	71 1d       	adc	r23, r1
    5e64:	81 1d       	adc	r24, r1
    5e66:	91 1d       	adc	r25, r1
    5e68:	a1 1d       	adc	r26, r1
    5e6a:	20 d0       	rcall	.+64     	; 0x5eac <__ultoa_invert+0x84>
    5e6c:	09 f4       	brne	.+2      	; 0x5e70 <__ultoa_invert+0x48>
    5e6e:	68 94       	set
    5e70:	3f 91       	pop	r19
    5e72:	2a e0       	ldi	r18, 0x0A	; 10
    5e74:	26 9f       	mul	r18, r22
    5e76:	11 24       	eor	r1, r1
    5e78:	30 19       	sub	r19, r0
    5e7a:	30 5d       	subi	r19, 0xD0	; 208
    5e7c:	31 93       	st	Z+, r19
    5e7e:	de f6       	brtc	.-74     	; 0x5e36 <__ultoa_invert+0xe>
    5e80:	cf 01       	movw	r24, r30
    5e82:	08 95       	ret
    5e84:	46 2f       	mov	r20, r22
    5e86:	47 70       	andi	r20, 0x07	; 7
    5e88:	40 5d       	subi	r20, 0xD0	; 208
    5e8a:	41 93       	st	Z+, r20
    5e8c:	b3 e0       	ldi	r27, 0x03	; 3
    5e8e:	0f d0       	rcall	.+30     	; 0x5eae <__ultoa_invert+0x86>
    5e90:	c9 f7       	brne	.-14     	; 0x5e84 <__ultoa_invert+0x5c>
    5e92:	f6 cf       	rjmp	.-20     	; 0x5e80 <__ultoa_invert+0x58>
    5e94:	46 2f       	mov	r20, r22
    5e96:	4f 70       	andi	r20, 0x0F	; 15
    5e98:	40 5d       	subi	r20, 0xD0	; 208
    5e9a:	4a 33       	cpi	r20, 0x3A	; 58
    5e9c:	18 f0       	brcs	.+6      	; 0x5ea4 <__ultoa_invert+0x7c>
    5e9e:	49 5d       	subi	r20, 0xD9	; 217
    5ea0:	31 fd       	sbrc	r19, 1
    5ea2:	40 52       	subi	r20, 0x20	; 32
    5ea4:	41 93       	st	Z+, r20
    5ea6:	02 d0       	rcall	.+4      	; 0x5eac <__ultoa_invert+0x84>
    5ea8:	a9 f7       	brne	.-22     	; 0x5e94 <__ultoa_invert+0x6c>
    5eaa:	ea cf       	rjmp	.-44     	; 0x5e80 <__ultoa_invert+0x58>
    5eac:	b4 e0       	ldi	r27, 0x04	; 4
    5eae:	a6 95       	lsr	r26
    5eb0:	97 95       	ror	r25
    5eb2:	87 95       	ror	r24
    5eb4:	77 95       	ror	r23
    5eb6:	67 95       	ror	r22
    5eb8:	ba 95       	dec	r27
    5eba:	c9 f7       	brne	.-14     	; 0x5eae <__ultoa_invert+0x86>
    5ebc:	00 97       	sbiw	r24, 0x00	; 0
    5ebe:	61 05       	cpc	r22, r1
    5ec0:	71 05       	cpc	r23, r1
    5ec2:	08 95       	ret
    5ec4:	9b 01       	movw	r18, r22
    5ec6:	ac 01       	movw	r20, r24
    5ec8:	0a 2e       	mov	r0, r26
    5eca:	06 94       	lsr	r0
    5ecc:	57 95       	ror	r21
    5ece:	47 95       	ror	r20
    5ed0:	37 95       	ror	r19
    5ed2:	27 95       	ror	r18
    5ed4:	ba 95       	dec	r27
    5ed6:	c9 f7       	brne	.-14     	; 0x5eca <__ultoa_invert+0xa2>
    5ed8:	62 0f       	add	r22, r18
    5eda:	73 1f       	adc	r23, r19
    5edc:	84 1f       	adc	r24, r20
    5ede:	95 1f       	adc	r25, r21
    5ee0:	a0 1d       	adc	r26, r0
    5ee2:	08 95       	ret

00005ee4 <_exit>:
    5ee4:	f8 94       	cli

00005ee6 <__stop_program>:
    5ee6:	ff cf       	rjmp	.-2      	; 0x5ee6 <__stop_program>
