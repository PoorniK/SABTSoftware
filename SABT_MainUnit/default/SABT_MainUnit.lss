
SABT_MainUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027a  00800100  00003950  000039e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ab  0080037a  0080037a  00003c5e  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00003c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000310d  00000000  00000000  00003dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000050df  00000000  00000000  00006eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d16  00000000  00000000  0000bfca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b50  00000000  00000000  0000cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000f830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000112b  00000000  00000000  0000fea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bea  00000000  00000000  00010fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00012bb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__ctors_end>
       4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
       c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      18:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      1c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      20:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      24:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      28:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      30:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      34:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_13>
      38:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      3c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      40:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      44:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      50:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_20>
      54:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      58:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      5c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      60:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      64:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      68:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      6c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      70:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_28>
      74:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      78:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      7c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      80:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      84:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      88:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      8c:	f3 17       	cp	r31, r19
      8e:	f6 17       	cp	r31, r22
      90:	f9 17       	cp	r31, r25
      92:	fc 17       	cp	r31, r28
      94:	ff 17       	cp	r31, r31
      96:	02 18       	sub	r0, r2
      98:	05 18       	sub	r0, r5
      9a:	08 18       	sub	r0, r8
      9c:	0b 18       	sub	r0, r11
      9e:	0e 18       	sub	r0, r14
      a0:	11 18       	sub	r1, r1
      a2:	14 18       	sub	r1, r4
      a4:	17 18       	sub	r1, r7
      a6:	1a 18       	sub	r1, r10
      a8:	1d 18       	sub	r1, r13
      aa:	20 18       	sub	r2, r0
      ac:	23 18       	sub	r2, r3
      ae:	26 18       	sub	r2, r6
      b0:	29 18       	sub	r2, r9
      b2:	2c 18       	sub	r2, r12
      b4:	2f 18       	sub	r2, r15
      b6:	32 18       	sub	r3, r2
      b8:	35 18       	sub	r3, r5
      ba:	38 18       	sub	r3, r8
      bc:	3b 18       	sub	r3, r11
      be:	3e 18       	sub	r3, r14

000000c0 <__c.1824>:
      c0:	4d 6f 64 65 20 66 69 6c 65 20 66 6f 75 6e 64 00     Mode file found.

000000d0 <__c.1822>:
      d0:	4d 6f 64 65 20 66 69 6c 65 20 6e 6f 74 20 66 6f     Mode file not fo
      e0:	75 6e 64 00                                         und.

000000e4 <__c.1820>:
      e4:	53 41 42 54 20 74 65 73 74 69 6e 67 2e 2e 2e 00     SABT testing....

000000f4 <__c.2383>:
      f4:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 7a 69     Error initializi
     104:	6e 67 20 56 53 31 30 35 33 20 2d 20 43 4f 44 45     ng VS1053 - CODE
     114:	20 00                                                .

00000116 <__c.2381>:
     116:	56 53 31 30 35 33 20 4d 50 33 20 63 68 69 70 20     VS1053 MP3 chip 
     126:	73 75 63 65 73 73 66 75 6c 6c 79 20 69 6e 69 74     sucessfully init
     136:	69 61 6c 69 7a 65 64 00                             ialized.

0000013e <__c.2379>:
     13e:	46 41 54 33 32 20 66 69 6c 65 20 73 79 73 74 65     FAT32 file syste
     14e:	6d 20 64 65 74 65 63 74 65 64 2e 2e 2e 00           m detected....

0000015c <__c.2377>:
     15c:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000016d <__c.2375>:
     16d:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     17d:	44 65 74 65 63 74 65 64 00                          Detected.

00000186 <__c.2372>:
     186:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     196:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1a6:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001b0 <__c.2369>:
     1b0:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     1c0:	72 64 20 44 65 74 65 63 74 65 64 00                 rd Detected.

000001cc <__c.2365>:
     1cc:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1dc:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     1ec:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001f6 <__c.2361>:
     1f6:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     206:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000213 <__c.2359>:
     213:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     223:	63 74 65 64 2e 2e 00                                cted...

0000022a <__c.2161>:
     22a:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     23a:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     24a:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000254 <__c.2065>:
     254:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     264:	2e 2e 00                                            ...

00000267 <__c.2027>:
     267:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     277:	20 63 6c 75 73 74 65 72 00                           cluster.

00000280 <__c.1980>:
     280:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     290:	20 63 6c 75 73 74 65 72 00                           cluster.

00000299 <__c.1939>:
     299:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2a9:	20 63 6c 75 73 74 65 72 00                           cluster.

000002b2 <__c.1888>:
     2b2:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2c2:	20 63 6c 75 73 74 65 72 00                           cluster.

000002cb <__c.1880>:
     2cb:	52 4f 4f 54 00                                      ROOT.

000002d0 <__c.1878>:
     2d0:	44 49 52 00                                         DIR.

000002d4 <__c.1876>:
     2d4:	20 20 20 00                                            .

000002d8 <__c.1874>:
     2d8:	46 49 4c 45 00                                      FILE.

000002dd <__c.1872>:
     2dd:	20 20 20 00                                            .

000002e1 <__c.1866>:
     2e1:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000002ef <__c.1864>:
     2ef:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000002fa <__c.1859>:
     2fa:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     30a:	69 73 74 21 00                                      ist!.

0000030f <__c.1926>:
     30f:	56 6f 6c 20 44 4f 57 4e 20 70 72 65 73 73 65 64     Vol DOWN pressed
	...

00000320 <__c.1923>:
     320:	56 6f 6c 20 55 50 20 70 72 65 73 73 65 64 00        Vol UP pressed.

0000032f <__c.1920>:
     32f:	4d 6f 64 65 20 32 20 70 72 65 73 73 65 64 00        Mode 2 pressed.

0000033e <__c.1917>:
     33e:	4d 6f 64 65 20 31 20 70 72 65 73 73 65 64 00        Mode 1 pressed.

0000034d <__c.1914>:
     34d:	45 6e 74 65 72 20 32 20 70 72 65 73 73 65 64 00     Enter 2 pressed.

0000035d <__c.1911>:
     35d:	45 6e 74 65 72 20 31 20 70 72 65 73 73 65 64 00     Enter 1 pressed.

0000036d <__c.1878>:
     36d:	41 6e 61 6c 6f 67 20 49 6e 70 75 74 20 63 68 61     Analog Input cha
     37d:	6e 6e 65 6c 2c 4d 53 42 2c 4c 53 42 20 3a 00        nnel,MSB,LSB :.

0000038c <__c.1816>:
     38c:	41 6e 64 20 74 68 65 20 6d 6f 64 65 73 20 61 72     And the modes ar
     39c:	65 3b 20 00                                         e; .

000003a0 <__c.1814>:
     3a0:	4e 75 6d 62 65 72 20 6f 66 20 6d 6f 64 65 73 20     Number of modes 
     3b0:	73 65 6c 65 63 74 65 64 3a 20 00                    selected: .

000003bb <__c.1785>:
     3bb:	53 41 42 54 2d 46 41 49 4c 00                       SABT-FAIL.

000003c5 <__c.1783>:
     3c5:	53 41 42 54 2d 4f 4b 00                             SABT-OK.

000003cd <__c.1765>:
     3cd:	53 41 42 54 2d 76 32 2e 31 00 00                    SABT-v2.1..

000003d8 <__ctors_end>:
     3d8:	11 24       	eor	r1, r1
     3da:	1f be       	out	0x3f, r1	; 63
     3dc:	cf ef       	ldi	r28, 0xFF	; 255
     3de:	d0 e4       	ldi	r29, 0x40	; 64
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	cd bf       	out	0x3d, r28	; 61

000003e4 <__do_copy_data>:
     3e4:	13 e0       	ldi	r17, 0x03	; 3
     3e6:	a0 e0       	ldi	r26, 0x00	; 0
     3e8:	b1 e0       	ldi	r27, 0x01	; 1
     3ea:	e0 e5       	ldi	r30, 0x50	; 80
     3ec:	f9 e3       	ldi	r31, 0x39	; 57
     3ee:	00 e0       	ldi	r16, 0x00	; 0
     3f0:	0b bf       	out	0x3b, r16	; 59
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__do_copy_data+0x14>
     3f4:	07 90       	elpm	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	aa 37       	cpi	r26, 0x7A	; 122
     3fa:	b1 07       	cpc	r27, r17
     3fc:	d9 f7       	brne	.-10     	; 0x3f4 <__do_copy_data+0x10>

000003fe <__do_clear_bss>:
     3fe:	17 e0       	ldi	r17, 0x07	; 7
     400:	aa e7       	ldi	r26, 0x7A	; 122
     402:	b3 e0       	ldi	r27, 0x03	; 3
     404:	01 c0       	rjmp	.+2      	; 0x408 <.do_clear_bss_start>

00000406 <.do_clear_bss_loop>:
     406:	1d 92       	st	X+, r1

00000408 <.do_clear_bss_start>:
     408:	a5 32       	cpi	r26, 0x25	; 37
     40a:	b1 07       	cpc	r27, r17
     40c:	e1 f7       	brne	.-8      	; 0x406 <.do_clear_bss_loop>
     40e:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
     412:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <_exit>

00000416 <__bad_interrupt>:
     416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041a <TimeRoutine>:
*/

void InitializeSystem(void);

void TimeRoutine(void){
	if(!LED_STAT){
     41a:	80 91 f1 05 	lds	r24, 0x05F1
     41e:	88 23       	and	r24, r24
     420:	39 f4       	brne	.+14     	; 0x430 <TimeRoutine+0x16>
		PORTD &= ~_BV(5);
     422:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~_BV(6);
     424:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~_BV(7);
     426:	5f 98       	cbi	0x0b, 7	; 11
		LED_STAT=true;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 f1 05 	sts	0x05F1, r24
     42e:	08 95       	ret
	}else{
		PORTD |= _BV(5);
     430:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= _BV(6);
     432:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD |= _BV(7);
     434:	5f 9a       	sbi	0x0b, 7	; 11
		LED_STAT=false;
     436:	10 92 f1 05 	sts	0x05F1, r1
     43a:	08 95       	ret

0000043c <__vector_13>:
		UI_RunMainOfCurrentMode();
	}
	return 1;
}

ISR(TIMER1_COMPA_vect){
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	8f 93       	push	r24
	TMR1_INT=true;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 a5 03 	sts	0x03A5, r24
};
     44e:	8f 91       	pop	r24
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <__vector_28>:

ISR(USART1_RX_vect){
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	8f 93       	push	r24
	USART_Keypad_Received_Data=UDR1;
     466:	80 91 ce 00 	lds	r24, 0x00CE
     46a:	80 93 ff 06 	sts	0x06FF, r24
	USART_Keypad_DATA_RDY=true; 
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 89 03 	sts	0x0389, r24
};
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_20>:

ISR(USART0_RX_vect){
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	8f 93       	push	r24
//Temporarly using the PC as the UI
//	USART_Keypad_Received_Data=UDR0;
//	USART_Keypad_DATA_RDY=true; 
///*	Temporaraly disabled the PC communications since we are simulating the UI with PC
	USART_PC_Received_Data=UDR0;
     48c:	80 91 c6 00 	lds	r24, 0x00C6
     490:	80 93 ec 05 	sts	0x05EC, r24
	USART_PC_DATA_RDY=true;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 fb 05 	sts	0x05FB, r24
//*/
};
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <InitializeSystem>:



void InitializeSystem(void){
	//Initialize the system and interrupts
	TMR1_INT=false;
     4a6:	10 92 a5 03 	sts	0x03A5, r1
	PORTA=0x00;
     4aa:	12 b8       	out	0x02, r1	; 2
	DDRA=0xFF;	
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	81 b9       	out	0x01, r24	; 1
	PORTA=0x00;	
     4b0:	12 b8       	out	0x02, r1	; 2

	DDRD |= _BV(5)|_BV(6)|_BV(7);
     4b2:	8a b1       	in	r24, 0x0a	; 10
     4b4:	80 6e       	ori	r24, 0xE0	; 224
     4b6:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A=0x00;
     4b8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x0D;
     4bc:	8d e0       	ldi	r24, 0x0D	; 13
     4be:	80 93 81 00 	sts	0x0081, r24
	OCR1A=780; //1s interval
     4c2:	8c e0       	ldi	r24, 0x0C	; 12
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	90 93 89 00 	sts	0x0089, r25
     4ca:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1<<OCIE1A); //Enable interrupt
     4ce:	80 91 6f 00 	lds	r24, 0x006F
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	80 93 6f 00 	sts	0x006F, r24

	init_USART_Keypad();
     4d8:	0e 94 13 03 	call	0x626	; 0x626 <init_USART_Keypad>
	init_USART_PC();
     4dc:	0e 94 9c 03 	call	0x738	; 0x738 <init_USART_PC>
	SPI_Initialize();
     4e0:	0e 94 c2 05 	call	0xb84	; 0xb84 <SPI_Initialize>
	sei();
     4e4:	78 94       	sei

	UI_Current_Mode=0;//No mode selected
     4e6:	10 92 d0 05 	sts	0x05D0, r1
	TX_NEWLINE_PC;
     4ea:	8d e0       	ldi	r24, 0x0D	; 13
     4ec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	USART_transmitStringToPCFromFlash (PSTR("SABT testing..."));
     4f6:	84 ee       	ldi	r24, 0xE4	; 228
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
	TX_NEWLINE_PC;
     4fe:	8d e0       	ldi	r24, 0x0D	; 13
     500:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
     504:	8a e0       	ldi	r24, 0x0A	; 10
     506:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>

	InitSDCard(true);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <InitSDCard>
	
	if(!UI_CheckModes())
     510:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UI_CheckModes>
     514:	88 23       	and	r24, r24
     516:	19 f4       	brne	.+6      	; 0x51e <InitializeSystem+0x78>
	{
		USART_transmitStringToPCFromFlash (PSTR("Mode file not found"));
     518:	80 ed       	ldi	r24, 0xD0	; 208
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <InitializeSystem+0x7c>
		TX_NEWLINE_PC;
	}
	else
	{
		USART_transmitStringToPCFromFlash (PSTR("Mode file found"));
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
		TX_NEWLINE_PC;
     526:	8d e0       	ldi	r24, 0x0D	; 13
     528:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
     52c:	8a e0       	ldi	r24, 0x0A	; 10
     52e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	}
	RequestToPlayMP3file("INT.MP3");
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
	//_delay_ms(5000);
	//RequestToPlayMP3file("INT.MP3");
}
     53a:	08 95       	ret

0000053c <main>:
		PORTD |= _BV(7);
		LED_STAT=false;
	}
}

int main(void){	
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
	InitializeSystem();
     548:	0e 94 53 02 	call	0x4a6	; 0x4a6 <InitializeSystem>

	//Display the files in the SD card
	//TX_NEWLINE_PC;
	//findFiles(GET_LIST,0);
	//TX_NEWLINE_PC;
	TX_NEWLINE_PC;
     54c:	8d e0       	ldi	r24, 0x0D	; 13
     54e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	//USART_transmitStringToPCFromFlash (PSTR("Press a key and see it returns."));
	TX_NEWLINE_PC;
     558:	8d e0       	ldi	r24, 0x0D	; 13
     55a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
     55e:	8a e0       	ldi	r24, 0x0A	; 10
     560:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	while(1){
		//printf("Small waves crashing against the sand.");
		DPRINTF("Small waves crashing against the sand%d.", 42);
     564:	ce ef       	ldi	r28, 0xFE	; 254
     566:	d5 e0       	ldi	r29, 0x05	; 5
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	e8 2e       	mov	r14, r24
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	f8 2e       	mov	r15, r24
     570:	0a e2       	ldi	r16, 0x2A	; 42
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	00 d0       	rcall	.+0      	; 0x576 <main+0x3a>
     576:	00 d0       	rcall	.+0      	; 0x578 <main+0x3c>
     578:	00 d0       	rcall	.+0      	; 0x57a <main+0x3e>
     57a:	ed b7       	in	r30, 0x3d	; 61
     57c:	fe b7       	in	r31, 0x3e	; 62
     57e:	31 96       	adiw	r30, 0x01	; 1
     580:	ad b7       	in	r26, 0x3d	; 61
     582:	be b7       	in	r27, 0x3e	; 62
     584:	12 96       	adiw	r26, 0x02	; 2
     586:	dc 93       	st	X, r29
     588:	ce 93       	st	-X, r28
     58a:	11 97       	sbiw	r26, 0x01	; 1
     58c:	f3 82       	std	Z+3, r15	; 0x03
     58e:	e2 82       	std	Z+2, r14	; 0x02
     590:	15 83       	std	Z+5, r17	; 0x05
     592:	04 83       	std	Z+4, r16	; 0x04
     594:	0e 94 cf 19 	call	0x339e	; 0x339e <sprintf>
     598:	8d b7       	in	r24, 0x3d	; 61
     59a:	9e b7       	in	r25, 0x3e	; 62
     59c:	06 96       	adiw	r24, 0x06	; 6
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	9e bf       	out	0x3e, r25	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	8d bf       	out	0x3d, r24	; 61
     5a8:	ce 01       	movw	r24, r28
     5aa:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <USART_transmitStringToPC>
		//fprintf(stderr, "HELLO HELLO HELLO HELLO");
		if(temp++>100){
     5ae:	80 91 7a 03 	lds	r24, 0x037A
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	80 93 7a 03 	sts	0x037A, r24
     5b8:	81 50       	subi	r24, 0x01	; 1
     5ba:	85 36       	cpi	r24, 0x65	; 101
     5bc:	10 f0       	brcs	.+4      	; 0x5c2 <main+0x86>
			temp=0;
     5be:	10 92 7a 03 	sts	0x037A, r1
		}

		if(TMR1_INT){
     5c2:	80 91 a5 03 	lds	r24, 0x03A5
     5c6:	88 23       	and	r24, r24
     5c8:	11 f0       	breq	.+4      	; 0x5ce <main+0x92>
			TMR1_INT=false;
     5ca:	10 92 a5 03 	sts	0x03A5, r1
		//	TimeRoutine();
		}
		if(USART_Keypad_DATA_RDY){
     5ce:	80 91 89 03 	lds	r24, 0x0389
     5d2:	88 23       	and	r24, r24
     5d4:	11 f0       	breq	.+4      	; 0x5da <main+0x9e>
			USART_Keypad_ReceiveAction();
     5d6:	0e 94 29 03 	call	0x652	; 0x652 <USART_Keypad_ReceiveAction>
		}
		if(USART_PC_DATA_RDY){
     5da:	80 91 fb 05 	lds	r24, 0x05FB
     5de:	88 23       	and	r24, r24
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <main+0xaa>
			USART_PC_ReceiveAction();
     5e2:	0e 94 ac 03 	call	0x758	; 0x758 <USART_PC_ReceiveAction>
				USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
				TX_NEWLINE_PC;
			}
			*/
		}
		if(USART_PC_Message_ready) //If a message ready from the PC, process it
     5e6:	80 91 81 03 	lds	r24, 0x0381
     5ea:	88 23       	and	r24, r24
     5ec:	11 f0       	breq	.+4      	; 0x5f2 <main+0xb6>
		{
			PC_parse_message();
     5ee:	0e 94 0b 19 	call	0x3216	; 0x3216 <PC_parse_message>
		}
		if(USART_UI_Message_ready) //If a message ready from the user interface, process it
     5f2:	80 91 cf 03 	lds	r24, 0x03CF
     5f6:	88 23       	and	r24, r24
     5f8:	19 f0       	breq	.+6      	; 0x600 <main+0xc4>
		{
			UI_parse_message(false);
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <UI_parse_message>
		}
		if(UI_MP3_file_Pending)	//If the UI handler needs to play new file, play it (the main loop won't be called while playing another file, so don't worry)
     600:	80 91 84 03 	lds	r24, 0x0384
     604:	88 23       	and	r24, r24
     606:	61 f0       	breq	.+24     	; 0x620 <main+0xe4>
		{
			PlayMP3file(fileName);
     608:	8a e8       	ldi	r24, 0x8A	; 138
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	0e 94 1b 13 	call	0x2636	; 0x2636 <PlayMP3file>
			RequestToPlayMP3file("INT.MP3");
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
			PlayMP3file(fileName);
     618:	8a e8       	ldi	r24, 0x8A	; 138
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 1b 13 	call	0x2636	; 0x2636 <PlayMP3file>
		}
		UI_RunMainOfCurrentMode();
     620:	0e 94 7d 14 	call	0x28fa	; 0x28fa <UI_RunMainOfCurrentMode>
     624:	a7 cf       	rjmp	.-178    	; 0x574 <main+0x38>

00000626 <init_USART_Keypad>:
unsigned char USART_UI_receive_msgcnt;
unsigned char USART_UI_received_playload_len;

void init_USART_Keypad(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
     626:	e9 ec       	ldi	r30, 0xC9	; 201
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	10 82       	st	Z, r1
	UCSR1A = 0x00;
     62c:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 0x19; //set baud rate lo
     636:	89 e1       	ldi	r24, 0x19	; 25
     638:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0x00; //set baud rate hi 19,200 baud with 8MHz clock
     63c:	10 92 cd 00 	sts	0x00CD, r1
	UCSR1B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     640:	88 e9       	ldi	r24, 0x98	; 152
     642:	80 83       	st	Z, r24
 	USART_UI_length_reveived=false;
     644:	10 92 09 07 	sts	0x0709, r1
	USART_UI_header_received=false;
     648:	10 92 0a 07 	sts	0x070A, r1
	USART_UI_Message_ready=false;
     64c:	10 92 cf 03 	sts	0x03CF, r1
}
     650:	08 95       	ret

00000652 <USART_Keypad_ReceiveAction>:

void USART_Keypad_ReceiveAction(void){
	USART_Keypad_DATA_RDY=false;
     652:	10 92 89 03 	sts	0x0389, r1

	if(!USART_UI_header_received)
     656:	80 91 0a 07 	lds	r24, 0x070A
     65a:	88 23       	and	r24, r24
     65c:	d9 f4       	brne	.+54     	; 0x694 <USART_Keypad_ReceiveAction+0x42>
	{
		USART_UI_prefix[2]=USART_Keypad_Received_Data;
     65e:	20 91 ff 06 	lds	r18, 0x06FF
     662:	20 93 08 07 	sts	0x0708, r18
		USART_UI_prefix[0]=USART_UI_prefix[1];
     666:	90 91 07 07 	lds	r25, 0x0707
     66a:	90 93 06 07 	sts	0x0706, r25
		USART_UI_prefix[1]=USART_UI_prefix[2];
     66e:	20 93 07 07 	sts	0x0707, r18
		if((USART_UI_prefix[0]=='U')&&(USART_UI_prefix[1]=='I'))
     672:	95 35       	cpi	r25, 0x55	; 85
     674:	f1 f5       	brne	.+124    	; 0x6f2 <USART_Keypad_ReceiveAction+0xa0>
     676:	29 34       	cpi	r18, 0x49	; 73
     678:	e1 f5       	brne	.+120    	; 0x6f2 <USART_Keypad_ReceiveAction+0xa0>
		{
			USART_UI_header_received=true;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 0a 07 	sts	0x070A, r24
			USART_UI_ReceivedPacket[0]=USART_UI_prefix[0];
     680:	90 93 d3 05 	sts	0x05D3, r25
			USART_UI_ReceivedPacket[1]=USART_UI_prefix[1];
     684:	20 93 d4 05 	sts	0x05D4, r18
			USART_UI_receive_msgcnt=2;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	80 93 05 07 	sts	0x0705, r24
			USART_UI_length_reveived=false;
     68e:	10 92 09 07 	sts	0x0709, r1
     692:	08 95       	ret
			//USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
			//USART_UI_length_reveived=true;
			//USART_UI_receive_msgcnt++;
		}
	}
	else if(!USART_UI_length_reveived)
     694:	80 91 09 07 	lds	r24, 0x0709
     698:	90 91 05 07 	lds	r25, 0x0705
     69c:	88 23       	and	r24, r24
     69e:	a1 f4       	brne	.+40     	; 0x6c8 <USART_Keypad_ReceiveAction+0x76>
	{
		if(USART_UI_receive_msgcnt==2)
     6a0:	92 30       	cpi	r25, 0x02	; 2
     6a2:	79 f4       	brne	.+30     	; 0x6c2 <USART_Keypad_ReceiveAction+0x70>
		{
			USART_UI_received_playload_len=USART_Keypad_Received_Data;
     6a4:	80 91 ff 06 	lds	r24, 0x06FF
     6a8:	80 93 0b 07 	sts	0x070B, r24
			USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
     6ac:	80 91 ff 06 	lds	r24, 0x06FF
     6b0:	80 93 d5 05 	sts	0x05D5, r24
			USART_UI_length_reveived=true;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 09 07 	sts	0x0709, r24
			USART_UI_receive_msgcnt++;
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	80 93 05 07 	sts	0x0705, r24
     6c0:	08 95       	ret
		}
		else
		{
			USART_UI_header_received=false;
     6c2:	10 92 0a 07 	sts	0x070A, r1
     6c6:	08 95       	ret
		}
	}
	else
	{
		USART_UI_ReceivedPacket[USART_UI_receive_msgcnt++]=USART_Keypad_Received_Data;
     6c8:	e9 2f       	mov	r30, r25
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 91 ff 06 	lds	r24, 0x06FF
     6d0:	ed 52       	subi	r30, 0x2D	; 45
     6d2:	fa 4f       	sbci	r31, 0xFA	; 250
     6d4:	80 83       	st	Z, r24
     6d6:	9f 5f       	subi	r25, 0xFF	; 255
     6d8:	90 93 05 07 	sts	0x0705, r25
		if(USART_UI_receive_msgcnt==USART_UI_received_playload_len) //full message has been received
     6dc:	80 91 0b 07 	lds	r24, 0x070B
     6e0:	98 17       	cp	r25, r24
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <USART_Keypad_ReceiveAction+0xa0>
		{
			USART_UI_Message_ready=true;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 cf 03 	sts	0x03CF, r24
			USART_UI_header_received=false;
     6ea:	10 92 0a 07 	sts	0x070A, r1
			USART_UI_length_reveived=false;
     6ee:	10 92 09 07 	sts	0x0709, r1
     6f2:	08 95       	ret

000006f4 <USART_transmitByteToKeypad>:
		}
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
     6f4:	98 2f       	mov	r25, r24
	while ( !(UCSR1A & (1<<UDRE1)) )
     6f6:	80 91 c8 00 	lds	r24, 0x00C8
     6fa:	85 ff       	sbrs	r24, 5
     6fc:	fc cf       	rjmp	.-8      	; 0x6f6 <USART_transmitByteToKeypad+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     6fe:	90 93 ce 00 	sts	0x00CE, r25
}
     702:	08 95       	ret

00000704 <USART_transmitStringToKeypadFromFlash>:

void USART_transmitStringToKeypadFromFlash(char* string)
{
     704:	fc 01       	movw	r30, r24
     706:	07 c0       	rjmp	.+14     	; 0x716 <USART_transmitStringToKeypadFromFlash+0x12>
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
     708:	80 91 c8 00 	lds	r24, 0x00C8
     70c:	85 ff       	sbrs	r24, 5
     70e:	fc cf       	rjmp	.-8      	; 0x708 <USART_transmitStringToKeypadFromFlash+0x4>
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
     710:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     712:	90 93 ce 00 	sts	0x00CE, r25
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
     716:	94 91       	lpm	r25, Z+
     718:	99 23       	and	r25, r25
     71a:	b1 f7       	brne	.-20     	; 0x708 <USART_transmitStringToKeypadFromFlash+0x4>
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
}
     71c:	08 95       	ret

0000071e <USART_transmitStringToKeypad>:


void USART_transmitStringToKeypad(unsigned char* string)
{
     71e:	fc 01       	movw	r30, r24
     720:	07 c0       	rjmp	.+14     	; 0x730 <USART_transmitStringToKeypad+0x12>
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
     722:	80 91 c8 00 	lds	r24, 0x00C8
     726:	85 ff       	sbrs	r24, 5
     728:	fc cf       	rjmp	.-8      	; 0x722 <USART_transmitStringToKeypad+0x4>


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
   USART_transmitByteToKeypad(*string++);
     72a:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     72c:	90 93 ce 00 	sts	0x00CE, r25
}


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
     730:	90 81       	ld	r25, Z
     732:	99 23       	and	r25, r25
     734:	b1 f7       	brne	.-20     	; 0x722 <USART_transmitStringToKeypad+0x4>
   USART_transmitByteToKeypad(*string++);
}
     736:	08 95       	ret

00000738 <init_USART_PC>:
unsigned char USART_PC_receive_msgcnt;


void init_USART_PC(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     738:	e1 ec       	ldi	r30, 0xC1	; 193
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     73e:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     742:	86 e0       	ldi	r24, 0x06	; 6
     744:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x19;
     748:	89 e1       	ldi	r24, 0x19	; 25
     74a:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate to 19,200 with 8MHz clock
     74e:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     752:	88 e9       	ldi	r24, 0x98	; 152
     754:	80 83       	st	Z, r24
}
     756:	08 95       	ret

00000758 <USART_PC_ReceiveAction>:

unsigned char USART_PC_ReceiveAction(void){
	USART_PC_DATA_RDY=false;
     758:	10 92 fb 05 	sts	0x05FB, r1

	if(!USART_PC_header_received)
     75c:	80 91 11 07 	lds	r24, 0x0711
     760:	88 23       	and	r24, r24
     762:	b9 f4       	brne	.+46     	; 0x792 <USART_PC_ReceiveAction+0x3a>
	{
		USART_PC_prefix[2]=USART_PC_Received_Data;
     764:	20 91 ec 05 	lds	r18, 0x05EC
     768:	20 93 0f 07 	sts	0x070F, r18
		USART_PC_prefix[0]=USART_PC_prefix[1];
     76c:	90 91 0e 07 	lds	r25, 0x070E
     770:	90 93 0d 07 	sts	0x070D, r25
		USART_PC_prefix[1]=USART_PC_prefix[2];
     774:	20 93 0e 07 	sts	0x070E, r18
		if((USART_PC_prefix[0]=='P')&&(USART_PC_prefix[1]=='C'))
     778:	90 35       	cpi	r25, 0x50	; 80
     77a:	21 f5       	brne	.+72     	; 0x7c4 <USART_PC_ReceiveAction+0x6c>
     77c:	23 34       	cpi	r18, 0x43	; 67
     77e:	11 f5       	brne	.+68     	; 0x7c4 <USART_PC_ReceiveAction+0x6c>
		{
			USART_PC_header_received=true;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 11 07 	sts	0x0711, r24
			USART_PC_ReceivedPacket[0]=USART_PC_prefix[0];
     786:	90 93 a7 03 	sts	0x03A7, r25
			USART_PC_ReceivedPacket[1]=USART_PC_prefix[1];
     78a:	20 93 a8 03 	sts	0x03A8, r18
			USART_PC_receive_msgcnt=2;
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	17 c0       	rjmp	.+46     	; 0x7c0 <USART_PC_ReceiveAction+0x68>
			//USART_PC_length_reveived=true;
			//USART_PC_receive_msgcnt++;
		}
	}
	else{
		if(USART_PC_Received_Data==13) //If carraige return found --> end of the command
     792:	80 91 ec 05 	lds	r24, 0x05EC
     796:	8d 30       	cpi	r24, 0x0D	; 13
     798:	49 f4       	brne	.+18     	; 0x7ac <USART_PC_ReceiveAction+0x54>
		{
			USART_PC_received_playload_len=USART_PC_receive_msgcnt;
     79a:	80 91 10 07 	lds	r24, 0x0710
     79e:	80 93 fd 05 	sts	0x05FD, r24
			USART_PC_Message_ready=true;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 81 03 	sts	0x0381, r24
			USART_PC_header_received=false;
     7a8:	10 92 11 07 	sts	0x0711, r1
			//USART_PC_length_reveived=false;
		}
		USART_PC_ReceivedPacket[USART_PC_receive_msgcnt++]=USART_PC_Received_Data;
     7ac:	80 91 10 07 	lds	r24, 0x0710
     7b0:	e8 2f       	mov	r30, r24
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	90 91 ec 05 	lds	r25, 0x05EC
     7b8:	e9 55       	subi	r30, 0x59	; 89
     7ba:	fc 4f       	sbci	r31, 0xFC	; 252
     7bc:	90 83       	st	Z, r25
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	80 93 10 07 	sts	0x0710, r24
			USART_PC_length_reveived=false;
		}
	}		
*/
	return 0;
}
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	08 95       	ret

000007c8 <USART_transmitByteToPC>:

void USART_transmitByteToPC( unsigned char bData )
{
     7c8:	98 2f       	mov	r25, r24
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     7ca:	80 91 c0 00 	lds	r24, 0x00C0
     7ce:	85 ff       	sbrs	r24, 5
     7d0:	fc cf       	rjmp	.-8      	; 0x7ca <USART_transmitByteToPC+0x2>
	UDR0=bData;
     7d2:	90 93 c6 00 	sts	0x00C6, r25
//	*/
}
     7d6:	08 95       	ret

000007d8 <USART_transmitStringToPCFromFlash>:

void USART_transmitStringToPCFromFlash(char* strData)
{
     7d8:	fc 01       	movw	r30, r24
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <USART_transmitStringToPCFromFlash+0x12>
}

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     7dc:	80 91 c0 00 	lds	r24, 0x00C0
     7e0:	85 ff       	sbrs	r24, 5
     7e2:	fc cf       	rjmp	.-8      	; 0x7dc <USART_transmitStringToPCFromFlash+0x4>
}

void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
     7e4:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0=bData;
     7e6:	90 93 c6 00 	sts	0x00C6, r25
//	*/
}

void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
     7ea:	94 91       	lpm	r25, Z+
     7ec:	99 23       	and	r25, r25
     7ee:	b1 f7       	brne	.-20     	; 0x7dc <USART_transmitStringToPCFromFlash+0x4>
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
}
     7f0:	08 95       	ret

000007f2 <USART_transmitStringToPC>:


void USART_transmitStringToPC(unsigned char* strData)
{
     7f2:	fc 01       	movw	r30, r24
     7f4:	07 c0       	rjmp	.+14     	; 0x804 <USART_transmitStringToPC+0x12>
}

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     7f6:	80 91 c0 00 	lds	r24, 0x00C0
     7fa:	85 ff       	sbrs	r24, 5
     7fc:	fc cf       	rjmp	.-8      	; 0x7f6 <USART_transmitStringToPC+0x4>


void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
   USART_transmitByteToPC(*strData++);
     7fe:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0=bData;
     800:	90 93 c6 00 	sts	0x00C6, r25
}


void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
     804:	90 81       	ld	r25, Z
     806:	99 23       	and	r25, r25
     808:	b1 f7       	brne	.-20     	; 0x7f6 <USART_transmitStringToPC+0x4>
   USART_transmitByteToPC(*strData++);
}
     80a:	08 95       	ret

0000080c <RequestToPlayMP3file>:
	SPI_DeselectAll();
	return temp3;
}

void RequestToPlayMP3file(const char* thisFile)
{
     80c:	af 92       	push	r10
     80e:	bf 92       	push	r11
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	7c 01       	movw	r14, r24
	int i=0;
	printf("%s\n", fileName);
     822:	8a e8       	ldi	r24, 0x8A	; 138
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	0e 94 9a 19 	call	0x3334	; 0x3334 <puts>
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	06 c0       	rjmp	.+12     	; 0x83c <RequestToPlayMP3file+0x30>
	while(*thisFile!='.')
	{
		fileName[i++]=*(thisFile++);
     830:	f5 01       	movw	r30, r10
     832:	80 83       	st	Z, r24
     834:	78 01       	movw	r14, r16
		printf("%s\n", fileName);
     836:	c6 01       	movw	r24, r12
     838:	0e 94 9a 19 	call	0x3334	; 0x3334 <puts>

void RequestToPlayMP3file(const char* thisFile)
{
	int i=0;
	printf("%s\n", fileName);
	while(*thisFile!='.')
     83c:	f7 01       	movw	r30, r14
     83e:	81 91       	ld	r24, Z+
     840:	8f 01       	movw	r16, r30
     842:	9a e8       	ldi	r25, 0x8A	; 138
     844:	c9 2e       	mov	r12, r25
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	d9 2e       	mov	r13, r25
     84a:	56 01       	movw	r10, r12
     84c:	ac 0e       	add	r10, r28
     84e:	bd 1e       	adc	r11, r29
     850:	21 96       	adiw	r28, 0x01	; 1
     852:	8e 32       	cpi	r24, 0x2E	; 46
     854:	69 f7       	brne	.-38     	; 0x830 <RequestToPlayMP3file+0x24>
	{
		fileName[i++]=*(thisFile++);
		printf("%s\n", fileName);
	}
	printf("after loop\n", fileName);
     856:	00 d0       	rcall	.+0      	; 0x858 <RequestToPlayMP3file+0x4c>
     858:	00 d0       	rcall	.+0      	; 0x85a <RequestToPlayMP3file+0x4e>
     85a:	81 e3       	ldi	r24, 0x31	; 49
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	ed b7       	in	r30, 0x3d	; 61
     860:	fe b7       	in	r31, 0x3e	; 62
     862:	92 83       	std	Z+2, r25	; 0x02
     864:	81 83       	std	Z+1, r24	; 0x01
     866:	d4 82       	std	Z+4, r13	; 0x04
     868:	c3 82       	std	Z+3, r12	; 0x03
     86a:	0e 94 88 19 	call	0x3310	; 0x3310 <printf>
	printf("%s\n", fileName);
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	c6 01       	movw	r24, r12
     878:	0e 94 9a 19 	call	0x3334	; 0x3334 <puts>

	fileName[i++]=*(thisFile++);
     87c:	f7 01       	movw	r30, r14
     87e:	80 81       	ld	r24, Z
     880:	f5 01       	movw	r30, r10
     882:	80 83       	st	Z, r24
	fileName[i++]=*(thisFile++);
     884:	de 01       	movw	r26, r28
     886:	ac 0d       	add	r26, r12
     888:	bd 1d       	adc	r27, r13
     88a:	f8 01       	movw	r30, r16
     88c:	81 91       	ld	r24, Z+
     88e:	8c 93       	st	X, r24
	fileName[i++]=*(thisFile++);
     890:	de 01       	movw	r26, r28
     892:	a5 57       	subi	r26, 0x75	; 117
     894:	bc 4f       	sbci	r27, 0xFC	; 252
     896:	e8 01       	movw	r28, r16
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	8c 93       	st	X, r24
	fileName[i++]=*(thisFile++);
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	8c 93       	st	X, r24
	UI_MP3_file_Pending=true;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 84 03 	sts	0x0384, r24
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	08 95       	ret

000008be <VS1053_ReadCmd>:
	SPI_transmit(temp5);
	SPI_DeselectAll();
}

unsigned int VS1053_ReadCmd(unsigned char addr)
{
     8be:	1f 93       	push	r17
     8c0:	18 2f       	mov	r17, r24
	tempAddr=addr;
     8c2:	80 93 12 07 	sts	0x0712, r24
	SPI_Select_MP3_Cmd();
     8c6:	0e 94 b3 05 	call	0xb66	; 0xb66 <SPI_Select_MP3_Cmd>
	SPI_transmit(0x03);
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	SPI_transmit(addr);
     8d0:	81 2f       	mov	r24, r17
     8d2:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	temp1 = SPI_receive();
     8d6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	90 93 7c 03 	sts	0x037C, r25
     8e0:	80 93 7b 03 	sts	0x037B, r24
	temp2 = SPI_receive();
     8e4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	90 93 7e 03 	sts	0x037E, r25
     8ee:	80 93 7d 03 	sts	0x037D, r24
	temp3 = temp1*256 + temp2;
     8f2:	80 91 7b 03 	lds	r24, 0x037B
     8f6:	90 91 7c 03 	lds	r25, 0x037C
     8fa:	20 91 7d 03 	lds	r18, 0x037D
     8fe:	30 91 7e 03 	lds	r19, 0x037E
     902:	98 2f       	mov	r25, r24
     904:	88 27       	eor	r24, r24
     906:	82 0f       	add	r24, r18
     908:	93 1f       	adc	r25, r19
     90a:	90 93 80 03 	sts	0x0380, r25
     90e:	80 93 7f 03 	sts	0x037F, r24
	SPI_DeselectAll();
     912:	0e 94 a5 05 	call	0xb4a	; 0xb4a <SPI_DeselectAll>
	return temp3;
     916:	20 91 7f 03 	lds	r18, 0x037F
     91a:	30 91 80 03 	lds	r19, 0x0380
}
     91e:	c9 01       	movw	r24, r18
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <VS1053_WriteCmd>:
	SPI_transmit(data);
	SPI_DeselectAll();
}

void VS1053_WriteCmd(unsigned char addr, unsigned int cmd)
{
     924:	1f 93       	push	r17
     926:	18 2f       	mov	r17, r24
    temp4 = (cmd & 0xFF00) >> 8;
     928:	70 93 14 07 	sts	0x0714, r23
    temp5 = (cmd & 0x00FF);
     92c:	60 93 13 07 	sts	0x0713, r22
	tempAddr=addr;
     930:	80 93 12 07 	sts	0x0712, r24
	SPI_Select_MP3_Cmd();
     934:	0e 94 b3 05 	call	0xb66	; 0xb66 <SPI_Select_MP3_Cmd>
	SPI_transmit(0x02);
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	SPI_transmit(addr);
     93e:	81 2f       	mov	r24, r17
     940:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	SPI_transmit(temp4);
     944:	80 91 14 07 	lds	r24, 0x0714
     948:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	SPI_transmit(temp5);
     94c:	80 91 13 07 	lds	r24, 0x0713
     950:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	SPI_DeselectAll();
     954:	0e 94 a5 05 	call	0xb4a	; 0xb4a <SPI_DeselectAll>
}
     958:	1f 91       	pop	r17
     95a:	08 95       	ret

0000095c <VS1053_DecreaseVol>:
	}
	return true;
}

bool VS1053_DecreaseVol(void)
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
	int retry=0;
	VS1053_Vol=VS1053_Vol-((uint16_t)(1<<8)+1);
     960:	80 91 15 07 	lds	r24, 0x0715
     964:	90 91 16 07 	lds	r25, 0x0716
     968:	81 50       	subi	r24, 0x01	; 1
     96a:	91 40       	sbci	r25, 0x01	; 1
     96c:	90 93 16 07 	sts	0x0716, r25
     970:	80 93 15 07 	sts	0x0715, r24
	if(VS1053_Vol<=0x0101)
     974:	80 91 15 07 	lds	r24, 0x0715
     978:	90 91 16 07 	lds	r25, 0x0716
     97c:	82 50       	subi	r24, 0x02	; 2
     97e:	91 40       	sbci	r25, 0x01	; 1
     980:	18 f0       	brcs	.+6      	; 0x988 <VS1053_DecreaseVol+0x2c>
     982:	c0 e0       	ldi	r28, 0x00	; 0
     984:	d0 e0       	ldi	r29, 0x00	; 0
     986:	14 c0       	rjmp	.+40     	; 0x9b0 <VS1053_DecreaseVol+0x54>
	{
		VS1053_Vol=0x0101;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	90 93 16 07 	sts	0x0716, r25
     990:	80 93 15 07 	sts	0x0715, r24
     994:	17 c0       	rjmp	.+46     	; 0x9c4 <VS1053_DecreaseVol+0x68>
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
		{
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
     996:	60 91 15 07 	lds	r22, 0x0715
     99a:	70 91 16 07 	lds	r23, 0x0716
     99e:	8b e0       	ldi	r24, 0x0B	; 11
     9a0:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
			if(retry++ >10 )return false;
     9a4:	cb 30       	cpi	r28, 0x0B	; 11
     9a6:	d1 05       	cpc	r29, r1
     9a8:	11 f4       	brne	.+4      	; 0x9ae <VS1053_DecreaseVol+0x52>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0c c0       	rjmp	.+24     	; 0x9c6 <VS1053_DecreaseVol+0x6a>
     9ae:	21 96       	adiw	r28, 0x01	; 1
	{
		VS1053_Vol=0x0101;
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
     9b0:	8b e0       	ldi	r24, 0x0B	; 11
     9b2:	0e 94 5f 04 	call	0x8be	; 0x8be <VS1053_ReadCmd>
     9b6:	20 91 15 07 	lds	r18, 0x0715
     9ba:	30 91 16 07 	lds	r19, 0x0716
     9be:	82 17       	cp	r24, r18
     9c0:	93 07       	cpc	r25, r19
     9c2:	49 f7       	brne	.-46     	; 0x996 <VS1053_DecreaseVol+0x3a>
     9c4:	81 e0       	ldi	r24, 0x01	; 1
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
			if(retry++ >10 )return false;
		}
	}
	return true;
}					
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <VS1053_IncreaseVol>:
	VS1053_WriteCmd(0x00,0x0804);		//Software reset via mode register
	_delay_ms(20);
}

bool VS1053_IncreaseVol(void)
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
	int retry=0;
	VS1053_Vol=VS1053_Vol+((uint16_t)(1<<8)+1);
     9d0:	80 91 15 07 	lds	r24, 0x0715
     9d4:	90 91 16 07 	lds	r25, 0x0716
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	9e 4f       	sbci	r25, 0xFE	; 254
     9dc:	90 93 16 07 	sts	0x0716, r25
     9e0:	80 93 15 07 	sts	0x0715, r24
	if(VS1053_Vol>=0xFEFE)
     9e4:	80 91 15 07 	lds	r24, 0x0715
     9e8:	90 91 16 07 	lds	r25, 0x0716
     9ec:	8e 5f       	subi	r24, 0xFE	; 254
     9ee:	9e 4f       	sbci	r25, 0xFE	; 254
     9f0:	18 f4       	brcc	.+6      	; 0x9f8 <VS1053_IncreaseVol+0x2c>
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
     9f6:	14 c0       	rjmp	.+40     	; 0xa20 <VS1053_IncreaseVol+0x54>
	{
		VS1053_Vol=0xFEFE; 
     9f8:	8e ef       	ldi	r24, 0xFE	; 254
     9fa:	9e ef       	ldi	r25, 0xFE	; 254
     9fc:	90 93 16 07 	sts	0x0716, r25
     a00:	80 93 15 07 	sts	0x0715, r24
     a04:	17 c0       	rjmp	.+46     	; 0xa34 <VS1053_IncreaseVol+0x68>
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
		{
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
     a06:	60 91 15 07 	lds	r22, 0x0715
     a0a:	70 91 16 07 	lds	r23, 0x0716
     a0e:	8b e0       	ldi	r24, 0x0B	; 11
     a10:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
			if(retry++ >10 )return false;
     a14:	cb 30       	cpi	r28, 0x0B	; 11
     a16:	d1 05       	cpc	r29, r1
     a18:	11 f4       	brne	.+4      	; 0xa1e <VS1053_IncreaseVol+0x52>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0c c0       	rjmp	.+24     	; 0xa36 <VS1053_IncreaseVol+0x6a>
     a1e:	21 96       	adiw	r28, 0x01	; 1
	{
		VS1053_Vol=0xFEFE; 
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
     a20:	8b e0       	ldi	r24, 0x0B	; 11
     a22:	0e 94 5f 04 	call	0x8be	; 0x8be <VS1053_ReadCmd>
     a26:	20 91 15 07 	lds	r18, 0x0715
     a2a:	30 91 16 07 	lds	r19, 0x0716
     a2e:	82 17       	cp	r24, r18
     a30:	93 07       	cpc	r25, r19
     a32:	49 f7       	brne	.-46     	; 0xa06 <VS1053_IncreaseVol+0x3a>
     a34:	81 e0       	ldi	r24, 0x01	; 1
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
			if(retry++ >10 )return false;
		}
	}
	return true;
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <VS1053_SoftwareReset>:
	return 0;
}

void VS1053_SoftwareReset(void)
{
	VS1053_WriteCmd(0x00,0x0804);		//Software reset via mode register
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	64 e0       	ldi	r22, 0x04	; 4
     a40:	78 e0       	ldi	r23, 0x08	; 8
     a42:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a46:	80 e4       	ldi	r24, 0x40	; 64
     a48:	9c e9       	ldi	r25, 0x9C	; 156
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <VS1053_SoftwareReset+0xe>
	_delay_ms(20);
}
     a4e:	08 95       	ret

00000a50 <VS1053_WriteData>:
	}
	return true;
}					

void VS1053_WriteData(unsigned char data)
{
     a50:	1f 93       	push	r17
     a52:	18 2f       	mov	r17, r24
	SPI_Select_MP3_Data();
     a54:	0e 94 ae 05 	call	0xb5c	; 0xb5c <SPI_Select_MP3_Data>
	SPI_transmit(data);
     a58:	81 2f       	mov	r24, r17
     a5a:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
	SPI_DeselectAll();
     a5e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <SPI_DeselectAll>
}
     a62:	1f 91       	pop	r17
     a64:	08 95       	ret

00000a66 <VS1053_Initialize>:
volatile unsigned char tempAddr;

volatile uint16_t VS1053_Vol;

unsigned char VS1053_Initialize(void)
{
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
	unsigned char retry;
	SPI_DeselectAll();
     a6a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <SPI_DeselectAll>
	SPI_PORT &= ~_BV(MP3_RESET);	//De assert RESET line (Chip in the reset state)
     a6e:	2c 98       	cbi	0x05, 4	; 5
     a70:	00 e4       	ldi	r16, 0x40	; 64
     a72:	1c e9       	ldi	r17, 0x9C	; 156
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <VS1053_Initialize+0x10>
	_delay_ms(20);					//Hold for 20ms
	SPI_PORT |= _BV(MP3_RESET);		//Assert RESET line (Chip is powered now)
     a7a:	2c 9a       	sbi	0x05, 4	; 5
	SPI_1X();						//Low speed mode
     a7c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <SPI_1X>
     a80:	c8 01       	movw	r24, r16
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <VS1053_Initialize+0x1c>
     a86:	00 e0       	ldi	r16, 0x00	; 0
     a88:	0a c0       	rjmp	.+20     	; 0xa9e <VS1053_Initialize+0x38>
	_delay_ms(20);					//Hold for 20ms
	retry=0;

	while(VS1053_ReadCmd(0x03) != 0x9800)	//REDO if not written properly	
	{
		VS1053_WriteCmd(0x03,0x9800);		//set PLL register to 3.5 (preferred for normal operation)
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	78 e9       	ldi	r23, 0x98	; 152
     a90:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
		if(retry++ >10 )return 1;			//try this for 10 times
     a94:	0b 30       	cpi	r16, 0x0B	; 11
     a96:	11 f4       	brne	.+4      	; 0xa9c <VS1053_Initialize+0x36>
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	54 c0       	rjmp	.+168    	; 0xb44 <VS1053_Initialize+0xde>
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
	SPI_PORT |= _BV(MP3_RESET);		//Assert RESET line (Chip is powered now)
	SPI_1X();						//Low speed mode
	_delay_ms(20);					//Hold for 20ms
	retry=0;

	while(VS1053_ReadCmd(0x03) != 0x9800)	//REDO if not written properly	
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	0e 94 5f 04 	call	0x8be	; 0x8be <VS1053_ReadCmd>
     aa4:	80 50       	subi	r24, 0x00	; 0
     aa6:	98 49       	sbci	r25, 0x98	; 152
     aa8:	81 f7       	brne	.-32     	; 0xa8a <VS1053_Initialize+0x24>
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	9c e9       	ldi	r25, 0x9C	; 156
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <VS1053_Initialize+0x48>
     ab2:	00 e0       	ldi	r16, 0x00	; 0
     ab4:	0a c0       	rjmp	.+20     	; 0xaca <VS1053_Initialize+0x64>
	//VS1053_WriteCmd(0x05,0x000A);			//Set low sample rate
	
	retry=0;
	while(VS1053_ReadCmd(0x0B) != 0xFEFE)	//REDO if not written properly
	{
		VS1053_WriteCmd(0x0B,0xfefe);		//Total silence
     ab6:	8b e0       	ldi	r24, 0x0B	; 11
     ab8:	6e ef       	ldi	r22, 0xFE	; 254
     aba:	7e ef       	ldi	r23, 0xFE	; 254
     abc:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
		if(retry++ >10 )return 2;
     ac0:	0b 30       	cpi	r16, 0x0B	; 11
     ac2:	11 f4       	brne	.+4      	; 0xac8 <VS1053_Initialize+0x62>
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	3e c0       	rjmp	.+124    	; 0xb44 <VS1053_Initialize+0xde>
     ac8:	0f 5f       	subi	r16, 0xFF	; 255
	_delay_ms(20);
	
	//VS1053_WriteCmd(0x05,0x000A);			//Set low sample rate
	
	retry=0;
	while(VS1053_ReadCmd(0x0B) != 0xFEFE)	//REDO if not written properly
     aca:	8b e0       	ldi	r24, 0x0B	; 11
     acc:	0e 94 5f 04 	call	0x8be	; 0x8be <VS1053_ReadCmd>
     ad0:	8e 5f       	subi	r24, 0xFE	; 254
     ad2:	9e 4f       	sbci	r25, 0xFE	; 254
     ad4:	81 f7       	brne	.-32     	; 0xab6 <VS1053_Initialize+0x50>
	{
		VS1053_WriteCmd(0x0B,0xfefe);		//Total silence
		if(retry++ >10 )return 2;
	}

	VS1053_WriteCmd(0x05,0xac45);			//Activate sample rate as 44.1kHz stereo
     ad6:	85 e0       	ldi	r24, 0x05	; 5
     ad8:	65 e4       	ldi	r22, 0x45	; 69
     ada:	7c ea       	ldi	r23, 0xAC	; 172
     adc:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
     ae0:	00 e0       	ldi	r16, 0x00	; 0
     ae2:	0a c0       	rjmp	.+20     	; 0xaf8 <VS1053_Initialize+0x92>

	retry=0;
	while(VS1053_ReadCmd(0x0b) != 0x2828)	//REDO if not written properly
	{
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
     ae4:	8b e0       	ldi	r24, 0x0B	; 11
     ae6:	68 e2       	ldi	r22, 0x28	; 40
     ae8:	78 e2       	ldi	r23, 0x28	; 40
     aea:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
		if(retry++ >10 )return 3;			//try this for 10 times
     aee:	0b 30       	cpi	r16, 0x0B	; 11
     af0:	11 f4       	brne	.+4      	; 0xaf6 <VS1053_Initialize+0x90>
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	27 c0       	rjmp	.+78     	; 0xb44 <VS1053_Initialize+0xde>
     af6:	0f 5f       	subi	r16, 0xFF	; 255
	}

	VS1053_WriteCmd(0x05,0xac45);			//Activate sample rate as 44.1kHz stereo

	retry=0;
	while(VS1053_ReadCmd(0x0b) != 0x2828)	//REDO if not written properly
     af8:	8b e0       	ldi	r24, 0x0B	; 11
     afa:	0e 94 5f 04 	call	0x8be	; 0x8be <VS1053_ReadCmd>
     afe:	28 e2       	ldi	r18, 0x28	; 40
     b00:	88 32       	cpi	r24, 0x28	; 40
     b02:	92 07       	cpc	r25, r18
     b04:	79 f7       	brne	.-34     	; 0xae4 <VS1053_Initialize+0x7e>
	{
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
		if(retry++ >10 )return 3;			//try this for 10 times
	}
	VS1053_Vol=0x2828;
     b06:	90 93 16 07 	sts	0x0716, r25
     b0a:	80 93 15 07 	sts	0x0715, r24
     b0e:	00 e0       	ldi	r16, 0x00	; 0
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <VS1053_Initialize+0xc0>
	retry=0;
	while(VS1053_ReadCmd(0x00) != 0x0800)			//REDO if not written properly
	{
		VS1053_WriteCmd(0x00,0x0800);				//Set mode register to SDINEW mode and MICIN
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	78 e0       	ldi	r23, 0x08	; 8
     b18:	0e 94 92 04 	call	0x924	; 0x924 <VS1053_WriteCmd>
		if(retry++ >10 )return 4;					//try this for 10 times
     b1c:	0b 30       	cpi	r16, 0x0B	; 11
     b1e:	11 f4       	brne	.+4      	; 0xb24 <VS1053_Initialize+0xbe>
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	10 c0       	rjmp	.+32     	; 0xb44 <VS1053_Initialize+0xde>
     b24:	0f 5f       	subi	r16, 0xFF	; 255
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
		if(retry++ >10 )return 3;			//try this for 10 times
	}
	VS1053_Vol=0x2828;
	retry=0;
	while(VS1053_ReadCmd(0x00) != 0x0800)			//REDO if not written properly
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 5f 04 	call	0x8be	; 0x8be <VS1053_ReadCmd>
     b2c:	80 50       	subi	r24, 0x00	; 0
     b2e:	98 40       	sbci	r25, 0x08	; 8
     b30:	81 f7       	brne	.-32     	; 0xb12 <VS1053_Initialize+0xac>
     b32:	80 e4       	ldi	r24, 0x40	; 64
     b34:	9c e9       	ldi	r25, 0x9C	; 156
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <VS1053_Initialize+0xd0>
	{
		VS1053_WriteCmd(0x00,0x0800);				//Set mode register to SDINEW mode and MICIN
		if(retry++ >10 )return 4;					//try this for 10 times
	}
	_delay_ms(20);
	VS1053_SoftwareReset();
     b3a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <VS1053_SoftwareReset>
	//_delay_ms(20);
	SPI_2X();
     b3e:	0e 94 b8 05 	call	0xb70	; 0xb70 <SPI_2X>
     b42:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <SPI_DeselectAll>:
	SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
	SPI_2X();
}

void SPI_DeselectAll(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b4a:	85 b1       	in	r24, 0x05	; 5
     b4c:	87 60       	ori	r24, 0x07	; 7
     b4e:	85 b9       	out	0x05, r24	; 5
}
     b50:	08 95       	ret

00000b52 <SPI_Select_SD>:

void SPI_Select_SD(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b52:	85 b1       	in	r24, 0x05	; 5
     b54:	87 60       	ori	r24, 0x07	; 7
     b56:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(SD_SELECT);
     b58:	28 98       	cbi	0x05, 0	; 5
}
     b5a:	08 95       	ret

00000b5c <SPI_Select_MP3_Data>:

void SPI_Select_MP3_Data(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b5c:	85 b1       	in	r24, 0x05	; 5
     b5e:	87 60       	ori	r24, 0x07	; 7
     b60:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(MP3_DATA);
     b62:	2a 98       	cbi	0x05, 2	; 5
}
     b64:	08 95       	ret

00000b66 <SPI_Select_MP3_Cmd>:

void SPI_Select_MP3_Cmd(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b66:	85 b1       	in	r24, 0x05	; 5
     b68:	87 60       	ori	r24, 0x07	; 7
     b6a:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(MP3_CMD);
     b6c:	29 98       	cbi	0x05, 1	; 5
}
     b6e:	08 95       	ret

00000b70 <SPI_2X>:

void SPI_2X(void){ //4MHz
	SPCR &= ~_BV(SPR1);
     b70:	8c b5       	in	r24, 0x2c	; 44
     b72:	8d 7f       	andi	r24, 0xFD	; 253
     b74:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR0);
     b76:	8c b5       	in	r24, 0x2c	; 44
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV(SPI2X);
     b7c:	8d b5       	in	r24, 0x2d	; 45
     b7e:	81 60       	ori	r24, 0x01	; 1
     b80:	8d bd       	out	0x2d, r24	; 45
}
     b82:	08 95       	ret

00000b84 <SPI_Initialize>:
#include "Globals.h"

void SPI_Initialize(void){
	DDRB |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD)|_BV(MP3_RESET);
     b84:	84 b1       	in	r24, 0x04	; 4
     b86:	87 61       	ori	r24, 0x17	; 23
     b88:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~_BV(MP3_DREQ);
     b8a:	23 98       	cbi	0x04, 3	; 4
	DDRB=0xB7;
     b8c:	87 eb       	ldi	r24, 0xB7	; 183
     b8e:	84 b9       	out	0x04, r24	; 4
	SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
     b90:	80 e5       	ldi	r24, 0x50	; 80
     b92:	8c bd       	out	0x2c, r24	; 44
	SPI_2X();
     b94:	0e 94 b8 05 	call	0xb70	; 0xb70 <SPI_2X>
}
     b98:	08 95       	ret

00000b9a <SPI_1X>:
	SPCR &= ~_BV(SPR0);
	SPSR |= _BV(SPI2X);
}

void SPI_1X(void){	//62.5 kHz
	SPCR |= _BV(SPR1)|_BV(SPR0);
     b9a:	8c b5       	in	r24, 0x2c	; 44
     b9c:	83 60       	ori	r24, 0x03	; 3
     b9e:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
     ba0:	8d b5       	in	r24, 0x2d	; 45
     ba2:	8e 7f       	andi	r24, 0xFE	; 254
     ba4:	8d bd       	out	0x2d, r24	; 45
}
     ba6:	08 95       	ret

00000ba8 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data){
	// Start transmission
	SPDR = data;
     ba8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     baa:	0d b4       	in	r0, 0x2d	; 45
     bac:	07 fe       	sbrs	r0, 7
     bae:	fd cf       	rjmp	.-6      	; 0xbaa <SPI_transmit+0x2>
	data = SPDR;
     bb0:	8e b5       	in	r24, 0x2e	; 46
	return(data);
}
     bb2:	08 95       	ret

00000bb4 <SPI_receive>:

unsigned char SPI_receive(void){
	unsigned char data;
	// Wait for reception complete

	SPDR = 0xff;
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     bb8:	0d b4       	in	r0, 0x2d	; 45
     bba:	07 fe       	sbrs	r0, 7
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <SPI_receive+0x4>
	data = SPDR;
     bbe:	8e b5       	in	r24, 0x2e	; 46

	// Return data register
	return data;
}
     bc0:	08 95       	ret

00000bc2 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	d8 2e       	mov	r13, r24
     bce:	7a 01       	movw	r14, r20
     bd0:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
     bd2:	80 91 eb 05 	lds	r24, 0x05EB
     bd6:	88 23       	and	r24, r24
     bd8:	b9 f4       	brne	.+46     	; 0xc08 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
     bda:	8d 2d       	mov	r24, r13
     bdc:	81 51       	subi	r24, 0x11	; 17
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	60 f0       	brcs	.+24     	; 0xbfa <SD_sendCommand+0x38>
     be2:	88 e1       	ldi	r24, 0x18	; 24
     be4:	d8 16       	cp	r13, r24
     be6:	49 f0       	breq	.+18     	; 0xbfa <SD_sendCommand+0x38>
     be8:	89 e1       	ldi	r24, 0x19	; 25
     bea:	d8 16       	cp	r13, r24
     bec:	31 f0       	breq	.+12     	; 0xbfa <SD_sendCommand+0x38>
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	d8 16       	cp	r13, r24
     bf2:	19 f0       	breq	.+6      	; 0xbfa <SD_sendCommand+0x38>
     bf4:	81 e2       	ldi	r24, 0x21	; 33
     bf6:	d8 16       	cp	r13, r24
     bf8:	39 f4       	brne	.+14     	; 0xc08 <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
     bfa:	39 e0       	ldi	r19, 0x09	; 9
     bfc:	ee 0c       	add	r14, r14
     bfe:	ff 1c       	adc	r15, r15
     c00:	00 1f       	adc	r16, r16
     c02:	11 1f       	adc	r17, r17
     c04:	3a 95       	dec	r19
     c06:	d1 f7       	brne	.-12     	; 0xbfc <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
     c08:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
     c0a:	8d 2d       	mov	r24, r13
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SPI_transmit(arg>>24);
     c12:	81 2f       	mov	r24, r17
     c14:	99 27       	eor	r25, r25
     c16:	aa 27       	eor	r26, r26
     c18:	bb 27       	eor	r27, r27
     c1a:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SPI_transmit(arg>>16);
     c1e:	c8 01       	movw	r24, r16
     c20:	aa 27       	eor	r26, r26
     c22:	bb 27       	eor	r27, r27
     c24:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SPI_transmit(arg>>8);
     c28:	bb 27       	eor	r27, r27
     c2a:	a1 2f       	mov	r26, r17
     c2c:	90 2f       	mov	r25, r16
     c2e:	8f 2d       	mov	r24, r15
     c30:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SPI_transmit(arg);
     c34:	8e 2d       	mov	r24, r14
     c36:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
     c3a:	88 e0       	ldi	r24, 0x08	; 8
     c3c:	d8 16       	cp	r13, r24
     c3e:	11 f4       	brne	.+4      	; 0xc44 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
     c40:	87 e8       	ldi	r24, 0x87	; 135
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
     c44:	85 e9       	ldi	r24, 0x95	; 149
     c46:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
     c4e:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     c50:	d1 f0       	breq	.+52     	; 0xc86 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
     c52:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     c56:	08 2f       	mov	r16, r24
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	c9 f3       	breq	.-14     	; 0xc4e <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
     c5c:	88 23       	and	r24, r24
     c5e:	99 f4       	brne	.+38     	; 0xc86 <SD_sendCommand+0xc4>
     c60:	8a e3       	ldi	r24, 0x3A	; 58
     c62:	d8 16       	cp	r13, r24
     c64:	81 f4       	brne	.+32     	; 0xc86 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
     c66:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
     c6a:	86 ff       	sbrs	r24, 6
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <SD_sendCommand+0xb4>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 eb 05 	sts	0x05EB, r24
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
     c76:	10 92 eb 05 	sts	0x05EB, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
     c7a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
     c7e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
  SPI_receive(); 
     c82:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
     c86:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
SD_CS_DEASSERT;
     c8a:	28 9a       	sbi	0x05, 0	; 5

return response; //return state
}
     c8c:	80 2f       	mov	r24, r16
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	08 95       	ret

00000c9a <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	7b 01       	movw	r14, r22
     cac:	8c 01       	movw	r16, r24
     cae:	59 01       	movw	r10, r18
     cb0:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	b8 01       	movw	r22, r16
     cb6:	a7 01       	movw	r20, r14
     cb8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     cbc:	88 23       	and	r24, r24
     cbe:	b9 f4       	brne	.+46     	; 0xcee <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
     cc0:	08 94       	sec
     cc2:	e1 08       	sbc	r14, r1
     cc4:	f1 08       	sbc	r15, r1
     cc6:	01 09       	sbc	r16, r1
     cc8:	11 09       	sbc	r17, r1
     cca:	ea 0c       	add	r14, r10
     ccc:	fb 1c       	adc	r15, r11
     cce:	0c 1d       	adc	r16, r12
     cd0:	1d 1d       	adc	r17, r13
     cd2:	81 e2       	ldi	r24, 0x21	; 33
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
if(response != 0x00)
     cdc:	88 23       	and	r24, r24
     cde:	39 f4       	brne	.+14     	; 0xcee <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
     ce0:	86 e2       	ldi	r24, 0x26	; 38
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	08 95       	ret

00000d00 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
     d0e:	1f 5f       	subi	r17, 0xFF	; 255
     d10:	1a 30       	cpi	r17, 0x0A	; 10
     d12:	d1 f7       	brne	.-12     	; 0xd08 <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
     d14:	28 98       	cbi	0x05, 0	; 5
     d16:	c0 e0       	ldi	r28, 0x00	; 0
     d18:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
   retry++;
     d28:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
     d2a:	c1 32       	cpi	r28, 0x21	; 33
     d2c:	d1 05       	cpc	r29, r1
     d2e:	11 f4       	brne	.+4      	; 0xd34 <SD_init+0x34>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	56 c0       	rjmp	.+172    	; 0xde0 <SD_init+0xe0>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	89 f7       	brne	.-30     	; 0xd1a <SD_init+0x1a>

SD_CS_DEASSERT;
     d38:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit (0xff);
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SPI_transmit (0xff);
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
     d46:	c0 e0       	ldi	r28, 0x00	; 0
     d48:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	4a ea       	ldi	r20, 0xAA	; 170
     d4e:	51 e0       	ldi	r21, 0x01	; 1
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
retry++;
     d58:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     d5a:	cf 3f       	cpi	r28, 0xFF	; 255
     d5c:	d1 05       	cpc	r29, r1
     d5e:	29 f4       	brne	.+10     	; 0xd6a <SD_init+0x6a>
   {
	  //TX_NEWLINE;
	  SD_version = 1;
	  cardType = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 f9 05 	sts	0x05F9, r24
     d66:	11 e0       	ldi	r17, 0x01	; 1
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <SD_init+0x70>
	  break;
   } //time out

}while(response != 0x01);
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	71 f7       	brne	.-36     	; 0xd4a <SD_init+0x4a>
     d6e:	12 e0       	ldi	r17, 0x02	; 2
     d70:	c0 e0       	ldi	r28, 0x00	; 0
     d72:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
     d74:	87 e3       	ldi	r24, 0x37	; 55
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
     d82:	89 e2       	ldi	r24, 0x29	; 41
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e4       	ldi	r23, 0x40	; 64
     d8c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>

retry++;
     d90:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     d92:	cf 3f       	cpi	r28, 0xFF	; 255
     d94:	d1 05       	cpc	r29, r1
     d96:	11 f4       	brne	.+4      	; 0xd9c <SD_init+0x9c>
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	22 c0       	rjmp	.+68     	; 0xde0 <SD_init+0xe0>
   {
      //TX_NEWLINE;
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
     d9c:	88 23       	and	r24, r24
     d9e:	51 f7       	brne	.-44     	; 0xd74 <SD_init+0x74>


retry = 0;
SDHC_flag = 0;
     da0:	10 92 eb 05 	sts	0x05EB, r1

if (SD_version == 2)
     da4:	12 30       	cpi	r17, 0x02	; 2
     da6:	e1 f4       	brne	.+56     	; 0xde0 <SD_init+0xe0>
     da8:	c0 e0       	ldi	r28, 0x00	; 0
     daa:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
     dac:	8a e3       	ldi	r24, 0x3A	; 58
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
	 retry++;
     dba:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
     dbc:	cf 3f       	cpi	r28, 0xFF	; 255
     dbe:	d1 05       	cpc	r29, r1
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <SD_init+0xc8>
     {
       //TX_NEWLINE;
	   cardType = 0;
     dc2:	10 92 f9 05 	sts	0x05F9, r1
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <SD_init+0xcc>
	   break;
     } //time out

   }while(response != 0x00);
     dc8:	88 23       	and	r24, r24
     dca:	81 f7       	brne	.-32     	; 0xdac <SD_init+0xac>

   if(SDHC_flag == 1) cardType = 2;
     dcc:	80 91 eb 05 	lds	r24, 0x05EB
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <SD_init+0xd8>
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <SD_init+0xda>
   else cardType = 3;
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	80 93 f9 05 	sts	0x05F9, r24
     dde:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ab 01       	movw	r20, r22
     dee:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
     df0:	88 e1       	ldi	r24, 0x18	; 24
     df2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     df6:	88 23       	and	r24, r24
     df8:	11 f0       	breq	.+4      	; 0xdfe <SD_writeSingleBlock+0x16>
     dfa:	98 2f       	mov	r25, r24
     dfc:	3f c0       	rjmp	.+126    	; 0xe7c <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
     dfe:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     e00:	8e ef       	ldi	r24, 0xFE	; 254
     e02:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
     e06:	c0 e0       	ldi	r28, 0x00	; 0
     e08:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
     e0a:	fe 01       	movw	r30, r28
     e0c:	e0 53       	subi	r30, 0x30	; 48
     e0e:	fc 4f       	sbci	r31, 0xFC	; 252
     e10:	80 81       	ld	r24, Z
     e12:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
     e16:	21 96       	adiw	r28, 0x01	; 1
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	c0 30       	cpi	r28, 0x00	; 0
     e1c:	d8 07       	cpc	r29, r24
     e1e:	a9 f7       	brne	.-22     	; 0xe0a <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SPI_transmit(0xff);
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>

response = SPI_receive();
     e2c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     e30:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     e32:	8f 71       	andi	r24, 0x1F	; 31
     e34:	85 30       	cpi	r24, 0x05	; 5
     e36:	41 f0       	breq	.+16     	; 0xe48 <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     e38:	28 9a       	sbi	0x05, 0	; 5
     e3a:	20 c0       	rjmp	.+64     	; 0xe7c <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	cf 3f       	cpi	r28, 0xFF	; 255
     e40:	d8 07       	cpc	r29, r24
     e42:	91 f0       	breq	.+36     	; 0xe68 <SD_writeSingleBlock+0x80>
     e44:	21 96       	adiw	r28, 0x01	; 1
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <SD_writeSingleBlock+0x64>
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     e4c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     e50:	88 23       	and	r24, r24
     e52:	a1 f3       	breq	.-24     	; 0xe3c <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
     e54:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     e5c:	28 98       	cbi	0x05, 0	; 5
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	cf 3f       	cpi	r28, 0xFF	; 255
     e64:	d8 07       	cpc	r29, r24
     e66:	19 f4       	brne	.+6      	; 0xe6e <SD_writeSingleBlock+0x86>
     e68:	28 9a       	sbi	0x05, 0	; 5
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <SD_writeSingleBlock+0x94>
     e6e:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     e70:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     e74:	88 23       	and	r24, r24
     e76:	a1 f3       	breq	.-24     	; 0xe60 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
     e78:	28 9a       	sbi	0x05, 0	; 5
     e7a:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
     e7c:	89 2f       	mov	r24, r25
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ab 01       	movw	r20, r22
     e8c:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
     e8e:	81 e1       	ldi	r24, 0x11	; 17
     e90:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SD_sendCommand>
     e94:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     e96:	88 23       	and	r24, r24
     e98:	09 f5       	brne	.+66     	; 0xedc <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
     e9a:	28 98       	cbi	0x05, 0	; 5
     e9c:	c0 e0       	ldi	r28, 0x00	; 0
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     ea2:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
     ea4:	19 f4       	brne	.+6      	; 0xeac <SD_readSingleBlock+0x28>
     ea6:	28 9a       	sbi	0x05, 0	; 5
     ea8:	11 e0       	ldi	r17, 0x01	; 1
     eaa:	18 c0       	rjmp	.+48     	; 0xedc <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     eac:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     eb0:	8e 3f       	cpi	r24, 0xFE	; 254
     eb2:	b9 f7       	brne	.-18     	; 0xea2 <SD_readSingleBlock+0x1e>
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
     eb6:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
     eb8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
     ebc:	fe 01       	movw	r30, r28
     ebe:	e0 53       	subi	r30, 0x30	; 48
     ec0:	fc 4f       	sbci	r31, 0xFC	; 252
     ec2:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
     ec4:	21 96       	adiw	r28, 0x01	; 1
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	c0 30       	cpi	r28, 0x00	; 0
     eca:	d8 07       	cpc	r29, r24
     ecc:	a9 f7       	brne	.-22     	; 0xeb8 <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     ece:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
SPI_receive();
     ed2:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
     ed6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SPI_receive>
SD_CS_DEASSERT;
     eda:	28 9a       	sbi	0x05, 0	; 5

return 0;
}
     edc:	81 2f       	mov	r24, r17
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	08 95       	ret

00000ee6 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     eee:	20 91 d1 05 	lds	r18, 0x05D1
     ef2:	30 91 d2 05 	lds	r19, 0x05D2
     ef6:	e0 90 97 03 	lds	r14, 0x0397
     efa:	f0 90 98 03 	lds	r15, 0x0398
     efe:	00 91 99 03 	lds	r16, 0x0399
     f02:	10 91 9a 03 	lds	r17, 0x039A
     f06:	62 50       	subi	r22, 0x02	; 2
     f08:	70 40       	sbci	r23, 0x00	; 0
     f0a:	80 40       	sbci	r24, 0x00	; 0
     f0c:	90 40       	sbci	r25, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
     f16:	9b 01       	movw	r18, r22
     f18:	ac 01       	movw	r20, r24
     f1a:	2e 0d       	add	r18, r14
     f1c:	3f 1d       	adc	r19, r15
     f1e:	40 1f       	adc	r20, r16
     f20:	51 1f       	adc	r21, r17
}
     f22:	b9 01       	movw	r22, r18
     f24:	ca 01       	movw	r24, r20
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret

00000f30 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	2b 97       	sbiw	r28, 0x0b	; 11
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	8c 01       	movw	r16, r24
     f4a:	58 2f       	mov	r21, r24
     f4c:	a1 2f       	mov	r26, r17
     f4e:	fc 01       	movw	r30, r24
     f50:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char fileNameFAT[11];
	unsigned char j, k;

	for(j=0; j<12; j++)
	if(fileName[j] == '.') break;
     f52:	80 81       	ld	r24, Z
     f54:	8e 32       	cpi	r24, 0x2E	; 46
     f56:	19 f4       	brne	.+6      	; 0xf5e <convertFileName+0x2e>

	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}
     f58:	49 30       	cpi	r20, 0x09	; 9
     f5a:	30 f0       	brcs	.+12     	; 0xf68 <convertFileName+0x38>
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
	unsigned char fileNameFAT[11];
	unsigned char j, k;

	for(j=0; j<12; j++)
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	31 96       	adiw	r30, 0x01	; 1
     f62:	4c 30       	cpi	r20, 0x0C	; 12
     f64:	b1 f7       	brne	.-20     	; 0xf52 <convertFileName+0x22>
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <convertFileName+0x4a>
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	85 2f       	mov	r24, r21
     f70:	9a 2f       	mov	r25, r26
     f72:	9c 01       	movw	r18, r24
     f74:	f9 01       	movw	r30, r18
     f76:	db 01       	movw	r26, r22
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <convertFileName+0x5a>
	if(fileName[j] == '.') break;

	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}
     f7a:	84 e5       	ldi	r24, 0x54	; 84
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	52 c0       	rjmp	.+164    	; 0x102a <convertFileName+0xfa>

	for(k=0; k<j; k++) //setting file name
	  fileNameFAT[k] = fileName[k];
     f86:	81 91       	ld	r24, Z+
     f88:	8d 93       	st	X+, r24
	for(j=0; j<12; j++)
	if(fileName[j] == '.') break;

	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}

	for(k=0; k<j; k++) //setting file name
     f8a:	8e 2f       	mov	r24, r30
     f8c:	85 1b       	sub	r24, r21
     f8e:	84 17       	cp	r24, r20
     f90:	d0 f3       	brcs	.-12     	; 0xf86 <convertFileName+0x56>
     f92:	84 2f       	mov	r24, r20
	  fileNameFAT[k] = fileName[k];

	for(k=j; k<=7; k++) //filling file name trail with blanks
	  fileNameFAT[k] = ' ';
     f94:	9e 01       	movw	r18, r28
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	90 e2       	ldi	r25, 0x20	; 32
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <convertFileName+0x78>
     f9e:	f9 01       	movw	r30, r18
     fa0:	e8 0f       	add	r30, r24
     fa2:	f1 1d       	adc	r31, r1
     fa4:	90 83       	st	Z, r25
	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}

	for(k=0; k<j; k++) //setting file name
	  fileNameFAT[k] = fileName[k];

	for(k=j; k<=7; k++) //filling file name trail with blanks
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	c9 f7       	brne	.-14     	; 0xf9e <convertFileName+0x6e>
	  fileNameFAT[k] = ' ';

	j++;
     fac:	24 2f       	mov	r18, r20
     fae:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else //filling extension trail with blanks
		{
			while(k<11)
			{
				fileNameFAT[k++] = ' ';
     fb0:	ae 01       	movw	r20, r28
     fb2:	4f 5f       	subi	r20, 0xFF	; 255
     fb4:	5f 4f       	sbci	r21, 0xFF	; 255
     fb6:	30 e2       	ldi	r19, 0x20	; 32
	  fileNameFAT[k] = ' ';

	j++;
	for(k=8; k<11; k++) //setting file extention
	{
		if(fileName[j] != 0)
     fb8:	f8 01       	movw	r30, r16
     fba:	e2 0f       	add	r30, r18
     fbc:	f1 1d       	adc	r31, r1
     fbe:	90 81       	ld	r25, Z
     fc0:	99 23       	and	r25, r25
     fc2:	59 f0       	breq	.+22     	; 0xfda <convertFileName+0xaa>
		{
			fileNameFAT[k] = fileName[j++];
     fc4:	fa 01       	movw	r30, r20
     fc6:	e8 0f       	add	r30, r24
     fc8:	f1 1d       	adc	r31, r1
     fca:	90 83       	st	Z, r25
     fcc:	2f 5f       	subi	r18, 0xFF	; 255
     fce:	07 c0       	rjmp	.+14     	; 0xfde <convertFileName+0xae>
		}
		else //filling extension trail with blanks
		{
			while(k<11)
			{
				fileNameFAT[k++] = ' ';
     fd0:	fa 01       	movw	r30, r20
     fd2:	e8 0f       	add	r30, r24
     fd4:	f1 1d       	adc	r31, r1
     fd6:	30 83       	st	Z, r19
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
		{
			fileNameFAT[k] = fileName[j++];
		}
		else //filling extension trail with blanks
		{
			while(k<11)
     fda:	8b 30       	cpi	r24, 0x0B	; 11
     fdc:	c8 f3       	brcs	.-14     	; 0xfd0 <convertFileName+0xa0>

	for(k=j; k<=7; k++) //filling file name trail with blanks
	  fileNameFAT[k] = ' ';

	j++;
	for(k=8; k<11; k++) //setting file extention
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	8b 30       	cpi	r24, 0x0B	; 11
     fe2:	50 f3       	brcs	.-44     	; 0xfb8 <convertFileName+0x88>
				fileNameFAT[k++] = ' ';
			}
		}
	}

	for(j=0; j<11; j++) //converting small letters to caps
     fe4:	9e 01       	movw	r18, r28
     fe6:	24 5f       	subi	r18, 0xF4	; 244
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     fea:	fb 01       	movw	r30, r22
     fec:	90 81       	ld	r25, Z
     fee:	89 2f       	mov	r24, r25
     ff0:	81 56       	subi	r24, 0x61	; 97
     ff2:	8a 31       	cpi	r24, 0x1A	; 26
     ff4:	10 f4       	brcc	.+4      	; 0xffa <convertFileName+0xca>
		{
	    	fileNameFAT[j] -= 0x20;
     ff6:	90 52       	subi	r25, 0x20	; 32
     ff8:	90 83       	st	Z, r25
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
				fileNameFAT[k++] = ' ';
			}
		}
	}

	for(j=0; j<11; j++) //converting small letters to caps
     ffe:	62 17       	cp	r22, r18
    1000:	73 07       	cpc	r23, r19
    1002:	99 f7       	brne	.-26     	; 0xfea <convertFileName+0xba>
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
	    	fileNameFAT[j] -= 0x20;
		}
	}

	for(j=0; j<11; j++)
	  fileName[j] = fileNameFAT[j];
    1008:	ae 01       	movw	r20, r28
    100a:	4f 5f       	subi	r20, 0xFF	; 255
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	f8 01       	movw	r30, r16
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	da 01       	movw	r26, r20
    1016:	a2 0f       	add	r26, r18
    1018:	b3 1f       	adc	r27, r19
    101a:	8c 91       	ld	r24, X
    101c:	80 83       	st	Z, r24
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
		{
	    	fileNameFAT[j] -= 0x20;
		}
	}

	for(j=0; j<11; j++)
    1022:	2b 30       	cpi	r18, 0x0B	; 11
    1024:	31 05       	cpc	r19, r1
    1026:	99 f7       	brne	.-26     	; 0x100e <convertFileName+0xde>
    1028:	80 e0       	ldi	r24, 0x00	; 0
	  fileName[j] = fileNameFAT[j];

	return 0;
}
    102a:	2b 96       	adiw	r28, 0x0b	; 11
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	64 97       	sbiw	r28, 0x14	; 20
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	98 2e       	mov	r9, r24
    1068:	6a 01       	movw	r12, r20
    106a:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
    106c:	de 01       	movw	r26, r28
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	ed e3       	ldi	r30, 0x3D	; 61
    1072:	f1 e0       	ldi	r31, 0x01	; 1
    1074:	84 e1       	ldi	r24, 0x14	; 20
    1076:	01 90       	ld	r0, Z+
    1078:	0d 92       	st	X+, r0
    107a:	81 50       	subi	r24, 0x01	; 1
    107c:	e1 f7       	brne	.-8      	; 0x1076 <displayMemory+0x36>
    107e:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
    1080:	8c e2       	ldi	r24, 0x2C	; 44
    1082:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
    1084:	05 30       	cpi	r16, 0x05	; 5
    1086:	11 f0       	breq	.+4      	; 0x108c <displayMemory+0x4c>
    1088:	09 30       	cpi	r16, 0x09	; 9
    108a:	29 f4       	brne	.+10     	; 0x1096 <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
    108c:	fe 01       	movw	r30, r28
    108e:	e0 0f       	add	r30, r16
    1090:	f1 1d       	adc	r31, r1
    1092:	80 82       	st	Z, r8
	   i--;
    1094:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    1096:	5e 01       	movw	r10, r28
    1098:	a0 0e       	add	r10, r16
    109a:	b1 1c       	adc	r11, r1
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	2a e0       	ldi	r18, 0x0A	; 10
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    10ac:	60 63       	ori	r22, 0x30	; 48
    10ae:	f5 01       	movw	r30, r10
    10b0:	60 83       	st	Z, r22
    memory /= 10;
    10b2:	c7 01       	movw	r24, r14
    10b4:	b6 01       	movw	r22, r12
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    10c2:	c9 01       	movw	r24, r18
    10c4:	da 01       	movw	r26, r20
    10c6:	6c 01       	movw	r12, r24
    10c8:	7d 01       	movw	r14, r26
	if(memory == 0) break;
    10ca:	c1 14       	cp	r12, r1
    10cc:	d1 04       	cpc	r13, r1
    10ce:	e1 04       	cpc	r14, r1
    10d0:	f1 04       	cpc	r15, r1
    10d2:	11 f0       	breq	.+4      	; 0x10d8 <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    10d4:	01 50       	subi	r16, 0x01	; 1
    10d6:	b1 f6       	brne	.-84     	; 0x1084 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	9f 16       	cp	r9, r31
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <displayMemory+0xa2>
    10de:	8b e4       	ldi	r24, 0x4B	; 75
    10e0:	8e 87       	std	Y+14, r24	; 0x0e
  USART_transmitStringToPC(memoryString);
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <USART_transmitStringToPC>
}
    10ea:	64 96       	adiw	r28, 0x14	; 20
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	bf 90       	pop	r11
    1106:	af 90       	pop	r10
    1108:	9f 90       	pop	r9
    110a:	8f 90       	pop	r8
    110c:	08 95       	ret

0000110e <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    1126:	60 78       	andi	r22, 0x80	; 128
    1128:	3b 01       	movw	r6, r22
    112a:	4c 01       	movw	r8, r24
    112c:	22 e0       	ldi	r18, 0x02	; 2
    112e:	66 0c       	add	r6, r6
    1130:	77 1c       	adc	r7, r7
    1132:	88 1c       	adc	r8, r8
    1134:	99 1c       	adc	r9, r9
    1136:	2a 95       	dec	r18
    1138:	d1 f7       	brne	.-12     	; 0x112e <searchNextFreeCluster+0x20>
    113a:	5b 01       	movw	r10, r22
    113c:	6c 01       	movw	r12, r24
    113e:	50 c0       	rjmp	.+160    	; 0x11e0 <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    1140:	e0 90 f2 05 	lds	r14, 0x05F2
    1144:	f0 90 f3 05 	lds	r15, 0x05F3
    1148:	20 91 9f 03 	lds	r18, 0x039F
    114c:	30 91 a0 03 	lds	r19, 0x03A0
      SD_readSingleBlock(sector);
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	80 91 e7 05 	lds	r24, 0x05E7
    1158:	90 91 e8 05 	lds	r25, 0x05E8
    115c:	a0 91 e9 05 	lds	r26, 0x05E9
    1160:	b0 91 ea 05 	lds	r27, 0x05EA
    1164:	e8 0e       	add	r14, r24
    1166:	f9 1e       	adc	r15, r25
    1168:	0a 1f       	adc	r16, r26
    116a:	1b 1f       	adc	r17, r27
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	c4 01       	movw	r24, r8
    1172:	b3 01       	movw	r22, r6
    1174:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    1178:	e2 0e       	add	r14, r18
    117a:	f3 1e       	adc	r15, r19
    117c:	04 1f       	adc	r16, r20
    117e:	15 1f       	adc	r17, r21
    1180:	c8 01       	movw	r24, r16
    1182:	b7 01       	movw	r22, r14
    1184:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    1188:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    118a:	e6 2f       	mov	r30, r22
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	e0 53       	subi	r30, 0x30	; 48
    1198:	fc 4f       	sbci	r31, 0xFC	; 252
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	a2 81       	ldd	r26, Z+2	; 0x02
    11a0:	b3 81       	ldd	r27, Z+3	; 0x03
    11a2:	bf 70       	andi	r27, 0x0F	; 15
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	a1 05       	cpc	r26, r1
    11a8:	b1 05       	cpc	r27, r1
    11aa:	39 f4       	brne	.+14     	; 0x11ba <searchNextFreeCluster+0xac>
            return(cluster+i);
    11ac:	a6 01       	movw	r20, r12
    11ae:	95 01       	movw	r18, r10
    11b0:	26 0f       	add	r18, r22
    11b2:	31 1d       	adc	r19, r1
    11b4:	41 1d       	adc	r20, r1
    11b6:	51 1d       	adc	r21, r1
    11b8:	25 c0       	rjmp	.+74     	; 0x1204 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	60 38       	cpi	r22, 0x80	; 128
    11be:	29 f7       	brne	.-54     	; 0x118a <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	a8 0e       	add	r10, r24
    11ca:	b9 1e       	adc	r11, r25
    11cc:	ca 1e       	adc	r12, r26
    11ce:	db 1e       	adc	r13, r27
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	68 0e       	add	r6, r24
    11da:	79 1e       	adc	r7, r25
    11dc:	8a 1e       	adc	r8, r26
    11de:	9b 1e       	adc	r9, r27
    11e0:	80 91 a1 03 	lds	r24, 0x03A1
    11e4:	90 91 a2 03 	lds	r25, 0x03A2
    11e8:	a0 91 a3 03 	lds	r26, 0x03A3
    11ec:	b0 91 a4 03 	lds	r27, 0x03A4
    11f0:	a8 16       	cp	r10, r24
    11f2:	b9 06       	cpc	r11, r25
    11f4:	ca 06       	cpc	r12, r26
    11f6:	db 06       	cpc	r13, r27
    11f8:	08 f4       	brcc	.+2      	; 0x11fc <searchNextFreeCluster+0xee>
    11fa:	a2 cf       	rjmp	.-188    	; 0x1140 <searchNextFreeCluster+0x32>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    1204:	b9 01       	movw	r22, r18
    1206:	ca 01       	movw	r24, r20
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	08 95       	ret

00001222 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	d8 2e       	mov	r13, r24
    1230:	c6 2e       	mov	r12, r22
    1232:	79 01       	movw	r14, r18
    1234:	8a 01       	movw	r16, r20
	struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
	unsigned char error;

	SD_readSingleBlock(unusedSectors + 1);
    1236:	60 91 e7 05 	lds	r22, 0x05E7
    123a:	70 91 e8 05 	lds	r23, 0x05E8
    123e:	80 91 e9 05 	lds	r24, 0x05E9
    1242:	90 91 ea 05 	lds	r25, 0x05EA
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>

	if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    1252:	80 91 d0 03 	lds	r24, 0x03D0
    1256:	90 91 d1 03 	lds	r25, 0x03D1
    125a:	a0 91 d2 03 	lds	r26, 0x03D2
    125e:	b0 91 d3 03 	lds	r27, 0x03D3
    1262:	82 55       	subi	r24, 0x52	; 82
    1264:	92 45       	sbci	r25, 0x52	; 82
    1266:	a1 46       	sbci	r26, 0x61	; 97
    1268:	b1 44       	sbci	r27, 0x41	; 65
    126a:	09 f0       	breq	.+2      	; 0x126e <getSetFreeCluster+0x4c>
    126c:	54 c0       	rjmp	.+168    	; 0x1316 <getSetFreeCluster+0xf4>
    126e:	80 91 b4 05 	lds	r24, 0x05B4
    1272:	90 91 b5 05 	lds	r25, 0x05B5
    1276:	a0 91 b6 05 	lds	r26, 0x05B6
    127a:	b0 91 b7 05 	lds	r27, 0x05B7
    127e:	82 57       	subi	r24, 0x72	; 114
    1280:	92 47       	sbci	r25, 0x72	; 114
    1282:	a1 44       	sbci	r26, 0x41	; 65
    1284:	b1 46       	sbci	r27, 0x61	; 97
    1286:	09 f0       	breq	.+2      	; 0x128a <getSetFreeCluster+0x68>
    1288:	46 c0       	rjmp	.+140    	; 0x1316 <getSetFreeCluster+0xf4>
    128a:	80 91 cc 05 	lds	r24, 0x05CC
    128e:	90 91 cd 05 	lds	r25, 0x05CD
    1292:	a0 91 ce 05 	lds	r26, 0x05CE
    1296:	b0 91 cf 05 	lds	r27, 0x05CF
    129a:	80 50       	subi	r24, 0x00	; 0
    129c:	90 40       	sbci	r25, 0x00	; 0
    129e:	a5 45       	sbci	r26, 0x55	; 85
    12a0:	ba 4a       	sbci	r27, 0xAA	; 170
    12a2:	c9 f5       	brne	.+114    	; 0x1316 <getSetFreeCluster+0xf4>
	return 0xffffffff;

	if(get_set == GET)
    12a4:	cc 20       	and	r12, r12
    12a6:	a9 f4       	brne	.+42     	; 0x12d2 <getSetFreeCluster+0xb0>
	{
	if(totOrNext == TOTAL_FREE)
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	d8 16       	cp	r13, r24
    12ac:	49 f4       	brne	.+18     	; 0x12c0 <getSetFreeCluster+0x9e>
	  return(FS->freeClusterCount);
    12ae:	20 91 b8 05 	lds	r18, 0x05B8
    12b2:	30 91 b9 05 	lds	r19, 0x05B9
    12b6:	40 91 ba 05 	lds	r20, 0x05BA
    12ba:	50 91 bb 05 	lds	r21, 0x05BB
    12be:	2f c0       	rjmp	.+94     	; 0x131e <getSetFreeCluster+0xfc>
	else // when totOrNext = NEXT_FREE
	  return(FS->nextFreeCluster);
    12c0:	20 91 bc 05 	lds	r18, 0x05BC
    12c4:	30 91 bd 05 	lds	r19, 0x05BD
    12c8:	40 91 be 05 	lds	r20, 0x05BE
    12cc:	50 91 bf 05 	lds	r21, 0x05BF
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <getSetFreeCluster+0xfc>
	}
	else
	{
	if(totOrNext == TOTAL_FREE)
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	d2 16       	cp	r13, r18
    12d6:	49 f4       	brne	.+18     	; 0x12ea <getSetFreeCluster+0xc8>
	  FS->freeClusterCount = FSEntry;
    12d8:	e0 92 b8 05 	sts	0x05B8, r14
    12dc:	f0 92 b9 05 	sts	0x05B9, r15
    12e0:	00 93 ba 05 	sts	0x05BA, r16
    12e4:	10 93 bb 05 	sts	0x05BB, r17
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <getSetFreeCluster+0xd8>
	else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    12ea:	e0 92 bc 05 	sts	0x05BC, r14
    12ee:	f0 92 bd 05 	sts	0x05BD, r15
    12f2:	00 93 be 05 	sts	0x05BE, r16
    12f6:	10 93 bf 05 	sts	0x05BF, r17

	error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    12fa:	60 91 e7 05 	lds	r22, 0x05E7
    12fe:	70 91 e8 05 	lds	r23, 0x05E8
    1302:	80 91 e9 05 	lds	r24, 0x05E9
    1306:	90 91 ea 05 	lds	r25, 0x05EA
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
	}
	return 0xffffffff;
    1316:	2f ef       	ldi	r18, 0xFF	; 255
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f ef       	ldi	r20, 0xFF	; 255
    131c:	5f ef       	ldi	r21, 0xFF	; 255
}
    131e:	b9 01       	movw	r22, r18
    1320:	ca 01       	movw	r24, r20
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	08 95       	ret

00001330 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	d8 2e       	mov	r13, r24
    133c:	db 01       	movw	r26, r22
    133e:	ca 01       	movw	r24, r20
    1340:	e9 e0       	ldi	r30, 0x09	; 9
    1342:	b6 95       	lsr	r27
    1344:	a7 95       	ror	r26
    1346:	97 95       	ror	r25
    1348:	87 95       	ror	r24
    134a:	ea 95       	dec	r30
    134c:	d1 f7       	brne	.-12     	; 0x1342 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    134e:	51 70       	andi	r21, 0x01	; 1
    1350:	60 70       	andi	r22, 0x00	; 0
    1352:	70 70       	andi	r23, 0x00	; 0
    1354:	41 15       	cp	r20, r1
    1356:	51 05       	cpc	r21, r1
    1358:	61 05       	cpc	r22, r1
    135a:	71 05       	cpc	r23, r1
    135c:	19 f4       	brne	.+6      	; 0x1364 <freeMemoryUpdate+0x34>
    135e:	ac 01       	movw	r20, r24
    1360:	bd 01       	movw	r22, r26
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    1364:	ac 01       	movw	r20, r24
    1366:	bd 01       	movw	r22, r26
    1368:	4f 5f       	subi	r20, 0xFF	; 255
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	6f 4f       	sbci	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	db 01       	movw	r26, r22
    1372:	ca 01       	movw	r24, r20
    1374:	33 e0       	ldi	r19, 0x03	; 3
    1376:	b6 95       	lsr	r27
    1378:	a7 95       	ror	r26
    137a:	97 95       	ror	r25
    137c:	87 95       	ror	r24
    137e:	3a 95       	dec	r19
    1380:	d1 f7       	brne	.-12     	; 0x1376 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    1382:	47 70       	andi	r20, 0x07	; 7
    1384:	50 70       	andi	r21, 0x00	; 0
    1386:	60 70       	andi	r22, 0x00	; 0
    1388:	70 70       	andi	r23, 0x00	; 0
    138a:	41 15       	cp	r20, r1
    138c:	51 05       	cpc	r21, r1
    138e:	61 05       	cpc	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	19 f4       	brne	.+6      	; 0x139a <freeMemoryUpdate+0x6a>
    1394:	7c 01       	movw	r14, r24
    1396:	8d 01       	movw	r16, r26
    1398:	07 c0       	rjmp	.+14     	; 0x13a8 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    139a:	7c 01       	movw	r14, r24
    139c:	8d 01       	movw	r16, r26
    139e:	08 94       	sec
    13a0:	e1 1c       	adc	r14, r1
    13a2:	f1 1c       	adc	r15, r1
    13a4:	01 1d       	adc	r16, r1
    13a6:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    13a8:	80 91 fe 06 	lds	r24, 0x06FE
    13ac:	88 23       	and	r24, r24
    13ae:	d9 f0       	breq	.+54     	; 0x13e6 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
	if(flag == ADD)
    13c0:	dd 20       	and	r13, r13
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	2e 0d       	add	r18, r14
    13ca:	3f 1d       	adc	r19, r15
    13cc:	40 1f       	adc	r20, r16
    13ce:	51 1f       	adc	r21, r17
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    13d2:	9b 01       	movw	r18, r22
    13d4:	ac 01       	movw	r20, r24
    13d6:	2e 19       	sub	r18, r14
    13d8:	3f 09       	sbc	r19, r15
    13da:	40 0b       	sbc	r20, r16
    13dc:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
  }
}
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	08 95       	ret

000013f2 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    13f2:	2f 92       	push	r2
    13f4:	3f 92       	push	r3
    13f6:	4f 92       	push	r4
    13f8:	5f 92       	push	r5
    13fa:	6f 92       	push	r6
    13fc:	7f 92       	push	r7
    13fe:	8f 92       	push	r8
    1400:	9f 92       	push	r9
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    1412:	20 91 a1 03 	lds	r18, 0x03A1
    1416:	30 91 a2 03 	lds	r19, 0x03A2
    141a:	40 91 a3 03 	lds	r20, 0x03A3
    141e:	50 91 a4 03 	lds	r21, 0x03A4
    1422:	60 91 d1 05 	lds	r22, 0x05D1
    1426:	70 91 d2 05 	lds	r23, 0x05D2
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    1432:	5b 01       	movw	r10, r22
    1434:	6c 01       	movw	r12, r24
    1436:	1a e0       	ldi	r17, 0x0A	; 10
    1438:	d6 94       	lsr	r13
    143a:	c7 94       	ror	r12
    143c:	b7 94       	ror	r11
    143e:	a7 94       	ror	r10
    1440:	1a 95       	dec	r17
    1442:	d1 f7       	brne	.-12     	; 0x1438 <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
    1444:	e0 90 9f 03 	lds	r14, 0x039F
    1448:	f0 90 a0 03 	lds	r15, 0x03A0

TX_NEWLINE_PC;
    144c:	8d e0       	ldi	r24, 0x0D	; 13
    144e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1452:	8a e0       	ldi	r24, 0x0A	; 10
    1454:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
TX_NEWLINE_PC;
    1458:	8d e0       	ldi	r24, 0x0D	; 13
    145a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    145e:	8a e0       	ldi	r24, 0x0A	; 10
    1460:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
//USART_transmitStringToPCFromFlash(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
    1464:	00 e0       	ldi	r16, 0x00	; 0
    1466:	10 e0       	ldi	r17, 0x00	; 0
    1468:	c6 01       	movw	r24, r12
    146a:	b5 01       	movw	r22, r10
    146c:	a8 01       	movw	r20, r16
    146e:	97 01       	movw	r18, r14
    1470:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    1474:	ab 01       	movw	r20, r22
    1476:	bc 01       	movw	r22, r24
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	0e 94 20 08 	call	0x1040	; 0x1040 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
    148e:	3b 01       	movw	r6, r22
    1490:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    1492:	80 91 a1 03 	lds	r24, 0x03A1
    1496:	90 91 a2 03 	lds	r25, 0x03A2
    149a:	a0 91 a3 03 	lds	r26, 0x03A3
    149e:	b0 91 a4 03 	lds	r27, 0x03A4
    14a2:	86 15       	cp	r24, r6
    14a4:	97 05       	cpc	r25, r7
    14a6:	a8 05       	cpc	r26, r8
    14a8:	b9 05       	cpc	r27, r9
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <memoryStatistics+0xbc>
    14ac:	7c c0       	rjmp	.+248    	; 0x15a6 <memoryStatistics+0x1b4>
{
   freeClusterCountUpdated = 0;
    14ae:	10 92 fe 06 	sts	0x06FE, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    14b2:	a0 90 c5 03 	lds	r10, 0x03C5
    14b6:	b0 90 c6 03 	lds	r11, 0x03C6
    14ba:	c0 90 c7 03 	lds	r12, 0x03C7
    14be:	d0 90 c8 03 	lds	r13, 0x03C8
    14c2:	b2 e0       	ldi	r27, 0x02	; 2
    14c4:	aa 0c       	add	r10, r10
    14c6:	bb 1c       	adc	r11, r11
    14c8:	cc 1c       	adc	r12, r12
    14ca:	dd 1c       	adc	r13, r13
    14cc:	ba 95       	dec	r27
    14ce:	d1 f7       	brne	.-12     	; 0x14c4 <memoryStatistics+0xd2>
    14d0:	66 24       	eor	r6, r6
    14d2:	77 24       	eor	r7, r7
    14d4:	43 01       	movw	r8, r6
    14d6:	22 24       	eor	r2, r2
    14d8:	33 24       	eor	r3, r3
    14da:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    14dc:	e0 90 f2 05 	lds	r14, 0x05F2
    14e0:	f0 90 f3 05 	lds	r15, 0x05F3
    14e4:	20 91 9f 03 	lds	r18, 0x039F
    14e8:	30 91 a0 03 	lds	r19, 0x03A0
      SD_readSingleBlock(sector);
    14ec:	00 e0       	ldi	r16, 0x00	; 0
    14ee:	10 e0       	ldi	r17, 0x00	; 0
    14f0:	80 91 e7 05 	lds	r24, 0x05E7
    14f4:	90 91 e8 05 	lds	r25, 0x05E8
    14f8:	a0 91 e9 05 	lds	r26, 0x05E9
    14fc:	b0 91 ea 05 	lds	r27, 0x05EA
    1500:	e8 0e       	add	r14, r24
    1502:	f9 1e       	adc	r15, r25
    1504:	0a 1f       	adc	r16, r26
    1506:	1b 1f       	adc	r17, r27
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	c6 01       	movw	r24, r12
    150e:	b5 01       	movw	r22, r10
    1510:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    1514:	e2 0e       	add	r14, r18
    1516:	f3 1e       	adc	r15, r19
    1518:	04 1f       	adc	r16, r20
    151a:	15 1f       	adc	r17, r21
    151c:	c8 01       	movw	r24, r16
    151e:	b7 01       	movw	r22, r14
    1520:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    1524:	a2 01       	movw	r20, r4
    1526:	91 01       	movw	r18, r2
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    152c:	fb 01       	movw	r30, r22
    152e:	e0 53       	subi	r30, 0x30	; 48
    1530:	fc 4f       	sbci	r31, 0xFC	; 252
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	a2 81       	ldd	r26, Z+2	; 0x02
    1538:	b3 81       	ldd	r27, Z+3	; 0x03
    153a:	bf 70       	andi	r27, 0x0F	; 15
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	a1 05       	cpc	r26, r1
    1540:	b1 05       	cpc	r27, r1
    1542:	29 f4       	brne	.+10     	; 0x154e <memoryStatistics+0x15c>
            freeClusters++;;
    1544:	08 94       	sec
    1546:	61 1c       	adc	r6, r1
    1548:	71 1c       	adc	r7, r1
    154a:	81 1c       	adc	r8, r1
    154c:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	4f 4f       	sbci	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    1556:	80 91 a1 03 	lds	r24, 0x03A1
    155a:	90 91 a2 03 	lds	r25, 0x03A2
    155e:	a0 91 a3 03 	lds	r26, 0x03A3
    1562:	b0 91 a4 03 	lds	r27, 0x03A4
    1566:	02 96       	adiw	r24, 0x02	; 2
    1568:	a1 1d       	adc	r26, r1
    156a:	b1 1d       	adc	r27, r1
    156c:	28 17       	cp	r18, r24
    156e:	39 07       	cpc	r19, r25
    1570:	4a 07       	cpc	r20, r26
    1572:	5b 07       	cpc	r21, r27
    1574:	c1 f0       	breq	.+48     	; 0x15a6 <memoryStatistics+0x1b4>
    1576:	c9 01       	movw	r24, r18
    1578:	82 19       	sub	r24, r2
    157a:	93 09       	sbc	r25, r3
    157c:	6c 5f       	subi	r22, 0xFC	; 252
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    1580:	02 e0       	ldi	r16, 0x02	; 2
    1582:	60 30       	cpi	r22, 0x00	; 0
    1584:	70 07       	cpc	r23, r16
    1586:	91 f6       	brne	.-92     	; 0x152c <memoryStatistics+0x13a>
    1588:	e1 2c       	mov	r14, r1
    158a:	a2 e0       	ldi	r26, 0x02	; 2
    158c:	fa 2e       	mov	r15, r26
    158e:	01 2d       	mov	r16, r1
    1590:	11 2d       	mov	r17, r1
    1592:	ae 0c       	add	r10, r14
    1594:	bf 1c       	adc	r11, r15
    1596:	c0 1e       	adc	r12, r16
    1598:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    159a:	80 38       	cpi	r24, 0x80	; 128
    159c:	91 05       	cpc	r25, r1
    159e:	18 f0       	brcs	.+6      	; 0x15a6 <memoryStatistics+0x1b4>
    15a0:	19 01       	movw	r2, r18
    15a2:	2a 01       	movw	r4, r20
    15a4:	9b cf       	rjmp	.-202    	; 0x14dc <memoryStatistics+0xea>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
    15a6:	80 91 fe 06 	lds	r24, 0x06FE
    15aa:	88 23       	and	r24, r24
    15ac:	31 f4       	brne	.+12     	; 0x15ba <memoryStatistics+0x1c8>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	a4 01       	movw	r20, r8
    15b4:	93 01       	movw	r18, r6
    15b6:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 fe 06 	sts	0x06FE, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
    15c0:	20 91 d1 05 	lds	r18, 0x05D1
    15c4:	30 91 d2 05 	lds	r19, 0x05D2
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	c4 01       	movw	r24, r8
    15ce:	b3 01       	movw	r22, r6
    15d0:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    15d4:	fa e0       	ldi	r31, 0x0A	; 10
    15d6:	96 95       	lsr	r25
    15d8:	87 95       	ror	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	fa 95       	dec	r31
    15e0:	d1 f7       	brne	.-12     	; 0x15d6 <memoryStatistics+0x1e4>
freeMemory *= bytesPerSector ;
    15e2:	20 91 9f 03 	lds	r18, 0x039F
    15e6:	30 91 a0 03 	lds	r19, 0x03A0
//TX_NEWLINE_PC;
//USART_transmitStringToPCFromFlash(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    15f2:	ab 01       	movw	r20, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	0e 94 20 08 	call	0x1040	; 0x1040 <displayMemory>
//TX_NEWLINE_PC; 
}
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	6f 90       	pop	r6
    1614:	5f 90       	pop	r5
    1616:	4f 90       	pop	r4
    1618:	3f 90       	pop	r3
    161a:	2f 90       	pop	r2
    161c:	08 95       	ret

0000161e <getBootSectorData>:
#include "Globals.h"


unsigned char getBootSectorData (void)
{
    161e:	6f 92       	push	r6
    1620:	7f 92       	push	r7
    1622:	8f 92       	push	r8
    1624:	9f 92       	push	r9
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
	struct BS_Structure *bpb; //mapping the buffer onto the structure
	struct MBRinfo_Structure *mbr;
	struct partitionInfo_Structure *partition;
	unsigned long dataSectors;

	unusedSectors = 0;
    1636:	10 92 e7 05 	sts	0x05E7, r1
    163a:	10 92 e8 05 	sts	0x05E8, r1
    163e:	10 92 e9 05 	sts	0x05E9, r1
    1642:	10 92 ea 05 	sts	0x05EA, r1

	SD_readSingleBlock(0);
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
	bpb = (struct BS_Structure *)buffer;

	if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    1652:	80 91 d0 03 	lds	r24, 0x03D0
    1656:	89 3e       	cpi	r24, 0xE9	; 233
    1658:	19 f1       	breq	.+70     	; 0x16a0 <getBootSectorData+0x82>
    165a:	8b 3e       	cpi	r24, 0xEB	; 235
    165c:	09 f1       	breq	.+66     	; 0x16a0 <getBootSectorData+0x82>
	{
		mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR

		if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    165e:	80 91 ce 05 	lds	r24, 0x05CE
    1662:	90 91 cf 05 	lds	r25, 0x05CF
    1666:	85 55       	subi	r24, 0x55	; 85
    1668:	9a 4a       	sbci	r25, 0xAA	; 170
    166a:	09 f0       	breq	.+2      	; 0x166e <getBootSectorData+0x50>
    166c:	b0 c0       	rjmp	.+352    	; 0x17ce <getBootSectorData+0x1b0>

		partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
		unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    166e:	60 91 96 05 	lds	r22, 0x0596
    1672:	70 91 97 05 	lds	r23, 0x0597
    1676:	80 91 98 05 	lds	r24, 0x0598
    167a:	90 91 99 05 	lds	r25, 0x0599
    167e:	60 93 e7 05 	sts	0x05E7, r22
    1682:	70 93 e8 05 	sts	0x05E8, r23
    1686:	80 93 e9 05 	sts	0x05E9, r24
    168a:	90 93 ea 05 	sts	0x05EA, r25

		SD_readSingleBlock(partition->firstSector);//read the bpb sector
    168e:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
		bpb = (struct BS_Structure *)buffer;
		if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    1692:	80 91 d0 03 	lds	r24, 0x03D0
    1696:	89 3e       	cpi	r24, 0xE9	; 233
    1698:	19 f0       	breq	.+6      	; 0x16a0 <getBootSectorData+0x82>
    169a:	8b 3e       	cpi	r24, 0xEB	; 235
    169c:	09 f0       	breq	.+2      	; 0x16a0 <getBootSectorData+0x82>
    169e:	97 c0       	rjmp	.+302    	; 0x17ce <getBootSectorData+0x1b0>
	}

	bytesPerSector = bpb->bytesPerSector;
    16a0:	80 91 db 03 	lds	r24, 0x03DB
    16a4:	90 91 dc 03 	lds	r25, 0x03DC
    16a8:	90 93 a0 03 	sts	0x03A0, r25
    16ac:	80 93 9f 03 	sts	0x039F, r24
	//transmitHex(INT, bytesPerSector); USART_transmitByteToPC(' ');
	sectorPerCluster = bpb->sectorPerCluster;
    16b0:	80 91 dd 03 	lds	r24, 0x03DD
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 d2 05 	sts	0x05D2, r25
    16ba:	80 93 d1 05 	sts	0x05D1, r24
	//transmitHex(INT, sectorPerCluster); USART_transmitByteToPC(' ');
	reservedSectorCount = bpb->reservedSectorCount;
    16be:	a0 90 de 03 	lds	r10, 0x03DE
    16c2:	b0 90 df 03 	lds	r11, 0x03DF
    16c6:	b0 92 f3 05 	sts	0x05F3, r11
    16ca:	a0 92 f2 05 	sts	0x05F2, r10
	rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    16ce:	80 91 fc 03 	lds	r24, 0x03FC
    16d2:	90 91 fd 03 	lds	r25, 0x03FD
    16d6:	a0 91 fe 03 	lds	r26, 0x03FE
    16da:	b0 91 ff 03 	lds	r27, 0x03FF
    16de:	80 93 c5 03 	sts	0x03C5, r24
    16e2:	90 93 c6 03 	sts	0x03C6, r25
    16e6:	a0 93 c7 03 	sts	0x03C7, r26
    16ea:	b0 93 c8 03 	sts	0x03C8, r27
	firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    16ee:	e0 90 f2 05 	lds	r14, 0x05F2
    16f2:	f0 90 f3 05 	lds	r15, 0x05F3
    16f6:	60 91 e0 03 	lds	r22, 0x03E0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	20 91 f4 03 	lds	r18, 0x03F4
    1704:	30 91 f5 03 	lds	r19, 0x03F5
    1708:	40 91 f6 03 	lds	r20, 0x03F6
    170c:	50 91 f7 03 	lds	r21, 0x03F7
    1710:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    1714:	3b 01       	movw	r6, r22
    1716:	4c 01       	movw	r8, r24
    1718:	00 e0       	ldi	r16, 0x00	; 0
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	80 91 ec 03 	lds	r24, 0x03EC
    1720:	90 91 ed 03 	lds	r25, 0x03ED
    1724:	a0 91 ee 03 	lds	r26, 0x03EE
    1728:	b0 91 ef 03 	lds	r27, 0x03EF
    172c:	e8 0e       	add	r14, r24
    172e:	f9 1e       	adc	r15, r25
    1730:	0a 1f       	adc	r16, r26
    1732:	1b 1f       	adc	r17, r27
    1734:	e6 0c       	add	r14, r6
    1736:	f7 1c       	adc	r15, r7
    1738:	08 1d       	adc	r16, r8
    173a:	19 1d       	adc	r17, r9
    173c:	e0 92 97 03 	sts	0x0397, r14
    1740:	f0 92 98 03 	sts	0x0398, r15
    1744:	00 93 99 03 	sts	0x0399, r16
    1748:	10 93 9a 03 	sts	0x039A, r17

	dataSectors = bpb->totalSectors_F32
	              - bpb->reservedSectorCount
	              - ( bpb->numberofFATs * bpb->FATsize_F32);
	totalClusters = dataSectors / sectorPerCluster;
    174c:	20 91 d1 05 	lds	r18, 0x05D1
    1750:	30 91 d2 05 	lds	r19, 0x05D2
    1754:	cc 24       	eor	r12, r12
    1756:	dd 24       	eor	r13, r13
    1758:	60 91 f0 03 	lds	r22, 0x03F0
    175c:	70 91 f1 03 	lds	r23, 0x03F1
    1760:	80 91 f2 03 	lds	r24, 0x03F2
    1764:	90 91 f3 03 	lds	r25, 0x03F3
    1768:	6a 19       	sub	r22, r10
    176a:	7b 09       	sbc	r23, r11
    176c:	8c 09       	sbc	r24, r12
    176e:	9d 09       	sbc	r25, r13
    1770:	66 19       	sub	r22, r6
    1772:	77 09       	sbc	r23, r7
    1774:	88 09       	sbc	r24, r8
    1776:	99 09       	sbc	r25, r9
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    1780:	c9 01       	movw	r24, r18
    1782:	da 01       	movw	r26, r20
    1784:	80 93 a1 03 	sts	0x03A1, r24
    1788:	90 93 a2 03 	sts	0x03A2, r25
    178c:	a0 93 a3 03 	sts	0x03A3, r26
    1790:	b0 93 a4 03 	sts	0x03A4, r27
	//transmitHex(LONG, totalClusters); USART_transmitByteToPC(' ');

	if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
    17a4:	20 91 a1 03 	lds	r18, 0x03A1
    17a8:	30 91 a2 03 	lds	r19, 0x03A2
    17ac:	40 91 a3 03 	lds	r20, 0x03A3
    17b0:	50 91 a4 03 	lds	r21, 0x03A4
    17b4:	26 17       	cp	r18, r22
    17b6:	37 07       	cpc	r19, r23
    17b8:	48 07       	cpc	r20, r24
    17ba:	59 07       	cpc	r21, r25
    17bc:	18 f4       	brcc	.+6      	; 0x17c4 <getBootSectorData+0x1a6>
	     freeClusterCountUpdated = 0;
    17be:	10 92 fe 06 	sts	0x06FE, r1
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <getBootSectorData+0x1ac>
	else
		 freeClusterCountUpdated = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 93 fe 06 	sts	0x06FE, r24
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <getBootSectorData+0x1b2>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	9f 90       	pop	r9
    17e2:	8f 90       	pop	r8
    17e4:	7f 90       	pop	r7
    17e6:	6f 90       	pop	r6
    17e8:	08 95       	ret

000017ea <InitSDCard>:
  }
}

//******** END ****** www.dharmanitech.com *****
void InitSDCard(bool bVerb)
{
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	18 2f       	mov	r17, r24
	unsigned char iInit=0;
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	cardType = 0;
    17f2:	10 92 f9 05 	sts	0x05F9, r1
    17f6:	c0 e0       	ldi	r28, 0x00	; 0
    17f8:	d0 e0       	ldi	r29, 0x00	; 0

	for (i=0; i<10; i++)
	{
		error = SD_init();
    17fa:	0e 94 80 06 	call	0xd00	; 0xd00 <SD_init>
		if(!error) break;
    17fe:	88 23       	and	r24, r24
    1800:	21 f0       	breq	.+8      	; 0x180a <InitSDCard+0x20>
	unsigned char iInit=0;
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	cardType = 0;

	for (i=0; i<10; i++)
    1802:	21 96       	adiw	r28, 0x01	; 1
    1804:	ca 30       	cpi	r28, 0x0A	; 10
    1806:	d1 05       	cpc	r29, r1
    1808:	c1 f7       	brne	.-16     	; 0x17fa <InitSDCard+0x10>
	{
		error = SD_init();
		if(!error) break;
	}

	if(bVerb)
    180a:	11 23       	and	r17, r17
    180c:	09 f4       	brne	.+2      	; 0x1810 <InitSDCard+0x26>
    180e:	5f c0       	rjmp	.+190    	; 0x18ce <InitSDCard+0xe4>
	{
		if(error)
    1810:	88 23       	and	r24, r24
    1812:	71 f0       	breq	.+28     	; 0x1830 <InitSDCard+0x46>
		{
			if(error == 1) USART_transmitStringToPCFromFlash(PSTR("SD card not detected.."));
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	29 f4       	brne	.+10     	; 0x1822 <InitSDCard+0x38>
    1818:	83 e1       	ldi	r24, 0x13	; 19
    181a:	92 e0       	ldi	r25, 0x02	; 2
    181c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    1820:	06 c0       	rjmp	.+12     	; 0x182e <InitSDCard+0x44>
			if(error == 2) USART_transmitStringToPCFromFlash(PSTR("Card Initialization failed.."));
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	21 f4       	brne	.+8      	; 0x182e <InitSDCard+0x44>
    1826:	86 ef       	ldi	r24, 0xF6	; 246
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    182e:	ff cf       	rjmp	.-2      	; 0x182e <InitSDCard+0x44>
		  	while(1);  //wait here forever if error in SD init 	
		}


		switch (cardType)
    1830:	80 91 f9 05 	lds	r24, 0x05F9
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	39 f0       	breq	.+14     	; 0x1846 <InitSDCard+0x5c>
    1838:	83 30       	cpi	r24, 0x03	; 3
    183a:	41 f0       	breq	.+16     	; 0x184c <InitSDCard+0x62>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	49 f4       	brne	.+18     	; 0x1852 <InitSDCard+0x68>
		{
		  case 1:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 1.x) Detected"));
    1840:	8c ec       	ldi	r24, 0xCC	; 204
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <InitSDCard+0x6c>
		  		 break;
		  case 2:USART_transmitStringToPCFromFlash(PSTR("High Capacity Card Detected"));
    1846:	80 eb       	ldi	r24, 0xB0	; 176
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <InitSDCard+0x6c>
		  		 break;
		  case 3:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 2.x) Detected"));
    184c:	86 e8       	ldi	r24, 0x86	; 134
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <InitSDCard+0x6c>
		  		 break;
		  default:USART_transmitStringToPCFromFlash(PSTR("Unknown SD Card Detected"));
    1852:	8d e6       	ldi	r24, 0x6D	; 109
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    185a:	80 ed       	ldi	r24, 0xD0	; 208
    185c:	97 e0       	ldi	r25, 0x07	; 7
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <InitSDCard+0x74>
	

		_delay_ms(1);   //some delay

		FAT32_active = 1;
		error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1862:	0e 94 0f 0b 	call	0x161e	; 0x161e <getBootSectorData>
		if(error) 	
    1866:	88 23       	and	r24, r24
    1868:	49 f0       	breq	.+18     	; 0x187c <InitSDCard+0x92>
		{
			TX_NEWLINE_PC;
    186a:	8d e0       	ldi	r24, 0x0D	; 13
    186c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1870:	8a e0       	ldi	r24, 0x0A	; 10
    1872:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			USART_transmitStringToPCFromFlash (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1876:	8c e5       	ldi	r24, 0x5C	; 92
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	08 c0       	rjmp	.+16     	; 0x188c <InitSDCard+0xa2>
			FAT32_active = 0;
		}else{
			TX_NEWLINE_PC;
    187c:	8d e0       	ldi	r24, 0x0D	; 13
    187e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1882:	8a e0       	ldi	r24, 0x0A	; 10
    1884:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			USART_transmitStringToPCFromFlash (PSTR("FAT32 file system detected..."));
    1888:	8e e3       	ldi	r24, 0x3E	; 62
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
		}
		TX_NEWLINE_PC;	
    1890:	8d e0       	ldi	r24, 0x0D	; 13
    1892:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1896:	8a e0       	ldi	r24, 0x0A	; 10
    1898:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
		iInit=VS1053_Initialize();
    189c:	0e 94 33 05 	call	0xa66	; 0xa66 <VS1053_Initialize>
    18a0:	18 2f       	mov	r17, r24
		if(iInit==0){
    18a2:	88 23       	and	r24, r24
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <InitSDCard+0xc6>
			USART_transmitStringToPCFromFlash (PSTR("VS1053 MP3 chip sucessfully initialized"));
    18a6:	86 e1       	ldi	r24, 0x16	; 22
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <InitSDCard+0xd6>
			TX_NEWLINE_PC;	
		}else{
			USART_transmitStringToPCFromFlash (PSTR("Error initializing VS1053 - CODE "));
    18b0:	84 ef       	ldi	r24, 0xF4	; 244
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			USART_transmitByteToPC(iInit+64);
    18b8:	81 2f       	mov	r24, r17
    18ba:	80 5c       	subi	r24, 0xC0	; 192
    18bc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			TX_NEWLINE_PC;
    18c0:	8d e0       	ldi	r24, 0x0D	; 13
    18c2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    18c6:	8a e0       	ldi	r24, 0x0A	; 10
    18c8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    18cc:	0a c0       	rjmp	.+20     	; 0x18e2 <InitSDCard+0xf8>
		}
	}
	else
	{
		if(error)
    18ce:	81 11       	cpse	r24, r1
    18d0:	ff cf       	rjmp	.-2      	; 0x18d0 <InitSDCard+0xe6>
    18d2:	80 ed       	ldi	r24, 0xD0	; 208
    18d4:	97 e0       	ldi	r25, 0x07	; 7
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <InitSDCard+0xec>
		  	while(1);  //wait here forever if error in SD init 	
		}
		_delay_ms(1);   //some delay

		FAT32_active = 1;
		error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    18da:	0e 94 0f 0b 	call	0x161e	; 0x161e <getBootSectorData>
		{
			FAT32_active = 0;
		}else{

		}
		iInit=VS1053_Initialize();
    18de:	0e 94 33 05 	call	0xa66	; 0xa66 <VS1053_Initialize>
	}
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	08 95       	ret

000018ea <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    18ea:	4f 92       	push	r4
    18ec:	5f 92       	push	r5
    18ee:	6f 92       	push	r6
    18f0:	7f 92       	push	r7
    18f2:	8f 92       	push	r8
    18f4:	9f 92       	push	r9
    18f6:	af 92       	push	r10
    18f8:	bf 92       	push	r11
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	5b 01       	movw	r10, r22
    190c:	6c 01       	movw	r12, r24
    190e:	84 2e       	mov	r8, r20
    1910:	28 01       	movw	r4, r16
    1912:	39 01       	movw	r6, r18
	unsigned long *FATEntryValue;
	unsigned long FATEntrySector;
	unsigned char retry = 0;

	//get sector number of the cluster entry in the FAT
	FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1914:	80 91 f2 05 	lds	r24, 0x05F2
    1918:	90 91 f3 05 	lds	r25, 0x05F3
    191c:	02 e0       	ldi	r16, 0x02	; 2
    191e:	aa 0c       	add	r10, r10
    1920:	bb 1c       	adc	r11, r11
    1922:	cc 1c       	adc	r12, r12
    1924:	dd 1c       	adc	r13, r13
    1926:	0a 95       	dec	r16
    1928:	d1 f7       	brne	.-12     	; 0x191e <getSetNextCluster+0x34>
    192a:	20 91 9f 03 	lds	r18, 0x039F
    192e:	30 91 a0 03 	lds	r19, 0x03A0
    1932:	7c 01       	movw	r14, r24
    1934:	00 e0       	ldi	r16, 0x00	; 0
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	80 91 e7 05 	lds	r24, 0x05E7
    193c:	90 91 e8 05 	lds	r25, 0x05E8
    1940:	a0 91 e9 05 	lds	r26, 0x05E9
    1944:	b0 91 ea 05 	lds	r27, 0x05EA
    1948:	e8 0e       	add	r14, r24
    194a:	f9 1e       	adc	r15, r25
    194c:	0a 1f       	adc	r16, r26
    194e:	1b 1f       	adc	r17, r27
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	c6 01       	movw	r24, r12
    1956:	b5 01       	movw	r22, r10
    1958:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    195c:	e2 0e       	add	r14, r18
    195e:	f3 1e       	adc	r15, r19
    1960:	04 1f       	adc	r16, r20
    1962:	15 1f       	adc	r17, r21

	//get the offset address in that sector number
	FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    1964:	c0 91 9f 03 	lds	r28, 0x039F
    1968:	d0 91 a0 03 	lds	r29, 0x03A0
    196c:	99 24       	eor	r9, r9

	//read the sector into a buffer
	while(retry <10)
	{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    196e:	c8 01       	movw	r24, r16
    1970:	b7 01       	movw	r22, r14
    1972:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    1976:	88 23       	and	r24, r24
    1978:	21 f0       	breq	.+8      	; 0x1982 <getSetNextCluster+0x98>
    197a:	93 94       	inc	r9

	//get the offset address in that sector number
	FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

	//read the sector into a buffer
	while(retry <10)
    197c:	8a e0       	ldi	r24, 0x0A	; 10
    197e:	98 16       	cp	r9, r24
    1980:	b1 f7       	brne	.-20     	; 0x196e <getSetNextCluster+0x84>
	{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

	//get the cluster address from the buffer
	FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    1982:	9e 01       	movw	r18, r28
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	c6 01       	movw	r24, r12
    198a:	b5 01       	movw	r22, r10
    198c:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    1990:	fb 01       	movw	r30, r22
    1992:	e0 53       	subi	r30, 0x30	; 48
    1994:	fc 4f       	sbci	r31, 0xFC	; 252

	if(get_set == GET)
    1996:	88 20       	and	r8, r8
    1998:	31 f4       	brne	.+12     	; 0x19a6 <getSetNextCluster+0xbc>
	  return ((*FATEntryValue) & 0x0fffffff);
    199a:	20 81       	ld	r18, Z
    199c:	31 81       	ldd	r19, Z+1	; 0x01
    199e:	42 81       	ldd	r20, Z+2	; 0x02
    19a0:	53 81       	ldd	r21, Z+3	; 0x03
    19a2:	5f 70       	andi	r21, 0x0F	; 15
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <getSetNextCluster+0xd4>


	*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    19a6:	40 82       	st	Z, r4
    19a8:	51 82       	std	Z+1, r5	; 0x01
    19aa:	62 82       	std	Z+2, r6	; 0x02
    19ac:	73 82       	std	Z+3, r7	; 0x03

	SD_writeSingleBlock(FATEntrySector);
    19ae:	c8 01       	movw	r24, r16
    19b0:	b7 01       	movw	r22, r14
    19b2:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0

	return (0);
}
    19be:	b9 01       	movw	r22, r18
    19c0:	ca 01       	movw	r24, r20
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	bf 90       	pop	r11
    19d4:	af 90       	pop	r10
    19d6:	9f 90       	pop	r9
    19d8:	8f 90       	pop	r8
    19da:	7f 90       	pop	r7
    19dc:	6f 90       	pop	r6
    19de:	5f 90       	pop	r5
    19e0:	4f 90       	pop	r4
    19e2:	08 95       	ret

000019e4 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    19e4:	2f 92       	push	r2
    19e6:	3f 92       	push	r3
    19e8:	4f 92       	push	r4
    19ea:	5f 92       	push	r5
    19ec:	6f 92       	push	r6
    19ee:	7f 92       	push	r7
    19f0:	8f 92       	push	r8
    19f2:	9f 92       	push	r9
    19f4:	af 92       	push	r10
    19f6:	bf 92       	push	r11
    19f8:	cf 92       	push	r12
    19fa:	df 92       	push	r13
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	7f 83       	std	Y+7, r23	; 0x07
    1a1c:	6e 83       	std	Y+6, r22	; 0x06
	unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
	struct dir_Structure *dir;
	unsigned int i;
	unsigned char j;

	cluster = rootCluster; //root cluster
    1a1e:	a0 90 c5 03 	lds	r10, 0x03C5
    1a22:	b0 90 c6 03 	lds	r11, 0x03C6
    1a26:	c0 90 c7 03 	lds	r12, 0x03C7
    1a2a:	d0 90 c8 03 	lds	r13, 0x03C8
			      USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
			  return 0;   
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
    1a2e:	81 50       	subi	r24, 0x01	; 1
    1a30:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1a32:	20 91 d1 05 	lds	r18, 0x05D1
    1a36:	30 91 d2 05 	lds	r19, 0x05D2
    1a3a:	e0 90 97 03 	lds	r14, 0x0397
    1a3e:	f0 90 98 03 	lds	r15, 0x0398
    1a42:	00 91 99 03 	lds	r16, 0x0399
    1a46:	10 91 9a 03 	lds	r17, 0x039A
    1a4a:	c6 01       	movw	r24, r12
    1a4c:	b5 01       	movw	r22, r10
    1a4e:	62 50       	subi	r22, 0x02	; 2
    1a50:	70 40       	sbci	r23, 0x00	; 0
    1a52:	80 40       	sbci	r24, 0x00	; 0
    1a54:	90 40       	sbci	r25, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    1a5e:	1b 01       	movw	r2, r22
    1a60:	2c 01       	movw	r4, r24
    1a62:	2e 0c       	add	r2, r14
    1a64:	3f 1c       	adc	r3, r15
    1a66:	40 1e       	adc	r4, r16
    1a68:	51 1e       	adc	r5, r17
    1a6a:	66 24       	eor	r6, r6
    1a6c:	77 24       	eor	r7, r7
    1a6e:	43 01       	movw	r8, r6
    1a70:	60 c1       	rjmp	.+704    	; 0x1d32 <findFiles+0x34e>

	while(1)
	{
	   firstSector = getFirstSector (cluster);

	   for(sector = 0; sector < sectorPerCluster; sector++)
    1a72:	d4 01       	movw	r26, r8
    1a74:	c3 01       	movw	r24, r6
    1a76:	82 0d       	add	r24, r2
    1a78:	93 1d       	adc	r25, r3
    1a7a:	a4 1d       	adc	r26, r4
    1a7c:	b5 1d       	adc	r27, r5
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	ab 83       	std	Y+3, r26	; 0x03
    1a84:	bc 83       	std	Y+4, r27	; 0x04
	   {
	     SD_readSingleBlock (firstSector + sector);
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	e4 2e       	mov	r14, r20
    1a92:	f1 2c       	mov	r15, r1
    1a94:	3e c1       	rjmp	.+636    	; 0x1d12 <findFiles+0x32e>
	

	     for(i=0; i<bytesPerSector; i+=32)
    1a96:	8a 01       	movw	r16, r20
    1a98:	00 53       	subi	r16, 0x30	; 48
    1a9a:	1c 4f       	sbci	r17, 0xFC	; 252
	     {
		    dir = (struct dir_Structure *) &buffer[i];

	        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	e0 53       	subi	r30, 0x30	; 48
    1aa0:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa2:	b0 97       	sbiw	r30, 0x20	; 32
    1aa4:	80 81       	ld	r24, Z
    1aa6:	b0 96       	adiw	r30, 0x20	; 32
    1aa8:	88 23       	and	r24, r24
    1aaa:	41 f4       	brne	.+16     	; 0x1abc <findFiles+0xd8>
			{
			  if((flag == GET_FILE) || (flag == DELETE))
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	92 30       	cpi	r25, 0x02	; 2
    1ab2:	08 f0       	brcs	.+2      	; 0x1ab6 <findFiles+0xd2>
    1ab4:	68 c1       	rjmp	.+720    	; 0x1d86 <findFiles+0x3a2>
			      USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
    1ab6:	8a ef       	ldi	r24, 0xFA	; 250
    1ab8:	92 e0       	ldi	r25, 0x02	; 2
    1aba:	63 c1       	rjmp	.+710    	; 0x1d82 <findFiles+0x39e>
			  return 0;   
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1abc:	85 3e       	cpi	r24, 0xE5	; 229
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <findFiles+0xde>
    1ac0:	24 c1       	rjmp	.+584    	; 0x1d0a <findFiles+0x326>
    1ac2:	75 97       	sbiw	r30, 0x15	; 21
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8f 30       	cpi	r24, 0x0F	; 15
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <findFiles+0xe8>
    1aca:	1f c1       	rjmp	.+574    	; 0x1d0a <findFiles+0x326>
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
    1acc:	a8 85       	ldd	r26, Y+8	; 0x08
    1ace:	a2 30       	cpi	r26, 0x02	; 2
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <findFiles+0xf0>
    1ad2:	d2 c0       	rjmp	.+420    	; 0x1c78 <findFiles+0x294>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
	          {
	            for(j=0; j<11; j++)
	            if(dir->name[j] != fileName[j]) break;
    1ad8:	c8 01       	movw	r24, r16
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	ae 81       	ldd	r26, Y+6	; 0x06
    1ae0:	bf 81       	ldd	r27, Y+7	; 0x07
    1ae2:	a2 0f       	add	r26, r18
    1ae4:	b3 1f       	adc	r27, r19
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	90 81       	ld	r25, Z
    1aea:	8c 91       	ld	r24, X
    1aec:	98 17       	cp	r25, r24
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <findFiles+0x10e>
    1af0:	0c c1       	rjmp	.+536    	; 0x1d0a <findFiles+0x326>
    1af2:	82 2f       	mov	r24, r18
    1af4:	8f 5f       	subi	r24, 0xFF	; 255
    1af6:	2f 5f       	subi	r18, 0xFF	; 255
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
	          {
	            for(j=0; j<11; j++)
    1afa:	2b 30       	cpi	r18, 0x0B	; 11
    1afc:	31 05       	cpc	r19, r1
    1afe:	61 f7       	brne	.-40     	; 0x1ad8 <findFiles+0xf4>
	            if(dir->name[j] != fileName[j]) break;
	            if(j == 11)
    1b00:	8b 30       	cpi	r24, 0x0B	; 11
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <findFiles+0x122>
    1b04:	02 c1       	rjmp	.+516    	; 0x1d0a <findFiles+0x326>
				{
				  if(flag == GET_FILE)
    1b06:	fd 81       	ldd	r31, Y+5	; 0x05
    1b08:	f1 30       	cpi	r31, 0x01	; 1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <findFiles+0x12a>
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <findFiles+0x1a8>
	              {
				    appendFileSector = firstSector + sector;
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	ab 81       	ldd	r26, Y+3	; 0x03
    1b14:	bc 81       	ldd	r27, Y+4	; 0x04
    1b16:	80 93 00 07 	sts	0x0700, r24
    1b1a:	90 93 01 07 	sts	0x0701, r25
    1b1e:	a0 93 02 07 	sts	0x0702, r26
    1b22:	b0 93 03 07 	sts	0x0703, r27
					appendFileLocation = i;
    1b26:	ca 01       	movw	r24, r20
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	80 93 85 03 	sts	0x0385, r24
    1b30:	90 93 86 03 	sts	0x0386, r25
    1b34:	a0 93 87 03 	sts	0x0387, r26
    1b38:	b0 93 88 03 	sts	0x0388, r27
					appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1b3c:	d8 01       	movw	r26, r16
    1b3e:	54 96       	adiw	r26, 0x14	; 20
    1b40:	8d 91       	ld	r24, X+
    1b42:	9c 91       	ld	r25, X
    1b44:	55 97       	sbiw	r26, 0x15	; 21
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	99 27       	eor	r25, r25
    1b4e:	88 27       	eor	r24, r24
    1b50:	f8 01       	movw	r30, r16
    1b52:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b54:	33 8d       	ldd	r19, Z+27	; 0x1b
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	82 2b       	or	r24, r18
    1b5c:	93 2b       	or	r25, r19
    1b5e:	a4 2b       	or	r26, r20
    1b60:	b5 2b       	or	r27, r21
    1b62:	80 93 f4 05 	sts	0x05F4, r24
    1b66:	90 93 f5 05 	sts	0x05F5, r25
    1b6a:	a0 93 f6 05 	sts	0x05F6, r26
    1b6e:	b0 93 f7 05 	sts	0x05F7, r27
					fileSize = dir->fileSize;
    1b72:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b74:	95 8d       	ldd	r25, Z+29	; 0x1d
    1b76:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1b78:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1b7a:	80 93 9b 03 	sts	0x039B, r24
    1b7e:	90 93 9c 03 	sts	0x039C, r25
    1b82:	a0 93 9d 03 	sts	0x039D, r26
    1b86:	b0 93 9e 03 	sts	0x039E, r27
    1b8a:	ff c0       	rjmp	.+510    	; 0x1d8a <findFiles+0x3a6>
				    return (dir);
				  }	
				  else    //when flag = DELETE
				  {
				     TX_NEWLINE_PC;
    1b8c:	8d e0       	ldi	r24, 0x0D	; 13
    1b8e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1b92:	8a e0       	ldi	r24, 0x0A	; 10
    1b94:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
					 USART_transmitStringToPCFromFlash(PSTR("Deleting.."));
    1b98:	8f ee       	ldi	r24, 0xEF	; 239
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
					 TX_NEWLINE_PC;
    1ba0:	8d e0       	ldi	r24, 0x0D	; 13
    1ba2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1ba6:	8a e0       	ldi	r24, 0x0A	; 10
    1ba8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
					 TX_NEWLINE_PC;
    1bac:	8d e0       	ldi	r24, 0x0D	; 13
    1bae:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1bb2:	8a e0       	ldi	r24, 0x0A	; 10
    1bb4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
					 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1bb8:	d8 01       	movw	r26, r16
    1bba:	54 96       	adiw	r26, 0x14	; 20
    1bbc:	8d 91       	ld	r24, X+
    1bbe:	9c 91       	ld	r25, X
    1bc0:	55 97       	sbiw	r26, 0x15	; 21
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	5c 01       	movw	r10, r24
    1bc8:	99 24       	eor	r9, r9
    1bca:	88 24       	eor	r8, r8
    1bcc:	f8 01       	movw	r30, r16
    1bce:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bd0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bd2:	a0 e0       	ldi	r26, 0x00	; 0
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	88 2a       	or	r8, r24
    1bd8:	99 2a       	or	r9, r25
    1bda:	aa 2a       	or	r10, r26
    1bdc:	bb 2a       	or	r11, r27
                
					 //mark file as 'deleted' in FAT table
					 dir->name[0] = DELETED;    
    1bde:	85 ee       	ldi	r24, 0xE5	; 229
    1be0:	80 83       	st	Z, r24
					 SD_writeSingleBlock (firstSector+sector);
    1be2:	69 81       	ldd	r22, Y+1	; 0x01
    1be4:	7a 81       	ldd	r23, Y+2	; 0x02
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
				 			 
					 freeMemoryUpdate (ADD, dir->fileSize);
    1bee:	d8 01       	movw	r26, r16
    1bf0:	5c 96       	adiw	r26, 0x1c	; 28
    1bf2:	4d 91       	ld	r20, X+
    1bf4:	5d 91       	ld	r21, X+
    1bf6:	6d 91       	ld	r22, X+
    1bf8:	7c 91       	ld	r23, X
    1bfa:	5f 97       	sbiw	r26, 0x1f	; 31
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e 94 98 09 	call	0x1330	; 0x1330 <freeMemoryUpdate>

					 //update next free cluster entry in FSinfo sector
					 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
					 if(firstCluster < cluster)
    1c12:	86 16       	cp	r8, r22
    1c14:	97 06       	cpc	r9, r23
    1c16:	a8 06       	cpc	r10, r24
    1c18:	b9 06       	cpc	r11, r25
    1c1a:	30 f4       	brcc	.+12     	; 0x1c28 <findFiles+0x244>
					     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	61 e0       	ldi	r22, 0x01	; 1
    1c20:	a5 01       	movw	r20, r10
    1c22:	94 01       	movw	r18, r8
    1c24:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>

					 //mark all the clusters allocated to the file as 'free'
				     while(1)  
				     {
				        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1c28:	c5 01       	movw	r24, r10
    1c2a:	b4 01       	movw	r22, r8
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    1c3a:	f6 2e       	mov	r15, r22
    1c3c:	e7 2e       	mov	r14, r23
    1c3e:	d8 2e       	mov	r13, r24
    1c40:	c9 2e       	mov	r12, r25
						getSetNextCluster (firstCluster, SET, 0);
    1c42:	c5 01       	movw	r24, r10
    1c44:	b4 01       	movw	r22, r8
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	00 e0       	ldi	r16, 0x00	; 0
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    1c54:	8f 2d       	mov	r24, r15
    1c56:	9e 2d       	mov	r25, r14
    1c58:	ad 2d       	mov	r26, r13
    1c5a:	bc 2d       	mov	r27, r12
    1c5c:	4c 01       	movw	r8, r24
    1c5e:	5d 01       	movw	r10, r26
						if(nextCluster > 0x0ffffff6) 
    1c60:	b7 ef       	ldi	r27, 0xF7	; 247
    1c62:	8b 16       	cp	r8, r27
    1c64:	bf ef       	ldi	r27, 0xFF	; 255
    1c66:	9b 06       	cpc	r9, r27
    1c68:	bf ef       	ldi	r27, 0xFF	; 255
    1c6a:	ab 06       	cpc	r10, r27
    1c6c:	bf e0       	ldi	r27, 0x0F	; 15
    1c6e:	bb 06       	cpc	r11, r27
    1c70:	d8 f2       	brcs	.-74     	; 0x1c28 <findFiles+0x244>
						   {USART_transmitStringToPCFromFlash(PSTR("File deleted!"));return 0;}
    1c72:	81 ee       	ldi	r24, 0xE1	; 225
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	85 c0       	rjmp	.+266    	; 0x1d82 <findFiles+0x39e>
				  }
	            }
	          }
	          else  //when flag = GET_LIST
			  {
			     TX_NEWLINE_PC;
    1c78:	8d e0       	ldi	r24, 0x0D	; 13
    1c7a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1c7e:	8a e0       	ldi	r24, 0x0A	; 10
    1c80:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1c84:	1a 86       	std	Y+10, r1	; 0x0a
    1c86:	19 86       	std	Y+9, r1	; 0x09
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <findFiles+0x2bc>
				 for(j=0; j<11; j++)
			     {
				   if(j == 8) USART_transmitByteToPC(' ');
    1c8a:	e9 85       	ldd	r30, Y+9	; 0x09
    1c8c:	e7 30       	cpi	r30, 0x07	; 7
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <findFiles+0x2b2>
    1c90:	80 e2       	ldi	r24, 0x20	; 32
    1c92:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	9a 87       	std	Y+10, r25	; 0x0a
    1c9e:	89 87       	std	Y+9, r24	; 0x09
				   USART_transmitByteToPC (dir->name[j]);
    1ca0:	e9 85       	ldd	r30, Y+9	; 0x09
    1ca2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ca4:	e0 0f       	add	r30, r16
    1ca6:	f1 1f       	adc	r31, r17
    1ca8:	80 81       	ld	r24, Z
    1caa:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	            }
	          }
	          else  //when flag = GET_LIST
			  {
			     TX_NEWLINE_PC;
				 for(j=0; j<11; j++)
    1cae:	a9 85       	ldd	r26, Y+9	; 0x09
    1cb0:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cb2:	1a 97       	sbiw	r26, 0x0a	; 10
    1cb4:	51 f7       	brne	.-44     	; 0x1c8a <findFiles+0x2a6>
			     {
				   if(j == 8) USART_transmitByteToPC(' ');
				   USART_transmitByteToPC (dir->name[j]);
				 }
			     USART_transmitStringToPCFromFlash (PSTR("   "));
    1cb6:	8d ed       	ldi	r24, 0xDD	; 221
    1cb8:	92 e0       	ldi	r25, 0x02	; 2
    1cba:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1cbe:	87 01       	movw	r16, r14
    1cc0:	00 53       	subi	r16, 0x30	; 48
    1cc2:	1c 4f       	sbci	r17, 0xFC	; 252
    1cc4:	05 51       	subi	r16, 0x15	; 21
    1cc6:	10 40       	sbci	r17, 0x00	; 0
    1cc8:	f8 01       	movw	r30, r16
    1cca:	80 81       	ld	r24, Z
    1ccc:	0b 5e       	subi	r16, 0xEB	; 235
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	80 31       	cpi	r24, 0x10	; 16
    1cd2:	b9 f0       	breq	.+46     	; 0x1d02 <findFiles+0x31e>
    1cd4:	88 30       	cpi	r24, 0x08	; 8
    1cd6:	19 f4       	brne	.+6      	; 0x1cde <findFiles+0x2fa>
				     USART_transmitStringToPCFromFlash (PSTR("FILE" ));
			         USART_transmitStringToPCFromFlash (PSTR("   "));
				     displayMemory (LOW, dir->fileSize);
				 }
				 else
				   USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1cd8:	8b ec       	ldi	r24, 0xCB	; 203
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <findFiles+0x322>
				   USART_transmitByteToPC (dir->name[j]);
				 }
			     USART_transmitStringToPCFromFlash (PSTR("   "));
			     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
				 {
				     USART_transmitStringToPCFromFlash (PSTR("FILE" ));
    1cde:	88 ed       	ldi	r24, 0xD8	; 216
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			         USART_transmitStringToPCFromFlash (PSTR("   "));
    1ce6:	84 ed       	ldi	r24, 0xD4	; 212
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
				     displayMemory (LOW, dir->fileSize);
    1cee:	f8 01       	movw	r30, r16
    1cf0:	34 97       	sbiw	r30, 0x04	; 4
    1cf2:	40 81       	ld	r20, Z
    1cf4:	51 81       	ldd	r21, Z+1	; 0x01
    1cf6:	62 81       	ldd	r22, Z+2	; 0x02
    1cf8:	73 81       	ldd	r23, Z+3	; 0x03
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	0e 94 20 08 	call	0x1040	; 0x1040 <displayMemory>
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <findFiles+0x326>
				 }
				 else
				   USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1d02:	80 ed       	ldi	r24, 0xD0	; 208
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	e8 0e       	add	r14, r24
    1d10:	f9 1e       	adc	r15, r25
    1d12:	a7 01       	movw	r20, r14
    1d14:	40 52       	subi	r20, 0x20	; 32
    1d16:	50 40       	sbci	r21, 0x00	; 0
	   for(sector = 0; sector < sectorPerCluster; sector++)
	   {
	     SD_readSingleBlock (firstSector + sector);
	

	     for(i=0; i<bytesPerSector; i+=32)
    1d18:	80 91 9f 03 	lds	r24, 0x039F
    1d1c:	90 91 a0 03 	lds	r25, 0x03A0
    1d20:	48 17       	cp	r20, r24
    1d22:	59 07       	cpc	r21, r25
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <findFiles+0x344>
    1d26:	b7 ce       	rjmp	.-658    	; 0x1a96 <findFiles+0xb2>

	while(1)
	{
	   firstSector = getFirstSector (cluster);

	   for(sector = 0; sector < sectorPerCluster; sector++)
    1d28:	08 94       	sec
    1d2a:	61 1c       	adc	r6, r1
    1d2c:	71 1c       	adc	r7, r1
    1d2e:	81 1c       	adc	r8, r1
    1d30:	91 1c       	adc	r9, r1
    1d32:	80 91 d1 05 	lds	r24, 0x05D1
    1d36:	90 91 d2 05 	lds	r25, 0x05D2
    1d3a:	a0 e0       	ldi	r26, 0x00	; 0
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	68 16       	cp	r6, r24
    1d40:	79 06       	cpc	r7, r25
    1d42:	8a 06       	cpc	r8, r26
    1d44:	9b 06       	cpc	r9, r27
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <findFiles+0x366>
    1d48:	94 ce       	rjmp	.-728    	; 0x1a72 <findFiles+0x8e>
			  }
	       }
	     }
	   }

	   cluster = (getSetNextCluster (cluster, GET, 0));
    1d4a:	c6 01       	movw	r24, r12
    1d4c:	b5 01       	movw	r22, r10
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	00 e0       	ldi	r16, 0x00	; 0
    1d52:	10 e0       	ldi	r17, 0x00	; 0
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    1d5c:	5b 01       	movw	r10, r22
    1d5e:	6c 01       	movw	r12, r24

	   if(cluster > 0x0ffffff6)
    1d60:	97 ef       	ldi	r25, 0xF7	; 247
    1d62:	a9 16       	cp	r10, r25
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	b9 06       	cpc	r11, r25
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	c9 06       	cpc	r12, r25
    1d6c:	9f e0       	ldi	r25, 0x0F	; 15
    1d6e:	d9 06       	cpc	r13, r25
    1d70:	50 f4       	brcc	.+20     	; 0x1d86 <findFiles+0x3a2>
	   	 return 0;
	   if(cluster == 0) 
    1d72:	a1 14       	cp	r10, r1
    1d74:	b1 04       	cpc	r11, r1
    1d76:	c1 04       	cpc	r12, r1
    1d78:	d1 04       	cpc	r13, r1
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <findFiles+0x39a>
    1d7c:	5a ce       	rjmp	.-844    	; 0x1a32 <findFiles+0x4e>
	   {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster"));  return 0;}
    1d7e:	82 eb       	ldi	r24, 0xB2	; 178
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    1d86:	00 e0       	ldi	r16, 0x00	; 0
    1d88:	10 e0       	ldi	r17, 0x00	; 0
	 }
	return 0;
}
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	2a 96       	adiw	r28, 0x0a	; 10
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	bf 90       	pop	r11
    1daa:	af 90       	pop	r10
    1dac:	9f 90       	pop	r9
    1dae:	8f 90       	pop	r8
    1db0:	7f 90       	pop	r7
    1db2:	6f 90       	pop	r6
    1db4:	5f 90       	pop	r5
    1db6:	4f 90       	pop	r4
    1db8:	3f 90       	pop	r3
    1dba:	2f 90       	pop	r2
    1dbc:	08 95       	ret

00001dbe <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1dc4:	0e 94 98 07 	call	0xf30	; 0xf30 <convertFileName>
  if(error) return;
    1dc8:	88 23       	and	r24, r24
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	be 01       	movw	r22, r28
    1dd0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <findFiles>
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <readAndRetreiveFileContents>:
	return 0;
}


unsigned char readAndRetreiveFileContents (unsigned char *fileName, unsigned char *dataString)
{
    1dda:	2f 92       	push	r2
    1ddc:	3f 92       	push	r3
    1dde:	4f 92       	push	r4
    1de0:	5f 92       	push	r5
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	28 97       	sbiw	r28, 0x08	; 8
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	8c 01       	movw	r16, r24
    1e10:	7e 83       	std	Y+6, r23	; 0x06
    1e12:	6d 83       	std	Y+5, r22	; 0x05
	unsigned int k;//,iCntForSingleAudioWrite;
	unsigned char j, error;
	unsigned int iReadByteCnt;
	bool bEndOfFile=false;

	error = convertFileName (fileName); //convert fileName into FAT format
    1e14:	0e 94 98 07 	call	0xf30	; 0xf30 <convertFileName>
	if(error) return 1;
    1e18:	88 23       	and	r24, r24
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <readAndRetreiveFileContents+0x46>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	a8 c0       	rjmp	.+336    	; 0x1f70 <readAndRetreiveFileContents+0x196>

	dir = findFiles (GET_FILE, fileName); //get the file location
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	b8 01       	movw	r22, r16
    1e24:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <findFiles>
    1e28:	9c 01       	movw	r18, r24
	if(dir == 0) 
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <readAndRetreiveFileContents+0x58>
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	9f c0       	rjmp	.+318    	; 0x1f70 <readAndRetreiveFileContents+0x196>
	  return (2);

//	if(flag == VERIFY) return (1);	//specified file name is already existing

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1e32:	dc 01       	movw	r26, r24
    1e34:	54 96       	adiw	r26, 0x14	; 20
    1e36:	8d 91       	ld	r24, X+
    1e38:	9c 91       	ld	r25, X
    1e3a:	55 97       	sbiw	r26, 0x15	; 21
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	6c 01       	movw	r12, r24
    1e42:	bb 24       	eor	r11, r11
    1e44:	aa 24       	eor	r10, r10
    1e46:	f9 01       	movw	r30, r18
    1e48:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e4a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	a8 2a       	or	r10, r24
    1e52:	b9 2a       	or	r11, r25
    1e54:	ca 2a       	or	r12, r26
    1e56:	db 2a       	or	r13, r27

	fileSize = dir->fileSize;
    1e58:	d9 01       	movw	r26, r18
    1e5a:	5c 96       	adiw	r26, 0x1c	; 28
    1e5c:	2d 90       	ld	r2, X+
    1e5e:	3d 90       	ld	r3, X+
    1e60:	4d 90       	ld	r4, X+
    1e62:	5c 90       	ld	r5, X
    1e64:	5f 97       	sbiw	r26, 0x1f	; 31
    1e66:	29 82       	std	Y+1, r2	; 0x01
    1e68:	3a 82       	std	Y+2, r3	; 0x02
    1e6a:	4b 82       	std	Y+3, r4	; 0x03
    1e6c:	5c 82       	std	Y+4, r5	; 0x04
    1e6e:	22 24       	eor	r2, r2
    1e70:	33 24       	eor	r3, r3
    1e72:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1e74:	20 91 d1 05 	lds	r18, 0x05D1
    1e78:	30 91 d2 05 	lds	r19, 0x05D2
    1e7c:	e0 90 97 03 	lds	r14, 0x0397
    1e80:	f0 90 98 03 	lds	r15, 0x0398
    1e84:	00 91 99 03 	lds	r16, 0x0399
    1e88:	10 91 9a 03 	lds	r17, 0x039A
    1e8c:	c6 01       	movw	r24, r12
    1e8e:	b5 01       	movw	r22, r10
    1e90:	62 50       	subi	r22, 0x02	; 2
    1e92:	70 40       	sbci	r23, 0x00	; 0
    1e94:	80 40       	sbci	r24, 0x00	; 0
    1e96:	90 40       	sbci	r25, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    1ea0:	3b 01       	movw	r6, r22
    1ea2:	4c 01       	movw	r8, r24
    1ea4:	6e 0c       	add	r6, r14
    1ea6:	7f 1c       	adc	r7, r15
    1ea8:	80 1e       	adc	r8, r16
    1eaa:	91 1e       	adc	r9, r17
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	40 c0       	rjmp	.+128    	; 0x1f30 <readAndRetreiveFileContents+0x156>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    1eb0:	c4 01       	movw	r24, r8
    1eb2:	b3 01       	movw	r22, r6
    1eb4:	61 0f       	add	r22, r17
    1eb6:	71 1d       	adc	r23, r1
    1eb8:	81 1d       	adc	r24, r1
    1eba:	91 1d       	adc	r25, r1
    1ebc:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    1ec0:	a2 01       	movw	r20, r4
    1ec2:	91 01       	movw	r18, r2
    1ec4:	60 e0       	ldi	r22, 0x00	; 0


			for(k=0; k<512; k++)
    1ec6:	d2 01       	movw	r26, r4
    1ec8:	c1 01       	movw	r24, r2
    1eca:	80 50       	subi	r24, 0x00	; 0
    1ecc:	9e 4f       	sbci	r25, 0xFE	; 254
    1ece:	af 4f       	sbci	r26, 0xFF	; 255
    1ed0:	bf 4f       	sbci	r27, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    1ed2:	29 80       	ldd	r2, Y+1	; 0x01
    1ed4:	3a 80       	ldd	r3, Y+2	; 0x02
    1ed6:	4b 80       	ldd	r4, Y+3	; 0x03
    1ed8:	5c 80       	ldd	r5, Y+4	; 0x04
    1eda:	22 15       	cp	r18, r2
    1edc:	33 05       	cpc	r19, r3
    1ede:	44 05       	cpc	r20, r4
    1ee0:	55 05       	cpc	r21, r5
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <readAndRetreiveFileContents+0x10c>
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	2f 5f       	subi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	4f 4f       	sbci	r20, 0xFF	; 255
    1eec:	5f 4f       	sbci	r21, 0xFF	; 255
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    1eee:	28 17       	cp	r18, r24
    1ef0:	39 07       	cpc	r19, r25
    1ef2:	4a 07       	cpc	r20, r26
    1ef4:	5b 07       	cpc	r21, r27
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <readAndRetreiveFileContents+0xf8>
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <readAndRetreiveFileContents+0x13e>
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
				
			}
			while(iReadByteCnt<k)
			{
				*dataString++=buffer[iReadByteCnt];
    1efa:	ef 81       	ldd	r30, Y+7	; 0x07
    1efc:	f8 85       	ldd	r31, Y+8	; 0x08
    1efe:	e0 53       	subi	r30, 0x30	; 48
    1f00:	fc 4f       	sbci	r31, 0xFC	; 252
    1f02:	80 81       	ld	r24, Z
    1f04:	ad 81       	ldd	r26, Y+5	; 0x05
    1f06:	be 81       	ldd	r27, Y+6	; 0x06
    1f08:	8d 93       	st	X+, r24
    1f0a:	be 83       	std	Y+6, r27	; 0x06
    1f0c:	ad 83       	std	Y+5, r26	; 0x05
				if(iReadByteCnt++==k)return 0;	
    1f0e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f10:	f8 85       	ldd	r31, Y+8	; 0x08
    1f12:	31 96       	adiw	r30, 0x01	; 1
    1f14:	f8 87       	std	Y+8, r31	; 0x08
    1f16:	ef 83       	std	Y+7, r30	; 0x07
			for(k=0; k<512; k++)
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
				
			}
			while(iReadByteCnt<k)
    1f18:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1a:	98 85       	ldd	r25, Y+8	; 0x08
    1f1c:	80 50       	subi	r24, 0x00	; 0
    1f1e:	92 40       	sbci	r25, 0x02	; 2
    1f20:	60 f3       	brcs	.-40     	; 0x1efa <readAndRetreiveFileContents+0x120>
			{
				*dataString++=buffer[iReadByteCnt];
				if(iReadByteCnt++==k)return 0;	
			}
			if(bEndOfFile)
    1f22:	66 23       	and	r22, r22
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <readAndRetreiveFileContents+0x150>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	23 c0       	rjmp	.+70     	; 0x1f70 <readAndRetreiveFileContents+0x196>

	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    1f2a:	1f 5f       	subi	r17, 0xFF	; 255
    1f2c:	19 01       	movw	r2, r18
    1f2e:	2a 01       	movw	r4, r20
    1f30:	20 91 d1 05 	lds	r18, 0x05D1
    1f34:	30 91 d2 05 	lds	r19, 0x05D2
    1f38:	81 2f       	mov	r24, r17
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	82 17       	cp	r24, r18
    1f3e:	93 07       	cpc	r25, r19
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <readAndRetreiveFileContents+0x16a>
    1f42:	b6 cf       	rjmp	.-148    	; 0x1eb0 <readAndRetreiveFileContents+0xd6>
			if(bEndOfFile)
			{
				return 0;
			}
		}
		cluster = getSetNextCluster (cluster, GET, 0);
    1f44:	c6 01       	movw	r24, r12
    1f46:	b5 01       	movw	r22, r10
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	00 e0       	ldi	r16, 0x00	; 0
    1f4c:	10 e0       	ldi	r17, 0x00	; 0
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    1f56:	5b 01       	movw	r10, r22
    1f58:	6c 01       	movw	r12, r24
		if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 3;}
    1f5a:	61 15       	cp	r22, r1
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	81 05       	cpc	r24, r1
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <readAndRetreiveFileContents+0x18c>
    1f64:	87 cf       	rjmp	.-242    	; 0x1e74 <readAndRetreiveFileContents+0x9a>
    1f66:	80 e8       	ldi	r24, 0x80	; 128
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    1f6e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return 4;
}
    1f70:	28 96       	adiw	r28, 0x08	; 8
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	df 90       	pop	r13
    1f8a:	cf 90       	pop	r12
    1f8c:	bf 90       	pop	r11
    1f8e:	af 90       	pop	r10
    1f90:	9f 90       	pop	r9
    1f92:	8f 90       	pop	r8
    1f94:	7f 90       	pop	r7
    1f96:	6f 90       	pop	r6
    1f98:	5f 90       	pop	r5
    1f9a:	4f 90       	pop	r4
    1f9c:	3f 90       	pop	r3
    1f9e:	2f 90       	pop	r2
    1fa0:	08 95       	ret

00001fa2 <readFile>:
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************

unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    1fa2:	2f 92       	push	r2
    1fa4:	3f 92       	push	r3
    1fa6:	4f 92       	push	r4
    1fa8:	5f 92       	push	r5
    1faa:	6f 92       	push	r6
    1fac:	7f 92       	push	r7
    1fae:	8f 92       	push	r8
    1fb0:	9f 92       	push	r9
    1fb2:	af 92       	push	r10
    1fb4:	bf 92       	push	r11
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <readFile+0x26>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <readFile+0x28>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	e8 2e       	mov	r14, r24
    1fd0:	8b 01       	movw	r16, r22
	unsigned int k;//,iCntForSingleAudioWrite;
	unsigned char j, error;
	//unsigned int iAudioByteCnt;
	bool bEndOfFile=false;

	error = convertFileName (fileName); //convert fileName into FAT format
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	0e 94 98 07 	call	0xf30	; 0xf30 <convertFileName>
	if(error) return 2;
    1fd8:	88 23       	and	r24, r24
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <readFile+0x3e>
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	94 c0       	rjmp	.+296    	; 0x2108 <readFile+0x166>

	dir = findFiles (GET_FILE, fileName); //get the file location
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	b8 01       	movw	r22, r16
    1fe4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <findFiles>
    1fe8:	9c 01       	movw	r18, r24
	if(dir == 0) 
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <readFile+0x4e>
    1fee:	8b c0       	rjmp	.+278    	; 0x2106 <readFile+0x164>
	  return (0);

	if(flag == VERIFY) return (1);	//specified file name is already existing
    1ff0:	22 24       	eor	r2, r2
    1ff2:	23 94       	inc	r2
    1ff4:	e2 14       	cp	r14, r2
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <readFile+0x5a>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	86 c0       	rjmp	.+268    	; 0x2108 <readFile+0x166>

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	54 96       	adiw	r26, 0x14	; 20
    2000:	8d 91       	ld	r24, X+
    2002:	9c 91       	ld	r25, X
    2004:	55 97       	sbiw	r26, 0x15	; 21
    2006:	a0 e0       	ldi	r26, 0x00	; 0
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	6c 01       	movw	r12, r24
    200c:	bb 24       	eor	r11, r11
    200e:	aa 24       	eor	r10, r10
    2010:	f9 01       	movw	r30, r18
    2012:	82 8d       	ldd	r24, Z+26	; 0x1a
    2014:	93 8d       	ldd	r25, Z+27	; 0x1b
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	a8 2a       	or	r10, r24
    201c:	b9 2a       	or	r11, r25
    201e:	ca 2a       	or	r12, r26
    2020:	db 2a       	or	r13, r27

	fileSize = dir->fileSize;
    2022:	d9 01       	movw	r26, r18
    2024:	5c 96       	adiw	r26, 0x1c	; 28
    2026:	2d 90       	ld	r2, X+
    2028:	3d 90       	ld	r3, X+
    202a:	4d 90       	ld	r4, X+
    202c:	5c 90       	ld	r5, X
    202e:	5f 97       	sbiw	r26, 0x1f	; 31
    2030:	29 82       	std	Y+1, r2	; 0x01
    2032:	3a 82       	std	Y+2, r3	; 0x02
    2034:	4b 82       	std	Y+3, r4	; 0x03
    2036:	5c 82       	std	Y+4, r5	; 0x04
    2038:	22 24       	eor	r2, r2
    203a:	33 24       	eor	r3, r3
    203c:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    203e:	20 91 d1 05 	lds	r18, 0x05D1
    2042:	30 91 d2 05 	lds	r19, 0x05D2
    2046:	e0 90 97 03 	lds	r14, 0x0397
    204a:	f0 90 98 03 	lds	r15, 0x0398
    204e:	00 91 99 03 	lds	r16, 0x0399
    2052:	10 91 9a 03 	lds	r17, 0x039A
    2056:	c6 01       	movw	r24, r12
    2058:	b5 01       	movw	r22, r10
    205a:	62 50       	subi	r22, 0x02	; 2
    205c:	70 40       	sbci	r23, 0x00	; 0
    205e:	80 40       	sbci	r24, 0x00	; 0
    2060:	90 40       	sbci	r25, 0x00	; 0
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    206a:	3b 01       	movw	r6, r22
    206c:	4c 01       	movw	r8, r24
    206e:	6e 0c       	add	r6, r14
    2070:	7f 1c       	adc	r7, r15
    2072:	80 1e       	adc	r8, r16
    2074:	91 1e       	adc	r9, r17
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	28 c0       	rjmp	.+80     	; 0x20ca <readFile+0x128>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    207a:	c4 01       	movw	r24, r8
    207c:	b3 01       	movw	r22, r6
    207e:	61 0f       	add	r22, r17
    2080:	71 1d       	adc	r23, r1
    2082:	81 1d       	adc	r24, r1
    2084:	91 1d       	adc	r25, r1
    2086:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    208a:	d2 01       	movw	r26, r4
    208c:	c1 01       	movw	r24, r2
    208e:	60 e0       	ldi	r22, 0x00	; 0


			for(k=0; k<512; k++)
    2090:	a2 01       	movw	r20, r4
    2092:	91 01       	movw	r18, r2
    2094:	20 50       	subi	r18, 0x00	; 0
    2096:	3e 4f       	sbci	r19, 0xFE	; 254
    2098:	4f 4f       	sbci	r20, 0xFF	; 255
    209a:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    209c:	29 80       	ldd	r2, Y+1	; 0x01
    209e:	3a 80       	ldd	r3, Y+2	; 0x02
    20a0:	4b 80       	ldd	r4, Y+3	; 0x03
    20a2:	5c 80       	ldd	r5, Y+4	; 0x04
    20a4:	82 15       	cp	r24, r2
    20a6:	93 05       	cpc	r25, r3
    20a8:	a4 05       	cpc	r26, r4
    20aa:	b5 05       	cpc	r27, r5
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <readFile+0x10e>
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	a1 1d       	adc	r26, r1
    20b4:	b1 1d       	adc	r27, r1
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    20b6:	82 17       	cp	r24, r18
    20b8:	93 07       	cpc	r25, r19
    20ba:	a4 07       	cpc	r26, r20
    20bc:	b5 07       	cpc	r27, r21
    20be:	71 f7       	brne	.-36     	; 0x209c <readFile+0xfa>
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
			}
			if(bEndOfFile)
    20c0:	66 23       	and	r22, r22
    20c2:	09 f5       	brne	.+66     	; 0x2106 <readFile+0x164>

	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    20c4:	1f 5f       	subi	r17, 0xFF	; 255
    20c6:	1c 01       	movw	r2, r24
    20c8:	2d 01       	movw	r4, r26
    20ca:	20 91 d1 05 	lds	r18, 0x05D1
    20ce:	30 91 d2 05 	lds	r19, 0x05D2
    20d2:	81 2f       	mov	r24, r17
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	82 17       	cp	r24, r18
    20d8:	93 07       	cpc	r25, r19
    20da:	78 f2       	brcs	.-98     	; 0x207a <readFile+0xd8>
			if(bEndOfFile)
			{
				return 0;
			}
		}
		cluster = getSetNextCluster (cluster, GET, 0);
    20dc:	c6 01       	movw	r24, r12
    20de:	b5 01       	movw	r22, r10
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	00 e0       	ldi	r16, 0x00	; 0
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    20ee:	5b 01       	movw	r10, r22
    20f0:	6c 01       	movw	r12, r24
		if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 0;}
    20f2:	61 15       	cp	r22, r1
    20f4:	71 05       	cpc	r23, r1
    20f6:	81 05       	cpc	r24, r1
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <readFile+0x15c>
    20fc:	a0 cf       	rjmp	.-192    	; 0x203e <readFile+0x9c>
    20fe:	89 e9       	ldi	r24, 0x99	; 153
    2100:	92 e0       	ldi	r25, 0x02	; 2
    2102:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    2106:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	bf 90       	pop	r11
    2122:	af 90       	pop	r10
    2124:	9f 90       	pop	r9
    2126:	8f 90       	pop	r8
    2128:	7f 90       	pop	r7
    212a:	6f 90       	pop	r6
    212c:	5f 90       	pop	r5
    212e:	4f 90       	pop	r4
    2130:	3f 90       	pop	r3
    2132:	2f 90       	pop	r2
    2134:	08 95       	ret

00002136 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    2136:	2f 92       	push	r2
    2138:	3f 92       	push	r3
    213a:	4f 92       	push	r4
    213c:	5f 92       	push	r5
    213e:	6f 92       	push	r6
    2140:	7f 92       	push	r7
    2142:	8f 92       	push	r8
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	bc 01       	movw	r22, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <readFile>

if(j == 1) 
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	09 f0       	breq	.+2      	; 0x2164 <writeFile+0x2e>
    2162:	55 c0       	rjmp	.+170    	; 0x220e <writeFile+0xd8>
{
  USART_transmitStringToPCFromFlash(PSTR("  File already existing, appending data..")); 
    2164:	8a e2       	ldi	r24, 0x2A	; 42
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
  appendFile = 1;
  cluster = appendStartCluster;
    216c:	60 90 f4 05 	lds	r6, 0x05F4
    2170:	70 90 f5 05 	lds	r7, 0x05F5
    2174:	80 90 f6 05 	lds	r8, 0x05F6
    2178:	90 90 f7 05 	lds	r9, 0x05F7
    217c:	aa 24       	eor	r10, r10
    217e:	bb 24       	eor	r11, r11
    2180:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    2182:	c4 01       	movw	r24, r8
    2184:	b3 01       	movw	r22, r6
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	00 e0       	ldi	r16, 0x00	; 0
    218a:	10 e0       	ldi	r17, 0x00	; 0
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    if(nextCluster == EOF) break;
    2194:	6f 3f       	cpi	r22, 0xFF	; 255
    2196:	2f ef       	ldi	r18, 0xFF	; 255
    2198:	72 07       	cpc	r23, r18
    219a:	2f ef       	ldi	r18, 0xFF	; 255
    219c:	82 07       	cpc	r24, r18
    219e:	2f e0       	ldi	r18, 0x0F	; 15
    21a0:	92 07       	cpc	r25, r18
    21a2:	41 f0       	breq	.+16     	; 0x21b4 <writeFile+0x7e>
	cluster = nextCluster;
	clusterCount++;
    21a4:	08 94       	sec
    21a6:	a1 1c       	adc	r10, r1
    21a8:	b1 1c       	adc	r11, r1
    21aa:	c1 1c       	adc	r12, r1
    21ac:	d1 1c       	adc	r13, r1
    21ae:	3b 01       	movw	r6, r22
    21b0:	4c 01       	movw	r8, r24
    21b2:	e7 cf       	rjmp	.-50     	; 0x2182 <writeFile+0x4c>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    21b4:	20 91 d1 05 	lds	r18, 0x05D1
    21b8:	30 91 d2 05 	lds	r19, 0x05D2
    21bc:	60 91 9f 03 	lds	r22, 0x039F
    21c0:	70 91 a0 03 	lds	r23, 0x03A0
    21c4:	e0 90 9f 03 	lds	r14, 0x039F
    21c8:	f0 90 a0 03 	lds	r15, 0x03A0
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    21d8:	a6 01       	movw	r20, r12
    21da:	95 01       	movw	r18, r10
    21dc:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	60 91 9b 03 	lds	r22, 0x039B
    21e8:	70 91 9c 03 	lds	r23, 0x039C
    21ec:	80 91 9d 03 	lds	r24, 0x039D
    21f0:	90 91 9e 03 	lds	r25, 0x039E
    21f4:	62 1b       	sub	r22, r18
    21f6:	73 0b       	sbc	r23, r19
    21f8:	84 0b       	sbc	r24, r20
    21fa:	95 0b       	sbc	r25, r21
    21fc:	00 e0       	ldi	r16, 0x00	; 0
    21fe:	10 e0       	ldi	r17, 0x00	; 0
    2200:	a8 01       	movw	r20, r16
    2202:	97 01       	movw	r18, r14
    2204:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    2208:	b2 2e       	mov	r11, r18
    220a:	21 e0       	ldi	r18, 0x01	; 1
    220c:	3e c0       	rjmp	.+124    	; 0x228a <writeFile+0x154>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	09 f4       	brne	.+2      	; 0x2214 <writeFile+0xde>
    2212:	08 c1       	rjmp	.+528    	; 0x2424 <writeFile+0x2ee>
else
{
//  TX_NEWLINE_PC;
//  USART_transmitStringToPCFromFlash(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	0e 94 11 09 	call	0x1222	; 0x1222 <getSetFreeCluster>
    2224:	9b 01       	movw	r18, r22
    2226:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    2228:	80 91 a1 03 	lds	r24, 0x03A1
    222c:	90 91 a2 03 	lds	r25, 0x03A2
    2230:	a0 91 a3 03 	lds	r26, 0x03A3
    2234:	b0 91 a4 03 	lds	r27, 0x03A4
    2238:	82 17       	cp	r24, r18
    223a:	93 07       	cpc	r25, r19
    223c:	a4 07       	cpc	r26, r20
    223e:	b5 07       	cpc	r27, r21
    2240:	40 f4       	brcc	.+16     	; 0x2252 <writeFile+0x11c>
     cluster = rootCluster;
    2242:	20 91 c5 03 	lds	r18, 0x03C5
    2246:	30 91 c6 03 	lds	r19, 0x03C6
    224a:	40 91 c7 03 	lds	r20, 0x03C7
    224e:	50 91 c8 03 	lds	r21, 0x03C8

  cluster = searchNextFreeCluster(cluster);
    2252:	ca 01       	movw	r24, r20
    2254:	b9 01       	movw	r22, r18
    2256:	0e 94 87 08 	call	0x110e	; 0x110e <searchNextFreeCluster>
    225a:	3b 01       	movw	r6, r22
    225c:	4c 01       	movw	r8, r24
   if(cluster == 0)
    225e:	61 15       	cp	r22, r1
    2260:	71 05       	cpc	r23, r1
    2262:	81 05       	cpc	r24, r1
    2264:	91 05       	cpc	r25, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <writeFile+0x134>
    2268:	dd c0       	rjmp	.+442    	; 0x2424 <writeFile+0x2ee>
   {
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0f ef       	ldi	r16, 0xFF	; 255
    226e:	1f ef       	ldi	r17, 0xFF	; 255
    2270:	2f ef       	ldi	r18, 0xFF	; 255
    2272:	3f e0       	ldi	r19, 0x0F	; 15
    2274:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
    2278:	10 92 9b 03 	sts	0x039B, r1
    227c:	10 92 9c 03 	sts	0x039C, r1
    2280:	10 92 9d 03 	sts	0x039D, r1
    2284:	10 92 9e 03 	sts	0x039E, r1
    2288:	20 e0       	ldi	r18, 0x00	; 0
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    228a:	2b 2c       	mov	r2, r11
    228c:	33 24       	eor	r3, r3
    228e:	44 24       	eor	r4, r4
    2290:	55 24       	eor	r5, r5
    2292:	c4 01       	movw	r24, r8
    2294:	b3 01       	movw	r22, r6
    2296:	62 50       	subi	r22, 0x02	; 2
    2298:	70 40       	sbci	r23, 0x00	; 0
    229a:	80 40       	sbci	r24, 0x00	; 0
    229c:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    229e:	22 23       	and	r18, r18
    22a0:	e1 f1       	breq	.+120    	; 0x231a <writeFile+0x1e4>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    22a2:	20 91 d1 05 	lds	r18, 0x05D1
    22a6:	30 91 d2 05 	lds	r19, 0x05D2
    22aa:	e0 90 97 03 	lds	r14, 0x0397
    22ae:	f0 90 98 03 	lds	r15, 0x0398
    22b2:	00 91 99 03 	lds	r16, 0x0399
    22b6:	10 91 9a 03 	lds	r17, 0x039A
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    22ba:	e2 0c       	add	r14, r2
    22bc:	f3 1c       	adc	r15, r3
    22be:	04 1d       	adc	r16, r4
    22c0:	15 1d       	adc	r17, r5
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    22ca:	e6 0e       	add	r14, r22
    22cc:	f7 1e       	adc	r15, r23
    22ce:	08 1f       	adc	r16, r24
    22d0:	19 1f       	adc	r17, r25
    22d2:	e0 92 ca 03 	sts	0x03CA, r14
    22d6:	f0 92 cb 03 	sts	0x03CB, r15
    22da:	00 93 cc 03 	sts	0x03CC, r16
    22de:	10 93 cd 03 	sts	0x03CD, r17
	  SD_readSingleBlock (startBlock);
    22e2:	60 91 ca 03 	lds	r22, 0x03CA
    22e6:	70 91 cb 03 	lds	r23, 0x03CB
    22ea:	80 91 cc 03 	lds	r24, 0x03CC
    22ee:	90 91 cd 03 	lds	r25, 0x03CD
    22f2:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    22f6:	20 91 9f 03 	lds	r18, 0x039F
    22fa:	30 91 a0 03 	lds	r19, 0x03A0
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	60 91 9b 03 	lds	r22, 0x039B
    2306:	70 91 9c 03 	lds	r23, 0x039C
    230a:	80 91 9d 03 	lds	r24, 0x039D
    230e:	90 91 9e 03 	lds	r25, 0x039E
    2312:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    2316:	1b 2d       	mov	r17, r11
    2318:	1f c0       	rjmp	.+62     	; 0x2358 <writeFile+0x222>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    231a:	20 91 d1 05 	lds	r18, 0x05D1
    231e:	30 91 d2 05 	lds	r19, 0x05D2
    2322:	e0 90 97 03 	lds	r14, 0x0397
    2326:	f0 90 98 03 	lds	r15, 0x0398
    232a:	00 91 99 03 	lds	r16, 0x0399
    232e:	10 91 9a 03 	lds	r17, 0x039A
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    233a:	e6 0e       	add	r14, r22
    233c:	f7 1e       	adc	r15, r23
    233e:	08 1f       	adc	r16, r24
    2340:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    2342:	e0 92 ca 03 	sts	0x03CA, r14
    2346:	f0 92 cb 03 	sts	0x03CB, r15
    234a:	00 93 cc 03 	sts	0x03CC, r16
    234e:	10 93 cd 03 	sts	0x03CD, r17
    2352:	10 e0       	ldi	r17, 0x00	; 0
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	20 91 9b 03 	lds	r18, 0x039B
    235c:	30 91 9c 03 	lds	r19, 0x039C
    2360:	40 91 9d 03 	lds	r20, 0x039D
    2364:	50 91 9e 03 	lds	r21, 0x039E
		 fileSize--;
	   } 
	   continue;     
	 }
//	 USART_transmitByteToPC(data);
     buffer[i++] = data;
    2368:	fb 01       	movw	r30, r22
    236a:	e0 53       	subi	r30, 0x30	; 48
    236c:	fc 4f       	sbci	r31, 0xFC	; 252
    236e:	10 82       	st	Z, r1
    2370:	6f 5f       	subi	r22, 0xFF	; 255
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	2f 5f       	subi	r18, 0xFF	; 255
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	4f 4f       	sbci	r20, 0xFF	; 255
    237a:	5f 4f       	sbci	r21, 0xFF	; 255
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	60 30       	cpi	r22, 0x00	; 0
    2380:	78 07       	cpc	r23, r24
    2382:	90 f3       	brcs	.-28     	; 0x2368 <writeFile+0x232>
    2384:	20 93 9b 03 	sts	0x039B, r18
    2388:	30 93 9c 03 	sts	0x039C, r19
    238c:	40 93 9d 03 	sts	0x039D, r20
    2390:	50 93 9e 03 	sts	0x039E, r21
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    2394:	60 91 ca 03 	lds	r22, 0x03CA
    2398:	70 91 cb 03 	lds	r23, 0x03CB
    239c:	80 91 cc 03 	lds	r24, 0x03CC
    23a0:	90 91 cd 03 	lds	r25, 0x03CD
    23a4:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
       j++;
    23a8:	1f 5f       	subi	r17, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    23aa:	20 91 d1 05 	lds	r18, 0x05D1
    23ae:	30 91 d2 05 	lds	r19, 0x05D2
    23b2:	81 2f       	mov	r24, r17
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	82 17       	cp	r24, r18
    23b8:	93 07       	cpc	r25, r19
    23ba:	61 f4       	brne	.+24     	; 0x23d4 <writeFile+0x29e>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    23bc:	c4 01       	movw	r24, r8
    23be:	b3 01       	movw	r22, r6
    23c0:	0e 94 87 08 	call	0x110e	; 0x110e <searchNextFreeCluster>
    23c4:	6b 01       	movw	r12, r22
    23c6:	7c 01       	movw	r14, r24

   if(cluster == 0)
    23c8:	61 15       	cp	r22, r1
    23ca:	71 05       	cpc	r23, r1
    23cc:	81 05       	cpc	r24, r1
    23ce:	91 05       	cpc	r25, r1
    23d0:	a9 f4       	brne	.+42     	; 0x23fc <writeFile+0x2c6>
    23d2:	28 c0       	rjmp	.+80     	; 0x2424 <writeFile+0x2ee>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
    23d4:	80 91 ca 03 	lds	r24, 0x03CA
    23d8:	90 91 cb 03 	lds	r25, 0x03CB
    23dc:	a0 91 cc 03 	lds	r26, 0x03CC
    23e0:	b0 91 cd 03 	lds	r27, 0x03CD
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	a1 1d       	adc	r26, r1
    23e8:	b1 1d       	adc	r27, r1
    23ea:	80 93 ca 03 	sts	0x03CA, r24
    23ee:	90 93 cb 03 	sts	0x03CB, r25
    23f2:	a0 93 cc 03 	sts	0x03CC, r26
    23f6:	b0 93 cd 03 	sts	0x03CD, r27
    23fa:	ac cf       	rjmp	.-168    	; 0x2354 <writeFile+0x21e>
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    23fc:	c4 01       	movw	r24, r8
    23fe:	b3 01       	movw	r22, r6
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	97 01       	movw	r18, r14
    2404:	86 01       	movw	r16, r12
    2406:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    240a:	c7 01       	movw	r24, r14
    240c:	b6 01       	movw	r22, r12
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0f ef       	ldi	r16, 0xFF	; 255
    2412:	1f ef       	ldi	r17, 0xFF	; 255
    2414:	2f ef       	ldi	r18, 0xFF	; 255
    2416:	3f e0       	ldi	r19, 0x0F	; 15
    2418:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	36 01       	movw	r6, r12
    2420:	47 01       	movw	r8, r14
    2422:	37 cf       	rjmp	.-402    	; 0x2292 <writeFile+0x15c>
   
   prevCluster = cluster;
 }
 
 return;
}
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	9f 90       	pop	r9
    2436:	8f 90       	pop	r8
    2438:	7f 90       	pop	r7
    243a:	6f 90       	pop	r6
    243c:	5f 90       	pop	r5
    243e:	4f 90       	pop	r4
    2440:	3f 90       	pop	r3
    2442:	2f 90       	pop	r2
    2444:	08 95       	ret

00002446 <ReplaceTheContentOfThisFileWith>:
/*
Modified write file function with replacing all the text with new text given
*/

int ReplaceTheContentOfThisFileWith (unsigned char *fileName, unsigned char *fileContent)
{
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	9c 01       	movw	r18, r24
    2464:	eb 01       	movw	r28, r22
	struct dir_Structure *dir;
	unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

	//j = readFile (VERIFY, fileName);

	if(readFile (VERIFY, fileName) == 1) 
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	b9 01       	movw	r22, r18
    246a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <readFile>
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	19 f0       	breq	.+6      	; 0x2478 <ReplaceTheContentOfThisFileWith+0x32>
    2472:	21 e0       	ldi	r18, 0x01	; 1
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	cf c0       	rjmp	.+414    	; 0x2616 <ReplaceTheContentOfThisFileWith+0x1d0>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2478:	a0 90 f4 05 	lds	r10, 0x05F4
    247c:	b0 90 f5 05 	lds	r11, 0x05F5
    2480:	c0 90 f6 05 	lds	r12, 0x05F6
    2484:	d0 90 f7 05 	lds	r13, 0x05F7
    2488:	8e ef       	ldi	r24, 0xFE	; 254
    248a:	9f ef       	ldi	r25, 0xFF	; 255
    248c:	af ef       	ldi	r26, 0xFF	; 255
    248e:	bf ef       	ldi	r27, 0xFF	; 255
    2490:	a8 0e       	add	r10, r24
    2492:	b9 1e       	adc	r11, r25
    2494:	ca 1e       	adc	r12, r26
    2496:	db 1e       	adc	r13, r27
    2498:	60 91 d1 05 	lds	r22, 0x05D1
    249c:	70 91 d2 05 	lds	r23, 0x05D2
    24a0:	e0 90 97 03 	lds	r14, 0x0397
    24a4:	f0 90 98 03 	lds	r15, 0x0398
    24a8:	00 91 99 03 	lds	r16, 0x0399
    24ac:	10 91 9a 03 	lds	r17, 0x039A
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a6 01       	movw	r20, r12
    24b6:	95 01       	movw	r18, r10
    24b8:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    24bc:	3b 01       	movw	r6, r22
    24be:	4c 01       	movw	r8, r24
    24c0:	6e 0c       	add	r6, r14
    24c2:	7f 1c       	adc	r7, r15
    24c4:	80 1e       	adc	r8, r16
    24c6:	91 1e       	adc	r9, r17
		//TX_NEWLINE_PC;
		appendFile = 1;
		cluster = appendStartCluster;
		clusterCount=0;
		firstSector = getFirstSector (cluster);
		startBlock = getFirstSector (cluster);
    24c8:	60 91 d1 05 	lds	r22, 0x05D1
    24cc:	70 91 d2 05 	lds	r23, 0x05D2
    24d0:	e0 90 97 03 	lds	r14, 0x0397
    24d4:	f0 90 98 03 	lds	r15, 0x0398
    24d8:	00 91 99 03 	lds	r16, 0x0399
    24dc:	10 91 9a 03 	lds	r17, 0x039A
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    24e8:	e6 0e       	add	r14, r22
    24ea:	f7 1e       	adc	r15, r23
    24ec:	08 1f       	adc	r16, r24
    24ee:	19 1f       	adc	r17, r25
    24f0:	e0 92 ca 03 	sts	0x03CA, r14
    24f4:	f0 92 cb 03 	sts	0x03CB, r15
    24f8:	00 93 cc 03 	sts	0x03CC, r16
    24fc:	10 93 cd 03 	sts	0x03CD, r17
    2500:	10 e0       	ldi	r17, 0x00	; 0
    2502:	34 c0       	rjmp	.+104    	; 0x256c <ReplaceTheContentOfThisFileWith+0x126>
		i=0;
		j=0;
		while(*fileContent!='$')
		{			
			buffer[i++]=*fileContent;
    2504:	fc 01       	movw	r30, r24
    2506:	e0 53       	subi	r30, 0x30	; 48
    2508:	fc 4f       	sbci	r31, 0xFC	; 252
    250a:	20 83       	st	Z, r18
    250c:	01 96       	adiw	r24, 0x01	; 1
			fileContent++;
    250e:	21 96       	adiw	r28, 0x01	; 1
			if(i >= 512)
    2510:	a2 e0       	ldi	r26, 0x02	; 2
    2512:	80 30       	cpi	r24, 0x00	; 0
    2514:	9a 07       	cpc	r25, r26
    2516:	60 f1       	brcs	.+88     	; 0x2570 <ReplaceTheContentOfThisFileWith+0x12a>
			{				
				i=0;
				error = SD_writeSingleBlock (startBlock);
    2518:	60 91 ca 03 	lds	r22, 0x03CA
    251c:	70 91 cb 03 	lds	r23, 0x03CB
    2520:	80 91 cc 03 	lds	r24, 0x03CC
    2524:	90 91 cd 03 	lds	r25, 0x03CD
    2528:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
				j++;
    252c:	1f 5f       	subi	r17, 0xFF	; 255
				if(j == sectorPerCluster) {j = 0; break;}
    252e:	20 91 d1 05 	lds	r18, 0x05D1
    2532:	30 91 d2 05 	lds	r19, 0x05D2
    2536:	81 2f       	mov	r24, r17
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	82 17       	cp	r24, r18
    253c:	93 07       	cpc	r25, r19
    253e:	19 f4       	brne	.+6      	; 0x2546 <ReplaceTheContentOfThisFileWith+0x100>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	18 c0       	rjmp	.+48     	; 0x2576 <ReplaceTheContentOfThisFileWith+0x130>
				startBlock++; 
    2546:	80 91 ca 03 	lds	r24, 0x03CA
    254a:	90 91 cb 03 	lds	r25, 0x03CB
    254e:	a0 91 cc 03 	lds	r26, 0x03CC
    2552:	b0 91 cd 03 	lds	r27, 0x03CD
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	a1 1d       	adc	r26, r1
    255a:	b1 1d       	adc	r27, r1
    255c:	80 93 ca 03 	sts	0x03CA, r24
    2560:	90 93 cb 03 	sts	0x03CB, r25
    2564:	a0 93 cc 03 	sts	0x03CC, r26
    2568:	b0 93 cd 03 	sts	0x03CD, r27
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
		clusterCount=0;
		firstSector = getFirstSector (cluster);
		startBlock = getFirstSector (cluster);
		i=0;
		j=0;
		while(*fileContent!='$')
    2570:	28 81       	ld	r18, Y
    2572:	24 32       	cpi	r18, 0x24	; 36
    2574:	39 f6       	brne	.-114    	; 0x2504 <ReplaceTheContentOfThisFileWith+0xbe>
				if(j == sectorPerCluster) {j = 0; break;}
				startBlock++; 
			}
		}
		//fileContent--;
		if(*fileContent=='$')
    2576:	68 81       	ld	r22, Y
    2578:	64 32       	cpi	r22, 0x24	; 36
    257a:	09 f5       	brne	.+66     	; 0x25be <ReplaceTheContentOfThisFileWith+0x178>
		{
			buffer[i++]='$';
    257c:	fc 01       	movw	r30, r24
    257e:	e0 53       	subi	r30, 0x30	; 48
    2580:	fc 4f       	sbci	r31, 0xFC	; 252
    2582:	60 83       	st	Z, r22
    2584:	04 c0       	rjmp	.+8      	; 0x258e <ReplaceTheContentOfThisFileWith+0x148>
			for(;i<512;i++)  //fill the rest of the buffer with 0x00
				buffer[i]= 0x00;
    2586:	fc 01       	movw	r30, r24
    2588:	e0 53       	subi	r30, 0x30	; 48
    258a:	fc 4f       	sbci	r31, 0xFC	; 252
    258c:	10 82       	st	Z, r1
		}
		//fileContent--;
		if(*fileContent=='$')
		{
			buffer[i++]='$';
			for(;i<512;i++)  //fill the rest of the buffer with 0x00
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	b2 e0       	ldi	r27, 0x02	; 2
    2592:	80 30       	cpi	r24, 0x00	; 0
    2594:	9b 07       	cpc	r25, r27
    2596:	b8 f3       	brcs	.-18     	; 0x2586 <ReplaceTheContentOfThisFileWith+0x140>
				buffer[i]= 0x00;
			error = SD_writeSingleBlock (startBlock);
    2598:	60 91 ca 03 	lds	r22, 0x03CA
    259c:	70 91 cb 03 	lds	r23, 0x03CB
    25a0:	80 91 cc 03 	lds	r24, 0x03CC
    25a4:	90 91 cd 03 	lds	r25, 0x03CD
    25a8:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
    25ac:	88 ee       	ldi	r24, 0xE8	; 232
    25ae:	93 e0       	ldi	r25, 0x03	; 3
    25b0:	28 ec       	ldi	r18, 0xC8	; 200
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	f9 01       	movw	r30, r18
    25b6:	31 97       	sbiw	r30, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <ReplaceTheContentOfThisFileWith+0x170>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	d9 f7       	brne	.-10     	; 0x25b4 <ReplaceTheContentOfThisFileWith+0x16e>
			_delay_ms(100);
			//USART_transmitStringToPCFromFlash(PSTR("Successfully replace the file content")); 
			//TX_NEWLINE_PC;
		}
		SD_readSingleBlock (firstSector);    
    25be:	c4 01       	movw	r24, r8
    25c0:	b3 01       	movw	r22, r6
    25c2:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    25c6:	88 ee       	ldi	r24, 0xE8	; 232
    25c8:	93 e0       	ldi	r25, 0x03	; 3
    25ca:	28 ec       	ldi	r18, 0xC8	; 200
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	f9 01       	movw	r30, r18
    25d0:	31 97       	sbiw	r30, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <ReplaceTheContentOfThisFileWith+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	d9 f7       	brne	.-10     	; 0x25ce <ReplaceTheContentOfThisFileWith+0x188>
		_delay_ms(100);
		dir = (struct dir_Structure *) &buffer[0]; 
		//extraMemory = fileSize - dir->fileSize;
		dir->fileSize = fileSize;
    25d8:	80 91 9b 03 	lds	r24, 0x039B
    25dc:	90 91 9c 03 	lds	r25, 0x039C
    25e0:	a0 91 9d 03 	lds	r26, 0x039D
    25e4:	b0 91 9e 03 	lds	r27, 0x039E
    25e8:	80 93 ec 03 	sts	0x03EC, r24
    25ec:	90 93 ed 03 	sts	0x03ED, r25
    25f0:	a0 93 ee 03 	sts	0x03EE, r26
    25f4:	b0 93 ef 03 	sts	0x03EF, r27
		SD_writeSingleBlock (firstSector);
    25f8:	c4 01       	movw	r24, r8
    25fa:	b3 01       	movw	r22, r6
    25fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <SD_writeSingleBlock>
    2600:	88 ee       	ldi	r24, 0xE8	; 232
    2602:	93 e0       	ldi	r25, 0x03	; 3
    2604:	28 ec       	ldi	r18, 0xC8	; 200
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	f9 01       	movw	r30, r18
    260a:	31 97       	sbiw	r30, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <ReplaceTheContentOfThisFileWith+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	d9 f7       	brne	.-10     	; 0x2608 <ReplaceTheContentOfThisFileWith+0x1c2>
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
		//USART_transmitStringToPCFromFlash(PSTR("SABT-ERR001")); 
		//TX_NEWLINE_PC;
	}
	return 2;
}
    2616:	c9 01       	movw	r24, r18
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	9f 90       	pop	r9
    262e:	8f 90       	pop	r8
    2630:	7f 90       	pop	r7
    2632:	6f 90       	pop	r6
    2634:	08 95       	ret

00002636 <PlayMP3file>:
2. Stop playing command issued from the controller

*/

unsigned char PlayMP3file (unsigned char *fileName)
{
    2636:	2f 92       	push	r2
    2638:	3f 92       	push	r3
    263a:	4f 92       	push	r4
    263c:	5f 92       	push	r5
    263e:	6f 92       	push	r6
    2640:	7f 92       	push	r7
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	2a 97       	sbiw	r28, 0x0a	; 10
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	8c 01       	movw	r16, r24
	unsigned int k,iCntForSingleAudioWrite;
	unsigned char j, error;
	unsigned int iAudioByteCnt;
	bool bEndOfFile=false;

	UI_MP3_file_Pending=false;
    266c:	10 92 84 03 	sts	0x0384, r1

	error = convertFileName (fileName); //convert fileName into FAT format
    2670:	0e 94 98 07 	call	0xf30	; 0xf30 <convertFileName>
	if(error) return 2;
    2674:	88 23       	and	r24, r24
    2676:	11 f0       	breq	.+4      	; 0x267c <PlayMP3file+0x46>
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	d9 c0       	rjmp	.+434    	; 0x282e <PlayMP3file+0x1f8>

	dir = findFiles (GET_FILE, fileName); //get the file location
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	b8 01       	movw	r22, r16
    2680:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <findFiles>
    2684:	9c 01       	movw	r18, r24
	if(dir == 0) 
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	09 f4       	brne	.+2      	; 0x268c <PlayMP3file+0x56>
    268a:	d0 c0       	rjmp	.+416    	; 0x282c <PlayMP3file+0x1f6>
	  return (0);

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    268c:	dc 01       	movw	r26, r24
    268e:	54 96       	adiw	r26, 0x14	; 20
    2690:	8d 91       	ld	r24, X+
    2692:	9c 91       	ld	r25, X
    2694:	55 97       	sbiw	r26, 0x15	; 21
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	5c 01       	movw	r10, r24
    269c:	99 24       	eor	r9, r9
    269e:	88 24       	eor	r8, r8
    26a0:	f9 01       	movw	r30, r18
    26a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    26a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	88 2a       	or	r8, r24
    26ac:	99 2a       	or	r9, r25
    26ae:	aa 2a       	or	r10, r26
    26b0:	bb 2a       	or	r11, r27

	fileSize = dir->fileSize;
    26b2:	d9 01       	movw	r26, r18
    26b4:	5c 96       	adiw	r26, 0x1c	; 28
    26b6:	8d 91       	ld	r24, X+
    26b8:	9d 91       	ld	r25, X+
    26ba:	0d 90       	ld	r0, X+
    26bc:	bc 91       	ld	r27, X
    26be:	a0 2d       	mov	r26, r0
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	ab 83       	std	Y+3, r26	; 0x03
    26c6:	bc 83       	std	Y+4, r27	; 0x04
	VS1053_SKIP_PLAY=false;
    26c8:	10 92 fa 05 	sts	0x05FA, r1
    26cc:	1d 82       	std	Y+5, r1	; 0x05
    26ce:	1e 82       	std	Y+6, r1	; 0x06
    26d0:	1f 82       	std	Y+7, r1	; 0x07
    26d2:	18 86       	std	Y+8, r1	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    26d4:	20 91 d1 05 	lds	r18, 0x05D1
    26d8:	30 91 d2 05 	lds	r19, 0x05D2
    26dc:	e0 90 97 03 	lds	r14, 0x0397
    26e0:	f0 90 98 03 	lds	r15, 0x0398
    26e4:	00 91 99 03 	lds	r16, 0x0399
    26e8:	10 91 9a 03 	lds	r17, 0x039A
    26ec:	c5 01       	movw	r24, r10
    26ee:	b4 01       	movw	r22, r8
    26f0:	62 50       	subi	r22, 0x02	; 2
    26f2:	70 40       	sbci	r23, 0x00	; 0
    26f4:	80 40       	sbci	r24, 0x00	; 0
    26f6:	90 40       	sbci	r25, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulsi3>
    2700:	2b 01       	movw	r4, r22
    2702:	3c 01       	movw	r6, r24
    2704:	4e 0c       	add	r4, r14
    2706:	5f 1c       	adc	r5, r15
    2708:	60 1e       	adc	r6, r16
    270a:	71 1e       	adc	r7, r17
    270c:	33 24       	eor	r3, r3
    270e:	6f c0       	rjmp	.+222    	; 0x27ee <PlayMP3file+0x1b8>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    2710:	c3 01       	movw	r24, r6
    2712:	b2 01       	movw	r22, r4
    2714:	63 0d       	add	r22, r3
    2716:	71 1d       	adc	r23, r1
    2718:	81 1d       	adc	r24, r1
    271a:	91 1d       	adc	r25, r1
    271c:	0e 94 42 07 	call	0xe84	; 0xe84 <SD_readSingleBlock>
    2720:	cd 80       	ldd	r12, Y+5	; 0x05
    2722:	de 80       	ldd	r13, Y+6	; 0x06
    2724:	ef 80       	ldd	r14, Y+7	; 0x07
    2726:	f8 84       	ldd	r15, Y+8	; 0x08
    2728:	22 24       	eor	r2, r2


			for(k=0; k<512; k++)
    272a:	d7 01       	movw	r26, r14
    272c:	c6 01       	movw	r24, r12
    272e:	80 50       	subi	r24, 0x00	; 0
    2730:	9e 4f       	sbci	r25, 0xFE	; 254
    2732:	af 4f       	sbci	r26, 0xFF	; 255
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    2736:	29 81       	ldd	r18, Y+1	; 0x01
    2738:	3a 81       	ldd	r19, Y+2	; 0x02
    273a:	4b 81       	ldd	r20, Y+3	; 0x03
    273c:	5c 81       	ldd	r21, Y+4	; 0x04
    273e:	c2 16       	cp	r12, r18
    2740:	d3 06       	cpc	r13, r19
    2742:	e4 06       	cpc	r14, r20
    2744:	f5 06       	cpc	r15, r21
    2746:	10 f0       	brcs	.+4      	; 0x274c <PlayMP3file+0x116>
    2748:	22 24       	eor	r2, r2
    274a:	23 94       	inc	r2
    274c:	08 94       	sec
    274e:	c1 1c       	adc	r12, r1
    2750:	d1 1c       	adc	r13, r1
    2752:	e1 1c       	adc	r14, r1
    2754:	f1 1c       	adc	r15, r1
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    2756:	c8 16       	cp	r12, r24
    2758:	d9 06       	cpc	r13, r25
    275a:	ea 06       	cpc	r14, r26
    275c:	fb 06       	cpc	r15, r27
    275e:	59 f7       	brne	.-42     	; 0x2736 <PlayMP3file+0x100>
    2760:	e0 e0       	ldi	r30, 0x00	; 0
    2762:	f0 e0       	ldi	r31, 0x00	; 0
			}
			//After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
			iAudioByteCnt=0;
			while(iAudioByteCnt<k)
			{
				if(VS1053_SKIP_PLAY)
    2764:	80 91 fa 05 	lds	r24, 0x05FA
    2768:	88 23       	and	r24, r24
    276a:	29 f0       	breq	.+10     	; 0x2776 <PlayMP3file+0x140>
				{
					VS1053_SKIP_PLAY=false;
    276c:	10 92 fa 05 	sts	0x05FA, r1
					VS1053_SoftwareReset();
    2770:	0e 94 1e 05 	call	0xa3c	; 0xa3c <VS1053_SoftwareReset>
    2774:	5b c0       	rjmp	.+182    	; 0x282c <PlayMP3file+0x1f6>
					return 0;//playing stopped by user
				}
				if((PINB & (1<<MP3_DREQ)))
    2776:	1b 99       	sbic	0x03, 3	; 3
    2778:	02 c0       	rjmp	.+4      	; 0x277e <PlayMP3file+0x148>
    277a:	8f 01       	movw	r16, r30
    277c:	18 c0       	rjmp	.+48     	; 0x27ae <PlayMP3file+0x178>
    277e:	8f 01       	movw	r16, r30
				{
					for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    2780:	af 01       	movw	r20, r30
    2782:	40 5e       	subi	r20, 0xE0	; 224
    2784:	5f 4f       	sbci	r21, 0xFF	; 255
    2786:	5a 87       	std	Y+10, r21	; 0x0a
    2788:	49 87       	std	Y+9, r20	; 0x09
					{
						VS1053_WriteData(buffer[iAudioByteCnt]);
    278a:	f8 01       	movw	r30, r16
    278c:	e0 53       	subi	r30, 0x30	; 48
    278e:	fc 4f       	sbci	r31, 0xFC	; 252
    2790:	80 81       	ld	r24, Z
    2792:	0e 94 28 05 	call	0xa50	; 0xa50 <VS1053_WriteData>
						if(iAudioByteCnt++==k)return 0;		
    2796:	52 e0       	ldi	r21, 0x02	; 2
    2798:	00 30       	cpi	r16, 0x00	; 0
    279a:	15 07       	cpc	r17, r21
    279c:	09 f4       	brne	.+2      	; 0x27a0 <PlayMP3file+0x16a>
    279e:	46 c0       	rjmp	.+140    	; 0x282c <PlayMP3file+0x1f6>
    27a0:	0f 5f       	subi	r16, 0xFF	; 255
    27a2:	1f 4f       	sbci	r17, 0xFF	; 255
					VS1053_SoftwareReset();
					return 0;//playing stopped by user
				}
				if((PINB & (1<<MP3_DREQ)))
				{
					for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	08 17       	cp	r16, r24
    27aa:	19 07       	cpc	r17, r25
    27ac:	71 f7       	brne	.-36     	; 0x278a <PlayMP3file+0x154>
						VS1053_WriteData(buffer[iAudioByteCnt]);
						if(iAudioByteCnt++==k)return 0;		
					}	
				}
				//After playing a 32 bytes of data, check the user inputs
				if(USART_Keypad_DATA_RDY)
    27ae:	80 91 89 03 	lds	r24, 0x0389
    27b2:	88 23       	and	r24, r24
    27b4:	11 f0       	breq	.+4      	; 0x27ba <PlayMP3file+0x184>
				{
					USART_Keypad_ReceiveAction();
    27b6:	0e 94 29 03 	call	0x652	; 0x652 <USART_Keypad_ReceiveAction>
				}
				if(USART_PC_DATA_RDY)
    27ba:	80 91 fb 05 	lds	r24, 0x05FB
    27be:	88 23       	and	r24, r24
    27c0:	11 f0       	breq	.+4      	; 0x27c6 <PlayMP3file+0x190>
				{
					USART_PC_ReceiveAction();
    27c2:	0e 94 ac 03 	call	0x758	; 0x758 <USART_PC_ReceiveAction>
				}		
				if(USART_UI_Message_ready) //If a message ready from the user interface, process it
    27c6:	80 91 cf 03 	lds	r24, 0x03CF
    27ca:	88 23       	and	r24, r24
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <PlayMP3file+0x19e>
				{
					UI_parse_message(true);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <UI_parse_message>
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
			}
			//After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
			iAudioByteCnt=0;
			while(iAudioByteCnt<k)
    27d4:	92 e0       	ldi	r25, 0x02	; 2
    27d6:	00 30       	cpi	r16, 0x00	; 0
    27d8:	19 07       	cpc	r17, r25
    27da:	10 f4       	brcc	.+4      	; 0x27e0 <PlayMP3file+0x1aa>
    27dc:	f8 01       	movw	r30, r16
    27de:	c2 cf       	rjmp	.-124    	; 0x2764 <PlayMP3file+0x12e>
				if(USART_UI_Message_ready) //If a message ready from the user interface, process it
				{
					UI_parse_message(true);
				}
			}
			if(bEndOfFile)
    27e0:	22 20       	and	r2, r2
    27e2:	21 f5       	brne	.+72     	; 0x282c <PlayMP3file+0x1f6>
	VS1053_SKIP_PLAY=false;
	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    27e4:	33 94       	inc	r3
    27e6:	cd 82       	std	Y+5, r12	; 0x05
    27e8:	de 82       	std	Y+6, r13	; 0x06
    27ea:	ef 82       	std	Y+7, r14	; 0x07
    27ec:	f8 86       	std	Y+8, r15	; 0x08
    27ee:	20 91 d1 05 	lds	r18, 0x05D1
    27f2:	30 91 d2 05 	lds	r19, 0x05D2
    27f6:	83 2d       	mov	r24, r3
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	82 17       	cp	r24, r18
    27fc:	93 07       	cpc	r25, r19
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <PlayMP3file+0x1cc>
    2800:	87 cf       	rjmp	.-242    	; 0x2710 <PlayMP3file+0xda>
				return 0;
			}

		}

		cluster = getSetNextCluster (cluster, GET, 0);
    2802:	c5 01       	movw	r24, r10
    2804:	b4 01       	movw	r22, r8
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	00 e0       	ldi	r16, 0x00	; 0
    280a:	10 e0       	ldi	r17, 0x00	; 0
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	0e 94 75 0c 	call	0x18ea	; 0x18ea <getSetNextCluster>
    2814:	4b 01       	movw	r8, r22
    2816:	5c 01       	movw	r10, r24
		if(cluster == 0) 
    2818:	61 15       	cp	r22, r1
    281a:	71 05       	cpc	r23, r1
    281c:	81 05       	cpc	r24, r1
    281e:	91 05       	cpc	r25, r1
    2820:	09 f0       	breq	.+2      	; 0x2824 <PlayMP3file+0x1ee>
    2822:	58 cf       	rjmp	.-336    	; 0x26d4 <PlayMP3file+0x9e>
		{
			USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); 
    2824:	87 e6       	ldi	r24, 0x67	; 103
    2826:	92 e0       	ldi	r25, 0x02	; 2
    2828:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			return 0;
    282c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
    282e:	2a 96       	adiw	r28, 0x0a	; 10
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	bf 90       	pop	r11
    284c:	af 90       	pop	r10
    284e:	9f 90       	pop	r9
    2850:	8f 90       	pop	r8
    2852:	7f 90       	pop	r7
    2854:	6f 90       	pop	r6
    2856:	5f 90       	pop	r5
    2858:	4f 90       	pop	r4
    285a:	3f 90       	pop	r3
    285c:	2f 90       	pop	r2
    285e:	08 95       	ret

00002860 <UI_calculate_CRC>:
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	fc 01       	movw	r30, r24
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
    286a:	b2 81       	ldd	r27, Z+2	; 0x02
	uint16_t chksum=0;
	pstrMsg+=3;
    286c:	8c 01       	movw	r16, r24
    286e:	0d 5f       	subi	r16, 0xFD	; 253
    2870:	1f 4f       	sbci	r17, 0xFF	; 255
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	70 e0       	ldi	r23, 0x00	; 0
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    2876:	b5 50       	subi	r27, 0x05	; 5
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
	uint16_t chksum=0;
	pstrMsg+=3;
	while(msglen > 1)
    2878:	ab 2f       	mov	r26, r27
    287a:	a6 95       	lsr	r26
    287c:	ca 2f       	mov	r28, r26
    287e:	d0 e0       	ldi	r29, 0x00	; 0
    2880:	ae 01       	movw	r20, r28
    2882:	4f 5f       	subi	r20, 0xFF	; 255
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	44 0f       	add	r20, r20
    2888:	55 1f       	adc	r21, r21
    288a:	4e 0f       	add	r20, r30
    288c:	5f 1f       	adc	r21, r31
    288e:	08 c0       	rjmp	.+16     	; 0x28a0 <UI_calculate_CRC+0x40>
	{
		chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    2890:	31 81       	ldd	r19, Z+1	; 0x01
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	82 2b       	or	r24, r18
    289a:	93 2b       	or	r25, r19
    289c:	68 0f       	add	r22, r24
    289e:	79 1f       	adc	r23, r25
    28a0:	32 96       	adiw	r30, 0x02	; 2
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
	uint16_t chksum=0;
	pstrMsg+=3;
	while(msglen > 1)
    28a2:	e4 17       	cp	r30, r20
    28a4:	f5 07       	cpc	r31, r21
    28a6:	a1 f7       	brne	.-24     	; 0x2890 <UI_calculate_CRC+0x30>
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    28a8:	aa 0f       	add	r26, r26
    28aa:	fe 01       	movw	r30, r28
    28ac:	ee 0f       	add	r30, r30
    28ae:	ff 1f       	adc	r31, r31
    28b0:	e0 0f       	add	r30, r16
    28b2:	f1 1f       	adc	r31, r17
		chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
		chksum = chksum & 0xffff;
		msglen-=2;
		pstrMsg+=2;
	}
	if(msglen>0) //If the packet size is odd numbered
    28b4:	ba 17       	cp	r27, r26
    28b6:	21 f0       	breq	.+8      	; 0x28c0 <UI_calculate_CRC+0x60>
	{
		chksum = chksum^ (int)*(pstrMsg++);
    28b8:	80 81       	ld	r24, Z
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	68 27       	eor	r22, r24
    28be:	79 27       	eor	r23, r25
	}
	return(chksum);
}
    28c0:	cb 01       	movw	r24, r22
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	1f 91       	pop	r17
    28c8:	0f 91       	pop	r16
    28ca:	08 95       	ret

000028cc <UI_buildMessage>:

bool UI_buildMessage(char MessageType)
{
	
	return true;
}
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	08 95       	ret

000028d0 <UI_ResetTheCurrentMode>:
	}
}

void UI_ResetTheCurrentMode(void)
{
	if(UI_MODE_SELECTED){
    28d0:	80 91 a6 03 	lds	r24, 0x03A6
    28d4:	88 23       	and	r24, r24
    28d6:	81 f0       	breq	.+32     	; 0x28f8 <UI_ResetTheCurrentMode+0x28>
		switch(UI_Current_Mode)
    28d8:	80 91 d0 05 	lds	r24, 0x05D0
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	39 f0       	breq	.+14     	; 0x28ee <UI_ResetTheCurrentMode+0x1e>
    28e0:	83 30       	cpi	r24, 0x03	; 3
    28e2:	41 f0       	breq	.+16     	; 0x28f4 <UI_ResetTheCurrentMode+0x24>
    28e4:	81 30       	cpi	r24, 0x01	; 1
    28e6:	41 f4       	brne	.+16     	; 0x28f8 <UI_ResetTheCurrentMode+0x28>
		{
			case 1:
				MD1_Reset();
    28e8:	0e 94 43 17 	call	0x2e86	; 0x2e86 <MD1_Reset>
    28ec:	08 95       	ret
				break;
			case 2:
				MD2_Reset();
    28ee:	0e 94 99 17 	call	0x2f32	; 0x2f32 <MD2_Reset>
    28f2:	08 95       	ret
				break;
			case 3:
				MD3_Reset();
    28f4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <MD3_Reset>
    28f8:	08 95       	ret

000028fa <UI_RunMainOfCurrentMode>:
	}
}

void UI_RunMainOfCurrentMode(void)
{
	if(UI_MODE_SELECTED){
    28fa:	80 91 a6 03 	lds	r24, 0x03A6
    28fe:	88 23       	and	r24, r24
    2900:	81 f0       	breq	.+32     	; 0x2922 <UI_RunMainOfCurrentMode+0x28>
		switch(UI_Current_Mode)
    2902:	80 91 d0 05 	lds	r24, 0x05D0
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	39 f0       	breq	.+14     	; 0x2918 <UI_RunMainOfCurrentMode+0x1e>
    290a:	83 30       	cpi	r24, 0x03	; 3
    290c:	41 f0       	breq	.+16     	; 0x291e <UI_RunMainOfCurrentMode+0x24>
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	41 f4       	brne	.+16     	; 0x2922 <UI_RunMainOfCurrentMode+0x28>
		{
			case 1:
				MD1_Main();
    2912:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <MD1_Main>
    2916:	08 95       	ret
				break;
			case 2:
				MD2_Main();
    2918:	0e 94 46 18 	call	0x308c	; 0x308c <MD2_Main>
    291c:	08 95       	ret
				break;
			case 3:
				MD3_Main();
    291e:	0e 94 a2 18 	call	0x3144	; 0x3144 <MD3_Main>
    2922:	08 95       	ret

00002924 <UI_InputCellToCurrentMode>:
	}
}

void UI_InputCellToCurrentMode(char thisCell)
{
	switch(UI_Current_Mode)
    2924:	90 91 d0 05 	lds	r25, 0x05D0
    2928:	92 30       	cpi	r25, 0x02	; 2
    292a:	39 f0       	breq	.+14     	; 0x293a <UI_InputCellToCurrentMode+0x16>
    292c:	93 30       	cpi	r25, 0x03	; 3
    292e:	41 f0       	breq	.+16     	; 0x2940 <UI_InputCellToCurrentMode+0x1c>
    2930:	91 30       	cpi	r25, 0x01	; 1
    2932:	41 f4       	brne	.+16     	; 0x2944 <UI_InputCellToCurrentMode+0x20>
	{
		case 1:
			MD1_InputCell(thisCell);
    2934:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <MD1_InputCell>
    2938:	08 95       	ret
			break;
		case 2:
			MD2_InputCell(thisCell);
    293a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <MD2_InputCell>
    293e:	08 95       	ret
			break;
		case 3:
			MD3_InputCell(thisCell);
    2940:	0e 94 79 18 	call	0x30f2	; 0x30f2 <MD3_InputCell>
    2944:	08 95       	ret

00002946 <UI_InputDotToCurrentMode>:
	}
}

void UI_InputDotToCurrentMode(char thisDot)
{
	switch(UI_Current_Mode)
    2946:	90 91 d0 05 	lds	r25, 0x05D0
    294a:	92 30       	cpi	r25, 0x02	; 2
    294c:	39 f0       	breq	.+14     	; 0x295c <UI_InputDotToCurrentMode+0x16>
    294e:	93 30       	cpi	r25, 0x03	; 3
    2950:	41 f0       	breq	.+16     	; 0x2962 <UI_InputDotToCurrentMode+0x1c>
    2952:	91 30       	cpi	r25, 0x01	; 1
    2954:	41 f4       	brne	.+16     	; 0x2966 <UI_InputDotToCurrentMode+0x20>
	{
		case 1:
			MD1_InputDot(thisDot);
    2956:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <MD1_InputDot>
    295a:	08 95       	ret
			break;
		case 2:
			MD2_InputDot(thisDot);
    295c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <MD2_InputDot>
    2960:	08 95       	ret
			break;
		case 3:
			MD3_InputDot(thisDot);
    2962:	0e 94 70 18 	call	0x30e0	; 0x30e0 <MD3_InputDot>
    2966:	08 95       	ret

00002968 <UI_CallModeNoAnswer>:
	}
}

void UI_CallModeNoAnswer(void)
{
	switch(UI_Current_Mode)
    2968:	80 91 d0 05 	lds	r24, 0x05D0
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	39 f0       	breq	.+14     	; 0x297e <UI_CallModeNoAnswer+0x16>
    2970:	83 30       	cpi	r24, 0x03	; 3
    2972:	41 f0       	breq	.+16     	; 0x2984 <UI_CallModeNoAnswer+0x1c>
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	41 f4       	brne	.+16     	; 0x2988 <UI_CallModeNoAnswer+0x20>
	{
		case 1:
			MD1_CallModeNoAnswer();
    2978:	0e 94 49 17 	call	0x2e92	; 0x2e92 <MD1_CallModeNoAnswer>
    297c:	08 95       	ret
			break;
		case 2:
			MD2_CallModeNoAnswer();
    297e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <MD2_CallModeNoAnswer>
    2982:	08 95       	ret
			break;
		case 3:
			MD3_CallModeNoAnswer();
    2984:	0e 94 6f 18 	call	0x30de	; 0x30de <MD3_CallModeNoAnswer>
    2988:	08 95       	ret

0000298a <UI_CallModeYesAnswer>:
	}
}

void UI_CallModeYesAnswer(void)
{
	switch(UI_Current_Mode)
    298a:	80 91 d0 05 	lds	r24, 0x05D0
    298e:	82 30       	cpi	r24, 0x02	; 2
    2990:	39 f0       	breq	.+14     	; 0x29a0 <UI_CallModeYesAnswer+0x16>
    2992:	83 30       	cpi	r24, 0x03	; 3
    2994:	41 f0       	breq	.+16     	; 0x29a6 <UI_CallModeYesAnswer+0x1c>
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	41 f4       	brne	.+16     	; 0x29aa <UI_CallModeYesAnswer+0x20>
	{
		case 1:
			MD1_CallModeYesAnswer();
    299a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <MD1_CallModeYesAnswer>
    299e:	08 95       	ret
			break;
		case 2:
			MD2_CallModeYesAnswer();
    29a0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <MD2_CallModeYesAnswer>
    29a4:	08 95       	ret
			break;
		case 3:
			MD3_CallModeYesAnswer();
    29a6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <MD3_CallModeYesAnswer>
    29aa:	08 95       	ret

000029ac <UI_Play_Intro_Currentmode>:
	}
}

void UI_Play_Intro_Currentmode(void)
{
	switch(UI_Current_Mode)
    29ac:	80 91 d0 05 	lds	r24, 0x05D0
    29b0:	82 30       	cpi	r24, 0x02	; 2
    29b2:	39 f0       	breq	.+14     	; 0x29c2 <UI_Play_Intro_Currentmode+0x16>
    29b4:	83 30       	cpi	r24, 0x03	; 3
    29b6:	51 f0       	breq	.+20     	; 0x29cc <UI_Play_Intro_Currentmode+0x20>
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	61 f4       	brne	.+24     	; 0x29d4 <UI_Play_Intro_Currentmode+0x28>
	{
		case 1:
			RequestToPlayMP3file("MD1.MP3");
    29bc:	81 e5       	ldi	r24, 0x51	; 81
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <UI_Play_Intro_Currentmode+0x1a>
			break;
		case 2:
			RequestToPlayMP3file("MD2.MP3");
    29c2:	89 e5       	ldi	r24, 0x59	; 89
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    29ca:	08 95       	ret
			break;
		case 3:
			RequestToPlayMP3file("MD3.MP3");
    29cc:	81 e6       	ldi	r24, 0x61	; 97
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    29d4:	08 95       	ret

000029d6 <UI_ControlKeyPressed>:
	USART_UI_Message_ready=false;
	return true;
}

void UI_ControlKeyPressed(void)
{
    29d6:	1f 93       	push	r17
	switch(USART_UI_ReceivedPacket[5])
    29d8:	10 91 d8 05 	lds	r17, 0x05D8
    29dc:	13 30       	cpi	r17, 0x03	; 3
    29de:	09 f4       	brne	.+2      	; 0x29e2 <UI_ControlKeyPressed+0xc>
    29e0:	4a c0       	rjmp	.+148    	; 0x2a76 <UI_ControlKeyPressed+0xa0>
    29e2:	14 30       	cpi	r17, 0x04	; 4
    29e4:	30 f4       	brcc	.+12     	; 0x29f2 <UI_ControlKeyPressed+0x1c>
    29e6:	11 30       	cpi	r17, 0x01	; 1
    29e8:	71 f0       	breq	.+28     	; 0x2a06 <UI_ControlKeyPressed+0x30>
    29ea:	12 30       	cpi	r17, 0x02	; 2
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <UI_ControlKeyPressed+0x1a>
    29ee:	ab c0       	rjmp	.+342    	; 0x2b46 <UI_ControlKeyPressed+0x170>
    29f0:	25 c0       	rjmp	.+74     	; 0x2a3c <UI_ControlKeyPressed+0x66>
    29f2:	15 30       	cpi	r17, 0x05	; 5
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <UI_ControlKeyPressed+0x22>
    29f6:	8e c0       	rjmp	.+284    	; 0x2b14 <UI_ControlKeyPressed+0x13e>
    29f8:	15 30       	cpi	r17, 0x05	; 5
    29fa:	08 f4       	brcc	.+2      	; 0x29fe <UI_ControlKeyPressed+0x28>
    29fc:	5a c0       	rjmp	.+180    	; 0x2ab2 <UI_ControlKeyPressed+0xdc>
    29fe:	16 30       	cpi	r17, 0x06	; 6
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <UI_ControlKeyPressed+0x2e>
    2a02:	a1 c0       	rjmp	.+322    	; 0x2b46 <UI_ControlKeyPressed+0x170>
    2a04:	94 c0       	rjmp	.+296    	; 0x2b2e <UI_ControlKeyPressed+0x158>
	{
		case UI_CMD_NONE:
			
			break;
		case UI_CMD_ENT1: //Enter into a mode
			USART_transmitStringToPCFromFlash(PSTR("Enter 1 pressed"));
    2a06:	8d e5       	ldi	r24, 0x5D	; 93
    2a08:	93 e0       	ldi	r25, 0x03	; 3
    2a0a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;	
    2a0e:	8d e0       	ldi	r24, 0x0D	; 13
    2a10:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2a14:	8a e0       	ldi	r24, 0x0A	; 10
    2a16:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED) //Then this command is to select the mode
    2a1a:	80 91 a6 03 	lds	r24, 0x03A6
    2a1e:	88 23       	and	r24, r24
    2a20:	51 f4       	brne	.+20     	; 0x2a36 <UI_ControlKeyPressed+0x60>
			{
				if(UI_Selected_Mode>0)
    2a22:	80 91 ce 03 	lds	r24, 0x03CE
    2a26:	88 23       	and	r24, r24
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <UI_ControlKeyPressed+0x56>
    2a2a:	8d c0       	rjmp	.+282    	; 0x2b46 <UI_ControlKeyPressed+0x170>
				{
					UI_MODE_SELECTED=true;
    2a2c:	10 93 a6 03 	sts	0x03A6, r17
					UI_ResetTheCurrentMode();
    2a30:	0e 94 68 14 	call	0x28d0	; 0x28d0 <UI_ResetTheCurrentMode>
    2a34:	88 c0       	rjmp	.+272    	; 0x2b46 <UI_ControlKeyPressed+0x170>
					//RequestToPlayMP3file("ERR1.MP3");
				}
			}
			else //Then this the "YES" command in the mode, so call the function in the mode
			{
				UI_CallModeYesAnswer();
    2a36:	0e 94 c5 14 	call	0x298a	; 0x298a <UI_CallModeYesAnswer>
    2a3a:	85 c0       	rjmp	.+266    	; 0x2b46 <UI_ControlKeyPressed+0x170>
			}
			break;
		case UI_CMD_ENT2: //Exit from a mode
			USART_transmitStringToPCFromFlash(PSTR("Enter 2 pressed"));
    2a3c:	8d e4       	ldi	r24, 0x4D	; 77
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2a44:	8d e0       	ldi	r24, 0x0D	; 13
    2a46:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2a4a:	8a e0       	ldi	r24, 0x0A	; 10
    2a4c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			if(UI_MODE_SELECTED) //This might be an exit from mode command or "NO" command in the mode
    2a50:	80 91 a6 03 	lds	r24, 0x03A6
    2a54:	88 23       	and	r24, r24
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <UI_ControlKeyPressed+0x84>
    2a58:	76 c0       	rjmp	.+236    	; 0x2b46 <UI_ControlKeyPressed+0x170>
			{
				if(USART_UI_ReceivedPacket[6]==69) //If the next byte is 'E', this is exit command (when the user pressed E2 for more than 5 secs)
    2a5a:	80 91 d9 05 	lds	r24, 0x05D9
    2a5e:	85 34       	cpi	r24, 0x45	; 69
    2a60:	39 f4       	brne	.+14     	; 0x2a70 <UI_ControlKeyPressed+0x9a>
				{
					UI_MODE_SELECTED=false;
    2a62:	10 92 a6 03 	sts	0x03A6, r1
					RequestToPlayMP3file("MM.MP3");
    2a66:	89 e6       	ldi	r24, 0x69	; 105
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    2a6e:	6b c0       	rjmp	.+214    	; 0x2b46 <UI_ControlKeyPressed+0x170>
				}
				else //Then this a "NO" answer, call the mode function for this
				{
					UI_CallModeNoAnswer();
    2a70:	0e 94 b4 14 	call	0x2968	; 0x2968 <UI_CallModeNoAnswer>
    2a74:	68 c0       	rjmp	.+208    	; 0x2b46 <UI_ControlKeyPressed+0x170>
				}
			}
			//This has no effect when no mode is selected
			break;
		case UI_CMD_MFOR:
			USART_transmitStringToPCFromFlash(PSTR("Mode 1 pressed"));
    2a76:	8e e3       	ldi	r24, 0x3E	; 62
    2a78:	93 e0       	ldi	r25, 0x03	; 3
    2a7a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2a7e:	8d e0       	ldi	r24, 0x0D	; 13
    2a80:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2a84:	8a e0       	ldi	r24, 0x0A	; 10
    2a86:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED)
    2a8a:	80 91 a6 03 	lds	r24, 0x03A6
    2a8e:	88 23       	and	r24, r24
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <UI_ControlKeyPressed+0xbe>
    2a92:	59 c0       	rjmp	.+178    	; 0x2b46 <UI_ControlKeyPressed+0x170>
			{
				UI_Selected_Mode++;
    2a94:	80 91 ce 03 	lds	r24, 0x03CE
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	80 93 ce 03 	sts	0x03CE, r24
				if(UI_Selected_Mode>Number_of_modes)
    2a9e:	90 91 ce 03 	lds	r25, 0x03CE
    2aa2:	80 91 c9 03 	lds	r24, 0x03C9
    2aa6:	89 17       	cp	r24, r25
    2aa8:	38 f5       	brcc	.+78     	; 0x2af8 <UI_ControlKeyPressed+0x122>
				{
					UI_Selected_Mode--;
    2aaa:	80 91 ce 03 	lds	r24, 0x03CE
    2aae:	81 50       	subi	r24, 0x01	; 1
    2ab0:	18 c0       	rjmp	.+48     	; 0x2ae2 <UI_ControlKeyPressed+0x10c>
					UI_Play_Intro_Currentmode();
				}
			}
			break;
		case UI_CMD_MREV:
			USART_transmitStringToPCFromFlash(PSTR("Mode 2 pressed"));
    2ab2:	8f e2       	ldi	r24, 0x2F	; 47
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2aba:	8d e0       	ldi	r24, 0x0D	; 13
    2abc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2ac0:	8a e0       	ldi	r24, 0x0A	; 10
    2ac2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED)
    2ac6:	80 91 a6 03 	lds	r24, 0x03A6
    2aca:	88 23       	and	r24, r24
    2acc:	e1 f5       	brne	.+120    	; 0x2b46 <UI_ControlKeyPressed+0x170>
			{
				UI_Selected_Mode--;
    2ace:	80 91 ce 03 	lds	r24, 0x03CE
    2ad2:	81 50       	subi	r24, 0x01	; 1
    2ad4:	80 93 ce 03 	sts	0x03CE, r24
				if(UI_Selected_Mode<1)
    2ad8:	80 91 ce 03 	lds	r24, 0x03CE
    2adc:	88 23       	and	r24, r24
    2ade:	61 f4       	brne	.+24     	; 0x2af8 <UI_ControlKeyPressed+0x122>
				{
					UI_Selected_Mode=1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	80 93 ce 03 	sts	0x03CE, r24
					UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2ae6:	e0 91 ce 03 	lds	r30, 0x03CE
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	e6 54       	subi	r30, 0x46	; 70
    2aee:	fc 4f       	sbci	r31, 0xFC	; 252
    2af0:	80 81       	ld	r24, Z
    2af2:	80 93 d0 05 	sts	0x05D0, r24
    2af6:	27 c0       	rjmp	.+78     	; 0x2b46 <UI_ControlKeyPressed+0x170>
				}
				else
				{
					UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2af8:	e0 91 ce 03 	lds	r30, 0x03CE
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	e6 54       	subi	r30, 0x46	; 70
    2b00:	fc 4f       	sbci	r31, 0xFC	; 252
    2b02:	80 81       	ld	r24, Z
    2b04:	80 93 d0 05 	sts	0x05D0, r24
					VS1053_SKIP_PLAY=true;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	80 93 fa 05 	sts	0x05FA, r24
					UI_Play_Intro_Currentmode();
    2b0e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <UI_Play_Intro_Currentmode>
    2b12:	19 c0       	rjmp	.+50     	; 0x2b46 <UI_ControlKeyPressed+0x170>
				}	
			}		
			break;
		case UI_CMD_VOLU:
			USART_transmitStringToPCFromFlash(PSTR("Vol UP pressed"));
    2b14:	80 e2       	ldi	r24, 0x20	; 32
    2b16:	93 e0       	ldi	r25, 0x03	; 3
    2b18:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2b1c:	8d e0       	ldi	r24, 0x0D	; 13
    2b1e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2b22:	8a e0       	ldi	r24, 0x0A	; 10
    2b24:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			VS1053_IncreaseVol();
    2b28:	0e 94 e6 04 	call	0x9cc	; 0x9cc <VS1053_IncreaseVol>
    2b2c:	0c c0       	rjmp	.+24     	; 0x2b46 <UI_ControlKeyPressed+0x170>
			break;
		case UI_CMD_VOLD:
			USART_transmitStringToPCFromFlash(PSTR("Vol DOWN pressed"));
    2b2e:	8f e0       	ldi	r24, 0x0F	; 15
    2b30:	93 e0       	ldi	r25, 0x03	; 3
    2b32:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2b36:	8d e0       	ldi	r24, 0x0D	; 13
    2b38:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2b3c:	8a e0       	ldi	r24, 0x0A	; 10
    2b3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
			VS1053_DecreaseVol();
    2b42:	0e 94 ae 04 	call	0x95c	; 0x95c <VS1053_DecreaseVol>
			break;
		default:
			
			break;
	}
}
    2b46:	1f 91       	pop	r17
    2b48:	08 95       	ret

00002b4a <UI_parse_message>:
	
	return true;
}

bool UI_parse_message(bool IsPlaying)
{
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	2a 97       	sbiw	r28, 0x0a	; 10
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	18 2f       	mov	r17, r24
		UI string 	: [U][I][msglen][msg_number][msgtype][payload][CRC1][CRC2]
		msgtypes	: 
	*/
	//First things first, check the CRC

	unsigned char message_len=USART_UI_ReceivedPacket[2];
    2b64:	00 91 d5 05 	lds	r16, 0x05D5

	unsigned char ADCmsg[10];
	//unsigned char message_payload[20];
//	unsigned char i=0;

	uint16_t chksum=UI_calculate_CRC(&USART_UI_ReceivedPacket);
    2b68:	83 ed       	ldi	r24, 0xD3	; 211
    2b6a:	95 e0       	ldi	r25, 0x05	; 5
    2b6c:	0e 94 30 14 	call	0x2860	; 0x2860 <UI_calculate_CRC>
	if ( chksum == (USART_UI_ReceivedPacket[message_len-2] << 8 | USART_UI_ReceivedPacket[message_len-1]))
    2b70:	a0 2f       	mov	r26, r16
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	fd 01       	movw	r30, r26
    2b76:	ef 52       	subi	r30, 0x2F	; 47
    2b78:	fa 4f       	sbci	r31, 0xFA	; 250
    2b7a:	60 81       	ld	r22, Z
    2b7c:	ae 52       	subi	r26, 0x2E	; 46
    2b7e:	ba 4f       	sbci	r27, 0xFA	; 250
    2b80:	4c 91       	ld	r20, X
    2b82:	36 2f       	mov	r19, r22
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	24 2b       	or	r18, r20
    2b8a:	35 2b       	or	r19, r21
    2b8c:	82 17       	cp	r24, r18
    2b8e:	93 07       	cpc	r25, r19
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <UI_parse_message+0x4a>
    2b92:	74 c0       	rjmp	.+232    	; 0x2c7c <UI_parse_message+0x132>
	{
		//If correct, store the message elements
		message_number=USART_UI_ReceivedPacket[3];
    2b94:	80 91 d6 05 	lds	r24, 0x05D6
		message_type=USART_UI_ReceivedPacket[4];
    2b98:	80 91 d7 05 	lds	r24, 0x05D7

		//process the message

		if(IsPlaying) //If a MP3 file is being played, only the commands are processed
    2b9c:	11 23       	and	r17, r17
    2b9e:	41 f0       	breq	.+16     	; 0x2bb0 <UI_parse_message+0x66>
		{
			if(message_type==68)
    2ba0:	84 34       	cpi	r24, 0x44	; 68
    2ba2:	31 f4       	brne	.+12     	; 0x2bb0 <UI_parse_message+0x66>
			{
				UI_ControlKeyPressed();
    2ba4:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <UI_ControlKeyPressed>
				USART_UI_Message_ready=true;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	80 93 cf 03 	sts	0x03CF, r24
    2bae:	6d c0       	rjmp	.+218    	; 0x2c8a <UI_parse_message+0x140>
				return true;
			}
		}
		
		switch(message_type)
    2bb0:	82 34       	cpi	r24, 0x42	; 66
    2bb2:	89 f0       	breq	.+34     	; 0x2bd6 <UI_parse_message+0x8c>
    2bb4:	83 34       	cpi	r24, 0x43	; 67
    2bb6:	20 f4       	brcc	.+8      	; 0x2bc0 <UI_parse_message+0x76>
    2bb8:	81 34       	cpi	r24, 0x41	; 65
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <UI_parse_message+0x74>
    2bbc:	63 c0       	rjmp	.+198    	; 0x2c84 <UI_parse_message+0x13a>
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <UI_parse_message+0x82>
    2bc0:	84 34       	cpi	r24, 0x44	; 68
    2bc2:	71 f0       	breq	.+28     	; 0x2be0 <UI_parse_message+0x96>
    2bc4:	85 34       	cpi	r24, 0x45	; 69
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <UI_parse_message+0x80>
    2bc8:	5d c0       	rjmp	.+186    	; 0x2c84 <UI_parse_message+0x13a>
    2bca:	0d c0       	rjmp	.+26     	; 0x2be6 <UI_parse_message+0x9c>
		{
			case 65: 	//Braille dot
				//Only one character is being send to the current mode
				UI_InputDotToCurrentMode(USART_UI_ReceivedPacket[5]);
    2bcc:	80 91 d8 05 	lds	r24, 0x05D8
    2bd0:	0e 94 a3 14 	call	0x2946	; 0x2946 <UI_InputDotToCurrentMode>
    2bd4:	57 c0       	rjmp	.+174    	; 0x2c84 <UI_parse_message+0x13a>
			case 66: 	//Braille cell
				/*
				Only one character is being send to the current mode. The cell number value is currently not used
				, if needed this information is available on USART_UI_ReceivedPacket[6]
				*/
				UI_InputCellToCurrentMode(USART_UI_ReceivedPacket[5]);
    2bd6:	80 91 d8 05 	lds	r24, 0x05D8
    2bda:	0e 94 92 14 	call	0x2924	; 0x2924 <UI_InputCellToCurrentMode>
    2bde:	52 c0       	rjmp	.+164    	; 0x2c84 <UI_parse_message+0x13a>
				break;
			case 67:	//Error message
				//When an error occured in the user input a message will be sent here
				break;
			case 68:	//User Command
				UI_ControlKeyPressed();
    2be0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <UI_ControlKeyPressed>
    2be4:	4f c0       	rjmp	.+158    	; 0x2c84 <UI_parse_message+0x13a>
				break;
			case 69:	//Acknowledgement
				ADCmsg[0]=USART_UI_ReceivedPacket[5];
    2be6:	80 91 d8 05 	lds	r24, 0x05D8
    2bea:	89 83       	std	Y+1, r24	; 0x01
				ADCmsg[1]=USART_UI_ReceivedPacket[6];
    2bec:	80 91 d9 05 	lds	r24, 0x05D9
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
				ADCmsg[2]=USART_UI_ReceivedPacket[7];
    2bf2:	80 91 da 05 	lds	r24, 0x05DA
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
				USART_transmitStringToPCFromFlash(PSTR("Analog Input channel,MSB,LSB :"));
    2bf8:	8d e6       	ldi	r24, 0x6D	; 109
    2bfa:	93 e0       	ldi	r25, 0x03	; 3
    2bfc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
				sprintf(ADCmsg, "%d,%d,%d", USART_UI_ReceivedPacket[5],USART_UI_ReceivedPacket[6],USART_UI_ReceivedPacket[7]); 
    2c00:	20 91 d8 05 	lds	r18, 0x05D8
    2c04:	30 91 d9 05 	lds	r19, 0x05D9
    2c08:	40 91 da 05 	lds	r20, 0x05DA
    2c0c:	8d b7       	in	r24, 0x3d	; 61
    2c0e:	9e b7       	in	r25, 0x3e	; 62
    2c10:	0a 97       	sbiw	r24, 0x0a	; 10
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	9e bf       	out	0x3e, r25	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	8d bf       	out	0x3d, r24	; 61
    2c1c:	ed b7       	in	r30, 0x3d	; 61
    2c1e:	fe b7       	in	r31, 0x3e	; 62
    2c20:	31 96       	adiw	r30, 0x01	; 1
    2c22:	8e 01       	movw	r16, r28
    2c24:	0f 5f       	subi	r16, 0xFF	; 255
    2c26:	1f 4f       	sbci	r17, 0xFF	; 255
    2c28:	ad b7       	in	r26, 0x3d	; 61
    2c2a:	be b7       	in	r27, 0x3e	; 62
    2c2c:	12 96       	adiw	r26, 0x02	; 2
    2c2e:	1c 93       	st	X, r17
    2c30:	0e 93       	st	-X, r16
    2c32:	11 97       	sbiw	r26, 0x01	; 1
    2c34:	80 e7       	ldi	r24, 0x70	; 112
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	93 83       	std	Z+3, r25	; 0x03
    2c3a:	82 83       	std	Z+2, r24	; 0x02
    2c3c:	24 83       	std	Z+4, r18	; 0x04
    2c3e:	15 82       	std	Z+5, r1	; 0x05
    2c40:	36 83       	std	Z+6, r19	; 0x06
    2c42:	17 82       	std	Z+7, r1	; 0x07
    2c44:	40 87       	std	Z+8, r20	; 0x08
    2c46:	11 86       	std	Z+9, r1	; 0x09
    2c48:	0e 94 cf 19 	call	0x339e	; 0x339e <sprintf>
				USART_transmitStringToPC(&ADCmsg);
    2c4c:	8d b7       	in	r24, 0x3d	; 61
    2c4e:	9e b7       	in	r25, 0x3e	; 62
    2c50:	0a 96       	adiw	r24, 0x0a	; 10
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	9e bf       	out	0x3e, r25	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	8d bf       	out	0x3d, r24	; 61
    2c5c:	c8 01       	movw	r24, r16
    2c5e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <USART_transmitStringToPC>
				TX_NEWLINE_PC;	
    2c62:	8d e0       	ldi	r24, 0x0D	; 13
    2c64:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2c68:	8a e0       	ldi	r24, 0x0A	; 10
    2c6a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
				TX_NEWLINE_PC;				
    2c6e:	8d e0       	ldi	r24, 0x0D	; 13
    2c70:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2c74:	8a e0       	ldi	r24, 0x0A	; 10
    2c76:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2c7a:	04 c0       	rjmp	.+8      	; 0x2c84 <UI_parse_message+0x13a>
		}
		//In the end: send the acknowledgement to the sender (with the message number, of course !!!)
	}
	else
	{
		USART_UI_Message_ready=false;
    2c7c:	10 92 cf 03 	sts	0x03CF, r1
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	03 c0       	rjmp	.+6      	; 0x2c8a <UI_parse_message+0x140>
		return false;
	}
	USART_UI_Message_ready=false;
    2c84:	10 92 cf 03 	sts	0x03CF, r1
    2c88:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
    2c8a:	2a 96       	adiw	r28, 0x0a	; 10
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	1f 91       	pop	r17
    2c9c:	0f 91       	pop	r16
    2c9e:	08 95       	ret

00002ca0 <UI_CheckModes>:
#include "Globals.h"
#include "Modes.h"


bool UI_CheckModes(void)
{
    2ca0:	af 92       	push	r10
    2ca2:	bf 92       	push	r11
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	c9 56       	subi	r28, 0x69	; 105
    2cb8:	d0 40       	sbci	r29, 0x00	; 0
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
	unsigned char PCPrintContent[2];
	int i=0;
	int iMoN;
	bool bBoNFound;
	const char* ModesFile="MODES.DAT";
	Number_of_modes=0;
    2cc4:	10 92 c9 03 	sts	0x03C9, r1
    2cc8:	56 e0       	ldi	r21, 0x06	; 6
    2cca:	e5 2e       	mov	r14, r21
    2ccc:	f1 2c       	mov	r15, r1
    2cce:	ec 0e       	add	r14, r28
    2cd0:	fd 1e       	adc	r15, r29
    2cd2:	f7 01       	movw	r30, r14
	for(i=0;i<100;i++)
    2cd4:	c7 01       	movw	r24, r14
    2cd6:	1e 2d       	mov	r17, r14
    2cd8:	09 2f       	mov	r16, r25
    2cda:	ce 01       	movw	r24, r28
    2cdc:	86 59       	subi	r24, 0x96	; 150
    2cde:	9f 4f       	sbci	r25, 0xFF	; 255
		FileContent[i]=0;
    2ce0:	11 92       	st	Z+, r1
	int i=0;
	int iMoN;
	bool bBoNFound;
	const char* ModesFile="MODES.DAT";
	Number_of_modes=0;
	for(i=0;i<100;i++)
    2ce2:	e8 17       	cp	r30, r24
    2ce4:	f9 07       	cpc	r31, r25
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <UI_CheckModes+0x40>
		FileContent[i]=0;
	if(readAndRetreiveFileContents (ModesFile,FileContent)>0)
    2ce8:	89 e7       	ldi	r24, 0x79	; 121
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	61 2f       	mov	r22, r17
    2cee:	70 2f       	mov	r23, r16
    2cf0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <readAndRetreiveFileContents>
    2cf4:	88 23       	and	r24, r24
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <UI_CheckModes+0x5a>
    2cf8:	b4 c0       	rjmp	.+360    	; 0x2e62 <UI_CheckModes+0x1c2>
	{
		return false;
	}
	USART_transmitStringToPC(&FileContent);
    2cfa:	81 2f       	mov	r24, r17
    2cfc:	90 2f       	mov	r25, r16
    2cfe:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <USART_transmitStringToPC>
	TX_NEWLINE_PC;
    2d02:	8d e0       	ldi	r24, 0x0D	; 13
    2d04:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2d08:	8a e0       	ldi	r24, 0x0A	; 10
    2d0a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(iMoN==3)
			{
				return false;
			}
			ModeID[iMoN++]=FileContent[i];
    2d10:	43 e0       	ldi	r20, 0x03	; 3
    2d12:	a4 2e       	mov	r10, r20
    2d14:	b1 2c       	mov	r11, r1
    2d16:	ac 0e       	add	r10, r28
    2d18:	bd 1e       	adc	r11, r29
    2d1a:	2e c0       	rjmp	.+92     	; 0x2d78 <UI_CheckModes+0xd8>
	TX_NEWLINE_PC;
	bBoNFound=false;
	i=0;
	while(FileContent[i]!='$')
	{
		if(FileContent[i]=='>')
    2d1c:	8e 33       	cpi	r24, 0x3E	; 62
    2d1e:	89 f4       	brne	.+34     	; 0x2d42 <UI_CheckModes+0xa2>
		{
			UI_Modes[Number_of_modes]=atoi(ModeID);
    2d20:	80 91 c9 03 	lds	r24, 0x03C9
    2d24:	08 2f       	mov	r16, r24
    2d26:	10 e0       	ldi	r17, 0x00	; 0
    2d28:	c5 01       	movw	r24, r10
    2d2a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <atoi>
    2d2e:	05 54       	subi	r16, 0x45	; 69
    2d30:	1c 4f       	sbci	r17, 0xFC	; 252
    2d32:	d8 01       	movw	r26, r16
    2d34:	8c 93       	st	X, r24
			Number_of_modes++;
    2d36:	80 91 c9 03 	lds	r24, 0x03C9
    2d3a:	8f 5f       	subi	r24, 0xFF	; 255
    2d3c:	80 93 c9 03 	sts	0x03C9, r24
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <UI_CheckModes+0xa6>
			bBoNFound=false;
		}
		if(!bBoNFound)
    2d42:	99 23       	and	r25, r25
    2d44:	39 f4       	brne	.+14     	; 0x2d54 <UI_CheckModes+0xb4>
		{
			ModeID[0]=0;
    2d46:	1b 82       	std	Y+3, r1	; 0x03
			ModeID[1]=0;
    2d48:	1c 82       	std	Y+4, r1	; 0x04
			ModeID[2]=0;
    2d4a:	1d 82       	std	Y+5, r1	; 0x05
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0a c0       	rjmp	.+20     	; 0x2d68 <UI_CheckModes+0xc8>
			iMoN=0;
		}
		else
		{
			if(iMoN==3)
    2d54:	23 30       	cpi	r18, 0x03	; 3
    2d56:	31 05       	cpc	r19, r1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <UI_CheckModes+0xbc>
    2d5a:	83 c0       	rjmp	.+262    	; 0x2e62 <UI_CheckModes+0x1c2>
			{
				return false;
			}
			ModeID[iMoN++]=FileContent[i];
    2d5c:	f5 01       	movw	r30, r10
    2d5e:	e2 0f       	add	r30, r18
    2d60:	f3 1f       	adc	r31, r19
    2d62:	80 83       	st	Z, r24
    2d64:	2f 5f       	subi	r18, 0xFF	; 255
    2d66:	3f 4f       	sbci	r19, 0xFF	; 255

		}
		if(FileContent[i]=='<')
    2d68:	f7 01       	movw	r30, r14
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8c 33       	cpi	r24, 0x3C	; 60
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <UI_CheckModes+0xd2>
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	08 94       	sec
    2d74:	e1 1c       	adc	r14, r1
    2d76:	f1 1c       	adc	r15, r1
	}
	USART_transmitStringToPC(&FileContent);
	TX_NEWLINE_PC;
	bBoNFound=false;
	i=0;
	while(FileContent[i]!='$')
    2d78:	d7 01       	movw	r26, r14
    2d7a:	8c 91       	ld	r24, X
    2d7c:	84 32       	cpi	r24, 0x24	; 36
    2d7e:	71 f6       	brne	.-100    	; 0x2d1c <UI_CheckModes+0x7c>
			bBoNFound=true;
		}

		i++;		
	}
	USART_transmitStringToPCFromFlash(PSTR("Number of modes selected: "));
    2d80:	80 ea       	ldi	r24, 0xA0	; 160
    2d82:	93 e0       	ldi	r25, 0x03	; 3
    2d84:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
	PCPrintContent[0]=0;
    2d88:	19 82       	std	Y+1, r1	; 0x01
	PCPrintContent[1]=0;
    2d8a:	1a 82       	std	Y+2, r1	; 0x02
	sprintf(PCPrintContent, "%d", Number_of_modes);
    2d8c:	20 91 c9 03 	lds	r18, 0x03C9
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <UI_CheckModes+0xf2>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <UI_CheckModes+0xf4>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <UI_CheckModes+0xf6>
    2d96:	ed b7       	in	r30, 0x3d	; 61
    2d98:	fe b7       	in	r31, 0x3e	; 62
    2d9a:	31 96       	adiw	r30, 0x01	; 1
    2d9c:	8e 01       	movw	r16, r28
    2d9e:	0f 5f       	subi	r16, 0xFF	; 255
    2da0:	1f 4f       	sbci	r17, 0xFF	; 255
    2da2:	ad b7       	in	r26, 0x3d	; 61
    2da4:	be b7       	in	r27, 0x3e	; 62
    2da6:	12 96       	adiw	r26, 0x02	; 2
    2da8:	1c 93       	st	X, r17
    2daa:	0e 93       	st	-X, r16
    2dac:	11 97       	sbiw	r26, 0x01	; 1
    2dae:	83 e8       	ldi	r24, 0x83	; 131
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	93 83       	std	Z+3, r25	; 0x03
    2db4:	82 83       	std	Z+2, r24	; 0x02
    2db6:	24 83       	std	Z+4, r18	; 0x04
    2db8:	15 82       	std	Z+5, r1	; 0x05
    2dba:	0e 94 cf 19 	call	0x339e	; 0x339e <sprintf>
	USART_transmitStringToPC(&PCPrintContent);
    2dbe:	ed b7       	in	r30, 0x3d	; 61
    2dc0:	fe b7       	in	r31, 0x3e	; 62
    2dc2:	36 96       	adiw	r30, 0x06	; 6
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	fe bf       	out	0x3e, r31	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	ed bf       	out	0x3d, r30	; 61
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <USART_transmitStringToPC>
	TX_NEWLINE_PC;
    2dd4:	8d e0       	ldi	r24, 0x0D	; 13
    2dd6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2dda:	8a e0       	ldi	r24, 0x0A	; 10
    2ddc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
    2de0:	8c e8       	ldi	r24, 0x8C	; 140
    2de2:	93 e0       	ldi	r25, 0x03	; 3
    2de4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
    2de8:	ee 24       	eor	r14, r14
    2dea:	ff 24       	eor	r15, r15
	for(i=0;i<Number_of_modes;i++)
	{
		sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    2dec:	d0 2e       	mov	r13, r16
    2dee:	01 2f       	mov	r16, r17
    2df0:	26 e8       	ldi	r18, 0x86	; 134
    2df2:	a2 2e       	mov	r10, r18
    2df4:	21 e0       	ldi	r18, 0x01	; 1
    2df6:	b2 2e       	mov	r11, r18
    2df8:	26 c0       	rjmp	.+76     	; 0x2e46 <UI_CheckModes+0x1a6>
    2dfa:	f7 01       	movw	r30, r14
    2dfc:	e5 54       	subi	r30, 0x45	; 69
    2dfe:	fc 4f       	sbci	r31, 0xFC	; 252
    2e00:	80 81       	ld	r24, Z
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <UI_CheckModes+0x164>
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <UI_CheckModes+0x166>
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <UI_CheckModes+0x168>
    2e08:	ed b7       	in	r30, 0x3d	; 61
    2e0a:	fe b7       	in	r31, 0x3e	; 62
    2e0c:	31 96       	adiw	r30, 0x01	; 1
    2e0e:	ad b7       	in	r26, 0x3d	; 61
    2e10:	be b7       	in	r27, 0x3e	; 62
    2e12:	11 96       	adiw	r26, 0x01	; 1
    2e14:	dc 92       	st	X, r13
    2e16:	11 97       	sbiw	r26, 0x01	; 1
    2e18:	12 96       	adiw	r26, 0x02	; 2
    2e1a:	0c 93       	st	X, r16
    2e1c:	b3 82       	std	Z+3, r11	; 0x03
    2e1e:	a2 82       	std	Z+2, r10	; 0x02
    2e20:	84 83       	std	Z+4, r24	; 0x04
    2e22:	15 82       	std	Z+5, r1	; 0x05
    2e24:	0e 94 cf 19 	call	0x339e	; 0x339e <sprintf>
		USART_transmitStringToPC(&PCPrintContent);
    2e28:	ed b7       	in	r30, 0x3d	; 61
    2e2a:	fe b7       	in	r31, 0x3e	; 62
    2e2c:	36 96       	adiw	r30, 0x06	; 6
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	fe bf       	out	0x3e, r31	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	ed bf       	out	0x3d, r30	; 61
    2e38:	8d 2d       	mov	r24, r13
    2e3a:	90 2f       	mov	r25, r16
    2e3c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <USART_transmitStringToPC>
	PCPrintContent[1]=0;
	sprintf(PCPrintContent, "%d", Number_of_modes);
	USART_transmitStringToPC(&PCPrintContent);
	TX_NEWLINE_PC;
	USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
	for(i=0;i<Number_of_modes;i++)
    2e40:	08 94       	sec
    2e42:	e1 1c       	adc	r14, r1
    2e44:	f1 1c       	adc	r15, r1
    2e46:	80 91 c9 03 	lds	r24, 0x03C9
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	e8 16       	cp	r14, r24
    2e4e:	f9 06       	cpc	r15, r25
    2e50:	a4 f2       	brlt	.-88     	; 0x2dfa <UI_CheckModes+0x15a>
	{
		sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
		USART_transmitStringToPC(&PCPrintContent);
	}	
	TX_NEWLINE_PC;
    2e52:	8d e0       	ldi	r24, 0x0D	; 13
    2e54:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2e58:	8a e0       	ldi	r24, 0x0A	; 10
    2e5a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <UI_CheckModes+0x1c4>
	return true; 
    2e62:	80 e0       	ldi	r24, 0x00	; 0
}
    2e64:	c7 59       	subi	r28, 0x97	; 151
    2e66:	df 4f       	sbci	r29, 0xFF	; 255
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	ff 90       	pop	r15
    2e7c:	ef 90       	pop	r14
    2e7e:	df 90       	pop	r13
    2e80:	bf 90       	pop	r11
    2e82:	af 90       	pop	r10
    2e84:	08 95       	ret

00002e86 <MD1_Reset>:
	}
}

void MD1_Reset(void)
{
	Current_State=0;
    2e86:	10 92 19 07 	sts	0x0719, r1
    2e8a:	10 92 18 07 	sts	0x0718, r1
}
    2e8e:	08 95       	ret

00002e90 <MD1_CallModeYesAnswer>:
}

void MD1_CallModeYesAnswer(void)
{

}
    2e90:	08 95       	ret

00002e92 <MD1_CallModeNoAnswer>:

void MD1_CallModeNoAnswer(void)
{

}
    2e92:	08 95       	ret

00002e94 <MD1_InputDot>:

void MD1_InputDot(char thisDot)
{
	Last_Dot=thisDot;
    2e94:	80 93 17 07 	sts	0x0717, r24
	Current_State=2;
    2e98:	82 e0       	ldi	r24, 0x02	; 2
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	90 93 19 07 	sts	0x0719, r25
    2ea0:	80 93 18 07 	sts	0x0718, r24
}
    2ea4:	08 95       	ret

00002ea6 <MD1_InputCell>:

void MD1_InputCell(char thisCell)
{

}
    2ea6:	08 95       	ret

00002ea8 <PlayRequestedDot>:

*/

void PlayRequestedDot(void)
{
	switch(Last_Dot)
    2ea8:	80 91 17 07 	lds	r24, 0x0717
    2eac:	83 33       	cpi	r24, 0x33	; 51
    2eae:	a1 f0       	breq	.+40     	; 0x2ed8 <PlayRequestedDot+0x30>
    2eb0:	84 33       	cpi	r24, 0x34	; 52
    2eb2:	28 f4       	brcc	.+10     	; 0x2ebe <PlayRequestedDot+0x16>
    2eb4:	81 33       	cpi	r24, 0x31	; 49
    2eb6:	51 f0       	breq	.+20     	; 0x2ecc <PlayRequestedDot+0x24>
    2eb8:	82 33       	cpi	r24, 0x32	; 50
    2eba:	e9 f4       	brne	.+58     	; 0x2ef6 <PlayRequestedDot+0x4e>
    2ebc:	0a c0       	rjmp	.+20     	; 0x2ed2 <PlayRequestedDot+0x2a>
    2ebe:	85 33       	cpi	r24, 0x35	; 53
    2ec0:	89 f0       	breq	.+34     	; 0x2ee4 <PlayRequestedDot+0x3c>
    2ec2:	85 33       	cpi	r24, 0x35	; 53
    2ec4:	60 f0       	brcs	.+24     	; 0x2ede <PlayRequestedDot+0x36>
    2ec6:	86 33       	cpi	r24, 0x36	; 54
    2ec8:	b1 f4       	brne	.+44     	; 0x2ef6 <PlayRequestedDot+0x4e>
    2eca:	11 c0       	rjmp	.+34     	; 0x2eee <PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD1_1.MP3");
    2ecc:	8b e8       	ldi	r24, 0x8B	; 139
    2ece:	91 e0       	ldi	r25, 0x01	; 1
    2ed0:	0b c0       	rjmp	.+22     	; 0x2ee8 <PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD1_2.MP3");
    2ed2:	85 e9       	ldi	r24, 0x95	; 149
    2ed4:	91 e0       	ldi	r25, 0x01	; 1
    2ed6:	08 c0       	rjmp	.+16     	; 0x2ee8 <PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD1_3.MP3");
    2ed8:	8f e9       	ldi	r24, 0x9F	; 159
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	05 c0       	rjmp	.+10     	; 0x2ee8 <PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD1_4.MP3");
    2ede:	89 ea       	ldi	r24, 0xA9	; 169
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD1_5.MP3");
    2ee4:	83 eb       	ldi	r24, 0xB3	; 179
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    2eec:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD1_6.MP3");
    2eee:	8d eb       	ldi	r24, 0xBD	; 189
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    2ef6:	08 95       	ret

00002ef8 <MD1_Main>:
	Current_State=0;
}

void MD1_Main(void)
{
	switch(Current_State)
    2ef8:	80 91 18 07 	lds	r24, 0x0718
    2efc:	90 91 19 07 	lds	r25, 0x0719
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <MD1_Main+0x12>
    2f04:	02 97       	sbiw	r24, 0x02	; 2
    2f06:	a1 f4       	brne	.+40     	; 0x2f30 <MD1_Main+0x38>
    2f08:	0b c0       	rjmp	.+22     	; 0x2f20 <MD1_Main+0x28>
	{
		case 0:
			RequestToPlayMP3file("MD1INT.MP3");
    2f0a:	87 ec       	ldi	r24, 0xC7	; 199
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
			Current_State=1;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	90 93 19 07 	sts	0x0719, r25
    2f1a:	80 93 18 07 	sts	0x0718, r24
    2f1e:	08 95       	ret
			break;
		case 1:
			break;
		case 2:
			PlayRequestedDot();
    2f20:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <PlayRequestedDot>
			Current_State=1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	90 93 19 07 	sts	0x0719, r25
    2f2c:	80 93 18 07 	sts	0x0718, r24
    2f30:	08 95       	ret

00002f32 <MD2_Reset>:
}


void MD2_Reset(void)
{
	Current_State=0;
    2f32:	10 92 19 07 	sts	0x0719, r1
    2f36:	10 92 18 07 	sts	0x0718, r1
	MD2_Last_Dot=0;
    2f3a:	10 92 1b 07 	sts	0x071B, r1
}
    2f3e:	08 95       	ret

00002f40 <MD2_CallModeYesAnswer>:
}

void MD2_CallModeYesAnswer(void)
{

}
    2f40:	08 95       	ret

00002f42 <MD2_CallModeNoAnswer>:

void MD2_CallModeNoAnswer(void)
{

}
    2f42:	08 95       	ret

00002f44 <MD2_InputDot>:

void MD2_InputDot(char thisDot)
{
	MD2_Last_Dot=thisDot;
    2f44:	80 93 1b 07 	sts	0x071B, r24
	Current_State=3;
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	90 93 19 07 	sts	0x0719, r25
    2f50:	80 93 18 07 	sts	0x0718, r24
}
    2f54:	08 95       	ret

00002f56 <MD2_InputCell>:

void MD2_InputCell(char thisCell)
{
    2f56:	98 2f       	mov	r25, r24
	if(MD2_Last_Dot!=0)
    2f58:	80 91 1b 07 	lds	r24, 0x071B
    2f5c:	88 23       	and	r24, r24
    2f5e:	41 f0       	breq	.+16     	; 0x2f70 <MD2_InputCell+0x1a>
	{
		Last_Cell=thisCell;
    2f60:	90 93 1a 07 	sts	0x071A, r25
		Current_State=2;
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	90 93 19 07 	sts	0x0719, r25
    2f6c:	80 93 18 07 	sts	0x0718, r24
    2f70:	08 95       	ret

00002f72 <MD2_PlayRequestedDot>:
}


void MD2_PlayRequestedDot(void)
{
	switch(MD2_Last_Dot)
    2f72:	80 91 1b 07 	lds	r24, 0x071B
    2f76:	83 33       	cpi	r24, 0x33	; 51
    2f78:	a1 f0       	breq	.+40     	; 0x2fa2 <MD2_PlayRequestedDot+0x30>
    2f7a:	84 33       	cpi	r24, 0x34	; 52
    2f7c:	28 f4       	brcc	.+10     	; 0x2f88 <MD2_PlayRequestedDot+0x16>
    2f7e:	81 33       	cpi	r24, 0x31	; 49
    2f80:	51 f0       	breq	.+20     	; 0x2f96 <MD2_PlayRequestedDot+0x24>
    2f82:	82 33       	cpi	r24, 0x32	; 50
    2f84:	e9 f4       	brne	.+58     	; 0x2fc0 <MD2_PlayRequestedDot+0x4e>
    2f86:	0a c0       	rjmp	.+20     	; 0x2f9c <MD2_PlayRequestedDot+0x2a>
    2f88:	85 33       	cpi	r24, 0x35	; 53
    2f8a:	89 f0       	breq	.+34     	; 0x2fae <MD2_PlayRequestedDot+0x3c>
    2f8c:	85 33       	cpi	r24, 0x35	; 53
    2f8e:	60 f0       	brcs	.+24     	; 0x2fa8 <MD2_PlayRequestedDot+0x36>
    2f90:	86 33       	cpi	r24, 0x36	; 54
    2f92:	b1 f4       	brne	.+44     	; 0x2fc0 <MD2_PlayRequestedDot+0x4e>
    2f94:	11 c0       	rjmp	.+34     	; 0x2fb8 <MD2_PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD1_1.MP3");
    2f96:	82 ed       	ldi	r24, 0xD2	; 210
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	0b c0       	rjmp	.+22     	; 0x2fb2 <MD2_PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD1_2.MP3");
    2f9c:	8c ed       	ldi	r24, 0xDC	; 220
    2f9e:	91 e0       	ldi	r25, 0x01	; 1
    2fa0:	08 c0       	rjmp	.+16     	; 0x2fb2 <MD2_PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD1_3.MP3");
    2fa2:	86 ee       	ldi	r24, 0xE6	; 230
    2fa4:	91 e0       	ldi	r25, 0x01	; 1
    2fa6:	05 c0       	rjmp	.+10     	; 0x2fb2 <MD2_PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD1_4.MP3");
    2fa8:	80 ef       	ldi	r24, 0xF0	; 240
    2faa:	91 e0       	ldi	r25, 0x01	; 1
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <MD2_PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD1_5.MP3");
    2fae:	8a ef       	ldi	r24, 0xFA	; 250
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    2fb6:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD1_6.MP3");
    2fb8:	84 e0       	ldi	r24, 0x04	; 4
    2fba:	92 e0       	ldi	r25, 0x02	; 2
    2fbc:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    2fc0:	08 95       	ret

00002fc2 <PlayRequestedCell>:

*/

void PlayRequestedCell(void)
{
	switch(Last_Cell)
    2fc2:	80 91 1a 07 	lds	r24, 0x071A
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	fc 01       	movw	r30, r24
    2fca:	e1 56       	subi	r30, 0x61	; 97
    2fcc:	f0 40       	sbci	r31, 0x00	; 0
    2fce:	ea 31       	cpi	r30, 0x1A	; 26
    2fd0:	f1 05       	cpc	r31, r1
    2fd2:	08 f0       	brcs	.+2      	; 0x2fd6 <PlayRequestedCell+0x14>
    2fd4:	56 c0       	rjmp	.+172    	; 0x3082 <PlayRequestedCell+0xc0>
    2fd6:	ea 5b       	subi	r30, 0xBA	; 186
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	05 90       	lpm	r0, Z+
    2fe0:	f4 91       	lpm	r31, Z+
    2fe2:	e0 2d       	mov	r30, r0
    2fe4:	09 94       	ijmp
	{
		case 'a':
			RequestToPlayMP3file("MD2_a.MP3");
    2fe6:	8e e0       	ldi	r24, 0x0E	; 14
    2fe8:	92 e0       	ldi	r25, 0x02	; 2
    2fea:	4d c0       	rjmp	.+154    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'b':
			RequestToPlayMP3file("MD2_b.MP3");
    2fec:	88 e1       	ldi	r24, 0x18	; 24
    2fee:	92 e0       	ldi	r25, 0x02	; 2
    2ff0:	4a c0       	rjmp	.+148    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'c':
			RequestToPlayMP3file("MD2_c.MP3");
    2ff2:	82 e2       	ldi	r24, 0x22	; 34
    2ff4:	92 e0       	ldi	r25, 0x02	; 2
    2ff6:	47 c0       	rjmp	.+142    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'd':
			RequestToPlayMP3file("MD2_d.MP3");
    2ff8:	8c e2       	ldi	r24, 0x2C	; 44
    2ffa:	92 e0       	ldi	r25, 0x02	; 2
    2ffc:	44 c0       	rjmp	.+136    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'e':
			RequestToPlayMP3file("MD2_e.MP3");
    2ffe:	86 e3       	ldi	r24, 0x36	; 54
    3000:	92 e0       	ldi	r25, 0x02	; 2
    3002:	41 c0       	rjmp	.+130    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'f':
			RequestToPlayMP3file("MD2_f.MP3");
    3004:	80 e4       	ldi	r24, 0x40	; 64
    3006:	92 e0       	ldi	r25, 0x02	; 2
    3008:	3e c0       	rjmp	.+124    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'g':
			RequestToPlayMP3file("MD2_g.MP3");
    300a:	8a e4       	ldi	r24, 0x4A	; 74
    300c:	92 e0       	ldi	r25, 0x02	; 2
    300e:	3b c0       	rjmp	.+118    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'h':
			RequestToPlayMP3file("MD2_h.MP3");
    3010:	84 e5       	ldi	r24, 0x54	; 84
    3012:	92 e0       	ldi	r25, 0x02	; 2
    3014:	38 c0       	rjmp	.+112    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'i':
			RequestToPlayMP3file("MD2_i.MP3");
    3016:	8e e5       	ldi	r24, 0x5E	; 94
    3018:	92 e0       	ldi	r25, 0x02	; 2
    301a:	35 c0       	rjmp	.+106    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'j':
			RequestToPlayMP3file("MD2_j.MP3");
    301c:	88 e6       	ldi	r24, 0x68	; 104
    301e:	92 e0       	ldi	r25, 0x02	; 2
    3020:	32 c0       	rjmp	.+100    	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'k':
			RequestToPlayMP3file("MD2_k.MP3");
    3022:	82 e7       	ldi	r24, 0x72	; 114
    3024:	92 e0       	ldi	r25, 0x02	; 2
    3026:	2f c0       	rjmp	.+94     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'l':
			RequestToPlayMP3file("MD2_l.MP3");
    3028:	8c e7       	ldi	r24, 0x7C	; 124
    302a:	92 e0       	ldi	r25, 0x02	; 2
    302c:	2c c0       	rjmp	.+88     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'm':
			RequestToPlayMP3file("MD2_m.MP3");
    302e:	86 e8       	ldi	r24, 0x86	; 134
    3030:	92 e0       	ldi	r25, 0x02	; 2
    3032:	29 c0       	rjmp	.+82     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'n':
			RequestToPlayMP3file("MD2_n.MP3");
    3034:	80 e9       	ldi	r24, 0x90	; 144
    3036:	92 e0       	ldi	r25, 0x02	; 2
    3038:	26 c0       	rjmp	.+76     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'o':
			RequestToPlayMP3file("MD2_o.MP3");
    303a:	8a e9       	ldi	r24, 0x9A	; 154
    303c:	92 e0       	ldi	r25, 0x02	; 2
    303e:	23 c0       	rjmp	.+70     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'p':
			RequestToPlayMP3file("MD2_p.MP3");
    3040:	84 ea       	ldi	r24, 0xA4	; 164
    3042:	92 e0       	ldi	r25, 0x02	; 2
    3044:	20 c0       	rjmp	.+64     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'q':
			RequestToPlayMP3file("MD2_q.MP3");
    3046:	8e ea       	ldi	r24, 0xAE	; 174
    3048:	92 e0       	ldi	r25, 0x02	; 2
    304a:	1d c0       	rjmp	.+58     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'r':
			RequestToPlayMP3file("MD2_r.MP3");
    304c:	88 eb       	ldi	r24, 0xB8	; 184
    304e:	92 e0       	ldi	r25, 0x02	; 2
    3050:	1a c0       	rjmp	.+52     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 's':
			RequestToPlayMP3file("MD2_s.MP3");
    3052:	82 ec       	ldi	r24, 0xC2	; 194
    3054:	92 e0       	ldi	r25, 0x02	; 2
    3056:	17 c0       	rjmp	.+46     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 't':
			RequestToPlayMP3file("MD2_t.MP3");
    3058:	8c ec       	ldi	r24, 0xCC	; 204
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'u':
			RequestToPlayMP3file("MD2_u.MP3");
    305e:	86 ed       	ldi	r24, 0xD6	; 214
    3060:	92 e0       	ldi	r25, 0x02	; 2
    3062:	11 c0       	rjmp	.+34     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'v':
			RequestToPlayMP3file("MD2_v.MP3");
    3064:	80 ee       	ldi	r24, 0xE0	; 224
    3066:	92 e0       	ldi	r25, 0x02	; 2
    3068:	0e c0       	rjmp	.+28     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'w':
			RequestToPlayMP3file("MD2_w.MP3");
    306a:	8a ee       	ldi	r24, 0xEA	; 234
    306c:	92 e0       	ldi	r25, 0x02	; 2
    306e:	0b c0       	rjmp	.+22     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'x':
			RequestToPlayMP3file("MD2_x.MP3");
    3070:	84 ef       	ldi	r24, 0xF4	; 244
    3072:	92 e0       	ldi	r25, 0x02	; 2
    3074:	08 c0       	rjmp	.+16     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'y':
			RequestToPlayMP3file("MD2_y.MP3");
    3076:	8e ef       	ldi	r24, 0xFE	; 254
    3078:	92 e0       	ldi	r25, 0x02	; 2
    307a:	05 c0       	rjmp	.+10     	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		case 'z':
			RequestToPlayMP3file("MD2_z.MP3");
    307c:	88 e0       	ldi	r24, 0x08	; 8
    307e:	93 e0       	ldi	r25, 0x03	; 3
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <PlayRequestedCell+0xc4>
			break;
		default:
			RequestToPlayMP3file("MD2ER1.MP3");
    3082:	82 e1       	ldi	r24, 0x12	; 18
    3084:	93 e0       	ldi	r25, 0x03	; 3
    3086:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    308a:	08 95       	ret

0000308c <MD2_Main>:
	MD2_Last_Dot=0;
}

void MD2_Main(void)
{
	switch(Current_State)
    308c:	80 91 18 07 	lds	r24, 0x0718
    3090:	90 91 19 07 	lds	r25, 0x0719
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	91 05       	cpc	r25, r1
    3098:	51 f0       	breq	.+20     	; 0x30ae <MD2_Main+0x22>
    309a:	83 30       	cpi	r24, 0x03	; 3
    309c:	91 05       	cpc	r25, r1
    309e:	81 f0       	breq	.+32     	; 0x30c0 <MD2_Main+0x34>
    30a0:	89 2b       	or	r24, r25
    30a2:	b1 f4       	brne	.+44     	; 0x30d0 <MD2_Main+0x44>
	{
		case 0:
			RequestToPlayMP3file("MD2INT.MP3");
    30a4:	8d e1       	ldi	r24, 0x1D	; 29
    30a6:	93 e0       	ldi	r25, 0x03	; 3
    30a8:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <MD2_Main+0x26>
			Current_State=1;
			break;
		case 1:
			break;
		case 2:
			PlayRequestedCell();
    30ae:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <PlayRequestedCell>
			Current_State=1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	90 93 19 07 	sts	0x0719, r25
    30ba:	80 93 18 07 	sts	0x0718, r24
    30be:	08 95       	ret
			break;
		case 3:
			MD2_PlayRequestedDot();
    30c0:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <MD2_PlayRequestedDot>
			Current_State=1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	90 93 19 07 	sts	0x0719, r25
    30cc:	80 93 18 07 	sts	0x0718, r24
    30d0:	08 95       	ret

000030d2 <MD3_Reset>:
	}
}

void MD3_Reset(void)
{
	MD3_Current_State=0;
    30d2:	10 92 1e 07 	sts	0x071E, r1
    30d6:	10 92 1d 07 	sts	0x071D, r1
}
    30da:	08 95       	ret

000030dc <MD3_CallModeYesAnswer>:
}

void MD3_CallModeYesAnswer(void)
{

}
    30dc:	08 95       	ret

000030de <MD3_CallModeNoAnswer>:

void MD3_CallModeNoAnswer(void)
{

}
    30de:	08 95       	ret

000030e0 <MD3_InputDot>:

void MD3_InputDot(char thisDot)
{
	MD3_Last_Dot=thisDot;
    30e0:	80 93 1c 07 	sts	0x071C, r24
	MD3_Current_State=2;
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	90 93 1e 07 	sts	0x071E, r25
    30ec:	80 93 1d 07 	sts	0x071D, r24
}
    30f0:	08 95       	ret

000030f2 <MD3_InputCell>:

void MD3_InputCell(char thisCell)
{

}
    30f2:	08 95       	ret

000030f4 <MD3_PlayRequestedDot>:

*/

void MD3_PlayRequestedDot(void)
{
	switch(MD3_Last_Dot)
    30f4:	80 91 1c 07 	lds	r24, 0x071C
    30f8:	83 33       	cpi	r24, 0x33	; 51
    30fa:	a1 f0       	breq	.+40     	; 0x3124 <MD3_PlayRequestedDot+0x30>
    30fc:	84 33       	cpi	r24, 0x34	; 52
    30fe:	28 f4       	brcc	.+10     	; 0x310a <MD3_PlayRequestedDot+0x16>
    3100:	81 33       	cpi	r24, 0x31	; 49
    3102:	51 f0       	breq	.+20     	; 0x3118 <MD3_PlayRequestedDot+0x24>
    3104:	82 33       	cpi	r24, 0x32	; 50
    3106:	e9 f4       	brne	.+58     	; 0x3142 <MD3_PlayRequestedDot+0x4e>
    3108:	0a c0       	rjmp	.+20     	; 0x311e <MD3_PlayRequestedDot+0x2a>
    310a:	85 33       	cpi	r24, 0x35	; 53
    310c:	89 f0       	breq	.+34     	; 0x3130 <MD3_PlayRequestedDot+0x3c>
    310e:	85 33       	cpi	r24, 0x35	; 53
    3110:	60 f0       	brcs	.+24     	; 0x312a <MD3_PlayRequestedDot+0x36>
    3112:	86 33       	cpi	r24, 0x36	; 54
    3114:	b1 f4       	brne	.+44     	; 0x3142 <MD3_PlayRequestedDot+0x4e>
    3116:	11 c0       	rjmp	.+34     	; 0x313a <MD3_PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD3_1.MP3");
    3118:	88 e2       	ldi	r24, 0x28	; 40
    311a:	93 e0       	ldi	r25, 0x03	; 3
    311c:	0b c0       	rjmp	.+22     	; 0x3134 <MD3_PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD3_2.MP3");
    311e:	82 e3       	ldi	r24, 0x32	; 50
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	08 c0       	rjmp	.+16     	; 0x3134 <MD3_PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD3_3.MP3");
    3124:	8c e3       	ldi	r24, 0x3C	; 60
    3126:	93 e0       	ldi	r25, 0x03	; 3
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <MD3_PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD3_4.MP3");
    312a:	86 e4       	ldi	r24, 0x46	; 70
    312c:	93 e0       	ldi	r25, 0x03	; 3
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <MD3_PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD3_5.MP3");
    3130:	80 e5       	ldi	r24, 0x50	; 80
    3132:	93 e0       	ldi	r25, 0x03	; 3
    3134:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    3138:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD3_6.MP3");
    313a:	8a e5       	ldi	r24, 0x5A	; 90
    313c:	93 e0       	ldi	r25, 0x03	; 3
    313e:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
    3142:	08 95       	ret

00003144 <MD3_Main>:
	MD3_Current_State=0;
}

void MD3_Main(void)
{
	switch(MD3_Current_State)
    3144:	80 91 1d 07 	lds	r24, 0x071D
    3148:	90 91 1e 07 	lds	r25, 0x071E
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	19 f0       	breq	.+6      	; 0x3156 <MD3_Main+0x12>
    3150:	02 97       	sbiw	r24, 0x02	; 2
    3152:	a1 f4       	brne	.+40     	; 0x317c <MD3_Main+0x38>
    3154:	0b c0       	rjmp	.+22     	; 0x316c <MD3_Main+0x28>
	{
		case 0:
			RequestToPlayMP3file("MD3INT.MP3");
    3156:	84 e6       	ldi	r24, 0x64	; 100
    3158:	93 e0       	ldi	r25, 0x03	; 3
    315a:	0e 94 06 04 	call	0x80c	; 0x80c <RequestToPlayMP3file>
			MD3_Current_State=1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	90 93 1e 07 	sts	0x071E, r25
    3166:	80 93 1d 07 	sts	0x071D, r24
    316a:	08 95       	ret
			break;
		case 1:
			break;
		case 2:
			MD3_PlayRequestedDot();
    316c:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <MD3_PlayRequestedDot>
			MD3_Current_State=1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	90 93 1e 07 	sts	0x071E, r25
    3178:	80 93 1d 07 	sts	0x071D, r24
    317c:	08 95       	ret

0000317e <PC_RequestsToModifyModesFile>:
			break;
	}
}

void PC_RequestsToModifyModesFile(void)
{
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	64 97       	sbiw	r28, 0x14	; 20
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	8e 01       	movw	r16, r28
    3198:	0f 5f       	subi	r16, 0xFF	; 255
    319a:	1f 4f       	sbci	r17, 0xFF	; 255
    319c:	f8 01       	movw	r30, r16
	const char* ModesFile="MODES.DAT";
	unsigned char WritingFileContent[20];
	int iT=0;
	for(iT=0;iT<20;iT++)
    319e:	ce 01       	movw	r24, r28
    31a0:	45 96       	adiw	r24, 0x15	; 21
	{
		WritingFileContent[iT]=0x00;
    31a2:	11 92       	st	Z+, r1
void PC_RequestsToModifyModesFile(void)
{
	const char* ModesFile="MODES.DAT";
	unsigned char WritingFileContent[20];
	int iT=0;
	for(iT=0;iT<20;iT++)
    31a4:	e8 17       	cp	r30, r24
    31a6:	f9 07       	cpc	r31, r25
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <PC_RequestsToModifyModesFile+0x24>
	{
		WritingFileContent[iT]=0x00;
	}
	InitSDCard(false);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <InitSDCard>
    31b0:	23 e0       	ldi	r18, 0x03	; 3
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	09 c0       	rjmp	.+18     	; 0x31c8 <PC_RequestsToModifyModesFile+0x4a>
	iT=0;
	for(iT=3;iT<USART_PC_received_playload_len;iT++)
	{
		WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
    31b6:	f9 01       	movw	r30, r18
    31b8:	e9 55       	subi	r30, 0x59	; 89
    31ba:	fc 4f       	sbci	r31, 0xFC	; 252
    31bc:	80 81       	ld	r24, Z
    31be:	f8 01       	movw	r30, r16
    31c0:	81 93       	st	Z+, r24
    31c2:	8f 01       	movw	r16, r30
	{
		WritingFileContent[iT]=0x00;
	}
	InitSDCard(false);
	iT=0;
	for(iT=3;iT<USART_PC_received_playload_len;iT++)
    31c4:	2f 5f       	subi	r18, 0xFF	; 255
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	80 91 fd 05 	lds	r24, 0x05FD
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	28 17       	cp	r18, r24
    31d0:	39 07       	cpc	r19, r25
    31d2:	8c f3       	brlt	.-30     	; 0x31b6 <PC_RequestsToModifyModesFile+0x38>
	{
		WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
	}
	if(ReplaceTheContentOfThisFileWith(ModesFile,WritingFileContent)==0)
    31d4:	8f e6       	ldi	r24, 0x6F	; 111
    31d6:	93 e0       	ldi	r25, 0x03	; 3
    31d8:	be 01       	movw	r22, r28
    31da:	6f 5f       	subi	r22, 0xFF	; 255
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	0e 94 23 12 	call	0x2446	; 0x2446 <ReplaceTheContentOfThisFileWith>
    31e2:	89 2b       	or	r24, r25
    31e4:	19 f4       	brne	.+6      	; 0x31ec <PC_RequestsToModifyModesFile+0x6e>
	{
		USART_transmitStringToPCFromFlash(PSTR("SABT-OK"));
    31e6:	85 ec       	ldi	r24, 0xC5	; 197
    31e8:	93 e0       	ldi	r25, 0x03	; 3
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <PC_RequestsToModifyModesFile+0x72>
		TX_NEWLINE_PC;			
	}else{
		USART_transmitStringToPCFromFlash(PSTR("SABT-FAIL"));
    31ec:	8b eb       	ldi	r24, 0xBB	; 187
    31ee:	93 e0       	ldi	r25, 0x03	; 3
    31f0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
		TX_NEWLINE_PC;	
    31f4:	8d e0       	ldi	r24, 0x0D	; 13
    31f6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    31fa:	8a e0       	ldi	r24, 0x0A	; 10
    31fc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
	}
}
    3200:	64 96       	adiw	r28, 0x14	; 20
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	08 95       	ret

00003216 <PC_parse_message>:
#include "Globals.h"

bool PC_parse_message()
{
	unsigned char MessageType;
	USART_PC_Message_ready=false;
    3216:	10 92 81 03 	sts	0x0381, r1
	MessageType=USART_PC_ReceivedPacket[2];
    321a:	80 91 a9 03 	lds	r24, 0x03A9
	switch(MessageType)
    321e:	8d 34       	cpi	r24, 0x4D	; 77
    3220:	69 f0       	breq	.+26     	; 0x323c <PC_parse_message+0x26>
    3222:	88 37       	cpi	r24, 0x78	; 120
    3224:	69 f4       	brne	.+26     	; 0x3240 <PC_parse_message+0x2a>
	{
		case PC_CMD_INIT:
			USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
    3226:	8d ec       	ldi	r24, 0xCD	; 205
    3228:	93 e0       	ldi	r25, 0x03	; 3
    322a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;			
    322e:	8d e0       	ldi	r24, 0x0D	; 13
    3230:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    3234:	8a e0       	ldi	r24, 0x0A	; 10
    3236:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_transmitByteToPC>
    323a:	08 95       	ret
			break;
		case PC_CMD_NEWMODES:
			PC_RequestsToModifyModesFile();
    323c:	0e 94 bf 18 	call	0x317e	; 0x317e <PC_RequestsToModifyModesFile>
			break;
	}
}
    3240:	08 95       	ret

00003242 <__mulsi3>:
    3242:	62 9f       	mul	r22, r18
    3244:	d0 01       	movw	r26, r0
    3246:	73 9f       	mul	r23, r19
    3248:	f0 01       	movw	r30, r0
    324a:	82 9f       	mul	r24, r18
    324c:	e0 0d       	add	r30, r0
    324e:	f1 1d       	adc	r31, r1
    3250:	64 9f       	mul	r22, r20
    3252:	e0 0d       	add	r30, r0
    3254:	f1 1d       	adc	r31, r1
    3256:	92 9f       	mul	r25, r18
    3258:	f0 0d       	add	r31, r0
    325a:	83 9f       	mul	r24, r19
    325c:	f0 0d       	add	r31, r0
    325e:	74 9f       	mul	r23, r20
    3260:	f0 0d       	add	r31, r0
    3262:	65 9f       	mul	r22, r21
    3264:	f0 0d       	add	r31, r0
    3266:	99 27       	eor	r25, r25
    3268:	72 9f       	mul	r23, r18
    326a:	b0 0d       	add	r27, r0
    326c:	e1 1d       	adc	r30, r1
    326e:	f9 1f       	adc	r31, r25
    3270:	63 9f       	mul	r22, r19
    3272:	b0 0d       	add	r27, r0
    3274:	e1 1d       	adc	r30, r1
    3276:	f9 1f       	adc	r31, r25
    3278:	bd 01       	movw	r22, r26
    327a:	cf 01       	movw	r24, r30
    327c:	11 24       	eor	r1, r1
    327e:	08 95       	ret

00003280 <__udivmodsi4>:
    3280:	a1 e2       	ldi	r26, 0x21	; 33
    3282:	1a 2e       	mov	r1, r26
    3284:	aa 1b       	sub	r26, r26
    3286:	bb 1b       	sub	r27, r27
    3288:	fd 01       	movw	r30, r26
    328a:	0d c0       	rjmp	.+26     	; 0x32a6 <__udivmodsi4_ep>

0000328c <__udivmodsi4_loop>:
    328c:	aa 1f       	adc	r26, r26
    328e:	bb 1f       	adc	r27, r27
    3290:	ee 1f       	adc	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	a2 17       	cp	r26, r18
    3296:	b3 07       	cpc	r27, r19
    3298:	e4 07       	cpc	r30, r20
    329a:	f5 07       	cpc	r31, r21
    329c:	20 f0       	brcs	.+8      	; 0x32a6 <__udivmodsi4_ep>
    329e:	a2 1b       	sub	r26, r18
    32a0:	b3 0b       	sbc	r27, r19
    32a2:	e4 0b       	sbc	r30, r20
    32a4:	f5 0b       	sbc	r31, r21

000032a6 <__udivmodsi4_ep>:
    32a6:	66 1f       	adc	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	88 1f       	adc	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	1a 94       	dec	r1
    32b0:	69 f7       	brne	.-38     	; 0x328c <__udivmodsi4_loop>
    32b2:	60 95       	com	r22
    32b4:	70 95       	com	r23
    32b6:	80 95       	com	r24
    32b8:	90 95       	com	r25
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	bd 01       	movw	r22, r26
    32c0:	cf 01       	movw	r24, r30
    32c2:	08 95       	ret

000032c4 <atoi>:
    32c4:	fc 01       	movw	r30, r24
    32c6:	88 27       	eor	r24, r24
    32c8:	99 27       	eor	r25, r25
    32ca:	e8 94       	clt
    32cc:	21 91       	ld	r18, Z+
    32ce:	20 32       	cpi	r18, 0x20	; 32
    32d0:	e9 f3       	breq	.-6      	; 0x32cc <atoi+0x8>
    32d2:	29 30       	cpi	r18, 0x09	; 9
    32d4:	10 f0       	brcs	.+4      	; 0x32da <atoi+0x16>
    32d6:	2e 30       	cpi	r18, 0x0E	; 14
    32d8:	c8 f3       	brcs	.-14     	; 0x32cc <atoi+0x8>
    32da:	2b 32       	cpi	r18, 0x2B	; 43
    32dc:	41 f0       	breq	.+16     	; 0x32ee <atoi+0x2a>
    32de:	2d 32       	cpi	r18, 0x2D	; 45
    32e0:	39 f4       	brne	.+14     	; 0x32f0 <atoi+0x2c>
    32e2:	68 94       	set
    32e4:	04 c0       	rjmp	.+8      	; 0x32ee <atoi+0x2a>
    32e6:	0e 94 80 19 	call	0x3300	; 0x3300 <__mulhi_const_10>
    32ea:	82 0f       	add	r24, r18
    32ec:	91 1d       	adc	r25, r1
    32ee:	21 91       	ld	r18, Z+
    32f0:	20 53       	subi	r18, 0x30	; 48
    32f2:	2a 30       	cpi	r18, 0x0A	; 10
    32f4:	c0 f3       	brcs	.-16     	; 0x32e6 <atoi+0x22>
    32f6:	1e f4       	brtc	.+6      	; 0x32fe <atoi+0x3a>
    32f8:	90 95       	com	r25
    32fa:	81 95       	neg	r24
    32fc:	9f 4f       	sbci	r25, 0xFF	; 255
    32fe:	08 95       	ret

00003300 <__mulhi_const_10>:
    3300:	7a e0       	ldi	r23, 0x0A	; 10
    3302:	97 9f       	mul	r25, r23
    3304:	90 2d       	mov	r25, r0
    3306:	87 9f       	mul	r24, r23
    3308:	80 2d       	mov	r24, r0
    330a:	91 0d       	add	r25, r1
    330c:	11 24       	eor	r1, r1
    330e:	08 95       	ret

00003310 <printf>:
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	fe 01       	movw	r30, r28
    331a:	35 96       	adiw	r30, 0x05	; 5
    331c:	61 91       	ld	r22, Z+
    331e:	71 91       	ld	r23, Z+
    3320:	80 91 21 07 	lds	r24, 0x0721
    3324:	90 91 22 07 	lds	r25, 0x0722
    3328:	af 01       	movw	r20, r30
    332a:	0e 94 00 1a 	call	0x3400	; 0x3400 <vfprintf>
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <puts>:
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	8c 01       	movw	r16, r24
    333e:	e0 91 21 07 	lds	r30, 0x0721
    3342:	f0 91 22 07 	lds	r31, 0x0722
    3346:	83 81       	ldd	r24, Z+3	; 0x03
    3348:	81 ff       	sbrs	r24, 1
    334a:	21 c0       	rjmp	.+66     	; 0x338e <puts+0x5a>
    334c:	c0 e0       	ldi	r28, 0x00	; 0
    334e:	d0 e0       	ldi	r29, 0x00	; 0
    3350:	0d c0       	rjmp	.+26     	; 0x336c <puts+0x38>
    3352:	e0 91 21 07 	lds	r30, 0x0721
    3356:	f0 91 22 07 	lds	r31, 0x0722
    335a:	20 85       	ldd	r18, Z+8	; 0x08
    335c:	31 85       	ldd	r19, Z+9	; 0x09
    335e:	bf 01       	movw	r22, r30
    3360:	f9 01       	movw	r30, r18
    3362:	09 95       	icall
    3364:	89 2b       	or	r24, r25
    3366:	11 f0       	breq	.+4      	; 0x336c <puts+0x38>
    3368:	cf ef       	ldi	r28, 0xFF	; 255
    336a:	df ef       	ldi	r29, 0xFF	; 255
    336c:	f8 01       	movw	r30, r16
    336e:	81 91       	ld	r24, Z+
    3370:	8f 01       	movw	r16, r30
    3372:	88 23       	and	r24, r24
    3374:	71 f7       	brne	.-36     	; 0x3352 <puts+0x1e>
    3376:	e0 91 21 07 	lds	r30, 0x0721
    337a:	f0 91 22 07 	lds	r31, 0x0722
    337e:	20 85       	ldd	r18, Z+8	; 0x08
    3380:	31 85       	ldd	r19, Z+9	; 0x09
    3382:	8a e0       	ldi	r24, 0x0A	; 10
    3384:	bf 01       	movw	r22, r30
    3386:	f9 01       	movw	r30, r18
    3388:	09 95       	icall
    338a:	89 2b       	or	r24, r25
    338c:	11 f0       	breq	.+4      	; 0x3392 <puts+0x5e>
    338e:	cf ef       	ldi	r28, 0xFF	; 255
    3390:	df ef       	ldi	r29, 0xFF	; 255
    3392:	ce 01       	movw	r24, r28
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	08 95       	ret

0000339e <sprintf>:
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	2e 97       	sbiw	r28, 0x0e	; 14
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	0d 89       	ldd	r16, Y+21	; 0x15
    33b8:	1e 89       	ldd	r17, Y+22	; 0x16
    33ba:	86 e0       	ldi	r24, 0x06	; 6
    33bc:	8c 83       	std	Y+4, r24	; 0x04
    33be:	1a 83       	std	Y+2, r17	; 0x02
    33c0:	09 83       	std	Y+1, r16	; 0x01
    33c2:	8f ef       	ldi	r24, 0xFF	; 255
    33c4:	9f e7       	ldi	r25, 0x7F	; 127
    33c6:	9e 83       	std	Y+6, r25	; 0x06
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	9e 01       	movw	r18, r28
    33cc:	27 5e       	subi	r18, 0xE7	; 231
    33ce:	3f 4f       	sbci	r19, 0xFF	; 255
    33d0:	ce 01       	movw	r24, r28
    33d2:	01 96       	adiw	r24, 0x01	; 1
    33d4:	6f 89       	ldd	r22, Y+23	; 0x17
    33d6:	78 8d       	ldd	r23, Y+24	; 0x18
    33d8:	a9 01       	movw	r20, r18
    33da:	0e 94 00 1a 	call	0x3400	; 0x3400 <vfprintf>
    33de:	2f 81       	ldd	r18, Y+7	; 0x07
    33e0:	38 85       	ldd	r19, Y+8	; 0x08
    33e2:	02 0f       	add	r16, r18
    33e4:	13 1f       	adc	r17, r19
    33e6:	f8 01       	movw	r30, r16
    33e8:	10 82       	st	Z, r1
    33ea:	2e 96       	adiw	r28, 0x0e	; 14
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	1f 91       	pop	r17
    33fc:	0f 91       	pop	r16
    33fe:	08 95       	ret

00003400 <vfprintf>:
    3400:	2f 92       	push	r2
    3402:	3f 92       	push	r3
    3404:	4f 92       	push	r4
    3406:	5f 92       	push	r5
    3408:	6f 92       	push	r6
    340a:	7f 92       	push	r7
    340c:	8f 92       	push	r8
    340e:	9f 92       	push	r9
    3410:	af 92       	push	r10
    3412:	bf 92       	push	r11
    3414:	cf 92       	push	r12
    3416:	df 92       	push	r13
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	2b 97       	sbiw	r28, 0x0b	; 11
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	3c 01       	movw	r6, r24
    3436:	2b 01       	movw	r4, r22
    3438:	5a 01       	movw	r10, r20
    343a:	fc 01       	movw	r30, r24
    343c:	17 82       	std	Z+7, r1	; 0x07
    343e:	16 82       	std	Z+6, r1	; 0x06
    3440:	83 81       	ldd	r24, Z+3	; 0x03
    3442:	81 fd       	sbrc	r24, 1
    3444:	03 c0       	rjmp	.+6      	; 0x344c <vfprintf+0x4c>
    3446:	6f ef       	ldi	r22, 0xFF	; 255
    3448:	7f ef       	ldi	r23, 0xFF	; 255
    344a:	c6 c1       	rjmp	.+908    	; 0x37d8 <vfprintf+0x3d8>
    344c:	9a e0       	ldi	r25, 0x0A	; 10
    344e:	89 2e       	mov	r8, r25
    3450:	1e 01       	movw	r2, r28
    3452:	08 94       	sec
    3454:	21 1c       	adc	r2, r1
    3456:	31 1c       	adc	r3, r1
    3458:	f3 01       	movw	r30, r6
    345a:	23 81       	ldd	r18, Z+3	; 0x03
    345c:	f2 01       	movw	r30, r4
    345e:	23 fd       	sbrc	r18, 3
    3460:	85 91       	lpm	r24, Z+
    3462:	23 ff       	sbrs	r18, 3
    3464:	81 91       	ld	r24, Z+
    3466:	2f 01       	movw	r4, r30
    3468:	88 23       	and	r24, r24
    346a:	09 f4       	brne	.+2      	; 0x346e <vfprintf+0x6e>
    346c:	b2 c1       	rjmp	.+868    	; 0x37d2 <vfprintf+0x3d2>
    346e:	85 32       	cpi	r24, 0x25	; 37
    3470:	39 f4       	brne	.+14     	; 0x3480 <vfprintf+0x80>
    3472:	23 fd       	sbrc	r18, 3
    3474:	85 91       	lpm	r24, Z+
    3476:	23 ff       	sbrs	r18, 3
    3478:	81 91       	ld	r24, Z+
    347a:	2f 01       	movw	r4, r30
    347c:	85 32       	cpi	r24, 0x25	; 37
    347e:	29 f4       	brne	.+10     	; 0x348a <vfprintf+0x8a>
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	b3 01       	movw	r22, r6
    3484:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    3488:	e7 cf       	rjmp	.-50     	; 0x3458 <vfprintf+0x58>
    348a:	98 2f       	mov	r25, r24
    348c:	ff 24       	eor	r15, r15
    348e:	ee 24       	eor	r14, r14
    3490:	99 24       	eor	r9, r9
    3492:	ff e1       	ldi	r31, 0x1F	; 31
    3494:	ff 15       	cp	r31, r15
    3496:	d0 f0       	brcs	.+52     	; 0x34cc <vfprintf+0xcc>
    3498:	9b 32       	cpi	r25, 0x2B	; 43
    349a:	69 f0       	breq	.+26     	; 0x34b6 <vfprintf+0xb6>
    349c:	9c 32       	cpi	r25, 0x2C	; 44
    349e:	28 f4       	brcc	.+10     	; 0x34aa <vfprintf+0xaa>
    34a0:	90 32       	cpi	r25, 0x20	; 32
    34a2:	59 f0       	breq	.+22     	; 0x34ba <vfprintf+0xba>
    34a4:	93 32       	cpi	r25, 0x23	; 35
    34a6:	91 f4       	brne	.+36     	; 0x34cc <vfprintf+0xcc>
    34a8:	0e c0       	rjmp	.+28     	; 0x34c6 <vfprintf+0xc6>
    34aa:	9d 32       	cpi	r25, 0x2D	; 45
    34ac:	49 f0       	breq	.+18     	; 0x34c0 <vfprintf+0xc0>
    34ae:	90 33       	cpi	r25, 0x30	; 48
    34b0:	69 f4       	brne	.+26     	; 0x34cc <vfprintf+0xcc>
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	24 c0       	rjmp	.+72     	; 0x34fe <vfprintf+0xfe>
    34b6:	52 e0       	ldi	r21, 0x02	; 2
    34b8:	f5 2a       	or	r15, r21
    34ba:	84 e0       	ldi	r24, 0x04	; 4
    34bc:	f8 2a       	or	r15, r24
    34be:	28 c0       	rjmp	.+80     	; 0x3510 <vfprintf+0x110>
    34c0:	98 e0       	ldi	r25, 0x08	; 8
    34c2:	f9 2a       	or	r15, r25
    34c4:	25 c0       	rjmp	.+74     	; 0x3510 <vfprintf+0x110>
    34c6:	e0 e1       	ldi	r30, 0x10	; 16
    34c8:	fe 2a       	or	r15, r30
    34ca:	22 c0       	rjmp	.+68     	; 0x3510 <vfprintf+0x110>
    34cc:	f7 fc       	sbrc	r15, 7
    34ce:	29 c0       	rjmp	.+82     	; 0x3522 <vfprintf+0x122>
    34d0:	89 2f       	mov	r24, r25
    34d2:	80 53       	subi	r24, 0x30	; 48
    34d4:	8a 30       	cpi	r24, 0x0A	; 10
    34d6:	70 f4       	brcc	.+28     	; 0x34f4 <vfprintf+0xf4>
    34d8:	f6 fe       	sbrs	r15, 6
    34da:	05 c0       	rjmp	.+10     	; 0x34e6 <vfprintf+0xe6>
    34dc:	98 9c       	mul	r9, r8
    34de:	90 2c       	mov	r9, r0
    34e0:	11 24       	eor	r1, r1
    34e2:	98 0e       	add	r9, r24
    34e4:	15 c0       	rjmp	.+42     	; 0x3510 <vfprintf+0x110>
    34e6:	e8 9c       	mul	r14, r8
    34e8:	e0 2c       	mov	r14, r0
    34ea:	11 24       	eor	r1, r1
    34ec:	e8 0e       	add	r14, r24
    34ee:	f0 e2       	ldi	r31, 0x20	; 32
    34f0:	ff 2a       	or	r15, r31
    34f2:	0e c0       	rjmp	.+28     	; 0x3510 <vfprintf+0x110>
    34f4:	9e 32       	cpi	r25, 0x2E	; 46
    34f6:	29 f4       	brne	.+10     	; 0x3502 <vfprintf+0x102>
    34f8:	f6 fc       	sbrc	r15, 6
    34fa:	6b c1       	rjmp	.+726    	; 0x37d2 <vfprintf+0x3d2>
    34fc:	40 e4       	ldi	r20, 0x40	; 64
    34fe:	f4 2a       	or	r15, r20
    3500:	07 c0       	rjmp	.+14     	; 0x3510 <vfprintf+0x110>
    3502:	9c 36       	cpi	r25, 0x6C	; 108
    3504:	19 f4       	brne	.+6      	; 0x350c <vfprintf+0x10c>
    3506:	50 e8       	ldi	r21, 0x80	; 128
    3508:	f5 2a       	or	r15, r21
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <vfprintf+0x110>
    350c:	98 36       	cpi	r25, 0x68	; 104
    350e:	49 f4       	brne	.+18     	; 0x3522 <vfprintf+0x122>
    3510:	f2 01       	movw	r30, r4
    3512:	23 fd       	sbrc	r18, 3
    3514:	95 91       	lpm	r25, Z+
    3516:	23 ff       	sbrs	r18, 3
    3518:	91 91       	ld	r25, Z+
    351a:	2f 01       	movw	r4, r30
    351c:	99 23       	and	r25, r25
    351e:	09 f0       	breq	.+2      	; 0x3522 <vfprintf+0x122>
    3520:	b8 cf       	rjmp	.-144    	; 0x3492 <vfprintf+0x92>
    3522:	89 2f       	mov	r24, r25
    3524:	85 54       	subi	r24, 0x45	; 69
    3526:	83 30       	cpi	r24, 0x03	; 3
    3528:	18 f0       	brcs	.+6      	; 0x3530 <vfprintf+0x130>
    352a:	80 52       	subi	r24, 0x20	; 32
    352c:	83 30       	cpi	r24, 0x03	; 3
    352e:	38 f4       	brcc	.+14     	; 0x353e <vfprintf+0x13e>
    3530:	44 e0       	ldi	r20, 0x04	; 4
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	a4 0e       	add	r10, r20
    3536:	b5 1e       	adc	r11, r21
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	59 83       	std	Y+1, r21	; 0x01
    353c:	0f c0       	rjmp	.+30     	; 0x355c <vfprintf+0x15c>
    353e:	93 36       	cpi	r25, 0x63	; 99
    3540:	31 f0       	breq	.+12     	; 0x354e <vfprintf+0x14e>
    3542:	93 37       	cpi	r25, 0x73	; 115
    3544:	79 f0       	breq	.+30     	; 0x3564 <vfprintf+0x164>
    3546:	93 35       	cpi	r25, 0x53	; 83
    3548:	09 f0       	breq	.+2      	; 0x354c <vfprintf+0x14c>
    354a:	56 c0       	rjmp	.+172    	; 0x35f8 <vfprintf+0x1f8>
    354c:	20 c0       	rjmp	.+64     	; 0x358e <vfprintf+0x18e>
    354e:	f5 01       	movw	r30, r10
    3550:	80 81       	ld	r24, Z
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	42 e0       	ldi	r20, 0x02	; 2
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	a4 0e       	add	r10, r20
    355a:	b5 1e       	adc	r11, r21
    355c:	61 01       	movw	r12, r2
    355e:	01 e0       	ldi	r16, 0x01	; 1
    3560:	10 e0       	ldi	r17, 0x00	; 0
    3562:	12 c0       	rjmp	.+36     	; 0x3588 <vfprintf+0x188>
    3564:	f5 01       	movw	r30, r10
    3566:	c0 80       	ld	r12, Z
    3568:	d1 80       	ldd	r13, Z+1	; 0x01
    356a:	f6 fc       	sbrc	r15, 6
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <vfprintf+0x174>
    356e:	6f ef       	ldi	r22, 0xFF	; 255
    3570:	7f ef       	ldi	r23, 0xFF	; 255
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <vfprintf+0x178>
    3574:	69 2d       	mov	r22, r9
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	42 e0       	ldi	r20, 0x02	; 2
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	a4 0e       	add	r10, r20
    357e:	b5 1e       	adc	r11, r21
    3580:	c6 01       	movw	r24, r12
    3582:	0e 94 11 1c 	call	0x3822	; 0x3822 <strnlen>
    3586:	8c 01       	movw	r16, r24
    3588:	5f e7       	ldi	r21, 0x7F	; 127
    358a:	f5 22       	and	r15, r21
    358c:	14 c0       	rjmp	.+40     	; 0x35b6 <vfprintf+0x1b6>
    358e:	f5 01       	movw	r30, r10
    3590:	c0 80       	ld	r12, Z
    3592:	d1 80       	ldd	r13, Z+1	; 0x01
    3594:	f6 fc       	sbrc	r15, 6
    3596:	03 c0       	rjmp	.+6      	; 0x359e <vfprintf+0x19e>
    3598:	6f ef       	ldi	r22, 0xFF	; 255
    359a:	7f ef       	ldi	r23, 0xFF	; 255
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <vfprintf+0x1a2>
    359e:	69 2d       	mov	r22, r9
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	42 e0       	ldi	r20, 0x02	; 2
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	a4 0e       	add	r10, r20
    35a8:	b5 1e       	adc	r11, r21
    35aa:	c6 01       	movw	r24, r12
    35ac:	0e 94 06 1c 	call	0x380c	; 0x380c <strnlen_P>
    35b0:	8c 01       	movw	r16, r24
    35b2:	50 e8       	ldi	r21, 0x80	; 128
    35b4:	f5 2a       	or	r15, r21
    35b6:	f3 fe       	sbrs	r15, 3
    35b8:	07 c0       	rjmp	.+14     	; 0x35c8 <vfprintf+0x1c8>
    35ba:	1a c0       	rjmp	.+52     	; 0x35f0 <vfprintf+0x1f0>
    35bc:	80 e2       	ldi	r24, 0x20	; 32
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	b3 01       	movw	r22, r6
    35c2:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    35c6:	ea 94       	dec	r14
    35c8:	8e 2d       	mov	r24, r14
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	08 17       	cp	r16, r24
    35ce:	19 07       	cpc	r17, r25
    35d0:	a8 f3       	brcs	.-22     	; 0x35bc <vfprintf+0x1bc>
    35d2:	0e c0       	rjmp	.+28     	; 0x35f0 <vfprintf+0x1f0>
    35d4:	f6 01       	movw	r30, r12
    35d6:	f7 fc       	sbrc	r15, 7
    35d8:	85 91       	lpm	r24, Z+
    35da:	f7 fe       	sbrs	r15, 7
    35dc:	81 91       	ld	r24, Z+
    35de:	6f 01       	movw	r12, r30
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	b3 01       	movw	r22, r6
    35e4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    35e8:	e1 10       	cpse	r14, r1
    35ea:	ea 94       	dec	r14
    35ec:	01 50       	subi	r16, 0x01	; 1
    35ee:	10 40       	sbci	r17, 0x00	; 0
    35f0:	01 15       	cp	r16, r1
    35f2:	11 05       	cpc	r17, r1
    35f4:	79 f7       	brne	.-34     	; 0x35d4 <vfprintf+0x1d4>
    35f6:	ea c0       	rjmp	.+468    	; 0x37cc <vfprintf+0x3cc>
    35f8:	94 36       	cpi	r25, 0x64	; 100
    35fa:	11 f0       	breq	.+4      	; 0x3600 <vfprintf+0x200>
    35fc:	99 36       	cpi	r25, 0x69	; 105
    35fe:	69 f5       	brne	.+90     	; 0x365a <vfprintf+0x25a>
    3600:	f7 fe       	sbrs	r15, 7
    3602:	08 c0       	rjmp	.+16     	; 0x3614 <vfprintf+0x214>
    3604:	f5 01       	movw	r30, r10
    3606:	20 81       	ld	r18, Z
    3608:	31 81       	ldd	r19, Z+1	; 0x01
    360a:	42 81       	ldd	r20, Z+2	; 0x02
    360c:	53 81       	ldd	r21, Z+3	; 0x03
    360e:	84 e0       	ldi	r24, 0x04	; 4
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0a c0       	rjmp	.+20     	; 0x3628 <vfprintf+0x228>
    3614:	f5 01       	movw	r30, r10
    3616:	80 81       	ld	r24, Z
    3618:	91 81       	ldd	r25, Z+1	; 0x01
    361a:	9c 01       	movw	r18, r24
    361c:	44 27       	eor	r20, r20
    361e:	37 fd       	sbrc	r19, 7
    3620:	40 95       	com	r20
    3622:	54 2f       	mov	r21, r20
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a8 0e       	add	r10, r24
    362a:	b9 1e       	adc	r11, r25
    362c:	9f e6       	ldi	r25, 0x6F	; 111
    362e:	f9 22       	and	r15, r25
    3630:	57 ff       	sbrs	r21, 7
    3632:	09 c0       	rjmp	.+18     	; 0x3646 <vfprintf+0x246>
    3634:	50 95       	com	r21
    3636:	40 95       	com	r20
    3638:	30 95       	com	r19
    363a:	21 95       	neg	r18
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	4f 4f       	sbci	r20, 0xFF	; 255
    3640:	5f 4f       	sbci	r21, 0xFF	; 255
    3642:	e0 e8       	ldi	r30, 0x80	; 128
    3644:	fe 2a       	or	r15, r30
    3646:	ca 01       	movw	r24, r20
    3648:	b9 01       	movw	r22, r18
    364a:	a1 01       	movw	r20, r2
    364c:	2a e0       	ldi	r18, 0x0A	; 10
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	0e 94 48 1c 	call	0x3890	; 0x3890 <__ultoa_invert>
    3654:	d8 2e       	mov	r13, r24
    3656:	d2 18       	sub	r13, r2
    3658:	40 c0       	rjmp	.+128    	; 0x36da <vfprintf+0x2da>
    365a:	95 37       	cpi	r25, 0x75	; 117
    365c:	29 f4       	brne	.+10     	; 0x3668 <vfprintf+0x268>
    365e:	1f 2d       	mov	r17, r15
    3660:	1f 7e       	andi	r17, 0xEF	; 239
    3662:	2a e0       	ldi	r18, 0x0A	; 10
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	1d c0       	rjmp	.+58     	; 0x36a2 <vfprintf+0x2a2>
    3668:	1f 2d       	mov	r17, r15
    366a:	19 7f       	andi	r17, 0xF9	; 249
    366c:	9f 36       	cpi	r25, 0x6F	; 111
    366e:	61 f0       	breq	.+24     	; 0x3688 <vfprintf+0x288>
    3670:	90 37       	cpi	r25, 0x70	; 112
    3672:	20 f4       	brcc	.+8      	; 0x367c <vfprintf+0x27c>
    3674:	98 35       	cpi	r25, 0x58	; 88
    3676:	09 f0       	breq	.+2      	; 0x367a <vfprintf+0x27a>
    3678:	ac c0       	rjmp	.+344    	; 0x37d2 <vfprintf+0x3d2>
    367a:	0f c0       	rjmp	.+30     	; 0x369a <vfprintf+0x29a>
    367c:	90 37       	cpi	r25, 0x70	; 112
    367e:	39 f0       	breq	.+14     	; 0x368e <vfprintf+0x28e>
    3680:	98 37       	cpi	r25, 0x78	; 120
    3682:	09 f0       	breq	.+2      	; 0x3686 <vfprintf+0x286>
    3684:	a6 c0       	rjmp	.+332    	; 0x37d2 <vfprintf+0x3d2>
    3686:	04 c0       	rjmp	.+8      	; 0x3690 <vfprintf+0x290>
    3688:	28 e0       	ldi	r18, 0x08	; 8
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	0a c0       	rjmp	.+20     	; 0x36a2 <vfprintf+0x2a2>
    368e:	10 61       	ori	r17, 0x10	; 16
    3690:	14 fd       	sbrc	r17, 4
    3692:	14 60       	ori	r17, 0x04	; 4
    3694:	20 e1       	ldi	r18, 0x10	; 16
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	04 c0       	rjmp	.+8      	; 0x36a2 <vfprintf+0x2a2>
    369a:	14 fd       	sbrc	r17, 4
    369c:	16 60       	ori	r17, 0x06	; 6
    369e:	20 e1       	ldi	r18, 0x10	; 16
    36a0:	32 e0       	ldi	r19, 0x02	; 2
    36a2:	17 ff       	sbrs	r17, 7
    36a4:	08 c0       	rjmp	.+16     	; 0x36b6 <vfprintf+0x2b6>
    36a6:	f5 01       	movw	r30, r10
    36a8:	60 81       	ld	r22, Z
    36aa:	71 81       	ldd	r23, Z+1	; 0x01
    36ac:	82 81       	ldd	r24, Z+2	; 0x02
    36ae:	93 81       	ldd	r25, Z+3	; 0x03
    36b0:	44 e0       	ldi	r20, 0x04	; 4
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	08 c0       	rjmp	.+16     	; 0x36c6 <vfprintf+0x2c6>
    36b6:	f5 01       	movw	r30, r10
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	bc 01       	movw	r22, r24
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	42 e0       	ldi	r20, 0x02	; 2
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	a4 0e       	add	r10, r20
    36c8:	b5 1e       	adc	r11, r21
    36ca:	a1 01       	movw	r20, r2
    36cc:	0e 94 48 1c 	call	0x3890	; 0x3890 <__ultoa_invert>
    36d0:	d8 2e       	mov	r13, r24
    36d2:	d2 18       	sub	r13, r2
    36d4:	8f e7       	ldi	r24, 0x7F	; 127
    36d6:	f8 2e       	mov	r15, r24
    36d8:	f1 22       	and	r15, r17
    36da:	f6 fe       	sbrs	r15, 6
    36dc:	0b c0       	rjmp	.+22     	; 0x36f4 <vfprintf+0x2f4>
    36de:	5e ef       	ldi	r21, 0xFE	; 254
    36e0:	f5 22       	and	r15, r21
    36e2:	d9 14       	cp	r13, r9
    36e4:	38 f4       	brcc	.+14     	; 0x36f4 <vfprintf+0x2f4>
    36e6:	f4 fe       	sbrs	r15, 4
    36e8:	07 c0       	rjmp	.+14     	; 0x36f8 <vfprintf+0x2f8>
    36ea:	f2 fc       	sbrc	r15, 2
    36ec:	05 c0       	rjmp	.+10     	; 0x36f8 <vfprintf+0x2f8>
    36ee:	8f ee       	ldi	r24, 0xEF	; 239
    36f0:	f8 22       	and	r15, r24
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <vfprintf+0x2f8>
    36f4:	1d 2d       	mov	r17, r13
    36f6:	01 c0       	rjmp	.+2      	; 0x36fa <vfprintf+0x2fa>
    36f8:	19 2d       	mov	r17, r9
    36fa:	f4 fe       	sbrs	r15, 4
    36fc:	0d c0       	rjmp	.+26     	; 0x3718 <vfprintf+0x318>
    36fe:	fe 01       	movw	r30, r28
    3700:	ed 0d       	add	r30, r13
    3702:	f1 1d       	adc	r31, r1
    3704:	80 81       	ld	r24, Z
    3706:	80 33       	cpi	r24, 0x30	; 48
    3708:	19 f4       	brne	.+6      	; 0x3710 <vfprintf+0x310>
    370a:	99 ee       	ldi	r25, 0xE9	; 233
    370c:	f9 22       	and	r15, r25
    370e:	08 c0       	rjmp	.+16     	; 0x3720 <vfprintf+0x320>
    3710:	1f 5f       	subi	r17, 0xFF	; 255
    3712:	f2 fe       	sbrs	r15, 2
    3714:	05 c0       	rjmp	.+10     	; 0x3720 <vfprintf+0x320>
    3716:	03 c0       	rjmp	.+6      	; 0x371e <vfprintf+0x31e>
    3718:	8f 2d       	mov	r24, r15
    371a:	86 78       	andi	r24, 0x86	; 134
    371c:	09 f0       	breq	.+2      	; 0x3720 <vfprintf+0x320>
    371e:	1f 5f       	subi	r17, 0xFF	; 255
    3720:	0f 2d       	mov	r16, r15
    3722:	f3 fc       	sbrc	r15, 3
    3724:	14 c0       	rjmp	.+40     	; 0x374e <vfprintf+0x34e>
    3726:	f0 fe       	sbrs	r15, 0
    3728:	0f c0       	rjmp	.+30     	; 0x3748 <vfprintf+0x348>
    372a:	1e 15       	cp	r17, r14
    372c:	10 f0       	brcs	.+4      	; 0x3732 <vfprintf+0x332>
    372e:	9d 2c       	mov	r9, r13
    3730:	0b c0       	rjmp	.+22     	; 0x3748 <vfprintf+0x348>
    3732:	9d 2c       	mov	r9, r13
    3734:	9e 0c       	add	r9, r14
    3736:	91 1a       	sub	r9, r17
    3738:	1e 2d       	mov	r17, r14
    373a:	06 c0       	rjmp	.+12     	; 0x3748 <vfprintf+0x348>
    373c:	80 e2       	ldi	r24, 0x20	; 32
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	b3 01       	movw	r22, r6
    3742:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    3746:	1f 5f       	subi	r17, 0xFF	; 255
    3748:	1e 15       	cp	r17, r14
    374a:	c0 f3       	brcs	.-16     	; 0x373c <vfprintf+0x33c>
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <vfprintf+0x356>
    374e:	1e 15       	cp	r17, r14
    3750:	10 f4       	brcc	.+4      	; 0x3756 <vfprintf+0x356>
    3752:	e1 1a       	sub	r14, r17
    3754:	01 c0       	rjmp	.+2      	; 0x3758 <vfprintf+0x358>
    3756:	ee 24       	eor	r14, r14
    3758:	04 ff       	sbrs	r16, 4
    375a:	0f c0       	rjmp	.+30     	; 0x377a <vfprintf+0x37a>
    375c:	80 e3       	ldi	r24, 0x30	; 48
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	b3 01       	movw	r22, r6
    3762:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    3766:	02 ff       	sbrs	r16, 2
    3768:	1d c0       	rjmp	.+58     	; 0x37a4 <vfprintf+0x3a4>
    376a:	01 fd       	sbrc	r16, 1
    376c:	03 c0       	rjmp	.+6      	; 0x3774 <vfprintf+0x374>
    376e:	88 e7       	ldi	r24, 0x78	; 120
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e c0       	rjmp	.+28     	; 0x3790 <vfprintf+0x390>
    3774:	88 e5       	ldi	r24, 0x58	; 88
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0b c0       	rjmp	.+22     	; 0x3790 <vfprintf+0x390>
    377a:	80 2f       	mov	r24, r16
    377c:	86 78       	andi	r24, 0x86	; 134
    377e:	91 f0       	breq	.+36     	; 0x37a4 <vfprintf+0x3a4>
    3780:	01 ff       	sbrs	r16, 1
    3782:	02 c0       	rjmp	.+4      	; 0x3788 <vfprintf+0x388>
    3784:	8b e2       	ldi	r24, 0x2B	; 43
    3786:	01 c0       	rjmp	.+2      	; 0x378a <vfprintf+0x38a>
    3788:	80 e2       	ldi	r24, 0x20	; 32
    378a:	f7 fc       	sbrc	r15, 7
    378c:	8d e2       	ldi	r24, 0x2D	; 45
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	b3 01       	movw	r22, r6
    3792:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    3796:	06 c0       	rjmp	.+12     	; 0x37a4 <vfprintf+0x3a4>
    3798:	80 e3       	ldi	r24, 0x30	; 48
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	b3 01       	movw	r22, r6
    379e:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    37a2:	9a 94       	dec	r9
    37a4:	d9 14       	cp	r13, r9
    37a6:	c0 f3       	brcs	.-16     	; 0x3798 <vfprintf+0x398>
    37a8:	da 94       	dec	r13
    37aa:	f1 01       	movw	r30, r2
    37ac:	ed 0d       	add	r30, r13
    37ae:	f1 1d       	adc	r31, r1
    37b0:	80 81       	ld	r24, Z
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	b3 01       	movw	r22, r6
    37b6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    37ba:	dd 20       	and	r13, r13
    37bc:	a9 f7       	brne	.-22     	; 0x37a8 <vfprintf+0x3a8>
    37be:	06 c0       	rjmp	.+12     	; 0x37cc <vfprintf+0x3cc>
    37c0:	80 e2       	ldi	r24, 0x20	; 32
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	b3 01       	movw	r22, r6
    37c6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fputc>
    37ca:	ea 94       	dec	r14
    37cc:	ee 20       	and	r14, r14
    37ce:	c1 f7       	brne	.-16     	; 0x37c0 <vfprintf+0x3c0>
    37d0:	43 ce       	rjmp	.-890    	; 0x3458 <vfprintf+0x58>
    37d2:	f3 01       	movw	r30, r6
    37d4:	66 81       	ldd	r22, Z+6	; 0x06
    37d6:	77 81       	ldd	r23, Z+7	; 0x07
    37d8:	cb 01       	movw	r24, r22
    37da:	2b 96       	adiw	r28, 0x0b	; 11
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	ff 90       	pop	r15
    37f0:	ef 90       	pop	r14
    37f2:	df 90       	pop	r13
    37f4:	cf 90       	pop	r12
    37f6:	bf 90       	pop	r11
    37f8:	af 90       	pop	r10
    37fa:	9f 90       	pop	r9
    37fc:	8f 90       	pop	r8
    37fe:	7f 90       	pop	r7
    3800:	6f 90       	pop	r6
    3802:	5f 90       	pop	r5
    3804:	4f 90       	pop	r4
    3806:	3f 90       	pop	r3
    3808:	2f 90       	pop	r2
    380a:	08 95       	ret

0000380c <strnlen_P>:
    380c:	fc 01       	movw	r30, r24
    380e:	05 90       	lpm	r0, Z+
    3810:	61 50       	subi	r22, 0x01	; 1
    3812:	70 40       	sbci	r23, 0x00	; 0
    3814:	01 10       	cpse	r0, r1
    3816:	d8 f7       	brcc	.-10     	; 0x380e <strnlen_P+0x2>
    3818:	80 95       	com	r24
    381a:	90 95       	com	r25
    381c:	8e 0f       	add	r24, r30
    381e:	9f 1f       	adc	r25, r31
    3820:	08 95       	ret

00003822 <strnlen>:
    3822:	fc 01       	movw	r30, r24
    3824:	61 50       	subi	r22, 0x01	; 1
    3826:	70 40       	sbci	r23, 0x00	; 0
    3828:	01 90       	ld	r0, Z+
    382a:	01 10       	cpse	r0, r1
    382c:	d8 f7       	brcc	.-10     	; 0x3824 <strnlen+0x2>
    382e:	80 95       	com	r24
    3830:	90 95       	com	r25
    3832:	8e 0f       	add	r24, r30
    3834:	9f 1f       	adc	r25, r31
    3836:	08 95       	ret

00003838 <fputc>:
    3838:	0f 93       	push	r16
    383a:	1f 93       	push	r17
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	8c 01       	movw	r16, r24
    3842:	eb 01       	movw	r28, r22
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	81 ff       	sbrs	r24, 1
    3848:	1b c0       	rjmp	.+54     	; 0x3880 <fputc+0x48>
    384a:	82 ff       	sbrs	r24, 2
    384c:	0d c0       	rjmp	.+26     	; 0x3868 <fputc+0x30>
    384e:	2e 81       	ldd	r18, Y+6	; 0x06
    3850:	3f 81       	ldd	r19, Y+7	; 0x07
    3852:	8c 81       	ldd	r24, Y+4	; 0x04
    3854:	9d 81       	ldd	r25, Y+5	; 0x05
    3856:	28 17       	cp	r18, r24
    3858:	39 07       	cpc	r19, r25
    385a:	64 f4       	brge	.+24     	; 0x3874 <fputc+0x3c>
    385c:	e8 81       	ld	r30, Y
    385e:	f9 81       	ldd	r31, Y+1	; 0x01
    3860:	01 93       	st	Z+, r16
    3862:	f9 83       	std	Y+1, r31	; 0x01
    3864:	e8 83       	st	Y, r30
    3866:	06 c0       	rjmp	.+12     	; 0x3874 <fputc+0x3c>
    3868:	e8 85       	ldd	r30, Y+8	; 0x08
    386a:	f9 85       	ldd	r31, Y+9	; 0x09
    386c:	80 2f       	mov	r24, r16
    386e:	09 95       	icall
    3870:	89 2b       	or	r24, r25
    3872:	31 f4       	brne	.+12     	; 0x3880 <fputc+0x48>
    3874:	8e 81       	ldd	r24, Y+6	; 0x06
    3876:	9f 81       	ldd	r25, Y+7	; 0x07
    3878:	01 96       	adiw	r24, 0x01	; 1
    387a:	9f 83       	std	Y+7, r25	; 0x07
    387c:	8e 83       	std	Y+6, r24	; 0x06
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <fputc+0x4c>
    3880:	0f ef       	ldi	r16, 0xFF	; 255
    3882:	1f ef       	ldi	r17, 0xFF	; 255
    3884:	c8 01       	movw	r24, r16
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	08 95       	ret

00003890 <__ultoa_invert>:
    3890:	fa 01       	movw	r30, r20
    3892:	aa 27       	eor	r26, r26
    3894:	28 30       	cpi	r18, 0x08	; 8
    3896:	51 f1       	breq	.+84     	; 0x38ec <__ultoa_invert+0x5c>
    3898:	20 31       	cpi	r18, 0x10	; 16
    389a:	81 f1       	breq	.+96     	; 0x38fc <__ultoa_invert+0x6c>
    389c:	e8 94       	clt
    389e:	6f 93       	push	r22
    38a0:	6e 7f       	andi	r22, 0xFE	; 254
    38a2:	6e 5f       	subi	r22, 0xFE	; 254
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
    38a6:	8f 4f       	sbci	r24, 0xFF	; 255
    38a8:	9f 4f       	sbci	r25, 0xFF	; 255
    38aa:	af 4f       	sbci	r26, 0xFF	; 255
    38ac:	b1 e0       	ldi	r27, 0x01	; 1
    38ae:	3e d0       	rcall	.+124    	; 0x392c <__ultoa_invert+0x9c>
    38b0:	b4 e0       	ldi	r27, 0x04	; 4
    38b2:	3c d0       	rcall	.+120    	; 0x392c <__ultoa_invert+0x9c>
    38b4:	67 0f       	add	r22, r23
    38b6:	78 1f       	adc	r23, r24
    38b8:	89 1f       	adc	r24, r25
    38ba:	9a 1f       	adc	r25, r26
    38bc:	a1 1d       	adc	r26, r1
    38be:	68 0f       	add	r22, r24
    38c0:	79 1f       	adc	r23, r25
    38c2:	8a 1f       	adc	r24, r26
    38c4:	91 1d       	adc	r25, r1
    38c6:	a1 1d       	adc	r26, r1
    38c8:	6a 0f       	add	r22, r26
    38ca:	71 1d       	adc	r23, r1
    38cc:	81 1d       	adc	r24, r1
    38ce:	91 1d       	adc	r25, r1
    38d0:	a1 1d       	adc	r26, r1
    38d2:	20 d0       	rcall	.+64     	; 0x3914 <__ultoa_invert+0x84>
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <__ultoa_invert+0x48>
    38d6:	68 94       	set
    38d8:	3f 91       	pop	r19
    38da:	2a e0       	ldi	r18, 0x0A	; 10
    38dc:	26 9f       	mul	r18, r22
    38de:	11 24       	eor	r1, r1
    38e0:	30 19       	sub	r19, r0
    38e2:	30 5d       	subi	r19, 0xD0	; 208
    38e4:	31 93       	st	Z+, r19
    38e6:	de f6       	brtc	.-74     	; 0x389e <__ultoa_invert+0xe>
    38e8:	cf 01       	movw	r24, r30
    38ea:	08 95       	ret
    38ec:	46 2f       	mov	r20, r22
    38ee:	47 70       	andi	r20, 0x07	; 7
    38f0:	40 5d       	subi	r20, 0xD0	; 208
    38f2:	41 93       	st	Z+, r20
    38f4:	b3 e0       	ldi	r27, 0x03	; 3
    38f6:	0f d0       	rcall	.+30     	; 0x3916 <__ultoa_invert+0x86>
    38f8:	c9 f7       	brne	.-14     	; 0x38ec <__ultoa_invert+0x5c>
    38fa:	f6 cf       	rjmp	.-20     	; 0x38e8 <__ultoa_invert+0x58>
    38fc:	46 2f       	mov	r20, r22
    38fe:	4f 70       	andi	r20, 0x0F	; 15
    3900:	40 5d       	subi	r20, 0xD0	; 208
    3902:	4a 33       	cpi	r20, 0x3A	; 58
    3904:	18 f0       	brcs	.+6      	; 0x390c <__ultoa_invert+0x7c>
    3906:	49 5d       	subi	r20, 0xD9	; 217
    3908:	31 fd       	sbrc	r19, 1
    390a:	40 52       	subi	r20, 0x20	; 32
    390c:	41 93       	st	Z+, r20
    390e:	02 d0       	rcall	.+4      	; 0x3914 <__ultoa_invert+0x84>
    3910:	a9 f7       	brne	.-22     	; 0x38fc <__ultoa_invert+0x6c>
    3912:	ea cf       	rjmp	.-44     	; 0x38e8 <__ultoa_invert+0x58>
    3914:	b4 e0       	ldi	r27, 0x04	; 4
    3916:	a6 95       	lsr	r26
    3918:	97 95       	ror	r25
    391a:	87 95       	ror	r24
    391c:	77 95       	ror	r23
    391e:	67 95       	ror	r22
    3920:	ba 95       	dec	r27
    3922:	c9 f7       	brne	.-14     	; 0x3916 <__ultoa_invert+0x86>
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	61 05       	cpc	r22, r1
    3928:	71 05       	cpc	r23, r1
    392a:	08 95       	ret
    392c:	9b 01       	movw	r18, r22
    392e:	ac 01       	movw	r20, r24
    3930:	0a 2e       	mov	r0, r26
    3932:	06 94       	lsr	r0
    3934:	57 95       	ror	r21
    3936:	47 95       	ror	r20
    3938:	37 95       	ror	r19
    393a:	27 95       	ror	r18
    393c:	ba 95       	dec	r27
    393e:	c9 f7       	brne	.-14     	; 0x3932 <__ultoa_invert+0xa2>
    3940:	62 0f       	add	r22, r18
    3942:	73 1f       	adc	r23, r19
    3944:	84 1f       	adc	r24, r20
    3946:	95 1f       	adc	r25, r21
    3948:	a0 1d       	adc	r26, r0
    394a:	08 95       	ret

0000394c <_exit>:
    394c:	f8 94       	cli

0000394e <__stop_program>:
    394e:	ff cf       	rjmp	.-2      	; 0x394e <__stop_program>
