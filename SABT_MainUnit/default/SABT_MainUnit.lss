
SABT_MainUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00003808  0000389c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a5  00800344  00800344  00003ae0  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00003041  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f47  00000000  00000000  00006ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d16  00000000  00000000  0000bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b20  00000000  00000000  0000c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000f420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001125  00000000  00000000  0000fa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c1a  00000000  00000000  00010bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000127cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__ctors_end>
       4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
       c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      18:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      1c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      20:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      24:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      28:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      30:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      34:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_13>
      38:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      3c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      40:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      44:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      50:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_20>
      54:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      58:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      5c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      60:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      64:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      68:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      6c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      70:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_28>
      74:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      78:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      7c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      80:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      84:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      88:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      8c:	96 17       	cp	r25, r22
      8e:	99 17       	cp	r25, r25
      90:	9c 17       	cp	r25, r28
      92:	9f 17       	cp	r25, r31
      94:	a2 17       	cp	r26, r18
      96:	a5 17       	cp	r26, r21
      98:	a8 17       	cp	r26, r24
      9a:	ab 17       	cp	r26, r27
      9c:	ae 17       	cp	r26, r30
      9e:	b1 17       	cp	r27, r17
      a0:	b4 17       	cp	r27, r20
      a2:	b7 17       	cp	r27, r23
      a4:	ba 17       	cp	r27, r26
      a6:	bd 17       	cp	r27, r29
      a8:	c0 17       	cp	r28, r16
      aa:	c3 17       	cp	r28, r19
      ac:	c6 17       	cp	r28, r22
      ae:	c9 17       	cp	r28, r25
      b0:	cc 17       	cp	r28, r28
      b2:	cf 17       	cp	r28, r31
      b4:	d2 17       	cp	r29, r18
      b6:	d5 17       	cp	r29, r21
      b8:	d8 17       	cp	r29, r24
      ba:	db 17       	cp	r29, r27
      bc:	de 17       	cp	r29, r30
      be:	e1 17       	cp	r30, r17

000000c0 <__c.1667>:
      c0:	4d 6f 64 65 20 66 69 6c 65 20 66 6f 75 6e 64 00     Mode file found.

000000d0 <__c.1665>:
      d0:	4d 6f 64 65 20 66 69 6c 65 20 6e 6f 74 20 66 6f     Mode file not fo
      e0:	75 6e 64 00                                         und.

000000e4 <__c.1663>:
      e4:	53 41 42 54 20 74 65 73 74 69 6e 67 2e 2e 2e 00     SABT testing....

000000f4 <__c.2226>:
      f4:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 7a 69     Error initializi
     104:	6e 67 20 56 53 31 30 35 33 20 2d 20 43 4f 44 45     ng VS1053 - CODE
     114:	20 00                                                .

00000116 <__c.2224>:
     116:	56 53 31 30 35 33 20 4d 50 33 20 63 68 69 70 20     VS1053 MP3 chip 
     126:	73 75 63 65 73 73 66 75 6c 6c 79 20 69 6e 69 74     sucessfully init
     136:	69 61 6c 69 7a 65 64 00                             ialized.

0000013e <__c.2222>:
     13e:	46 41 54 33 32 20 66 69 6c 65 20 73 79 73 74 65     FAT32 file syste
     14e:	6d 20 64 65 74 65 63 74 65 64 2e 2e 2e 00           m detected....

0000015c <__c.2220>:
     15c:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000016d <__c.2218>:
     16d:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     17d:	44 65 74 65 63 74 65 64 00                          Detected.

00000186 <__c.2215>:
     186:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     196:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1a6:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001b0 <__c.2212>:
     1b0:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     1c0:	72 64 20 44 65 74 65 63 74 65 64 00                 rd Detected.

000001cc <__c.2208>:
     1cc:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1dc:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     1ec:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001f6 <__c.2204>:
     1f6:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     206:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000213 <__c.2202>:
     213:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     223:	63 74 65 64 2e 2e 00                                cted...

0000022a <__c.2004>:
     22a:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     23a:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     24a:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000254 <__c.1908>:
     254:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     264:	2e 2e 00                                            ...

00000267 <__c.1870>:
     267:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     277:	20 63 6c 75 73 74 65 72 00                           cluster.

00000280 <__c.1823>:
     280:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     290:	20 63 6c 75 73 74 65 72 00                           cluster.

00000299 <__c.1782>:
     299:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2a9:	20 63 6c 75 73 74 65 72 00                           cluster.

000002b2 <__c.1731>:
     2b2:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2c2:	20 63 6c 75 73 74 65 72 00                           cluster.

000002cb <__c.1723>:
     2cb:	52 4f 4f 54 00                                      ROOT.

000002d0 <__c.1721>:
     2d0:	44 49 52 00                                         DIR.

000002d4 <__c.1719>:
     2d4:	20 20 20 00                                            .

000002d8 <__c.1717>:
     2d8:	46 49 4c 45 00                                      FILE.

000002dd <__c.1715>:
     2dd:	20 20 20 00                                            .

000002e1 <__c.1709>:
     2e1:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000002ef <__c.1707>:
     2ef:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000002fa <__c.1702>:
     2fa:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     30a:	69 73 74 21 00                                      ist!.

0000030f <__c.1769>:
     30f:	56 6f 6c 20 44 4f 57 4e 20 70 72 65 73 73 65 64     Vol DOWN pressed
	...

00000320 <__c.1766>:
     320:	56 6f 6c 20 55 50 20 70 72 65 73 73 65 64 00        Vol UP pressed.

0000032f <__c.1763>:
     32f:	4d 6f 64 65 20 32 20 70 72 65 73 73 65 64 00        Mode 2 pressed.

0000033e <__c.1760>:
     33e:	4d 6f 64 65 20 31 20 70 72 65 73 73 65 64 00        Mode 1 pressed.

0000034d <__c.1757>:
     34d:	45 6e 74 65 72 20 32 20 70 72 65 73 73 65 64 00     Enter 2 pressed.

0000035d <__c.1754>:
     35d:	45 6e 74 65 72 20 31 20 70 72 65 73 73 65 64 00     Enter 1 pressed.

0000036d <__c.1721>:
     36d:	41 6e 61 6c 6f 67 20 49 6e 70 75 74 20 63 68 61     Analog Input cha
     37d:	6e 6e 65 6c 2c 4d 53 42 2c 4c 53 42 20 3a 00        nnel,MSB,LSB :.

0000038c <__c.1659>:
     38c:	41 6e 64 20 74 68 65 20 6d 6f 64 65 73 20 61 72     And the modes ar
     39c:	65 3b 20 00                                         e; .

000003a0 <__c.1657>:
     3a0:	4e 75 6d 62 65 72 20 6f 66 20 6d 6f 64 65 73 20     Number of modes 
     3b0:	73 65 6c 65 63 74 65 64 3a 20 00                    selected: .

000003bb <__c.1628>:
     3bb:	53 41 42 54 2d 46 41 49 4c 00                       SABT-FAIL.

000003c5 <__c.1626>:
     3c5:	53 41 42 54 2d 4f 4b 00                             SABT-OK.

000003cd <__c.1608>:
     3cd:	53 41 42 54 2d 76 32 2e 31 00 00                    SABT-v2.1..

000003d8 <__ctors_end>:
     3d8:	11 24       	eor	r1, r1
     3da:	1f be       	out	0x3f, r1	; 63
     3dc:	cf ef       	ldi	r28, 0xFF	; 255
     3de:	d0 e4       	ldi	r29, 0x40	; 64
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	cd bf       	out	0x3d, r28	; 61

000003e4 <__do_copy_data>:
     3e4:	13 e0       	ldi	r17, 0x03	; 3
     3e6:	a0 e0       	ldi	r26, 0x00	; 0
     3e8:	b1 e0       	ldi	r27, 0x01	; 1
     3ea:	e8 e0       	ldi	r30, 0x08	; 8
     3ec:	f8 e3       	ldi	r31, 0x38	; 56
     3ee:	00 e0       	ldi	r16, 0x00	; 0
     3f0:	0b bf       	out	0x3b, r16	; 59
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__do_copy_data+0x14>
     3f4:	07 90       	elpm	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	a4 34       	cpi	r26, 0x44	; 68
     3fa:	b1 07       	cpc	r27, r17
     3fc:	d9 f7       	brne	.-10     	; 0x3f4 <__do_copy_data+0x10>

000003fe <__do_clear_bss>:
     3fe:	15 e0       	ldi	r17, 0x05	; 5
     400:	a4 e4       	ldi	r26, 0x44	; 68
     402:	b3 e0       	ldi	r27, 0x03	; 3
     404:	01 c0       	rjmp	.+2      	; 0x408 <.do_clear_bss_start>

00000406 <.do_clear_bss_loop>:
     406:	1d 92       	st	X+, r1

00000408 <.do_clear_bss_start>:
     408:	a9 3e       	cpi	r26, 0xE9	; 233
     40a:	b1 07       	cpc	r27, r17
     40c:	e1 f7       	brne	.-8      	; 0x406 <.do_clear_bss_loop>
     40e:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
     412:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <_exit>

00000416 <__bad_interrupt>:
     416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041a <TimeRoutine>:
*/

void InitializeSystem(void);

void TimeRoutine(void){
	if(!LED_STAT){
     41a:	80 91 bb 05 	lds	r24, 0x05BB
     41e:	88 23       	and	r24, r24
     420:	39 f4       	brne	.+14     	; 0x430 <TimeRoutine+0x16>
		PORTD &= ~_BV(5);
     422:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~_BV(6);
     424:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~_BV(7);
     426:	5f 98       	cbi	0x0b, 7	; 11
		LED_STAT=true;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 bb 05 	sts	0x05BB, r24
     42e:	08 95       	ret
	}else{
		PORTD |= _BV(5);
     430:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= _BV(6);
     432:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD |= _BV(7);
     434:	5f 9a       	sbi	0x0b, 7	; 11
		LED_STAT=false;
     436:	10 92 bb 05 	sts	0x05BB, r1
     43a:	08 95       	ret

0000043c <__vector_13>:
		UI_RunMainOfCurrentMode();
	}
	return 1;
}

ISR(TIMER1_COMPA_vect){
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	8f 93       	push	r24
	TMR1_INT=true;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 6f 03 	sts	0x036F, r24
};
     44e:	8f 91       	pop	r24
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <__vector_28>:

ISR(USART1_RX_vect){
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	8f 93       	push	r24
	USART_Keypad_Received_Data=UDR1;
     466:	80 91 ce 00 	lds	r24, 0x00CE
     46a:	80 93 c9 05 	sts	0x05C9, r24
	USART_Keypad_DATA_RDY=true; 
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 53 03 	sts	0x0353, r24
};
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_20>:

ISR(USART0_RX_vect){
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	8f 93       	push	r24
//Temporarly using the PC as the UI
//	USART_Keypad_Received_Data=UDR0;
//	USART_Keypad_DATA_RDY=true; 
///*	Temporaraly disabled the PC communications since we are simulating the UI with PC
	USART_PC_Received_Data=UDR0;
     48c:	80 91 c6 00 	lds	r24, 0x00C6
     490:	80 93 b6 05 	sts	0x05B6, r24
	USART_PC_DATA_RDY=true;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 c5 05 	sts	0x05C5, r24
//*/
};
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <InitializeSystem>:



void InitializeSystem(void){
	//Initialize the system and interrupts
	TMR1_INT=false;
     4a6:	10 92 6f 03 	sts	0x036F, r1
	PORTA=0x00;
     4aa:	12 b8       	out	0x02, r1	; 2
	DDRA=0xFF;	
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	81 b9       	out	0x01, r24	; 1
	PORTA=0x00;	
     4b0:	12 b8       	out	0x02, r1	; 2

	DDRD |= _BV(5)|_BV(6)|_BV(7);
     4b2:	8a b1       	in	r24, 0x0a	; 10
     4b4:	80 6e       	ori	r24, 0xE0	; 224
     4b6:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A=0x00;
     4b8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x0D;
     4bc:	8d e0       	ldi	r24, 0x0D	; 13
     4be:	80 93 81 00 	sts	0x0081, r24
	OCR1A=780; //1s interval
     4c2:	8c e0       	ldi	r24, 0x0C	; 12
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	90 93 89 00 	sts	0x0089, r25
     4ca:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1<<OCIE1A); //Enable interrupt
     4ce:	80 91 6f 00 	lds	r24, 0x006F
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	80 93 6f 00 	sts	0x006F, r24

	init_USART_Keypad();
     4d8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <init_USART_Keypad>
	init_USART_PC();
     4dc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <init_USART_PC>
	SPI_Initialize();
     4e0:	0e 94 63 05 	call	0xac6	; 0xac6 <SPI_Initialize>
	sei();
     4e4:	78 94       	sei

	UI_Current_Mode=0;//No mode selected
     4e6:	10 92 9a 05 	sts	0x059A, r1
	TX_NEWLINE_PC;
     4ea:	8d e0       	ldi	r24, 0x0D	; 13
     4ec:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	USART_transmitStringToPCFromFlash (PSTR("SABT testing..."));
     4f6:	84 ee       	ldi	r24, 0xE4	; 228
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
	TX_NEWLINE_PC;
     4fe:	8d e0       	ldi	r24, 0x0D	; 13
     500:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
     504:	8a e0       	ldi	r24, 0x0A	; 10
     506:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>

	InitSDCard(true);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 96 0b 	call	0x172c	; 0x172c <InitSDCard>
	
	if(!UI_CheckModes())
     510:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UI_CheckModes>
     514:	88 23       	and	r24, r24
     516:	19 f4       	brne	.+6      	; 0x51e <InitializeSystem+0x78>
	{
		USART_transmitStringToPCFromFlash (PSTR("Mode file not found"));
     518:	80 ed       	ldi	r24, 0xD0	; 208
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <InitializeSystem+0x7c>
		TX_NEWLINE_PC;
	}
	else
	{
		USART_transmitStringToPCFromFlash (PSTR("Mode file found"));
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
		TX_NEWLINE_PC;
     526:	8d e0       	ldi	r24, 0x0D	; 13
     528:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
     52c:	8a e0       	ldi	r24, 0x0A	; 10
     52e:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	}
	RequestToPlayMP3file("INT.MP3");
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
}
     53a:	08 95       	ret

0000053c <main>:
		LED_STAT=false;
	}
}

int main(void){	
	InitializeSystem();
     53c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <InitializeSystem>

	//Display the files in the SD card
	//TX_NEWLINE_PC;
	//findFiles(GET_LIST,0);
	//TX_NEWLINE_PC;
	TX_NEWLINE_PC;
     540:	8d e0       	ldi	r24, 0x0D	; 13
     542:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
     546:	8a e0       	ldi	r24, 0x0A	; 10
     548:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	//USART_transmitStringToPCFromFlash (PSTR("Press a key and see it returns."));
	TX_NEWLINE_PC;
     54c:	8d e0       	ldi	r24, 0x0D	; 13
     54e:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	while(1){
		if(temp++>100){
     558:	80 91 44 03 	lds	r24, 0x0344
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	80 93 44 03 	sts	0x0344, r24
     562:	81 50       	subi	r24, 0x01	; 1
     564:	85 36       	cpi	r24, 0x65	; 101
     566:	10 f0       	brcs	.+4      	; 0x56c <main+0x30>
			temp=0;
     568:	10 92 44 03 	sts	0x0344, r1
		}

		if(TMR1_INT){
     56c:	80 91 6f 03 	lds	r24, 0x036F
     570:	88 23       	and	r24, r24
     572:	11 f0       	breq	.+4      	; 0x578 <main+0x3c>
			TMR1_INT=false;
     574:	10 92 6f 03 	sts	0x036F, r1
		//	TimeRoutine();
		}
		if(USART_Keypad_DATA_RDY){
     578:	80 91 53 03 	lds	r24, 0x0353
     57c:	88 23       	and	r24, r24
     57e:	11 f0       	breq	.+4      	; 0x584 <main+0x48>
			USART_Keypad_ReceiveAction();
     580:	0e 94 f6 02 	call	0x5ec	; 0x5ec <USART_Keypad_ReceiveAction>
		}
		if(USART_PC_DATA_RDY){
     584:	80 91 c5 05 	lds	r24, 0x05C5
     588:	88 23       	and	r24, r24
     58a:	11 f0       	breq	.+4      	; 0x590 <main+0x54>
			USART_PC_ReceiveAction();
     58c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <USART_PC_ReceiveAction>
				USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
				TX_NEWLINE_PC;
			}
			*/
		}
		if(USART_PC_Message_ready) //If a message ready from the PC, process it
     590:	80 91 4b 03 	lds	r24, 0x034B
     594:	88 23       	and	r24, r24
     596:	11 f0       	breq	.+4      	; 0x59c <main+0x60>
		{
			PC_parse_message();
     598:	0e 94 ae 18 	call	0x315c	; 0x315c <PC_parse_message>
		}
		if(USART_UI_Message_ready) //If a message ready from the user interface, process it
     59c:	80 91 99 03 	lds	r24, 0x0399
     5a0:	88 23       	and	r24, r24
     5a2:	19 f0       	breq	.+6      	; 0x5aa <main+0x6e>
		{
			UI_parse_message(false);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UI_parse_message>
		}
		if(UI_MP3_file_Pending)	//If the UI handler needs to play new file, play it (the main loop won't be called while playing another file, so don't worry)
     5aa:	80 91 4e 03 	lds	r24, 0x034E
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <main+0x7e>
		{
			PlayMP3file(fileName);
     5b2:	84 e5       	ldi	r24, 0x54	; 84
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	0e 94 be 12 	call	0x257c	; 0x257c <PlayMP3file>
		}
		UI_RunMainOfCurrentMode();
     5ba:	0e 94 20 14 	call	0x2840	; 0x2840 <UI_RunMainOfCurrentMode>
     5be:	cc cf       	rjmp	.-104    	; 0x558 <main+0x1c>

000005c0 <init_USART_Keypad>:
unsigned char USART_UI_receive_msgcnt;
unsigned char USART_UI_received_playload_len;

void init_USART_Keypad(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
     5c0:	e9 ec       	ldi	r30, 0xC9	; 201
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	10 82       	st	Z, r1
	UCSR1A = 0x00;
     5c6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 0x19; //set baud rate lo
     5d0:	89 e1       	ldi	r24, 0x19	; 25
     5d2:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0x00; //set baud rate hi 19,200 baud with 8MHz clock
     5d6:	10 92 cd 00 	sts	0x00CD, r1
	UCSR1B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     5da:	88 e9       	ldi	r24, 0x98	; 152
     5dc:	80 83       	st	Z, r24
 	USART_UI_length_reveived=false;
     5de:	10 92 d3 05 	sts	0x05D3, r1
	USART_UI_header_received=false;
     5e2:	10 92 d4 05 	sts	0x05D4, r1
	USART_UI_Message_ready=false;
     5e6:	10 92 99 03 	sts	0x0399, r1
}
     5ea:	08 95       	ret

000005ec <USART_Keypad_ReceiveAction>:

void USART_Keypad_ReceiveAction(void){
	USART_Keypad_DATA_RDY=false;
     5ec:	10 92 53 03 	sts	0x0353, r1

	if(!USART_UI_header_received)
     5f0:	80 91 d4 05 	lds	r24, 0x05D4
     5f4:	88 23       	and	r24, r24
     5f6:	d9 f4       	brne	.+54     	; 0x62e <USART_Keypad_ReceiveAction+0x42>
	{
		USART_UI_prefix[2]=USART_Keypad_Received_Data;
     5f8:	20 91 c9 05 	lds	r18, 0x05C9
     5fc:	20 93 d2 05 	sts	0x05D2, r18
		USART_UI_prefix[0]=USART_UI_prefix[1];
     600:	90 91 d1 05 	lds	r25, 0x05D1
     604:	90 93 d0 05 	sts	0x05D0, r25
		USART_UI_prefix[1]=USART_UI_prefix[2];
     608:	20 93 d1 05 	sts	0x05D1, r18
		if((USART_UI_prefix[0]=='U')&&(USART_UI_prefix[1]=='I'))
     60c:	95 35       	cpi	r25, 0x55	; 85
     60e:	f1 f5       	brne	.+124    	; 0x68c <USART_Keypad_ReceiveAction+0xa0>
     610:	29 34       	cpi	r18, 0x49	; 73
     612:	e1 f5       	brne	.+120    	; 0x68c <USART_Keypad_ReceiveAction+0xa0>
		{
			USART_UI_header_received=true;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 d4 05 	sts	0x05D4, r24
			USART_UI_ReceivedPacket[0]=USART_UI_prefix[0];
     61a:	90 93 9d 05 	sts	0x059D, r25
			USART_UI_ReceivedPacket[1]=USART_UI_prefix[1];
     61e:	20 93 9e 05 	sts	0x059E, r18
			USART_UI_receive_msgcnt=2;
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	80 93 cf 05 	sts	0x05CF, r24
			USART_UI_length_reveived=false;
     628:	10 92 d3 05 	sts	0x05D3, r1
     62c:	08 95       	ret
			//USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
			//USART_UI_length_reveived=true;
			//USART_UI_receive_msgcnt++;
		}
	}
	else if(!USART_UI_length_reveived)
     62e:	80 91 d3 05 	lds	r24, 0x05D3
     632:	90 91 cf 05 	lds	r25, 0x05CF
     636:	88 23       	and	r24, r24
     638:	a1 f4       	brne	.+40     	; 0x662 <USART_Keypad_ReceiveAction+0x76>
	{
		if(USART_UI_receive_msgcnt==2)
     63a:	92 30       	cpi	r25, 0x02	; 2
     63c:	79 f4       	brne	.+30     	; 0x65c <USART_Keypad_ReceiveAction+0x70>
		{
			USART_UI_received_playload_len=USART_Keypad_Received_Data;
     63e:	80 91 c9 05 	lds	r24, 0x05C9
     642:	80 93 d5 05 	sts	0x05D5, r24
			USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
     646:	80 91 c9 05 	lds	r24, 0x05C9
     64a:	80 93 9f 05 	sts	0x059F, r24
			USART_UI_length_reveived=true;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 d3 05 	sts	0x05D3, r24
			USART_UI_receive_msgcnt++;
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	80 93 cf 05 	sts	0x05CF, r24
     65a:	08 95       	ret
		}
		else
		{
			USART_UI_header_received=false;
     65c:	10 92 d4 05 	sts	0x05D4, r1
     660:	08 95       	ret
		}
	}
	else
	{
		USART_UI_ReceivedPacket[USART_UI_receive_msgcnt++]=USART_Keypad_Received_Data;
     662:	e9 2f       	mov	r30, r25
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 91 c9 05 	lds	r24, 0x05C9
     66a:	e3 56       	subi	r30, 0x63	; 99
     66c:	fa 4f       	sbci	r31, 0xFA	; 250
     66e:	80 83       	st	Z, r24
     670:	9f 5f       	subi	r25, 0xFF	; 255
     672:	90 93 cf 05 	sts	0x05CF, r25
		if(USART_UI_receive_msgcnt==USART_UI_received_playload_len) //full message has been received
     676:	80 91 d5 05 	lds	r24, 0x05D5
     67a:	98 17       	cp	r25, r24
     67c:	39 f4       	brne	.+14     	; 0x68c <USART_Keypad_ReceiveAction+0xa0>
		{
			USART_UI_Message_ready=true;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 99 03 	sts	0x0399, r24
			USART_UI_header_received=false;
     684:	10 92 d4 05 	sts	0x05D4, r1
			USART_UI_length_reveived=false;
     688:	10 92 d3 05 	sts	0x05D3, r1
     68c:	08 95       	ret

0000068e <USART_transmitByteToKeypad>:
		}
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
     68e:	98 2f       	mov	r25, r24
	while ( !(UCSR1A & (1<<UDRE1)) )
     690:	80 91 c8 00 	lds	r24, 0x00C8
     694:	85 ff       	sbrs	r24, 5
     696:	fc cf       	rjmp	.-8      	; 0x690 <USART_transmitByteToKeypad+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     698:	90 93 ce 00 	sts	0x00CE, r25
}
     69c:	08 95       	ret

0000069e <USART_transmitStringToKeypadFromFlash>:

void USART_transmitStringToKeypadFromFlash(char* string)
{
     69e:	fc 01       	movw	r30, r24
     6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <USART_transmitStringToKeypadFromFlash+0x12>
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
     6a2:	80 91 c8 00 	lds	r24, 0x00C8
     6a6:	85 ff       	sbrs	r24, 5
     6a8:	fc cf       	rjmp	.-8      	; 0x6a2 <USART_transmitStringToKeypadFromFlash+0x4>
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
     6aa:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     6ac:	90 93 ce 00 	sts	0x00CE, r25
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
     6b0:	94 91       	lpm	r25, Z+
     6b2:	99 23       	and	r25, r25
     6b4:	b1 f7       	brne	.-20     	; 0x6a2 <USART_transmitStringToKeypadFromFlash+0x4>
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
}
     6b6:	08 95       	ret

000006b8 <USART_transmitStringToKeypad>:


void USART_transmitStringToKeypad(unsigned char* string)
{
     6b8:	fc 01       	movw	r30, r24
     6ba:	07 c0       	rjmp	.+14     	; 0x6ca <USART_transmitStringToKeypad+0x12>
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
     6bc:	80 91 c8 00 	lds	r24, 0x00C8
     6c0:	85 ff       	sbrs	r24, 5
     6c2:	fc cf       	rjmp	.-8      	; 0x6bc <USART_transmitStringToKeypad+0x4>


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
   USART_transmitByteToKeypad(*string++);
     6c4:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     6c6:	90 93 ce 00 	sts	0x00CE, r25
}


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
     6ca:	90 81       	ld	r25, Z
     6cc:	99 23       	and	r25, r25
     6ce:	b1 f7       	brne	.-20     	; 0x6bc <USART_transmitStringToKeypad+0x4>
   USART_transmitByteToKeypad(*string++);
}
     6d0:	08 95       	ret

000006d2 <init_USART_PC>:
unsigned char USART_PC_receive_msgcnt;


void init_USART_PC(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     6d2:	e1 ec       	ldi	r30, 0xC1	; 193
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     6d8:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     6dc:	86 e0       	ldi	r24, 0x06	; 6
     6de:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x19;
     6e2:	89 e1       	ldi	r24, 0x19	; 25
     6e4:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate to 19,200 with 8MHz clock
     6e8:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     6ec:	88 e9       	ldi	r24, 0x98	; 152
     6ee:	80 83       	st	Z, r24
}
     6f0:	08 95       	ret

000006f2 <USART_PC_ReceiveAction>:

unsigned char USART_PC_ReceiveAction(void){
	USART_PC_DATA_RDY=false;
     6f2:	10 92 c5 05 	sts	0x05C5, r1

	if(!USART_PC_header_received)
     6f6:	80 91 db 05 	lds	r24, 0x05DB
     6fa:	88 23       	and	r24, r24
     6fc:	b9 f4       	brne	.+46     	; 0x72c <USART_PC_ReceiveAction+0x3a>
	{
		USART_PC_prefix[2]=USART_PC_Received_Data;
     6fe:	20 91 b6 05 	lds	r18, 0x05B6
     702:	20 93 d9 05 	sts	0x05D9, r18
		USART_PC_prefix[0]=USART_PC_prefix[1];
     706:	90 91 d8 05 	lds	r25, 0x05D8
     70a:	90 93 d7 05 	sts	0x05D7, r25
		USART_PC_prefix[1]=USART_PC_prefix[2];
     70e:	20 93 d8 05 	sts	0x05D8, r18
		if((USART_PC_prefix[0]=='P')&&(USART_PC_prefix[1]=='C'))
     712:	90 35       	cpi	r25, 0x50	; 80
     714:	21 f5       	brne	.+72     	; 0x75e <USART_PC_ReceiveAction+0x6c>
     716:	23 34       	cpi	r18, 0x43	; 67
     718:	11 f5       	brne	.+68     	; 0x75e <USART_PC_ReceiveAction+0x6c>
		{
			USART_PC_header_received=true;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 db 05 	sts	0x05DB, r24
			USART_PC_ReceivedPacket[0]=USART_PC_prefix[0];
     720:	90 93 71 03 	sts	0x0371, r25
			USART_PC_ReceivedPacket[1]=USART_PC_prefix[1];
     724:	20 93 72 03 	sts	0x0372, r18
			USART_PC_receive_msgcnt=2;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	17 c0       	rjmp	.+46     	; 0x75a <USART_PC_ReceiveAction+0x68>
			//USART_PC_length_reveived=true;
			//USART_PC_receive_msgcnt++;
		}
	}
	else{
		if(USART_PC_Received_Data==13) //If carraige return found --> end of the command
     72c:	80 91 b6 05 	lds	r24, 0x05B6
     730:	8d 30       	cpi	r24, 0x0D	; 13
     732:	49 f4       	brne	.+18     	; 0x746 <USART_PC_ReceiveAction+0x54>
		{
			USART_PC_received_playload_len=USART_PC_receive_msgcnt;
     734:	80 91 da 05 	lds	r24, 0x05DA
     738:	80 93 c7 05 	sts	0x05C7, r24
			USART_PC_Message_ready=true;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 4b 03 	sts	0x034B, r24
			USART_PC_header_received=false;
     742:	10 92 db 05 	sts	0x05DB, r1
			//USART_PC_length_reveived=false;
		}
		USART_PC_ReceivedPacket[USART_PC_receive_msgcnt++]=USART_PC_Received_Data;
     746:	80 91 da 05 	lds	r24, 0x05DA
     74a:	e8 2f       	mov	r30, r24
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	90 91 b6 05 	lds	r25, 0x05B6
     752:	ef 58       	subi	r30, 0x8F	; 143
     754:	fc 4f       	sbci	r31, 0xFC	; 252
     756:	90 83       	st	Z, r25
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	80 93 da 05 	sts	0x05DA, r24
			USART_PC_length_reveived=false;
		}
	}		
*/
	return 0;
}
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret

00000762 <USART_transmitByteToPC>:

void USART_transmitByteToPC( unsigned char bData )
{
     762:	98 2f       	mov	r25, r24
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     764:	80 91 c0 00 	lds	r24, 0x00C0
     768:	85 ff       	sbrs	r24, 5
     76a:	fc cf       	rjmp	.-8      	; 0x764 <USART_transmitByteToPC+0x2>
	UDR0=bData;
     76c:	90 93 c6 00 	sts	0x00C6, r25
//	*/
}
     770:	08 95       	ret

00000772 <USART_transmitStringToPCFromFlash>:

void USART_transmitStringToPCFromFlash(char* strData)
{
     772:	fc 01       	movw	r30, r24
     774:	07 c0       	rjmp	.+14     	; 0x784 <USART_transmitStringToPCFromFlash+0x12>
}

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     776:	80 91 c0 00 	lds	r24, 0x00C0
     77a:	85 ff       	sbrs	r24, 5
     77c:	fc cf       	rjmp	.-8      	; 0x776 <USART_transmitStringToPCFromFlash+0x4>
}

void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
     77e:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0=bData;
     780:	90 93 c6 00 	sts	0x00C6, r25
//	*/
}

void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
     784:	94 91       	lpm	r25, Z+
     786:	99 23       	and	r25, r25
     788:	b1 f7       	brne	.-20     	; 0x776 <USART_transmitStringToPCFromFlash+0x4>
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
}
     78a:	08 95       	ret

0000078c <USART_transmitStringToPC>:


void USART_transmitStringToPC(unsigned char* strData)
{
     78c:	fc 01       	movw	r30, r24
     78e:	07 c0       	rjmp	.+14     	; 0x79e <USART_transmitStringToPC+0x12>
}

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     790:	80 91 c0 00 	lds	r24, 0x00C0
     794:	85 ff       	sbrs	r24, 5
     796:	fc cf       	rjmp	.-8      	; 0x790 <USART_transmitStringToPC+0x4>


void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
   USART_transmitByteToPC(*strData++);
     798:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0=bData;
     79a:	90 93 c6 00 	sts	0x00C6, r25
}


void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
     79e:	90 81       	ld	r25, Z
     7a0:	99 23       	and	r25, r25
     7a2:	b1 f7       	brne	.-20     	; 0x790 <USART_transmitStringToPC+0x4>
   USART_transmitByteToPC(*strData++);
}
     7a4:	08 95       	ret

000007a6 <RequestToPlayMP3file>:
	SPI_DeselectAll();
	return temp3;
}

void RequestToPlayMP3file(const char* thisFile)
{
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	28 2f       	mov	r18, r24
     7ac:	e9 2f       	mov	r30, r25
     7ae:	a0 e0       	ldi	r26, 0x00	; 0
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <RequestToPlayMP3file+0x18>
	int i=0;
	while(*thisFile!='.')
	{
		fileName[i++]=*(thisFile++);
     7b4:	80 83       	st	Z, r24
     7b6:	d9 01       	movw	r26, r18
     7b8:	ce 01       	movw	r24, r28
     7ba:	2c 2f       	mov	r18, r28
     7bc:	e9 2f       	mov	r30, r25
}

void RequestToPlayMP3file(const char* thisFile)
{
	int i=0;
	while(*thisFile!='.')
     7be:	82 2f       	mov	r24, r18
     7c0:	9e 2f       	mov	r25, r30
     7c2:	ec 01       	movw	r28, r24
     7c4:	89 91       	ld	r24, Y+
     7c6:	fd 01       	movw	r30, r26
     7c8:	ec 5a       	subi	r30, 0xAC	; 172
     7ca:	fc 4f       	sbci	r31, 0xFC	; 252
     7cc:	9d 01       	movw	r18, r26
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	8e 32       	cpi	r24, 0x2E	; 46
     7d4:	79 f7       	brne	.-34     	; 0x7b4 <RequestToPlayMP3file+0xe>
	{
		fileName[i++]=*(thisFile++);
	}
	fileName[i++]=*(thisFile++);
     7d6:	80 83       	st	Z, r24
	fileName[i++]=*(thisFile++);
     7d8:	d9 01       	movw	r26, r18
     7da:	ac 5a       	subi	r26, 0xAC	; 172
     7dc:	bc 4f       	sbci	r27, 0xFC	; 252
     7de:	fe 01       	movw	r30, r28
     7e0:	81 91       	ld	r24, Z+
     7e2:	8c 93       	st	X, r24
	fileName[i++]=*(thisFile++);
     7e4:	d9 01       	movw	r26, r18
     7e6:	ab 5a       	subi	r26, 0xAB	; 171
     7e8:	bc 4f       	sbci	r27, 0xFC	; 252
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	8c 93       	st	X, r24
	fileName[i++]=*(thisFile++);
     7ee:	81 81       	ldd	r24, Z+1	; 0x01
     7f0:	11 96       	adiw	r26, 0x01	; 1
     7f2:	8c 93       	st	X, r24
	UI_MP3_file_Pending=true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 4e 03 	sts	0x034E, r24
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <VS1053_ReadCmd>:
	SPI_transmit(temp5);
	SPI_DeselectAll();
}

unsigned int VS1053_ReadCmd(unsigned char addr)
{
     800:	1f 93       	push	r17
     802:	18 2f       	mov	r17, r24
	tempAddr=addr;
     804:	80 93 dc 05 	sts	0x05DC, r24
	SPI_Select_MP3_Cmd();
     808:	0e 94 54 05 	call	0xaa8	; 0xaa8 <SPI_Select_MP3_Cmd>
	SPI_transmit(0x03);
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	SPI_transmit(addr);
     812:	81 2f       	mov	r24, r17
     814:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	temp1 = SPI_receive();
     818:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 46 03 	sts	0x0346, r25
     822:	80 93 45 03 	sts	0x0345, r24
	temp2 = SPI_receive();
     826:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 48 03 	sts	0x0348, r25
     830:	80 93 47 03 	sts	0x0347, r24
	temp3 = temp1*256 + temp2;
     834:	80 91 45 03 	lds	r24, 0x0345
     838:	90 91 46 03 	lds	r25, 0x0346
     83c:	20 91 47 03 	lds	r18, 0x0347
     840:	30 91 48 03 	lds	r19, 0x0348
     844:	98 2f       	mov	r25, r24
     846:	88 27       	eor	r24, r24
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	90 93 4a 03 	sts	0x034A, r25
     850:	80 93 49 03 	sts	0x0349, r24
	SPI_DeselectAll();
     854:	0e 94 46 05 	call	0xa8c	; 0xa8c <SPI_DeselectAll>
	return temp3;
     858:	20 91 49 03 	lds	r18, 0x0349
     85c:	30 91 4a 03 	lds	r19, 0x034A
}
     860:	c9 01       	movw	r24, r18
     862:	1f 91       	pop	r17
     864:	08 95       	ret

00000866 <VS1053_WriteCmd>:
	SPI_transmit(data);
	SPI_DeselectAll();
}

void VS1053_WriteCmd(unsigned char addr, unsigned int cmd)
{
     866:	1f 93       	push	r17
     868:	18 2f       	mov	r17, r24
    temp4 = (cmd & 0xFF00) >> 8;
     86a:	70 93 de 05 	sts	0x05DE, r23
    temp5 = (cmd & 0x00FF);
     86e:	60 93 dd 05 	sts	0x05DD, r22
	tempAddr=addr;
     872:	80 93 dc 05 	sts	0x05DC, r24
	SPI_Select_MP3_Cmd();
     876:	0e 94 54 05 	call	0xaa8	; 0xaa8 <SPI_Select_MP3_Cmd>
	SPI_transmit(0x02);
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	SPI_transmit(addr);
     880:	81 2f       	mov	r24, r17
     882:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	SPI_transmit(temp4);
     886:	80 91 de 05 	lds	r24, 0x05DE
     88a:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	SPI_transmit(temp5);
     88e:	80 91 dd 05 	lds	r24, 0x05DD
     892:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	SPI_DeselectAll();
     896:	0e 94 46 05 	call	0xa8c	; 0xa8c <SPI_DeselectAll>
}
     89a:	1f 91       	pop	r17
     89c:	08 95       	ret

0000089e <VS1053_DecreaseVol>:
	}
	return true;
}

bool VS1053_DecreaseVol(void)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	int retry=0;
	VS1053_Vol=VS1053_Vol-((uint16_t)(1<<8)+1);
     8a2:	80 91 df 05 	lds	r24, 0x05DF
     8a6:	90 91 e0 05 	lds	r25, 0x05E0
     8aa:	81 50       	subi	r24, 0x01	; 1
     8ac:	91 40       	sbci	r25, 0x01	; 1
     8ae:	90 93 e0 05 	sts	0x05E0, r25
     8b2:	80 93 df 05 	sts	0x05DF, r24
	if(VS1053_Vol<=0x0101)
     8b6:	80 91 df 05 	lds	r24, 0x05DF
     8ba:	90 91 e0 05 	lds	r25, 0x05E0
     8be:	82 50       	subi	r24, 0x02	; 2
     8c0:	91 40       	sbci	r25, 0x01	; 1
     8c2:	18 f0       	brcs	.+6      	; 0x8ca <VS1053_DecreaseVol+0x2c>
     8c4:	c0 e0       	ldi	r28, 0x00	; 0
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <VS1053_DecreaseVol+0x54>
	{
		VS1053_Vol=0x0101;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	90 93 e0 05 	sts	0x05E0, r25
     8d2:	80 93 df 05 	sts	0x05DF, r24
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <VS1053_DecreaseVol+0x68>
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
		{
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
     8d8:	60 91 df 05 	lds	r22, 0x05DF
     8dc:	70 91 e0 05 	lds	r23, 0x05E0
     8e0:	8b e0       	ldi	r24, 0x0B	; 11
     8e2:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
			if(retry++ >10 )return false;
     8e6:	cb 30       	cpi	r28, 0x0B	; 11
     8e8:	d1 05       	cpc	r29, r1
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <VS1053_DecreaseVol+0x52>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0c c0       	rjmp	.+24     	; 0x908 <VS1053_DecreaseVol+0x6a>
     8f0:	21 96       	adiw	r28, 0x01	; 1
	{
		VS1053_Vol=0x0101;
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
     8f2:	8b e0       	ldi	r24, 0x0B	; 11
     8f4:	0e 94 00 04 	call	0x800	; 0x800 <VS1053_ReadCmd>
     8f8:	20 91 df 05 	lds	r18, 0x05DF
     8fc:	30 91 e0 05 	lds	r19, 0x05E0
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	49 f7       	brne	.-46     	; 0x8d8 <VS1053_DecreaseVol+0x3a>
     906:	81 e0       	ldi	r24, 0x01	; 1
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
			if(retry++ >10 )return false;
		}
	}
	return true;
}					
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <VS1053_IncreaseVol>:
	VS1053_WriteCmd(0x00,0x0804);		//Software reset via mode register
	_delay_ms(20);
}

bool VS1053_IncreaseVol(void)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
	int retry=0;
	VS1053_Vol=VS1053_Vol+((uint16_t)(1<<8)+1);
     912:	80 91 df 05 	lds	r24, 0x05DF
     916:	90 91 e0 05 	lds	r25, 0x05E0
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	9e 4f       	sbci	r25, 0xFE	; 254
     91e:	90 93 e0 05 	sts	0x05E0, r25
     922:	80 93 df 05 	sts	0x05DF, r24
	if(VS1053_Vol>=0xFEFE)
     926:	80 91 df 05 	lds	r24, 0x05DF
     92a:	90 91 e0 05 	lds	r25, 0x05E0
     92e:	8e 5f       	subi	r24, 0xFE	; 254
     930:	9e 4f       	sbci	r25, 0xFE	; 254
     932:	18 f4       	brcc	.+6      	; 0x93a <VS1053_IncreaseVol+0x2c>
     934:	c0 e0       	ldi	r28, 0x00	; 0
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	14 c0       	rjmp	.+40     	; 0x962 <VS1053_IncreaseVol+0x54>
	{
		VS1053_Vol=0xFEFE; 
     93a:	8e ef       	ldi	r24, 0xFE	; 254
     93c:	9e ef       	ldi	r25, 0xFE	; 254
     93e:	90 93 e0 05 	sts	0x05E0, r25
     942:	80 93 df 05 	sts	0x05DF, r24
     946:	17 c0       	rjmp	.+46     	; 0x976 <VS1053_IncreaseVol+0x68>
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
		{
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
     948:	60 91 df 05 	lds	r22, 0x05DF
     94c:	70 91 e0 05 	lds	r23, 0x05E0
     950:	8b e0       	ldi	r24, 0x0B	; 11
     952:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
			if(retry++ >10 )return false;
     956:	cb 30       	cpi	r28, 0x0B	; 11
     958:	d1 05       	cpc	r29, r1
     95a:	11 f4       	brne	.+4      	; 0x960 <VS1053_IncreaseVol+0x52>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0c c0       	rjmp	.+24     	; 0x978 <VS1053_IncreaseVol+0x6a>
     960:	21 96       	adiw	r28, 0x01	; 1
	{
		VS1053_Vol=0xFEFE; 
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
     962:	8b e0       	ldi	r24, 0x0B	; 11
     964:	0e 94 00 04 	call	0x800	; 0x800 <VS1053_ReadCmd>
     968:	20 91 df 05 	lds	r18, 0x05DF
     96c:	30 91 e0 05 	lds	r19, 0x05E0
     970:	82 17       	cp	r24, r18
     972:	93 07       	cpc	r25, r19
     974:	49 f7       	brne	.-46     	; 0x948 <VS1053_IncreaseVol+0x3a>
     976:	81 e0       	ldi	r24, 0x01	; 1
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
			if(retry++ >10 )return false;
		}
	}
	return true;
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <VS1053_SoftwareReset>:
	return 0;
}

void VS1053_SoftwareReset(void)
{
	VS1053_WriteCmd(0x00,0x0804);		//Software reset via mode register
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	64 e0       	ldi	r22, 0x04	; 4
     982:	78 e0       	ldi	r23, 0x08	; 8
     984:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     988:	80 e4       	ldi	r24, 0x40	; 64
     98a:	9c e9       	ldi	r25, 0x9C	; 156
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <VS1053_SoftwareReset+0xe>
	_delay_ms(20);
}
     990:	08 95       	ret

00000992 <VS1053_WriteData>:
	}
	return true;
}					

void VS1053_WriteData(unsigned char data)
{
     992:	1f 93       	push	r17
     994:	18 2f       	mov	r17, r24
	SPI_Select_MP3_Data();
     996:	0e 94 4f 05 	call	0xa9e	; 0xa9e <SPI_Select_MP3_Data>
	SPI_transmit(data);
     99a:	81 2f       	mov	r24, r17
     99c:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
	SPI_DeselectAll();
     9a0:	0e 94 46 05 	call	0xa8c	; 0xa8c <SPI_DeselectAll>
}
     9a4:	1f 91       	pop	r17
     9a6:	08 95       	ret

000009a8 <VS1053_Initialize>:
volatile unsigned char tempAddr;

volatile uint16_t VS1053_Vol;

unsigned char VS1053_Initialize(void)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
	unsigned char retry;
	SPI_DeselectAll();
     9ac:	0e 94 46 05 	call	0xa8c	; 0xa8c <SPI_DeselectAll>
	SPI_PORT &= ~_BV(MP3_RESET);	//De assert RESET line (Chip in the reset state)
     9b0:	2c 98       	cbi	0x05, 4	; 5
     9b2:	00 e4       	ldi	r16, 0x40	; 64
     9b4:	1c e9       	ldi	r17, 0x9C	; 156
     9b6:	c8 01       	movw	r24, r16
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <VS1053_Initialize+0x10>
	_delay_ms(20);					//Hold for 20ms
	SPI_PORT |= _BV(MP3_RESET);		//Assert RESET line (Chip is powered now)
     9bc:	2c 9a       	sbi	0x05, 4	; 5
	SPI_1X();						//Low speed mode
     9be:	0e 94 6e 05 	call	0xadc	; 0xadc <SPI_1X>
     9c2:	c8 01       	movw	r24, r16
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <VS1053_Initialize+0x1c>
     9c8:	00 e0       	ldi	r16, 0x00	; 0
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <VS1053_Initialize+0x38>
	_delay_ms(20);					//Hold for 20ms
	retry=0;

	while(VS1053_ReadCmd(0x03) != 0x9800)	//REDO if not written properly	
	{
		VS1053_WriteCmd(0x03,0x9800);		//set PLL register to 3.5 (preferred for normal operation)
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	78 e9       	ldi	r23, 0x98	; 152
     9d2:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
		if(retry++ >10 )return 1;			//try this for 10 times
     9d6:	0b 30       	cpi	r16, 0x0B	; 11
     9d8:	11 f4       	brne	.+4      	; 0x9de <VS1053_Initialize+0x36>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	54 c0       	rjmp	.+168    	; 0xa86 <VS1053_Initialize+0xde>
     9de:	0f 5f       	subi	r16, 0xFF	; 255
	SPI_PORT |= _BV(MP3_RESET);		//Assert RESET line (Chip is powered now)
	SPI_1X();						//Low speed mode
	_delay_ms(20);					//Hold for 20ms
	retry=0;

	while(VS1053_ReadCmd(0x03) != 0x9800)	//REDO if not written properly	
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	0e 94 00 04 	call	0x800	; 0x800 <VS1053_ReadCmd>
     9e6:	80 50       	subi	r24, 0x00	; 0
     9e8:	98 49       	sbci	r25, 0x98	; 152
     9ea:	81 f7       	brne	.-32     	; 0x9cc <VS1053_Initialize+0x24>
     9ec:	80 e4       	ldi	r24, 0x40	; 64
     9ee:	9c e9       	ldi	r25, 0x9C	; 156
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <VS1053_Initialize+0x48>
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	0a c0       	rjmp	.+20     	; 0xa0c <VS1053_Initialize+0x64>
	//VS1053_WriteCmd(0x05,0x000A);			//Set low sample rate
	
	retry=0;
	while(VS1053_ReadCmd(0x0B) != 0xFEFE)	//REDO if not written properly
	{
		VS1053_WriteCmd(0x0B,0xfefe);		//Total silence
     9f8:	8b e0       	ldi	r24, 0x0B	; 11
     9fa:	6e ef       	ldi	r22, 0xFE	; 254
     9fc:	7e ef       	ldi	r23, 0xFE	; 254
     9fe:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
		if(retry++ >10 )return 2;
     a02:	0b 30       	cpi	r16, 0x0B	; 11
     a04:	11 f4       	brne	.+4      	; 0xa0a <VS1053_Initialize+0x62>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	3e c0       	rjmp	.+124    	; 0xa86 <VS1053_Initialize+0xde>
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
	_delay_ms(20);
	
	//VS1053_WriteCmd(0x05,0x000A);			//Set low sample rate
	
	retry=0;
	while(VS1053_ReadCmd(0x0B) != 0xFEFE)	//REDO if not written properly
     a0c:	8b e0       	ldi	r24, 0x0B	; 11
     a0e:	0e 94 00 04 	call	0x800	; 0x800 <VS1053_ReadCmd>
     a12:	8e 5f       	subi	r24, 0xFE	; 254
     a14:	9e 4f       	sbci	r25, 0xFE	; 254
     a16:	81 f7       	brne	.-32     	; 0x9f8 <VS1053_Initialize+0x50>
	{
		VS1053_WriteCmd(0x0B,0xfefe);		//Total silence
		if(retry++ >10 )return 2;
	}

	VS1053_WriteCmd(0x05,0xac45);			//Activate sample rate as 44.1kHz stereo
     a18:	85 e0       	ldi	r24, 0x05	; 5
     a1a:	65 e4       	ldi	r22, 0x45	; 69
     a1c:	7c ea       	ldi	r23, 0xAC	; 172
     a1e:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
     a22:	00 e0       	ldi	r16, 0x00	; 0
     a24:	0a c0       	rjmp	.+20     	; 0xa3a <VS1053_Initialize+0x92>

	retry=0;
	while(VS1053_ReadCmd(0x0b) != 0x2828)	//REDO if not written properly
	{
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
     a26:	8b e0       	ldi	r24, 0x0B	; 11
     a28:	68 e2       	ldi	r22, 0x28	; 40
     a2a:	78 e2       	ldi	r23, 0x28	; 40
     a2c:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
		if(retry++ >10 )return 3;			//try this for 10 times
     a30:	0b 30       	cpi	r16, 0x0B	; 11
     a32:	11 f4       	brne	.+4      	; 0xa38 <VS1053_Initialize+0x90>
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	27 c0       	rjmp	.+78     	; 0xa86 <VS1053_Initialize+0xde>
     a38:	0f 5f       	subi	r16, 0xFF	; 255
	}

	VS1053_WriteCmd(0x05,0xac45);			//Activate sample rate as 44.1kHz stereo

	retry=0;
	while(VS1053_ReadCmd(0x0b) != 0x2828)	//REDO if not written properly
     a3a:	8b e0       	ldi	r24, 0x0B	; 11
     a3c:	0e 94 00 04 	call	0x800	; 0x800 <VS1053_ReadCmd>
     a40:	28 e2       	ldi	r18, 0x28	; 40
     a42:	88 32       	cpi	r24, 0x28	; 40
     a44:	92 07       	cpc	r25, r18
     a46:	79 f7       	brne	.-34     	; 0xa26 <VS1053_Initialize+0x7e>
	{
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
		if(retry++ >10 )return 3;			//try this for 10 times
	}
	VS1053_Vol=0x2828;
     a48:	90 93 e0 05 	sts	0x05E0, r25
     a4c:	80 93 df 05 	sts	0x05DF, r24
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	0a c0       	rjmp	.+20     	; 0xa68 <VS1053_Initialize+0xc0>
	retry=0;
	while(VS1053_ReadCmd(0x00) != 0x0800)			//REDO if not written properly
	{
		VS1053_WriteCmd(0x00,0x0800);				//Set mode register to SDINEW mode and MICIN
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	78 e0       	ldi	r23, 0x08	; 8
     a5a:	0e 94 33 04 	call	0x866	; 0x866 <VS1053_WriteCmd>
		if(retry++ >10 )return 4;					//try this for 10 times
     a5e:	0b 30       	cpi	r16, 0x0B	; 11
     a60:	11 f4       	brne	.+4      	; 0xa66 <VS1053_Initialize+0xbe>
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <VS1053_Initialize+0xde>
     a66:	0f 5f       	subi	r16, 0xFF	; 255
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
		if(retry++ >10 )return 3;			//try this for 10 times
	}
	VS1053_Vol=0x2828;
	retry=0;
	while(VS1053_ReadCmd(0x00) != 0x0800)			//REDO if not written properly
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 00 04 	call	0x800	; 0x800 <VS1053_ReadCmd>
     a6e:	80 50       	subi	r24, 0x00	; 0
     a70:	98 40       	sbci	r25, 0x08	; 8
     a72:	81 f7       	brne	.-32     	; 0xa54 <VS1053_Initialize+0xac>
     a74:	80 e4       	ldi	r24, 0x40	; 64
     a76:	9c e9       	ldi	r25, 0x9C	; 156
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <VS1053_Initialize+0xd0>
	{
		VS1053_WriteCmd(0x00,0x0800);				//Set mode register to SDINEW mode and MICIN
		if(retry++ >10 )return 4;					//try this for 10 times
	}
	_delay_ms(20);
	VS1053_SoftwareReset();
     a7c:	0e 94 bf 04 	call	0x97e	; 0x97e <VS1053_SoftwareReset>
	//_delay_ms(20);
	SPI_2X();
     a80:	0e 94 59 05 	call	0xab2	; 0xab2 <SPI_2X>
     a84:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <SPI_DeselectAll>:
	SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
	SPI_2X();
}

void SPI_DeselectAll(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     a8c:	85 b1       	in	r24, 0x05	; 5
     a8e:	87 60       	ori	r24, 0x07	; 7
     a90:	85 b9       	out	0x05, r24	; 5
}
     a92:	08 95       	ret

00000a94 <SPI_Select_SD>:

void SPI_Select_SD(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     a94:	85 b1       	in	r24, 0x05	; 5
     a96:	87 60       	ori	r24, 0x07	; 7
     a98:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(SD_SELECT);
     a9a:	28 98       	cbi	0x05, 0	; 5
}
     a9c:	08 95       	ret

00000a9e <SPI_Select_MP3_Data>:

void SPI_Select_MP3_Data(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     a9e:	85 b1       	in	r24, 0x05	; 5
     aa0:	87 60       	ori	r24, 0x07	; 7
     aa2:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(MP3_DATA);
     aa4:	2a 98       	cbi	0x05, 2	; 5
}
     aa6:	08 95       	ret

00000aa8 <SPI_Select_MP3_Cmd>:

void SPI_Select_MP3_Cmd(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     aa8:	85 b1       	in	r24, 0x05	; 5
     aaa:	87 60       	ori	r24, 0x07	; 7
     aac:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(MP3_CMD);
     aae:	29 98       	cbi	0x05, 1	; 5
}
     ab0:	08 95       	ret

00000ab2 <SPI_2X>:

void SPI_2X(void){ //4MHz
	SPCR &= ~_BV(SPR1);
     ab2:	8c b5       	in	r24, 0x2c	; 44
     ab4:	8d 7f       	andi	r24, 0xFD	; 253
     ab6:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR0);
     ab8:	8c b5       	in	r24, 0x2c	; 44
     aba:	8e 7f       	andi	r24, 0xFE	; 254
     abc:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV(SPI2X);
     abe:	8d b5       	in	r24, 0x2d	; 45
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	8d bd       	out	0x2d, r24	; 45
}
     ac4:	08 95       	ret

00000ac6 <SPI_Initialize>:
#include "Globals.h"

void SPI_Initialize(void){
	DDRB |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD)|_BV(MP3_RESET);
     ac6:	84 b1       	in	r24, 0x04	; 4
     ac8:	87 61       	ori	r24, 0x17	; 23
     aca:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~_BV(MP3_DREQ);
     acc:	23 98       	cbi	0x04, 3	; 4
	DDRB=0xB7;
     ace:	87 eb       	ldi	r24, 0xB7	; 183
     ad0:	84 b9       	out	0x04, r24	; 4
	SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
     ad2:	80 e5       	ldi	r24, 0x50	; 80
     ad4:	8c bd       	out	0x2c, r24	; 44
	SPI_2X();
     ad6:	0e 94 59 05 	call	0xab2	; 0xab2 <SPI_2X>
}
     ada:	08 95       	ret

00000adc <SPI_1X>:
	SPCR &= ~_BV(SPR0);
	SPSR |= _BV(SPI2X);
}

void SPI_1X(void){	//62.5 kHz
	SPCR |= _BV(SPR1)|_BV(SPR0);
     adc:	8c b5       	in	r24, 0x2c	; 44
     ade:	83 60       	ori	r24, 0x03	; 3
     ae0:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
     ae2:	8d b5       	in	r24, 0x2d	; 45
     ae4:	8e 7f       	andi	r24, 0xFE	; 254
     ae6:	8d bd       	out	0x2d, r24	; 45
}
     ae8:	08 95       	ret

00000aea <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data){
	// Start transmission
	SPDR = data;
     aea:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     aec:	0d b4       	in	r0, 0x2d	; 45
     aee:	07 fe       	sbrs	r0, 7
     af0:	fd cf       	rjmp	.-6      	; 0xaec <SPI_transmit+0x2>
	data = SPDR;
     af2:	8e b5       	in	r24, 0x2e	; 46
	return(data);
}
     af4:	08 95       	ret

00000af6 <SPI_receive>:

unsigned char SPI_receive(void){
	unsigned char data;
	// Wait for reception complete

	SPDR = 0xff;
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     afa:	0d b4       	in	r0, 0x2d	; 45
     afc:	07 fe       	sbrs	r0, 7
     afe:	fd cf       	rjmp	.-6      	; 0xafa <SPI_receive+0x4>
	data = SPDR;
     b00:	8e b5       	in	r24, 0x2e	; 46

	// Return data register
	return data;
}
     b02:	08 95       	ret

00000b04 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
     b04:	df 92       	push	r13
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	d8 2e       	mov	r13, r24
     b10:	7a 01       	movw	r14, r20
     b12:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
     b14:	80 91 b5 05 	lds	r24, 0x05B5
     b18:	88 23       	and	r24, r24
     b1a:	b9 f4       	brne	.+46     	; 0xb4a <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
     b1c:	8d 2d       	mov	r24, r13
     b1e:	81 51       	subi	r24, 0x11	; 17
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	60 f0       	brcs	.+24     	; 0xb3c <SD_sendCommand+0x38>
     b24:	88 e1       	ldi	r24, 0x18	; 24
     b26:	d8 16       	cp	r13, r24
     b28:	49 f0       	breq	.+18     	; 0xb3c <SD_sendCommand+0x38>
     b2a:	89 e1       	ldi	r24, 0x19	; 25
     b2c:	d8 16       	cp	r13, r24
     b2e:	31 f0       	breq	.+12     	; 0xb3c <SD_sendCommand+0x38>
     b30:	80 e2       	ldi	r24, 0x20	; 32
     b32:	d8 16       	cp	r13, r24
     b34:	19 f0       	breq	.+6      	; 0xb3c <SD_sendCommand+0x38>
     b36:	81 e2       	ldi	r24, 0x21	; 33
     b38:	d8 16       	cp	r13, r24
     b3a:	39 f4       	brne	.+14     	; 0xb4a <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
     b3c:	39 e0       	ldi	r19, 0x09	; 9
     b3e:	ee 0c       	add	r14, r14
     b40:	ff 1c       	adc	r15, r15
     b42:	00 1f       	adc	r16, r16
     b44:	11 1f       	adc	r17, r17
     b46:	3a 95       	dec	r19
     b48:	d1 f7       	brne	.-12     	; 0xb3e <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
     b4a:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
     b4c:	8d 2d       	mov	r24, r13
     b4e:	80 64       	ori	r24, 0x40	; 64
     b50:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SPI_transmit(arg>>24);
     b54:	81 2f       	mov	r24, r17
     b56:	99 27       	eor	r25, r25
     b58:	aa 27       	eor	r26, r26
     b5a:	bb 27       	eor	r27, r27
     b5c:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SPI_transmit(arg>>16);
     b60:	c8 01       	movw	r24, r16
     b62:	aa 27       	eor	r26, r26
     b64:	bb 27       	eor	r27, r27
     b66:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SPI_transmit(arg>>8);
     b6a:	bb 27       	eor	r27, r27
     b6c:	a1 2f       	mov	r26, r17
     b6e:	90 2f       	mov	r25, r16
     b70:	8f 2d       	mov	r24, r15
     b72:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SPI_transmit(arg);
     b76:	8e 2d       	mov	r24, r14
     b78:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	d8 16       	cp	r13, r24
     b80:	11 f4       	brne	.+4      	; 0xb86 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
     b82:	87 e8       	ldi	r24, 0x87	; 135
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
     b86:	85 e9       	ldi	r24, 0x95	; 149
     b88:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
     b90:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     b92:	d1 f0       	breq	.+52     	; 0xbc8 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
     b94:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     b98:	08 2f       	mov	r16, r24
     b9a:	8f 3f       	cpi	r24, 0xFF	; 255
     b9c:	c9 f3       	breq	.-14     	; 0xb90 <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
     b9e:	88 23       	and	r24, r24
     ba0:	99 f4       	brne	.+38     	; 0xbc8 <SD_sendCommand+0xc4>
     ba2:	8a e3       	ldi	r24, 0x3A	; 58
     ba4:	d8 16       	cp	r13, r24
     ba6:	81 f4       	brne	.+32     	; 0xbc8 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
     ba8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
     bac:	86 ff       	sbrs	r24, 6
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <SD_sendCommand+0xb4>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 b5 05 	sts	0x05B5, r24
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
     bb8:	10 92 b5 05 	sts	0x05B5, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
     bbc:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
     bc0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
  SPI_receive(); 
     bc4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
     bc8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
SD_CS_DEASSERT;
     bcc:	28 9a       	sbi	0x05, 0	; 5

return response; //return state
}
     bce:	80 2f       	mov	r24, r16
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	08 95       	ret

00000bdc <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
     bdc:	af 92       	push	r10
     bde:	bf 92       	push	r11
     be0:	cf 92       	push	r12
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	7b 01       	movw	r14, r22
     bee:	8c 01       	movw	r16, r24
     bf0:	59 01       	movw	r10, r18
     bf2:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
     bf4:	80 e2       	ldi	r24, 0x20	; 32
     bf6:	b8 01       	movw	r22, r16
     bf8:	a7 01       	movw	r20, r14
     bfa:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     bfe:	88 23       	and	r24, r24
     c00:	b9 f4       	brne	.+46     	; 0xc30 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
     c02:	08 94       	sec
     c04:	e1 08       	sbc	r14, r1
     c06:	f1 08       	sbc	r15, r1
     c08:	01 09       	sbc	r16, r1
     c0a:	11 09       	sbc	r17, r1
     c0c:	ea 0c       	add	r14, r10
     c0e:	fb 1c       	adc	r15, r11
     c10:	0c 1d       	adc	r16, r12
     c12:	1d 1d       	adc	r17, r13
     c14:	81 e2       	ldi	r24, 0x21	; 33
     c16:	b8 01       	movw	r22, r16
     c18:	a7 01       	movw	r20, r14
     c1a:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
if(response != 0x00)
     c1e:	88 23       	and	r24, r24
     c20:	39 f4       	brne	.+14     	; 0xc30 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
     c22:	86 e2       	ldi	r24, 0x26	; 38
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	08 95       	ret

00000c42 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
     c50:	1f 5f       	subi	r17, 0xFF	; 255
     c52:	1a 30       	cpi	r17, 0x0A	; 10
     c54:	d1 f7       	brne	.-12     	; 0xc4a <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
     c56:	28 98       	cbi	0x05, 0	; 5
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
   retry++;
     c6a:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
     c6c:	c1 32       	cpi	r28, 0x21	; 33
     c6e:	d1 05       	cpc	r29, r1
     c70:	11 f4       	brne	.+4      	; 0xc76 <SD_init+0x34>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	56 c0       	rjmp	.+172    	; 0xd22 <SD_init+0xe0>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	89 f7       	brne	.-30     	; 0xc5c <SD_init+0x1a>

SD_CS_DEASSERT;
     c7a:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit (0xff);
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SPI_transmit (0xff);
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
     c88:	c0 e0       	ldi	r28, 0x00	; 0
     c8a:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	4a ea       	ldi	r20, 0xAA	; 170
     c90:	51 e0       	ldi	r21, 0x01	; 1
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
retry++;
     c9a:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     c9c:	cf 3f       	cpi	r28, 0xFF	; 255
     c9e:	d1 05       	cpc	r29, r1
     ca0:	29 f4       	brne	.+10     	; 0xcac <SD_init+0x6a>
   {
	  //TX_NEWLINE;
	  SD_version = 1;
	  cardType = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 c3 05 	sts	0x05C3, r24
     ca8:	11 e0       	ldi	r17, 0x01	; 1
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <SD_init+0x70>
	  break;
   } //time out

}while(response != 0x01);
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	71 f7       	brne	.-36     	; 0xc8c <SD_init+0x4a>
     cb0:	12 e0       	ldi	r17, 0x02	; 2
     cb2:	c0 e0       	ldi	r28, 0x00	; 0
     cb4:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
     cb6:	87 e3       	ldi	r24, 0x37	; 55
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
     cc4:	89 e2       	ldi	r24, 0x29	; 41
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e4       	ldi	r23, 0x40	; 64
     cce:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>

retry++;
     cd2:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     cd4:	cf 3f       	cpi	r28, 0xFF	; 255
     cd6:	d1 05       	cpc	r29, r1
     cd8:	11 f4       	brne	.+4      	; 0xcde <SD_init+0x9c>
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	22 c0       	rjmp	.+68     	; 0xd22 <SD_init+0xe0>
   {
      //TX_NEWLINE;
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
     cde:	88 23       	and	r24, r24
     ce0:	51 f7       	brne	.-44     	; 0xcb6 <SD_init+0x74>


retry = 0;
SDHC_flag = 0;
     ce2:	10 92 b5 05 	sts	0x05B5, r1

if (SD_version == 2)
     ce6:	12 30       	cpi	r17, 0x02	; 2
     ce8:	e1 f4       	brne	.+56     	; 0xd22 <SD_init+0xe0>
     cea:	c0 e0       	ldi	r28, 0x00	; 0
     cec:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
     cee:	8a e3       	ldi	r24, 0x3A	; 58
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
	 retry++;
     cfc:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
     cfe:	cf 3f       	cpi	r28, 0xFF	; 255
     d00:	d1 05       	cpc	r29, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <SD_init+0xc8>
     {
       //TX_NEWLINE;
	   cardType = 0;
     d04:	10 92 c3 05 	sts	0x05C3, r1
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <SD_init+0xcc>
	   break;
     } //time out

   }while(response != 0x00);
     d0a:	88 23       	and	r24, r24
     d0c:	81 f7       	brne	.-32     	; 0xcee <SD_init+0xac>

   if(SDHC_flag == 1) cardType = 2;
     d0e:	80 91 b5 05 	lds	r24, 0x05B5
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	11 f4       	brne	.+4      	; 0xd1a <SD_init+0xd8>
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <SD_init+0xda>
   else cardType = 3;
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	80 93 c3 05 	sts	0x05C3, r24
     d20:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	08 95       	ret

00000d2a <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ab 01       	movw	r20, r22
     d30:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
     d32:	88 e1       	ldi	r24, 0x18	; 24
     d34:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     d38:	88 23       	and	r24, r24
     d3a:	11 f0       	breq	.+4      	; 0xd40 <SD_writeSingleBlock+0x16>
     d3c:	98 2f       	mov	r25, r24
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
     d40:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     d42:	8e ef       	ldi	r24, 0xFE	; 254
     d44:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
     d48:	c0 e0       	ldi	r28, 0x00	; 0
     d4a:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
     d4c:	fe 01       	movw	r30, r28
     d4e:	e6 56       	subi	r30, 0x66	; 102
     d50:	fc 4f       	sbci	r31, 0xFC	; 252
     d52:	80 81       	ld	r24, Z
     d54:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
     d58:	21 96       	adiw	r28, 0x01	; 1
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	c0 30       	cpi	r28, 0x00	; 0
     d5e:	d8 07       	cpc	r29, r24
     d60:	a9 f7       	brne	.-22     	; 0xd4c <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SPI_transmit(0xff);
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>

response = SPI_receive();
     d6e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     d72:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     d74:	8f 71       	andi	r24, 0x1F	; 31
     d76:	85 30       	cpi	r24, 0x05	; 5
     d78:	41 f0       	breq	.+16     	; 0xd8a <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     d7a:	28 9a       	sbi	0x05, 0	; 5
     d7c:	20 c0       	rjmp	.+64     	; 0xdbe <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	cf 3f       	cpi	r28, 0xFF	; 255
     d82:	d8 07       	cpc	r29, r24
     d84:	91 f0       	breq	.+36     	; 0xdaa <SD_writeSingleBlock+0x80>
     d86:	21 96       	adiw	r28, 0x01	; 1
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <SD_writeSingleBlock+0x64>
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     d8e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     d92:	88 23       	and	r24, r24
     d94:	a1 f3       	breq	.-24     	; 0xd7e <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
     d96:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	0e 94 75 05 	call	0xaea	; 0xaea <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     d9e:	28 98       	cbi	0x05, 0	; 5
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	cf 3f       	cpi	r28, 0xFF	; 255
     da6:	d8 07       	cpc	r29, r24
     da8:	19 f4       	brne	.+6      	; 0xdb0 <SD_writeSingleBlock+0x86>
     daa:	28 9a       	sbi	0x05, 0	; 5
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	07 c0       	rjmp	.+14     	; 0xdbe <SD_writeSingleBlock+0x94>
     db0:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     db2:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     db6:	88 23       	and	r24, r24
     db8:	a1 f3       	breq	.-24     	; 0xda2 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
     dba:	28 9a       	sbi	0x05, 0	; 5
     dbc:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
     dbe:	89 2f       	mov	r24, r25
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	ab 01       	movw	r20, r22
     dce:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
     dd0:	81 e1       	ldi	r24, 0x11	; 17
     dd2:	0e 94 82 05 	call	0xb04	; 0xb04 <SD_sendCommand>
     dd6:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     dd8:	88 23       	and	r24, r24
     dda:	09 f5       	brne	.+66     	; 0xe1e <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
     ddc:	28 98       	cbi	0x05, 0	; 5
     dde:	c0 e0       	ldi	r28, 0x00	; 0
     de0:	d0 e0       	ldi	r29, 0x00	; 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     de4:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
     de6:	19 f4       	brne	.+6      	; 0xdee <SD_readSingleBlock+0x28>
     de8:	28 9a       	sbi	0x05, 0	; 5
     dea:	11 e0       	ldi	r17, 0x01	; 1
     dec:	18 c0       	rjmp	.+48     	; 0xe1e <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     dee:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     df2:	8e 3f       	cpi	r24, 0xFE	; 254
     df4:	b9 f7       	brne	.-18     	; 0xde4 <SD_readSingleBlock+0x1e>
     df6:	c0 e0       	ldi	r28, 0x00	; 0
     df8:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
     dfa:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
     dfe:	fe 01       	movw	r30, r28
     e00:	e6 56       	subi	r30, 0x66	; 102
     e02:	fc 4f       	sbci	r31, 0xFC	; 252
     e04:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
     e06:	21 96       	adiw	r28, 0x01	; 1
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	c0 30       	cpi	r28, 0x00	; 0
     e0c:	d8 07       	cpc	r29, r24
     e0e:	a9 f7       	brne	.-22     	; 0xdfa <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     e10:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
SPI_receive();
     e14:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
     e18:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SPI_receive>
SD_CS_DEASSERT;
     e1c:	28 9a       	sbi	0x05, 0	; 5

return 0;
}
     e1e:	81 2f       	mov	r24, r17
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	08 95       	ret

00000e28 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     e30:	20 91 9b 05 	lds	r18, 0x059B
     e34:	30 91 9c 05 	lds	r19, 0x059C
     e38:	e0 90 61 03 	lds	r14, 0x0361
     e3c:	f0 90 62 03 	lds	r15, 0x0362
     e40:	00 91 63 03 	lds	r16, 0x0363
     e44:	10 91 64 03 	lds	r17, 0x0364
     e48:	62 50       	subi	r22, 0x02	; 2
     e4a:	70 40       	sbci	r23, 0x00	; 0
     e4c:	80 40       	sbci	r24, 0x00	; 0
     e4e:	90 40       	sbci	r25, 0x00	; 0
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	2e 0d       	add	r18, r14
     e5e:	3f 1d       	adc	r19, r15
     e60:	40 1f       	adc	r20, r16
     e62:	51 1f       	adc	r21, r17
}
     e64:	b9 01       	movw	r22, r18
     e66:	ca 01       	movw	r24, r20
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	2b 97       	sbiw	r28, 0x0b	; 11
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	8c 01       	movw	r16, r24
     e8c:	58 2f       	mov	r21, r24
     e8e:	a1 2f       	mov	r26, r17
     e90:	fc 01       	movw	r30, r24
     e92:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char fileNameFAT[11];
	unsigned char j, k;

	for(j=0; j<12; j++)
	if(fileName[j] == '.') break;
     e94:	80 81       	ld	r24, Z
     e96:	8e 32       	cpi	r24, 0x2E	; 46
     e98:	19 f4       	brne	.+6      	; 0xea0 <convertFileName+0x2e>

	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}
     e9a:	49 30       	cpi	r20, 0x09	; 9
     e9c:	30 f0       	brcs	.+12     	; 0xeaa <convertFileName+0x38>
     e9e:	0e c0       	rjmp	.+28     	; 0xebc <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
	unsigned char fileNameFAT[11];
	unsigned char j, k;

	for(j=0; j<12; j++)
     ea0:	4f 5f       	subi	r20, 0xFF	; 255
     ea2:	31 96       	adiw	r30, 0x01	; 1
     ea4:	4c 30       	cpi	r20, 0x0C	; 12
     ea6:	b1 f7       	brne	.-20     	; 0xe94 <convertFileName+0x22>
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <convertFileName+0x4a>
     eaa:	be 01       	movw	r22, r28
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	85 2f       	mov	r24, r21
     eb2:	9a 2f       	mov	r25, r26
     eb4:	9c 01       	movw	r18, r24
     eb6:	f9 01       	movw	r30, r18
     eb8:	db 01       	movw	r26, r22
     eba:	08 c0       	rjmp	.+16     	; 0xecc <convertFileName+0x5a>
	if(fileName[j] == '.') break;

	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}
     ebc:	84 e5       	ldi	r24, 0x54	; 84
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	52 c0       	rjmp	.+164    	; 0xf6c <convertFileName+0xfa>

	for(k=0; k<j; k++) //setting file name
	  fileNameFAT[k] = fileName[k];
     ec8:	81 91       	ld	r24, Z+
     eca:	8d 93       	st	X+, r24
	for(j=0; j<12; j++)
	if(fileName[j] == '.') break;

	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}

	for(k=0; k<j; k++) //setting file name
     ecc:	8e 2f       	mov	r24, r30
     ece:	85 1b       	sub	r24, r21
     ed0:	84 17       	cp	r24, r20
     ed2:	d0 f3       	brcs	.-12     	; 0xec8 <convertFileName+0x56>
     ed4:	84 2f       	mov	r24, r20
	  fileNameFAT[k] = fileName[k];

	for(k=j; k<=7; k++) //filling file name trail with blanks
	  fileNameFAT[k] = ' ';
     ed6:	9e 01       	movw	r18, r28
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	90 e2       	ldi	r25, 0x20	; 32
     ede:	05 c0       	rjmp	.+10     	; 0xeea <convertFileName+0x78>
     ee0:	f9 01       	movw	r30, r18
     ee2:	e8 0f       	add	r30, r24
     ee4:	f1 1d       	adc	r31, r1
     ee6:	90 83       	st	Z, r25
	if(j>8) {USART_transmitStringToPCFromFlash(PSTR("Invalid fileName..")); return 1;}

	for(k=0; k<j; k++) //setting file name
	  fileNameFAT[k] = fileName[k];

	for(k=j; k<=7; k++) //filling file name trail with blanks
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	c9 f7       	brne	.-14     	; 0xee0 <convertFileName+0x6e>
	  fileNameFAT[k] = ' ';

	j++;
     eee:	24 2f       	mov	r18, r20
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else //filling extension trail with blanks
		{
			while(k<11)
			{
				fileNameFAT[k++] = ' ';
     ef2:	ae 01       	movw	r20, r28
     ef4:	4f 5f       	subi	r20, 0xFF	; 255
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	30 e2       	ldi	r19, 0x20	; 32
	  fileNameFAT[k] = ' ';

	j++;
	for(k=8; k<11; k++) //setting file extention
	{
		if(fileName[j] != 0)
     efa:	f8 01       	movw	r30, r16
     efc:	e2 0f       	add	r30, r18
     efe:	f1 1d       	adc	r31, r1
     f00:	90 81       	ld	r25, Z
     f02:	99 23       	and	r25, r25
     f04:	59 f0       	breq	.+22     	; 0xf1c <convertFileName+0xaa>
		{
			fileNameFAT[k] = fileName[j++];
     f06:	fa 01       	movw	r30, r20
     f08:	e8 0f       	add	r30, r24
     f0a:	f1 1d       	adc	r31, r1
     f0c:	90 83       	st	Z, r25
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	07 c0       	rjmp	.+14     	; 0xf20 <convertFileName+0xae>
		}
		else //filling extension trail with blanks
		{
			while(k<11)
			{
				fileNameFAT[k++] = ' ';
     f12:	fa 01       	movw	r30, r20
     f14:	e8 0f       	add	r30, r24
     f16:	f1 1d       	adc	r31, r1
     f18:	30 83       	st	Z, r19
     f1a:	8f 5f       	subi	r24, 0xFF	; 255
		{
			fileNameFAT[k] = fileName[j++];
		}
		else //filling extension trail with blanks
		{
			while(k<11)
     f1c:	8b 30       	cpi	r24, 0x0B	; 11
     f1e:	c8 f3       	brcs	.-14     	; 0xf12 <convertFileName+0xa0>

	for(k=j; k<=7; k++) //filling file name trail with blanks
	  fileNameFAT[k] = ' ';

	j++;
	for(k=8; k<11; k++) //setting file extention
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	8b 30       	cpi	r24, 0x0B	; 11
     f24:	50 f3       	brcs	.-44     	; 0xefa <convertFileName+0x88>
				fileNameFAT[k++] = ' ';
			}
		}
	}

	for(j=0; j<11; j++) //converting small letters to caps
     f26:	9e 01       	movw	r18, r28
     f28:	24 5f       	subi	r18, 0xF4	; 244
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     f2c:	fb 01       	movw	r30, r22
     f2e:	90 81       	ld	r25, Z
     f30:	89 2f       	mov	r24, r25
     f32:	81 56       	subi	r24, 0x61	; 97
     f34:	8a 31       	cpi	r24, 0x1A	; 26
     f36:	10 f4       	brcc	.+4      	; 0xf3c <convertFileName+0xca>
		{
	    	fileNameFAT[j] -= 0x20;
     f38:	90 52       	subi	r25, 0x20	; 32
     f3a:	90 83       	st	Z, r25
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
				fileNameFAT[k++] = ' ';
			}
		}
	}

	for(j=0; j<11; j++) //converting small letters to caps
     f40:	62 17       	cp	r22, r18
     f42:	73 07       	cpc	r23, r19
     f44:	99 f7       	brne	.-26     	; 0xf2c <convertFileName+0xba>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
	    	fileNameFAT[j] -= 0x20;
		}
	}

	for(j=0; j<11; j++)
	  fileName[j] = fileNameFAT[j];
     f4a:	ae 01       	movw	r20, r28
     f4c:	4f 5f       	subi	r20, 0xFF	; 255
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	f8 01       	movw	r30, r16
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	da 01       	movw	r26, r20
     f58:	a2 0f       	add	r26, r18
     f5a:	b3 1f       	adc	r27, r19
     f5c:	8c 91       	ld	r24, X
     f5e:	80 83       	st	Z, r24
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
		{
	    	fileNameFAT[j] -= 0x20;
		}
	}

	for(j=0; j<11; j++)
     f64:	2b 30       	cpi	r18, 0x0B	; 11
     f66:	31 05       	cpc	r19, r1
     f68:	99 f7       	brne	.-26     	; 0xf50 <convertFileName+0xde>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
	  fileName[j] = fileNameFAT[j];

	return 0;
}
     f6c:	2b 96       	adiw	r28, 0x0b	; 11
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	64 97       	sbiw	r28, 0x14	; 20
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	98 2e       	mov	r9, r24
     faa:	6a 01       	movw	r12, r20
     fac:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     fae:	de 01       	movw	r26, r28
     fb0:	11 96       	adiw	r26, 0x01	; 1
     fb2:	e8 e0       	ldi	r30, 0x08	; 8
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	84 e1       	ldi	r24, 0x14	; 20
     fb8:	01 90       	ld	r0, Z+
     fba:	0d 92       	st	X+, r0
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <displayMemory+0x36>
     fc0:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     fc2:	8c e2       	ldi	r24, 0x2C	; 44
     fc4:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     fc6:	05 30       	cpi	r16, 0x05	; 5
     fc8:	11 f0       	breq	.+4      	; 0xfce <displayMemory+0x4c>
     fca:	09 30       	cpi	r16, 0x09	; 9
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
     fce:	fe 01       	movw	r30, r28
     fd0:	e0 0f       	add	r30, r16
     fd2:	f1 1d       	adc	r31, r1
     fd4:	80 82       	st	Z, r8
	   i--;
     fd6:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     fd8:	5e 01       	movw	r10, r28
     fda:	a0 0e       	add	r10, r16
     fdc:	b1 1c       	adc	r11, r1
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
     fee:	60 63       	ori	r22, 0x30	; 48
     ff0:	f5 01       	movw	r30, r10
     ff2:	60 83       	st	Z, r22
    memory /= 10;
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	2a e0       	ldi	r18, 0x0A	; 10
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    1004:	c9 01       	movw	r24, r18
    1006:	da 01       	movw	r26, r20
    1008:	6c 01       	movw	r12, r24
    100a:	7d 01       	movw	r14, r26
	if(memory == 0) break;
    100c:	c1 14       	cp	r12, r1
    100e:	d1 04       	cpc	r13, r1
    1010:	e1 04       	cpc	r14, r1
    1012:	f1 04       	cpc	r15, r1
    1014:	11 f0       	breq	.+4      	; 0x101a <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1016:	01 50       	subi	r16, 0x01	; 1
    1018:	b1 f6       	brne	.-84     	; 0xfc6 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	9f 16       	cp	r9, r31
    101e:	11 f4       	brne	.+4      	; 0x1024 <displayMemory+0xa2>
    1020:	8b e4       	ldi	r24, 0x4B	; 75
    1022:	8e 87       	std	Y+14, r24	; 0x0e
  USART_transmitStringToPC(memoryString);
    1024:	ce 01       	movw	r24, r28
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	0e 94 c6 03 	call	0x78c	; 0x78c <USART_transmitStringToPC>
}
    102c:	64 96       	adiw	r28, 0x14	; 20
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	08 95       	ret

00001050 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    1068:	60 78       	andi	r22, 0x80	; 128
    106a:	3b 01       	movw	r6, r22
    106c:	4c 01       	movw	r8, r24
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	66 0c       	add	r6, r6
    1072:	77 1c       	adc	r7, r7
    1074:	88 1c       	adc	r8, r8
    1076:	99 1c       	adc	r9, r9
    1078:	2a 95       	dec	r18
    107a:	d1 f7       	brne	.-12     	; 0x1070 <searchNextFreeCluster+0x20>
    107c:	5b 01       	movw	r10, r22
    107e:	6c 01       	movw	r12, r24
    1080:	50 c0       	rjmp	.+160    	; 0x1122 <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    1082:	e0 90 bc 05 	lds	r14, 0x05BC
    1086:	f0 90 bd 05 	lds	r15, 0x05BD
    108a:	20 91 69 03 	lds	r18, 0x0369
    108e:	30 91 6a 03 	lds	r19, 0x036A
      SD_readSingleBlock(sector);
    1092:	00 e0       	ldi	r16, 0x00	; 0
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	80 91 b1 05 	lds	r24, 0x05B1
    109a:	90 91 b2 05 	lds	r25, 0x05B2
    109e:	a0 91 b3 05 	lds	r26, 0x05B3
    10a2:	b0 91 b4 05 	lds	r27, 0x05B4
    10a6:	e8 0e       	add	r14, r24
    10a8:	f9 1e       	adc	r15, r25
    10aa:	0a 1f       	adc	r16, r26
    10ac:	1b 1f       	adc	r17, r27
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	c4 01       	movw	r24, r8
    10b4:	b3 01       	movw	r22, r6
    10b6:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    10ba:	e2 0e       	add	r14, r18
    10bc:	f3 1e       	adc	r15, r19
    10be:	04 1f       	adc	r16, r20
    10c0:	15 1f       	adc	r17, r21
    10c2:	c8 01       	movw	r24, r16
    10c4:	b7 01       	movw	r22, r14
    10c6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    10ca:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    10cc:	e6 2f       	mov	r30, r22
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e6 56       	subi	r30, 0x66	; 102
    10da:	fc 4f       	sbci	r31, 0xFC	; 252
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	a2 81       	ldd	r26, Z+2	; 0x02
    10e2:	b3 81       	ldd	r27, Z+3	; 0x03
    10e4:	bf 70       	andi	r27, 0x0F	; 15
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	a1 05       	cpc	r26, r1
    10ea:	b1 05       	cpc	r27, r1
    10ec:	39 f4       	brne	.+14     	; 0x10fc <searchNextFreeCluster+0xac>
            return(cluster+i);
    10ee:	a6 01       	movw	r20, r12
    10f0:	95 01       	movw	r18, r10
    10f2:	26 0f       	add	r18, r22
    10f4:	31 1d       	adc	r19, r1
    10f6:	41 1d       	adc	r20, r1
    10f8:	51 1d       	adc	r21, r1
    10fa:	25 c0       	rjmp	.+74     	; 0x1146 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    10fc:	6f 5f       	subi	r22, 0xFF	; 255
    10fe:	60 38       	cpi	r22, 0x80	; 128
    1100:	29 f7       	brne	.-54     	; 0x10cc <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    1102:	80 e8       	ldi	r24, 0x80	; 128
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e0       	ldi	r26, 0x00	; 0
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	a8 0e       	add	r10, r24
    110c:	b9 1e       	adc	r11, r25
    110e:	ca 1e       	adc	r12, r26
    1110:	db 1e       	adc	r13, r27
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	68 0e       	add	r6, r24
    111c:	79 1e       	adc	r7, r25
    111e:	8a 1e       	adc	r8, r26
    1120:	9b 1e       	adc	r9, r27
    1122:	80 91 6b 03 	lds	r24, 0x036B
    1126:	90 91 6c 03 	lds	r25, 0x036C
    112a:	a0 91 6d 03 	lds	r26, 0x036D
    112e:	b0 91 6e 03 	lds	r27, 0x036E
    1132:	a8 16       	cp	r10, r24
    1134:	b9 06       	cpc	r11, r25
    1136:	ca 06       	cpc	r12, r26
    1138:	db 06       	cpc	r13, r27
    113a:	08 f4       	brcc	.+2      	; 0x113e <searchNextFreeCluster+0xee>
    113c:	a2 cf       	rjmp	.-188    	; 0x1082 <searchNextFreeCluster+0x32>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    1146:	b9 01       	movw	r22, r18
    1148:	ca 01       	movw	r24, r20
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	6f 90       	pop	r6
    1162:	08 95       	ret

00001164 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	d8 2e       	mov	r13, r24
    1172:	c6 2e       	mov	r12, r22
    1174:	79 01       	movw	r14, r18
    1176:	8a 01       	movw	r16, r20
	struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
	unsigned char error;

	SD_readSingleBlock(unusedSectors + 1);
    1178:	60 91 b1 05 	lds	r22, 0x05B1
    117c:	70 91 b2 05 	lds	r23, 0x05B2
    1180:	80 91 b3 05 	lds	r24, 0x05B3
    1184:	90 91 b4 05 	lds	r25, 0x05B4
    1188:	6f 5f       	subi	r22, 0xFF	; 255
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>

	if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    1194:	80 91 9a 03 	lds	r24, 0x039A
    1198:	90 91 9b 03 	lds	r25, 0x039B
    119c:	a0 91 9c 03 	lds	r26, 0x039C
    11a0:	b0 91 9d 03 	lds	r27, 0x039D
    11a4:	82 55       	subi	r24, 0x52	; 82
    11a6:	92 45       	sbci	r25, 0x52	; 82
    11a8:	a1 46       	sbci	r26, 0x61	; 97
    11aa:	b1 44       	sbci	r27, 0x41	; 65
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <getSetFreeCluster+0x4c>
    11ae:	54 c0       	rjmp	.+168    	; 0x1258 <getSetFreeCluster+0xf4>
    11b0:	80 91 7e 05 	lds	r24, 0x057E
    11b4:	90 91 7f 05 	lds	r25, 0x057F
    11b8:	a0 91 80 05 	lds	r26, 0x0580
    11bc:	b0 91 81 05 	lds	r27, 0x0581
    11c0:	82 57       	subi	r24, 0x72	; 114
    11c2:	92 47       	sbci	r25, 0x72	; 114
    11c4:	a1 44       	sbci	r26, 0x41	; 65
    11c6:	b1 46       	sbci	r27, 0x61	; 97
    11c8:	09 f0       	breq	.+2      	; 0x11cc <getSetFreeCluster+0x68>
    11ca:	46 c0       	rjmp	.+140    	; 0x1258 <getSetFreeCluster+0xf4>
    11cc:	80 91 96 05 	lds	r24, 0x0596
    11d0:	90 91 97 05 	lds	r25, 0x0597
    11d4:	a0 91 98 05 	lds	r26, 0x0598
    11d8:	b0 91 99 05 	lds	r27, 0x0599
    11dc:	80 50       	subi	r24, 0x00	; 0
    11de:	90 40       	sbci	r25, 0x00	; 0
    11e0:	a5 45       	sbci	r26, 0x55	; 85
    11e2:	ba 4a       	sbci	r27, 0xAA	; 170
    11e4:	c9 f5       	brne	.+114    	; 0x1258 <getSetFreeCluster+0xf4>
	return 0xffffffff;

	if(get_set == GET)
    11e6:	cc 20       	and	r12, r12
    11e8:	a9 f4       	brne	.+42     	; 0x1214 <getSetFreeCluster+0xb0>
	{
	if(totOrNext == TOTAL_FREE)
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	d8 16       	cp	r13, r24
    11ee:	49 f4       	brne	.+18     	; 0x1202 <getSetFreeCluster+0x9e>
	  return(FS->freeClusterCount);
    11f0:	20 91 82 05 	lds	r18, 0x0582
    11f4:	30 91 83 05 	lds	r19, 0x0583
    11f8:	40 91 84 05 	lds	r20, 0x0584
    11fc:	50 91 85 05 	lds	r21, 0x0585
    1200:	2f c0       	rjmp	.+94     	; 0x1260 <getSetFreeCluster+0xfc>
	else // when totOrNext = NEXT_FREE
	  return(FS->nextFreeCluster);
    1202:	20 91 86 05 	lds	r18, 0x0586
    1206:	30 91 87 05 	lds	r19, 0x0587
    120a:	40 91 88 05 	lds	r20, 0x0588
    120e:	50 91 89 05 	lds	r21, 0x0589
    1212:	26 c0       	rjmp	.+76     	; 0x1260 <getSetFreeCluster+0xfc>
	}
	else
	{
	if(totOrNext == TOTAL_FREE)
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	d2 16       	cp	r13, r18
    1218:	49 f4       	brne	.+18     	; 0x122c <getSetFreeCluster+0xc8>
	  FS->freeClusterCount = FSEntry;
    121a:	e0 92 82 05 	sts	0x0582, r14
    121e:	f0 92 83 05 	sts	0x0583, r15
    1222:	00 93 84 05 	sts	0x0584, r16
    1226:	10 93 85 05 	sts	0x0585, r17
    122a:	08 c0       	rjmp	.+16     	; 0x123c <getSetFreeCluster+0xd8>
	else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    122c:	e0 92 86 05 	sts	0x0586, r14
    1230:	f0 92 87 05 	sts	0x0587, r15
    1234:	00 93 88 05 	sts	0x0588, r16
    1238:	10 93 89 05 	sts	0x0589, r17

	error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    123c:	60 91 b1 05 	lds	r22, 0x05B1
    1240:	70 91 b2 05 	lds	r23, 0x05B2
    1244:	80 91 b3 05 	lds	r24, 0x05B3
    1248:	90 91 b4 05 	lds	r25, 0x05B4
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
	}
	return 0xffffffff;
    1258:	2f ef       	ldi	r18, 0xFF	; 255
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f ef       	ldi	r20, 0xFF	; 255
    125e:	5f ef       	ldi	r21, 0xFF	; 255
}
    1260:	b9 01       	movw	r22, r18
    1262:	ca 01       	movw	r24, r20
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	d8 2e       	mov	r13, r24
    127e:	db 01       	movw	r26, r22
    1280:	ca 01       	movw	r24, r20
    1282:	e9 e0       	ldi	r30, 0x09	; 9
    1284:	b6 95       	lsr	r27
    1286:	a7 95       	ror	r26
    1288:	97 95       	ror	r25
    128a:	87 95       	ror	r24
    128c:	ea 95       	dec	r30
    128e:	d1 f7       	brne	.-12     	; 0x1284 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    1290:	51 70       	andi	r21, 0x01	; 1
    1292:	60 70       	andi	r22, 0x00	; 0
    1294:	70 70       	andi	r23, 0x00	; 0
    1296:	41 15       	cp	r20, r1
    1298:	51 05       	cpc	r21, r1
    129a:	61 05       	cpc	r22, r1
    129c:	71 05       	cpc	r23, r1
    129e:	19 f4       	brne	.+6      	; 0x12a6 <freeMemoryUpdate+0x34>
    12a0:	ac 01       	movw	r20, r24
    12a2:	bd 01       	movw	r22, r26
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    12a6:	ac 01       	movw	r20, r24
    12a8:	bd 01       	movw	r22, r26
    12aa:	4f 5f       	subi	r20, 0xFF	; 255
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	6f 4f       	sbci	r22, 0xFF	; 255
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	db 01       	movw	r26, r22
    12b4:	ca 01       	movw	r24, r20
    12b6:	33 e0       	ldi	r19, 0x03	; 3
    12b8:	b6 95       	lsr	r27
    12ba:	a7 95       	ror	r26
    12bc:	97 95       	ror	r25
    12be:	87 95       	ror	r24
    12c0:	3a 95       	dec	r19
    12c2:	d1 f7       	brne	.-12     	; 0x12b8 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    12c4:	47 70       	andi	r20, 0x07	; 7
    12c6:	50 70       	andi	r21, 0x00	; 0
    12c8:	60 70       	andi	r22, 0x00	; 0
    12ca:	70 70       	andi	r23, 0x00	; 0
    12cc:	41 15       	cp	r20, r1
    12ce:	51 05       	cpc	r21, r1
    12d0:	61 05       	cpc	r22, r1
    12d2:	71 05       	cpc	r23, r1
    12d4:	19 f4       	brne	.+6      	; 0x12dc <freeMemoryUpdate+0x6a>
    12d6:	7c 01       	movw	r14, r24
    12d8:	8d 01       	movw	r16, r26
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    12dc:	7c 01       	movw	r14, r24
    12de:	8d 01       	movw	r16, r26
    12e0:	08 94       	sec
    12e2:	e1 1c       	adc	r14, r1
    12e4:	f1 1c       	adc	r15, r1
    12e6:	01 1d       	adc	r16, r1
    12e8:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    12ea:	80 91 c8 05 	lds	r24, 0x05C8
    12ee:	88 23       	and	r24, r24
    12f0:	d9 f0       	breq	.+54     	; 0x1328 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
	if(flag == ADD)
    1302:	dd 20       	and	r13, r13
    1304:	39 f4       	brne	.+14     	; 0x1314 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	2e 0d       	add	r18, r14
    130c:	3f 1d       	adc	r19, r15
    130e:	40 1f       	adc	r20, r16
    1310:	51 1f       	adc	r21, r17
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	2e 19       	sub	r18, r14
    131a:	3f 09       	sbc	r19, r15
    131c:	40 0b       	sbc	r20, r16
    131e:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
  }
}
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	08 95       	ret

00001334 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    1334:	2f 92       	push	r2
    1336:	3f 92       	push	r3
    1338:	4f 92       	push	r4
    133a:	5f 92       	push	r5
    133c:	6f 92       	push	r6
    133e:	7f 92       	push	r7
    1340:	8f 92       	push	r8
    1342:	9f 92       	push	r9
    1344:	af 92       	push	r10
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    1354:	20 91 6b 03 	lds	r18, 0x036B
    1358:	30 91 6c 03 	lds	r19, 0x036C
    135c:	40 91 6d 03 	lds	r20, 0x036D
    1360:	50 91 6e 03 	lds	r21, 0x036E
    1364:	60 91 9b 05 	lds	r22, 0x059B
    1368:	70 91 9c 05 	lds	r23, 0x059C
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    1374:	5b 01       	movw	r10, r22
    1376:	6c 01       	movw	r12, r24
    1378:	1a e0       	ldi	r17, 0x0A	; 10
    137a:	d6 94       	lsr	r13
    137c:	c7 94       	ror	r12
    137e:	b7 94       	ror	r11
    1380:	a7 94       	ror	r10
    1382:	1a 95       	dec	r17
    1384:	d1 f7       	brne	.-12     	; 0x137a <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
    1386:	e0 90 69 03 	lds	r14, 0x0369
    138a:	f0 90 6a 03 	lds	r15, 0x036A

TX_NEWLINE_PC;
    138e:	8d e0       	ldi	r24, 0x0D	; 13
    1390:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1394:	8a e0       	ldi	r24, 0x0A	; 10
    1396:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
TX_NEWLINE_PC;
    139a:	8d e0       	ldi	r24, 0x0D	; 13
    139c:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    13a0:	8a e0       	ldi	r24, 0x0A	; 10
    13a2:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
//USART_transmitStringToPCFromFlash(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
    13a6:	00 e0       	ldi	r16, 0x00	; 0
    13a8:	10 e0       	ldi	r17, 0x00	; 0
    13aa:	c6 01       	movw	r24, r12
    13ac:	b5 01       	movw	r22, r10
    13ae:	a8 01       	movw	r20, r16
    13b0:	97 01       	movw	r18, r14
    13b2:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    13b6:	ab 01       	movw	r20, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	0e 94 c1 07 	call	0xf82	; 0xf82 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
    13d0:	3b 01       	movw	r6, r22
    13d2:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    13d4:	80 91 6b 03 	lds	r24, 0x036B
    13d8:	90 91 6c 03 	lds	r25, 0x036C
    13dc:	a0 91 6d 03 	lds	r26, 0x036D
    13e0:	b0 91 6e 03 	lds	r27, 0x036E
    13e4:	86 15       	cp	r24, r6
    13e6:	97 05       	cpc	r25, r7
    13e8:	a8 05       	cpc	r26, r8
    13ea:	b9 05       	cpc	r27, r9
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <memoryStatistics+0xbc>
    13ee:	7c c0       	rjmp	.+248    	; 0x14e8 <memoryStatistics+0x1b4>
{
   freeClusterCountUpdated = 0;
    13f0:	10 92 c8 05 	sts	0x05C8, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    13f4:	a0 90 8f 03 	lds	r10, 0x038F
    13f8:	b0 90 90 03 	lds	r11, 0x0390
    13fc:	c0 90 91 03 	lds	r12, 0x0391
    1400:	d0 90 92 03 	lds	r13, 0x0392
    1404:	b2 e0       	ldi	r27, 0x02	; 2
    1406:	aa 0c       	add	r10, r10
    1408:	bb 1c       	adc	r11, r11
    140a:	cc 1c       	adc	r12, r12
    140c:	dd 1c       	adc	r13, r13
    140e:	ba 95       	dec	r27
    1410:	d1 f7       	brne	.-12     	; 0x1406 <memoryStatistics+0xd2>
    1412:	66 24       	eor	r6, r6
    1414:	77 24       	eor	r7, r7
    1416:	43 01       	movw	r8, r6
    1418:	22 24       	eor	r2, r2
    141a:	33 24       	eor	r3, r3
    141c:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    141e:	e0 90 bc 05 	lds	r14, 0x05BC
    1422:	f0 90 bd 05 	lds	r15, 0x05BD
    1426:	20 91 69 03 	lds	r18, 0x0369
    142a:	30 91 6a 03 	lds	r19, 0x036A
      SD_readSingleBlock(sector);
    142e:	00 e0       	ldi	r16, 0x00	; 0
    1430:	10 e0       	ldi	r17, 0x00	; 0
    1432:	80 91 b1 05 	lds	r24, 0x05B1
    1436:	90 91 b2 05 	lds	r25, 0x05B2
    143a:	a0 91 b3 05 	lds	r26, 0x05B3
    143e:	b0 91 b4 05 	lds	r27, 0x05B4
    1442:	e8 0e       	add	r14, r24
    1444:	f9 1e       	adc	r15, r25
    1446:	0a 1f       	adc	r16, r26
    1448:	1b 1f       	adc	r17, r27
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	c6 01       	movw	r24, r12
    1450:	b5 01       	movw	r22, r10
    1452:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    1456:	e2 0e       	add	r14, r18
    1458:	f3 1e       	adc	r15, r19
    145a:	04 1f       	adc	r16, r20
    145c:	15 1f       	adc	r17, r21
    145e:	c8 01       	movw	r24, r16
    1460:	b7 01       	movw	r22, r14
    1462:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    1466:	a2 01       	movw	r20, r4
    1468:	91 01       	movw	r18, r2
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    146e:	fb 01       	movw	r30, r22
    1470:	e6 56       	subi	r30, 0x66	; 102
    1472:	fc 4f       	sbci	r31, 0xFC	; 252
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	a2 81       	ldd	r26, Z+2	; 0x02
    147a:	b3 81       	ldd	r27, Z+3	; 0x03
    147c:	bf 70       	andi	r27, 0x0F	; 15
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	a1 05       	cpc	r26, r1
    1482:	b1 05       	cpc	r27, r1
    1484:	29 f4       	brne	.+10     	; 0x1490 <memoryStatistics+0x15c>
            freeClusters++;;
    1486:	08 94       	sec
    1488:	61 1c       	adc	r6, r1
    148a:	71 1c       	adc	r7, r1
    148c:	81 1c       	adc	r8, r1
    148e:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    1490:	2f 5f       	subi	r18, 0xFF	; 255
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	4f 4f       	sbci	r20, 0xFF	; 255
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    1498:	80 91 6b 03 	lds	r24, 0x036B
    149c:	90 91 6c 03 	lds	r25, 0x036C
    14a0:	a0 91 6d 03 	lds	r26, 0x036D
    14a4:	b0 91 6e 03 	lds	r27, 0x036E
    14a8:	02 96       	adiw	r24, 0x02	; 2
    14aa:	a1 1d       	adc	r26, r1
    14ac:	b1 1d       	adc	r27, r1
    14ae:	28 17       	cp	r18, r24
    14b0:	39 07       	cpc	r19, r25
    14b2:	4a 07       	cpc	r20, r26
    14b4:	5b 07       	cpc	r21, r27
    14b6:	c1 f0       	breq	.+48     	; 0x14e8 <memoryStatistics+0x1b4>
    14b8:	c9 01       	movw	r24, r18
    14ba:	82 19       	sub	r24, r2
    14bc:	93 09       	sbc	r25, r3
    14be:	6c 5f       	subi	r22, 0xFC	; 252
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    14c2:	02 e0       	ldi	r16, 0x02	; 2
    14c4:	60 30       	cpi	r22, 0x00	; 0
    14c6:	70 07       	cpc	r23, r16
    14c8:	91 f6       	brne	.-92     	; 0x146e <memoryStatistics+0x13a>
    14ca:	e1 2c       	mov	r14, r1
    14cc:	a2 e0       	ldi	r26, 0x02	; 2
    14ce:	fa 2e       	mov	r15, r26
    14d0:	01 2d       	mov	r16, r1
    14d2:	11 2d       	mov	r17, r1
    14d4:	ae 0c       	add	r10, r14
    14d6:	bf 1c       	adc	r11, r15
    14d8:	c0 1e       	adc	r12, r16
    14da:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    14dc:	80 38       	cpi	r24, 0x80	; 128
    14de:	91 05       	cpc	r25, r1
    14e0:	18 f0       	brcs	.+6      	; 0x14e8 <memoryStatistics+0x1b4>
    14e2:	19 01       	movw	r2, r18
    14e4:	2a 01       	movw	r4, r20
    14e6:	9b cf       	rjmp	.-202    	; 0x141e <memoryStatistics+0xea>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
    14e8:	80 91 c8 05 	lds	r24, 0x05C8
    14ec:	88 23       	and	r24, r24
    14ee:	31 f4       	brne	.+12     	; 0x14fc <memoryStatistics+0x1c8>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	a4 01       	movw	r20, r8
    14f6:	93 01       	movw	r18, r6
    14f8:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	80 93 c8 05 	sts	0x05C8, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
    1502:	20 91 9b 05 	lds	r18, 0x059B
    1506:	30 91 9c 05 	lds	r19, 0x059C
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	c4 01       	movw	r24, r8
    1510:	b3 01       	movw	r22, r6
    1512:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    1516:	fa e0       	ldi	r31, 0x0A	; 10
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	77 95       	ror	r23
    151e:	67 95       	ror	r22
    1520:	fa 95       	dec	r31
    1522:	d1 f7       	brne	.-12     	; 0x1518 <memoryStatistics+0x1e4>
freeMemory *= bytesPerSector ;
    1524:	20 91 69 03 	lds	r18, 0x0369
    1528:	30 91 6a 03 	lds	r19, 0x036A
//TX_NEWLINE_PC;
//USART_transmitStringToPCFromFlash(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    1534:	ab 01       	movw	r20, r22
    1536:	bc 01       	movw	r22, r24
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	0e 94 c1 07 	call	0xf82	; 0xf82 <displayMemory>
//TX_NEWLINE_PC; 
}
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	7f 90       	pop	r7
    1554:	6f 90       	pop	r6
    1556:	5f 90       	pop	r5
    1558:	4f 90       	pop	r4
    155a:	3f 90       	pop	r3
    155c:	2f 90       	pop	r2
    155e:	08 95       	ret

00001560 <getBootSectorData>:
#include "Globals.h"


unsigned char getBootSectorData (void)
{
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
	struct BS_Structure *bpb; //mapping the buffer onto the structure
	struct MBRinfo_Structure *mbr;
	struct partitionInfo_Structure *partition;
	unsigned long dataSectors;

	unusedSectors = 0;
    1578:	10 92 b1 05 	sts	0x05B1, r1
    157c:	10 92 b2 05 	sts	0x05B2, r1
    1580:	10 92 b3 05 	sts	0x05B3, r1
    1584:	10 92 b4 05 	sts	0x05B4, r1

	SD_readSingleBlock(0);
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
	bpb = (struct BS_Structure *)buffer;

	if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    1594:	80 91 9a 03 	lds	r24, 0x039A
    1598:	89 3e       	cpi	r24, 0xE9	; 233
    159a:	19 f1       	breq	.+70     	; 0x15e2 <getBootSectorData+0x82>
    159c:	8b 3e       	cpi	r24, 0xEB	; 235
    159e:	09 f1       	breq	.+66     	; 0x15e2 <getBootSectorData+0x82>
	{
		mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR

		if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    15a0:	80 91 98 05 	lds	r24, 0x0598
    15a4:	90 91 99 05 	lds	r25, 0x0599
    15a8:	85 55       	subi	r24, 0x55	; 85
    15aa:	9a 4a       	sbci	r25, 0xAA	; 170
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <getBootSectorData+0x50>
    15ae:	b0 c0       	rjmp	.+352    	; 0x1710 <getBootSectorData+0x1b0>

		partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
		unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    15b0:	60 91 60 05 	lds	r22, 0x0560
    15b4:	70 91 61 05 	lds	r23, 0x0561
    15b8:	80 91 62 05 	lds	r24, 0x0562
    15bc:	90 91 63 05 	lds	r25, 0x0563
    15c0:	60 93 b1 05 	sts	0x05B1, r22
    15c4:	70 93 b2 05 	sts	0x05B2, r23
    15c8:	80 93 b3 05 	sts	0x05B3, r24
    15cc:	90 93 b4 05 	sts	0x05B4, r25

		SD_readSingleBlock(partition->firstSector);//read the bpb sector
    15d0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
		bpb = (struct BS_Structure *)buffer;
		if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    15d4:	80 91 9a 03 	lds	r24, 0x039A
    15d8:	89 3e       	cpi	r24, 0xE9	; 233
    15da:	19 f0       	breq	.+6      	; 0x15e2 <getBootSectorData+0x82>
    15dc:	8b 3e       	cpi	r24, 0xEB	; 235
    15de:	09 f0       	breq	.+2      	; 0x15e2 <getBootSectorData+0x82>
    15e0:	97 c0       	rjmp	.+302    	; 0x1710 <getBootSectorData+0x1b0>
	}

	bytesPerSector = bpb->bytesPerSector;
    15e2:	80 91 a5 03 	lds	r24, 0x03A5
    15e6:	90 91 a6 03 	lds	r25, 0x03A6
    15ea:	90 93 6a 03 	sts	0x036A, r25
    15ee:	80 93 69 03 	sts	0x0369, r24
	//transmitHex(INT, bytesPerSector); USART_transmitByteToPC(' ');
	sectorPerCluster = bpb->sectorPerCluster;
    15f2:	80 91 a7 03 	lds	r24, 0x03A7
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	90 93 9c 05 	sts	0x059C, r25
    15fc:	80 93 9b 05 	sts	0x059B, r24
	//transmitHex(INT, sectorPerCluster); USART_transmitByteToPC(' ');
	reservedSectorCount = bpb->reservedSectorCount;
    1600:	a0 90 a8 03 	lds	r10, 0x03A8
    1604:	b0 90 a9 03 	lds	r11, 0x03A9
    1608:	b0 92 bd 05 	sts	0x05BD, r11
    160c:	a0 92 bc 05 	sts	0x05BC, r10
	rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    1610:	80 91 c6 03 	lds	r24, 0x03C6
    1614:	90 91 c7 03 	lds	r25, 0x03C7
    1618:	a0 91 c8 03 	lds	r26, 0x03C8
    161c:	b0 91 c9 03 	lds	r27, 0x03C9
    1620:	80 93 8f 03 	sts	0x038F, r24
    1624:	90 93 90 03 	sts	0x0390, r25
    1628:	a0 93 91 03 	sts	0x0391, r26
    162c:	b0 93 92 03 	sts	0x0392, r27
	firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    1630:	e0 90 bc 05 	lds	r14, 0x05BC
    1634:	f0 90 bd 05 	lds	r15, 0x05BD
    1638:	60 91 aa 03 	lds	r22, 0x03AA
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	20 91 be 03 	lds	r18, 0x03BE
    1646:	30 91 bf 03 	lds	r19, 0x03BF
    164a:	40 91 c0 03 	lds	r20, 0x03C0
    164e:	50 91 c1 03 	lds	r21, 0x03C1
    1652:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    1656:	3b 01       	movw	r6, r22
    1658:	4c 01       	movw	r8, r24
    165a:	00 e0       	ldi	r16, 0x00	; 0
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	80 91 b6 03 	lds	r24, 0x03B6
    1662:	90 91 b7 03 	lds	r25, 0x03B7
    1666:	a0 91 b8 03 	lds	r26, 0x03B8
    166a:	b0 91 b9 03 	lds	r27, 0x03B9
    166e:	e8 0e       	add	r14, r24
    1670:	f9 1e       	adc	r15, r25
    1672:	0a 1f       	adc	r16, r26
    1674:	1b 1f       	adc	r17, r27
    1676:	e6 0c       	add	r14, r6
    1678:	f7 1c       	adc	r15, r7
    167a:	08 1d       	adc	r16, r8
    167c:	19 1d       	adc	r17, r9
    167e:	e0 92 61 03 	sts	0x0361, r14
    1682:	f0 92 62 03 	sts	0x0362, r15
    1686:	00 93 63 03 	sts	0x0363, r16
    168a:	10 93 64 03 	sts	0x0364, r17

	dataSectors = bpb->totalSectors_F32
	              - bpb->reservedSectorCount
	              - ( bpb->numberofFATs * bpb->FATsize_F32);
	totalClusters = dataSectors / sectorPerCluster;
    168e:	20 91 9b 05 	lds	r18, 0x059B
    1692:	30 91 9c 05 	lds	r19, 0x059C
    1696:	cc 24       	eor	r12, r12
    1698:	dd 24       	eor	r13, r13
    169a:	60 91 ba 03 	lds	r22, 0x03BA
    169e:	70 91 bb 03 	lds	r23, 0x03BB
    16a2:	80 91 bc 03 	lds	r24, 0x03BC
    16a6:	90 91 bd 03 	lds	r25, 0x03BD
    16aa:	6a 19       	sub	r22, r10
    16ac:	7b 09       	sbc	r23, r11
    16ae:	8c 09       	sbc	r24, r12
    16b0:	9d 09       	sbc	r25, r13
    16b2:	66 19       	sub	r22, r6
    16b4:	77 09       	sbc	r23, r7
    16b6:	88 09       	sbc	r24, r8
    16b8:	99 09       	sbc	r25, r9
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    16c2:	c9 01       	movw	r24, r18
    16c4:	da 01       	movw	r26, r20
    16c6:	80 93 6b 03 	sts	0x036B, r24
    16ca:	90 93 6c 03 	sts	0x036C, r25
    16ce:	a0 93 6d 03 	sts	0x036D, r26
    16d2:	b0 93 6e 03 	sts	0x036E, r27
	//transmitHex(LONG, totalClusters); USART_transmitByteToPC(' ');

	if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
    16e6:	20 91 6b 03 	lds	r18, 0x036B
    16ea:	30 91 6c 03 	lds	r19, 0x036C
    16ee:	40 91 6d 03 	lds	r20, 0x036D
    16f2:	50 91 6e 03 	lds	r21, 0x036E
    16f6:	26 17       	cp	r18, r22
    16f8:	37 07       	cpc	r19, r23
    16fa:	48 07       	cpc	r20, r24
    16fc:	59 07       	cpc	r21, r25
    16fe:	18 f4       	brcc	.+6      	; 0x1706 <getBootSectorData+0x1a6>
	     freeClusterCountUpdated = 0;
    1700:	10 92 c8 05 	sts	0x05C8, r1
    1704:	03 c0       	rjmp	.+6      	; 0x170c <getBootSectorData+0x1ac>
	else
		 freeClusterCountUpdated = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 c8 05 	sts	0x05C8, r24
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <getBootSectorData+0x1b2>
    1710:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	9f 90       	pop	r9
    1724:	8f 90       	pop	r8
    1726:	7f 90       	pop	r7
    1728:	6f 90       	pop	r6
    172a:	08 95       	ret

0000172c <InitSDCard>:
  }
}

//******** END ****** www.dharmanitech.com *****
void InitSDCard(bool bVerb)
{
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	18 2f       	mov	r17, r24
	unsigned char iInit=0;
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	cardType = 0;
    1734:	10 92 c3 05 	sts	0x05C3, r1
    1738:	c0 e0       	ldi	r28, 0x00	; 0
    173a:	d0 e0       	ldi	r29, 0x00	; 0

	for (i=0; i<10; i++)
	{
		error = SD_init();
    173c:	0e 94 21 06 	call	0xc42	; 0xc42 <SD_init>
		if(!error) break;
    1740:	88 23       	and	r24, r24
    1742:	21 f0       	breq	.+8      	; 0x174c <InitSDCard+0x20>
	unsigned char iInit=0;
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	cardType = 0;

	for (i=0; i<10; i++)
    1744:	21 96       	adiw	r28, 0x01	; 1
    1746:	ca 30       	cpi	r28, 0x0A	; 10
    1748:	d1 05       	cpc	r29, r1
    174a:	c1 f7       	brne	.-16     	; 0x173c <InitSDCard+0x10>
	{
		error = SD_init();
		if(!error) break;
	}

	if(bVerb)
    174c:	11 23       	and	r17, r17
    174e:	09 f4       	brne	.+2      	; 0x1752 <InitSDCard+0x26>
    1750:	5f c0       	rjmp	.+190    	; 0x1810 <InitSDCard+0xe4>
	{
		if(error)
    1752:	88 23       	and	r24, r24
    1754:	71 f0       	breq	.+28     	; 0x1772 <InitSDCard+0x46>
		{
			if(error == 1) USART_transmitStringToPCFromFlash(PSTR("SD card not detected.."));
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	29 f4       	brne	.+10     	; 0x1764 <InitSDCard+0x38>
    175a:	83 e1       	ldi	r24, 0x13	; 19
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <InitSDCard+0x44>
			if(error == 2) USART_transmitStringToPCFromFlash(PSTR("Card Initialization failed.."));
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	21 f4       	brne	.+8      	; 0x1770 <InitSDCard+0x44>
    1768:	86 ef       	ldi	r24, 0xF6	; 246
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    1770:	ff cf       	rjmp	.-2      	; 0x1770 <InitSDCard+0x44>
		  	while(1);  //wait here forever if error in SD init 	
		}


		switch (cardType)
    1772:	80 91 c3 05 	lds	r24, 0x05C3
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	39 f0       	breq	.+14     	; 0x1788 <InitSDCard+0x5c>
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	41 f0       	breq	.+16     	; 0x178e <InitSDCard+0x62>
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	49 f4       	brne	.+18     	; 0x1794 <InitSDCard+0x68>
		{
		  case 1:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 1.x) Detected"));
    1782:	8c ec       	ldi	r24, 0xCC	; 204
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <InitSDCard+0x6c>
		  		 break;
		  case 2:USART_transmitStringToPCFromFlash(PSTR("High Capacity Card Detected"));
    1788:	80 eb       	ldi	r24, 0xB0	; 176
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <InitSDCard+0x6c>
		  		 break;
		  case 3:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 2.x) Detected"));
    178e:	86 e8       	ldi	r24, 0x86	; 134
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <InitSDCard+0x6c>
		  		 break;
		  default:USART_transmitStringToPCFromFlash(PSTR("Unknown SD Card Detected"));
    1794:	8d e6       	ldi	r24, 0x6D	; 109
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    179c:	80 ed       	ldi	r24, 0xD0	; 208
    179e:	97 e0       	ldi	r25, 0x07	; 7
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <InitSDCard+0x74>
	

		_delay_ms(1);   //some delay

		FAT32_active = 1;
		error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    17a4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <getBootSectorData>
		if(error) 	
    17a8:	88 23       	and	r24, r24
    17aa:	49 f0       	breq	.+18     	; 0x17be <InitSDCard+0x92>
		{
			TX_NEWLINE_PC;
    17ac:	8d e0       	ldi	r24, 0x0D	; 13
    17ae:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    17b2:	8a e0       	ldi	r24, 0x0A	; 10
    17b4:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			USART_transmitStringToPCFromFlash (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    17b8:	8c e5       	ldi	r24, 0x5C	; 92
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <InitSDCard+0xa2>
			FAT32_active = 0;
		}else{
			TX_NEWLINE_PC;
    17be:	8d e0       	ldi	r24, 0x0D	; 13
    17c0:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    17c4:	8a e0       	ldi	r24, 0x0A	; 10
    17c6:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			USART_transmitStringToPCFromFlash (PSTR("FAT32 file system detected..."));
    17ca:	8e e3       	ldi	r24, 0x3E	; 62
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
		}
		TX_NEWLINE_PC;	
    17d2:	8d e0       	ldi	r24, 0x0D	; 13
    17d4:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    17d8:	8a e0       	ldi	r24, 0x0A	; 10
    17da:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
		iInit=VS1053_Initialize();
    17de:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <VS1053_Initialize>
    17e2:	18 2f       	mov	r17, r24
		if(iInit==0){
    17e4:	88 23       	and	r24, r24
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <InitSDCard+0xc6>
			USART_transmitStringToPCFromFlash (PSTR("VS1053 MP3 chip sucessfully initialized"));
    17e8:	86 e1       	ldi	r24, 0x16	; 22
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <InitSDCard+0xd6>
			TX_NEWLINE_PC;	
		}else{
			USART_transmitStringToPCFromFlash (PSTR("Error initializing VS1053 - CODE "));
    17f2:	84 ef       	ldi	r24, 0xF4	; 244
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			USART_transmitByteToPC(iInit+64);
    17fa:	81 2f       	mov	r24, r17
    17fc:	80 5c       	subi	r24, 0xC0	; 192
    17fe:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			TX_NEWLINE_PC;
    1802:	8d e0       	ldi	r24, 0x0D	; 13
    1804:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1808:	8a e0       	ldi	r24, 0x0A	; 10
    180a:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    180e:	0a c0       	rjmp	.+20     	; 0x1824 <InitSDCard+0xf8>
		}
	}
	else
	{
		if(error)
    1810:	81 11       	cpse	r24, r1
    1812:	ff cf       	rjmp	.-2      	; 0x1812 <InitSDCard+0xe6>
    1814:	80 ed       	ldi	r24, 0xD0	; 208
    1816:	97 e0       	ldi	r25, 0x07	; 7
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <InitSDCard+0xec>
		  	while(1);  //wait here forever if error in SD init 	
		}
		_delay_ms(1);   //some delay

		FAT32_active = 1;
		error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    181c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <getBootSectorData>
		{
			FAT32_active = 0;
		}else{

		}
		iInit=VS1053_Initialize();
    1820:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <VS1053_Initialize>
	}
}
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	08 95       	ret

0000182c <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    182c:	4f 92       	push	r4
    182e:	5f 92       	push	r5
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	5b 01       	movw	r10, r22
    184e:	6c 01       	movw	r12, r24
    1850:	84 2e       	mov	r8, r20
    1852:	28 01       	movw	r4, r16
    1854:	39 01       	movw	r6, r18
	unsigned long *FATEntryValue;
	unsigned long FATEntrySector;
	unsigned char retry = 0;

	//get sector number of the cluster entry in the FAT
	FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1856:	80 91 bc 05 	lds	r24, 0x05BC
    185a:	90 91 bd 05 	lds	r25, 0x05BD
    185e:	02 e0       	ldi	r16, 0x02	; 2
    1860:	aa 0c       	add	r10, r10
    1862:	bb 1c       	adc	r11, r11
    1864:	cc 1c       	adc	r12, r12
    1866:	dd 1c       	adc	r13, r13
    1868:	0a 95       	dec	r16
    186a:	d1 f7       	brne	.-12     	; 0x1860 <getSetNextCluster+0x34>
    186c:	20 91 69 03 	lds	r18, 0x0369
    1870:	30 91 6a 03 	lds	r19, 0x036A
    1874:	7c 01       	movw	r14, r24
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	80 91 b1 05 	lds	r24, 0x05B1
    187e:	90 91 b2 05 	lds	r25, 0x05B2
    1882:	a0 91 b3 05 	lds	r26, 0x05B3
    1886:	b0 91 b4 05 	lds	r27, 0x05B4
    188a:	e8 0e       	add	r14, r24
    188c:	f9 1e       	adc	r15, r25
    188e:	0a 1f       	adc	r16, r26
    1890:	1b 1f       	adc	r17, r27
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	c6 01       	movw	r24, r12
    1898:	b5 01       	movw	r22, r10
    189a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    189e:	e2 0e       	add	r14, r18
    18a0:	f3 1e       	adc	r15, r19
    18a2:	04 1f       	adc	r16, r20
    18a4:	15 1f       	adc	r17, r21

	//get the offset address in that sector number
	FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    18a6:	c0 91 69 03 	lds	r28, 0x0369
    18aa:	d0 91 6a 03 	lds	r29, 0x036A
    18ae:	99 24       	eor	r9, r9

	//read the sector into a buffer
	while(retry <10)
	{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    18b0:	c8 01       	movw	r24, r16
    18b2:	b7 01       	movw	r22, r14
    18b4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    18b8:	88 23       	and	r24, r24
    18ba:	21 f0       	breq	.+8      	; 0x18c4 <getSetNextCluster+0x98>
    18bc:	93 94       	inc	r9

	//get the offset address in that sector number
	FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

	//read the sector into a buffer
	while(retry <10)
    18be:	8a e0       	ldi	r24, 0x0A	; 10
    18c0:	98 16       	cp	r9, r24
    18c2:	b1 f7       	brne	.-20     	; 0x18b0 <getSetNextCluster+0x84>
	{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

	//get the cluster address from the buffer
	FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    18c4:	9e 01       	movw	r18, r28
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	c6 01       	movw	r24, r12
    18cc:	b5 01       	movw	r22, r10
    18ce:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    18d2:	fb 01       	movw	r30, r22
    18d4:	e6 56       	subi	r30, 0x66	; 102
    18d6:	fc 4f       	sbci	r31, 0xFC	; 252

	if(get_set == GET)
    18d8:	88 20       	and	r8, r8
    18da:	31 f4       	brne	.+12     	; 0x18e8 <getSetNextCluster+0xbc>
	  return ((*FATEntryValue) & 0x0fffffff);
    18dc:	20 81       	ld	r18, Z
    18de:	31 81       	ldd	r19, Z+1	; 0x01
    18e0:	42 81       	ldd	r20, Z+2	; 0x02
    18e2:	53 81       	ldd	r21, Z+3	; 0x03
    18e4:	5f 70       	andi	r21, 0x0F	; 15
    18e6:	0c c0       	rjmp	.+24     	; 0x1900 <getSetNextCluster+0xd4>


	*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    18e8:	40 82       	st	Z, r4
    18ea:	51 82       	std	Z+1, r5	; 0x01
    18ec:	62 82       	std	Z+2, r6	; 0x02
    18ee:	73 82       	std	Z+3, r7	; 0x03

	SD_writeSingleBlock(FATEntrySector);
    18f0:	c8 01       	movw	r24, r16
    18f2:	b7 01       	movw	r22, r14
    18f4:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0

	return (0);
}
    1900:	b9 01       	movw	r22, r18
    1902:	ca 01       	movw	r24, r20
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	9f 90       	pop	r9
    191a:	8f 90       	pop	r8
    191c:	7f 90       	pop	r7
    191e:	6f 90       	pop	r6
    1920:	5f 90       	pop	r5
    1922:	4f 90       	pop	r4
    1924:	08 95       	ret

00001926 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1926:	2f 92       	push	r2
    1928:	3f 92       	push	r3
    192a:	4f 92       	push	r4
    192c:	5f 92       	push	r5
    192e:	6f 92       	push	r6
    1930:	7f 92       	push	r7
    1932:	8f 92       	push	r8
    1934:	9f 92       	push	r9
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	2a 97       	sbiw	r28, 0x0a	; 10
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	7f 83       	std	Y+7, r23	; 0x07
    195e:	6e 83       	std	Y+6, r22	; 0x06
	unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
	struct dir_Structure *dir;
	unsigned int i;
	unsigned char j;

	cluster = rootCluster; //root cluster
    1960:	a0 90 8f 03 	lds	r10, 0x038F
    1964:	b0 90 90 03 	lds	r11, 0x0390
    1968:	c0 90 91 03 	lds	r12, 0x0391
    196c:	d0 90 92 03 	lds	r13, 0x0392
			      USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
			  return 0;   
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
    1970:	81 50       	subi	r24, 0x01	; 1
    1972:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1974:	20 91 9b 05 	lds	r18, 0x059B
    1978:	30 91 9c 05 	lds	r19, 0x059C
    197c:	e0 90 61 03 	lds	r14, 0x0361
    1980:	f0 90 62 03 	lds	r15, 0x0362
    1984:	00 91 63 03 	lds	r16, 0x0363
    1988:	10 91 64 03 	lds	r17, 0x0364
    198c:	c6 01       	movw	r24, r12
    198e:	b5 01       	movw	r22, r10
    1990:	62 50       	subi	r22, 0x02	; 2
    1992:	70 40       	sbci	r23, 0x00	; 0
    1994:	80 40       	sbci	r24, 0x00	; 0
    1996:	90 40       	sbci	r25, 0x00	; 0
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    19a0:	1b 01       	movw	r2, r22
    19a2:	2c 01       	movw	r4, r24
    19a4:	2e 0c       	add	r2, r14
    19a6:	3f 1c       	adc	r3, r15
    19a8:	40 1e       	adc	r4, r16
    19aa:	51 1e       	adc	r5, r17
    19ac:	66 24       	eor	r6, r6
    19ae:	77 24       	eor	r7, r7
    19b0:	43 01       	movw	r8, r6
    19b2:	60 c1       	rjmp	.+704    	; 0x1c74 <findFiles+0x34e>

	while(1)
	{
	   firstSector = getFirstSector (cluster);

	   for(sector = 0; sector < sectorPerCluster; sector++)
    19b4:	d4 01       	movw	r26, r8
    19b6:	c3 01       	movw	r24, r6
    19b8:	82 0d       	add	r24, r2
    19ba:	93 1d       	adc	r25, r3
    19bc:	a4 1d       	adc	r26, r4
    19be:	b5 1d       	adc	r27, r5
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	ab 83       	std	Y+3, r26	; 0x03
    19c6:	bc 83       	std	Y+4, r27	; 0x04
	   {
	     SD_readSingleBlock (firstSector + sector);
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	e4 2e       	mov	r14, r20
    19d4:	f1 2c       	mov	r15, r1
    19d6:	3e c1       	rjmp	.+636    	; 0x1c54 <findFiles+0x32e>
	

	     for(i=0; i<bytesPerSector; i+=32)
    19d8:	8a 01       	movw	r16, r20
    19da:	06 56       	subi	r16, 0x66	; 102
    19dc:	1c 4f       	sbci	r17, 0xFC	; 252
	     {
		    dir = (struct dir_Structure *) &buffer[i];

	        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    19de:	f7 01       	movw	r30, r14
    19e0:	e6 56       	subi	r30, 0x66	; 102
    19e2:	fc 4f       	sbci	r31, 0xFC	; 252
    19e4:	b0 97       	sbiw	r30, 0x20	; 32
    19e6:	80 81       	ld	r24, Z
    19e8:	b0 96       	adiw	r30, 0x20	; 32
    19ea:	88 23       	and	r24, r24
    19ec:	41 f4       	brne	.+16     	; 0x19fe <findFiles+0xd8>
			{
			  if((flag == GET_FILE) || (flag == DELETE))
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	91 50       	subi	r25, 0x01	; 1
    19f2:	92 30       	cpi	r25, 0x02	; 2
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <findFiles+0xd2>
    19f6:	68 c1       	rjmp	.+720    	; 0x1cc8 <findFiles+0x3a2>
			      USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
    19f8:	8a ef       	ldi	r24, 0xFA	; 250
    19fa:	92 e0       	ldi	r25, 0x02	; 2
    19fc:	63 c1       	rjmp	.+710    	; 0x1cc4 <findFiles+0x39e>
			  return 0;   
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    19fe:	85 3e       	cpi	r24, 0xE5	; 229
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <findFiles+0xde>
    1a02:	24 c1       	rjmp	.+584    	; 0x1c4c <findFiles+0x326>
    1a04:	75 97       	sbiw	r30, 0x15	; 21
    1a06:	80 81       	ld	r24, Z
    1a08:	8f 30       	cpi	r24, 0x0F	; 15
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <findFiles+0xe8>
    1a0c:	1f c1       	rjmp	.+574    	; 0x1c4c <findFiles+0x326>
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
    1a0e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a10:	a2 30       	cpi	r26, 0x02	; 2
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <findFiles+0xf0>
    1a14:	d2 c0       	rjmp	.+420    	; 0x1bba <findFiles+0x294>
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
	          {
	            for(j=0; j<11; j++)
	            if(dir->name[j] != fileName[j]) break;
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	ae 81       	ldd	r26, Y+6	; 0x06
    1a22:	bf 81       	ldd	r27, Y+7	; 0x07
    1a24:	a2 0f       	add	r26, r18
    1a26:	b3 1f       	adc	r27, r19
    1a28:	fc 01       	movw	r30, r24
    1a2a:	90 81       	ld	r25, Z
    1a2c:	8c 91       	ld	r24, X
    1a2e:	98 17       	cp	r25, r24
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <findFiles+0x10e>
    1a32:	0c c1       	rjmp	.+536    	; 0x1c4c <findFiles+0x326>
    1a34:	82 2f       	mov	r24, r18
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
	          {
	            for(j=0; j<11; j++)
    1a3c:	2b 30       	cpi	r18, 0x0B	; 11
    1a3e:	31 05       	cpc	r19, r1
    1a40:	61 f7       	brne	.-40     	; 0x1a1a <findFiles+0xf4>
	            if(dir->name[j] != fileName[j]) break;
	            if(j == 11)
    1a42:	8b 30       	cpi	r24, 0x0B	; 11
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <findFiles+0x122>
    1a46:	02 c1       	rjmp	.+516    	; 0x1c4c <findFiles+0x326>
				{
				  if(flag == GET_FILE)
    1a48:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4a:	f1 30       	cpi	r31, 0x01	; 1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <findFiles+0x12a>
    1a4e:	3f c0       	rjmp	.+126    	; 0x1ace <findFiles+0x1a8>
	              {
				    appendFileSector = firstSector + sector;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	ab 81       	ldd	r26, Y+3	; 0x03
    1a56:	bc 81       	ldd	r27, Y+4	; 0x04
    1a58:	80 93 ca 05 	sts	0x05CA, r24
    1a5c:	90 93 cb 05 	sts	0x05CB, r25
    1a60:	a0 93 cc 05 	sts	0x05CC, r26
    1a64:	b0 93 cd 05 	sts	0x05CD, r27
					appendFileLocation = i;
    1a68:	ca 01       	movw	r24, r20
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	80 93 4f 03 	sts	0x034F, r24
    1a72:	90 93 50 03 	sts	0x0350, r25
    1a76:	a0 93 51 03 	sts	0x0351, r26
    1a7a:	b0 93 52 03 	sts	0x0352, r27
					appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1a7e:	d8 01       	movw	r26, r16
    1a80:	54 96       	adiw	r26, 0x14	; 20
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	55 97       	sbiw	r26, 0x15	; 21
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	99 27       	eor	r25, r25
    1a90:	88 27       	eor	r24, r24
    1a92:	f8 01       	movw	r30, r16
    1a94:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a96:	33 8d       	ldd	r19, Z+27	; 0x1b
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	82 2b       	or	r24, r18
    1a9e:	93 2b       	or	r25, r19
    1aa0:	a4 2b       	or	r26, r20
    1aa2:	b5 2b       	or	r27, r21
    1aa4:	80 93 be 05 	sts	0x05BE, r24
    1aa8:	90 93 bf 05 	sts	0x05BF, r25
    1aac:	a0 93 c0 05 	sts	0x05C0, r26
    1ab0:	b0 93 c1 05 	sts	0x05C1, r27
					fileSize = dir->fileSize;
    1ab4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ab6:	95 8d       	ldd	r25, Z+29	; 0x1d
    1ab8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1aba:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1abc:	80 93 65 03 	sts	0x0365, r24
    1ac0:	90 93 66 03 	sts	0x0366, r25
    1ac4:	a0 93 67 03 	sts	0x0367, r26
    1ac8:	b0 93 68 03 	sts	0x0368, r27
    1acc:	ff c0       	rjmp	.+510    	; 0x1ccc <findFiles+0x3a6>
				    return (dir);
				  }	
				  else    //when flag = DELETE
				  {
				     TX_NEWLINE_PC;
    1ace:	8d e0       	ldi	r24, 0x0D	; 13
    1ad0:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1ad4:	8a e0       	ldi	r24, 0x0A	; 10
    1ad6:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
					 USART_transmitStringToPCFromFlash(PSTR("Deleting.."));
    1ada:	8f ee       	ldi	r24, 0xEF	; 239
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
					 TX_NEWLINE_PC;
    1ae2:	8d e0       	ldi	r24, 0x0D	; 13
    1ae4:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1ae8:	8a e0       	ldi	r24, 0x0A	; 10
    1aea:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
					 TX_NEWLINE_PC;
    1aee:	8d e0       	ldi	r24, 0x0D	; 13
    1af0:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
					 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1afa:	d8 01       	movw	r26, r16
    1afc:	54 96       	adiw	r26, 0x14	; 20
    1afe:	8d 91       	ld	r24, X+
    1b00:	9c 91       	ld	r25, X
    1b02:	55 97       	sbiw	r26, 0x15	; 21
    1b04:	a0 e0       	ldi	r26, 0x00	; 0
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	5c 01       	movw	r10, r24
    1b0a:	99 24       	eor	r9, r9
    1b0c:	88 24       	eor	r8, r8
    1b0e:	f8 01       	movw	r30, r16
    1b10:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b12:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	88 2a       	or	r8, r24
    1b1a:	99 2a       	or	r9, r25
    1b1c:	aa 2a       	or	r10, r26
    1b1e:	bb 2a       	or	r11, r27
                
					 //mark file as 'deleted' in FAT table
					 dir->name[0] = DELETED;    
    1b20:	85 ee       	ldi	r24, 0xE5	; 229
    1b22:	80 83       	st	Z, r24
					 SD_writeSingleBlock (firstSector+sector);
    1b24:	69 81       	ldd	r22, Y+1	; 0x01
    1b26:	7a 81       	ldd	r23, Y+2	; 0x02
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
				 			 
					 freeMemoryUpdate (ADD, dir->fileSize);
    1b30:	d8 01       	movw	r26, r16
    1b32:	5c 96       	adiw	r26, 0x1c	; 28
    1b34:	4d 91       	ld	r20, X+
    1b36:	5d 91       	ld	r21, X+
    1b38:	6d 91       	ld	r22, X+
    1b3a:	7c 91       	ld	r23, X
    1b3c:	5f 97       	sbiw	r26, 0x1f	; 31
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 39 09 	call	0x1272	; 0x1272 <freeMemoryUpdate>

					 //update next free cluster entry in FSinfo sector
					 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
					 if(firstCluster < cluster)
    1b54:	86 16       	cp	r8, r22
    1b56:	97 06       	cpc	r9, r23
    1b58:	a8 06       	cpc	r10, r24
    1b5a:	b9 06       	cpc	r11, r25
    1b5c:	30 f4       	brcc	.+12     	; 0x1b6a <findFiles+0x244>
					     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	a5 01       	movw	r20, r10
    1b64:	94 01       	movw	r18, r8
    1b66:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>

					 //mark all the clusters allocated to the file as 'free'
				     while(1)  
				     {
				        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1b6a:	c5 01       	movw	r24, r10
    1b6c:	b4 01       	movw	r22, r8
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	00 e0       	ldi	r16, 0x00	; 0
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    1b7c:	f6 2e       	mov	r15, r22
    1b7e:	e7 2e       	mov	r14, r23
    1b80:	d8 2e       	mov	r13, r24
    1b82:	c9 2e       	mov	r12, r25
						getSetNextCluster (firstCluster, SET, 0);
    1b84:	c5 01       	movw	r24, r10
    1b86:	b4 01       	movw	r22, r8
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	00 e0       	ldi	r16, 0x00	; 0
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    1b96:	8f 2d       	mov	r24, r15
    1b98:	9e 2d       	mov	r25, r14
    1b9a:	ad 2d       	mov	r26, r13
    1b9c:	bc 2d       	mov	r27, r12
    1b9e:	4c 01       	movw	r8, r24
    1ba0:	5d 01       	movw	r10, r26
						if(nextCluster > 0x0ffffff6) 
    1ba2:	b7 ef       	ldi	r27, 0xF7	; 247
    1ba4:	8b 16       	cp	r8, r27
    1ba6:	bf ef       	ldi	r27, 0xFF	; 255
    1ba8:	9b 06       	cpc	r9, r27
    1baa:	bf ef       	ldi	r27, 0xFF	; 255
    1bac:	ab 06       	cpc	r10, r27
    1bae:	bf e0       	ldi	r27, 0x0F	; 15
    1bb0:	bb 06       	cpc	r11, r27
    1bb2:	d8 f2       	brcs	.-74     	; 0x1b6a <findFiles+0x244>
						   {USART_transmitStringToPCFromFlash(PSTR("File deleted!"));return 0;}
    1bb4:	81 ee       	ldi	r24, 0xE1	; 225
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	85 c0       	rjmp	.+266    	; 0x1cc4 <findFiles+0x39e>
				  }
	            }
	          }
	          else  //when flag = GET_LIST
			  {
			     TX_NEWLINE_PC;
    1bba:	8d e0       	ldi	r24, 0x0D	; 13
    1bbc:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1bc0:	8a e0       	ldi	r24, 0x0A	; 10
    1bc2:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1bc6:	1a 86       	std	Y+10, r1	; 0x0a
    1bc8:	19 86       	std	Y+9, r1	; 0x09
    1bca:	0b c0       	rjmp	.+22     	; 0x1be2 <findFiles+0x2bc>
				 for(j=0; j<11; j++)
			     {
				   if(j == 8) USART_transmitByteToPC(' ');
    1bcc:	e9 85       	ldd	r30, Y+9	; 0x09
    1bce:	e7 30       	cpi	r30, 0x07	; 7
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <findFiles+0x2b2>
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
    1bd4:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	9a 87       	std	Y+10, r25	; 0x0a
    1be0:	89 87       	std	Y+9, r24	; 0x09
				   USART_transmitByteToPC (dir->name[j]);
    1be2:	e9 85       	ldd	r30, Y+9	; 0x09
    1be4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1be6:	e0 0f       	add	r30, r16
    1be8:	f1 1f       	adc	r31, r17
    1bea:	80 81       	ld	r24, Z
    1bec:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	            }
	          }
	          else  //when flag = GET_LIST
			  {
			     TX_NEWLINE_PC;
				 for(j=0; j<11; j++)
    1bf0:	a9 85       	ldd	r26, Y+9	; 0x09
    1bf2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bf4:	1a 97       	sbiw	r26, 0x0a	; 10
    1bf6:	51 f7       	brne	.-44     	; 0x1bcc <findFiles+0x2a6>
			     {
				   if(j == 8) USART_transmitByteToPC(' ');
				   USART_transmitByteToPC (dir->name[j]);
				 }
			     USART_transmitStringToPCFromFlash (PSTR("   "));
    1bf8:	8d ed       	ldi	r24, 0xDD	; 221
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1c00:	87 01       	movw	r16, r14
    1c02:	06 56       	subi	r16, 0x66	; 102
    1c04:	1c 4f       	sbci	r17, 0xFC	; 252
    1c06:	05 51       	subi	r16, 0x15	; 21
    1c08:	10 40       	sbci	r17, 0x00	; 0
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	80 81       	ld	r24, Z
    1c0e:	0b 5e       	subi	r16, 0xEB	; 235
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	80 31       	cpi	r24, 0x10	; 16
    1c14:	b9 f0       	breq	.+46     	; 0x1c44 <findFiles+0x31e>
    1c16:	88 30       	cpi	r24, 0x08	; 8
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <findFiles+0x2fa>
				     USART_transmitStringToPCFromFlash (PSTR("FILE" ));
			         USART_transmitStringToPCFromFlash (PSTR("   "));
				     displayMemory (LOW, dir->fileSize);
				 }
				 else
				   USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1c1a:	8b ec       	ldi	r24, 0xCB	; 203
    1c1c:	92 e0       	ldi	r25, 0x02	; 2
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <findFiles+0x322>
				   USART_transmitByteToPC (dir->name[j]);
				 }
			     USART_transmitStringToPCFromFlash (PSTR("   "));
			     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
				 {
				     USART_transmitStringToPCFromFlash (PSTR("FILE" ));
    1c20:	88 ed       	ldi	r24, 0xD8	; 216
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			         USART_transmitStringToPCFromFlash (PSTR("   "));
    1c28:	84 ed       	ldi	r24, 0xD4	; 212
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
				     displayMemory (LOW, dir->fileSize);
    1c30:	f8 01       	movw	r30, r16
    1c32:	34 97       	sbiw	r30, 0x04	; 4
    1c34:	40 81       	ld	r20, Z
    1c36:	51 81       	ldd	r21, Z+1	; 0x01
    1c38:	62 81       	ldd	r22, Z+2	; 0x02
    1c3a:	73 81       	ldd	r23, Z+3	; 0x03
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0e 94 c1 07 	call	0xf82	; 0xf82 <displayMemory>
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <findFiles+0x326>
				 }
				 else
				   USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1c44:	80 ed       	ldi	r24, 0xD0	; 208
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    1c4c:	80 e2       	ldi	r24, 0x20	; 32
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	e8 0e       	add	r14, r24
    1c52:	f9 1e       	adc	r15, r25
    1c54:	a7 01       	movw	r20, r14
    1c56:	40 52       	subi	r20, 0x20	; 32
    1c58:	50 40       	sbci	r21, 0x00	; 0
	   for(sector = 0; sector < sectorPerCluster; sector++)
	   {
	     SD_readSingleBlock (firstSector + sector);
	

	     for(i=0; i<bytesPerSector; i+=32)
    1c5a:	80 91 69 03 	lds	r24, 0x0369
    1c5e:	90 91 6a 03 	lds	r25, 0x036A
    1c62:	48 17       	cp	r20, r24
    1c64:	59 07       	cpc	r21, r25
    1c66:	08 f4       	brcc	.+2      	; 0x1c6a <findFiles+0x344>
    1c68:	b7 ce       	rjmp	.-658    	; 0x19d8 <findFiles+0xb2>

	while(1)
	{
	   firstSector = getFirstSector (cluster);

	   for(sector = 0; sector < sectorPerCluster; sector++)
    1c6a:	08 94       	sec
    1c6c:	61 1c       	adc	r6, r1
    1c6e:	71 1c       	adc	r7, r1
    1c70:	81 1c       	adc	r8, r1
    1c72:	91 1c       	adc	r9, r1
    1c74:	80 91 9b 05 	lds	r24, 0x059B
    1c78:	90 91 9c 05 	lds	r25, 0x059C
    1c7c:	a0 e0       	ldi	r26, 0x00	; 0
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	68 16       	cp	r6, r24
    1c82:	79 06       	cpc	r7, r25
    1c84:	8a 06       	cpc	r8, r26
    1c86:	9b 06       	cpc	r9, r27
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <findFiles+0x366>
    1c8a:	94 ce       	rjmp	.-728    	; 0x19b4 <findFiles+0x8e>
			  }
	       }
	     }
	   }

	   cluster = (getSetNextCluster (cluster, GET, 0));
    1c8c:	c6 01       	movw	r24, r12
    1c8e:	b5 01       	movw	r22, r10
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	00 e0       	ldi	r16, 0x00	; 0
    1c94:	10 e0       	ldi	r17, 0x00	; 0
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    1c9e:	5b 01       	movw	r10, r22
    1ca0:	6c 01       	movw	r12, r24

	   if(cluster > 0x0ffffff6)
    1ca2:	97 ef       	ldi	r25, 0xF7	; 247
    1ca4:	a9 16       	cp	r10, r25
    1ca6:	9f ef       	ldi	r25, 0xFF	; 255
    1ca8:	b9 06       	cpc	r11, r25
    1caa:	9f ef       	ldi	r25, 0xFF	; 255
    1cac:	c9 06       	cpc	r12, r25
    1cae:	9f e0       	ldi	r25, 0x0F	; 15
    1cb0:	d9 06       	cpc	r13, r25
    1cb2:	50 f4       	brcc	.+20     	; 0x1cc8 <findFiles+0x3a2>
	   	 return 0;
	   if(cluster == 0) 
    1cb4:	a1 14       	cp	r10, r1
    1cb6:	b1 04       	cpc	r11, r1
    1cb8:	c1 04       	cpc	r12, r1
    1cba:	d1 04       	cpc	r13, r1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <findFiles+0x39a>
    1cbe:	5a ce       	rjmp	.-844    	; 0x1974 <findFiles+0x4e>
	   {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster"));  return 0;}
    1cc0:	82 eb       	ldi	r24, 0xB2	; 178
    1cc2:	92 e0       	ldi	r25, 0x02	; 2
    1cc4:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    1cc8:	00 e0       	ldi	r16, 0x00	; 0
    1cca:	10 e0       	ldi	r17, 0x00	; 0
	 }
	return 0;
}
    1ccc:	c8 01       	movw	r24, r16
    1cce:	2a 96       	adiw	r28, 0x0a	; 10
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	df 90       	pop	r13
    1ce8:	cf 90       	pop	r12
    1cea:	bf 90       	pop	r11
    1cec:	af 90       	pop	r10
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	7f 90       	pop	r7
    1cf4:	6f 90       	pop	r6
    1cf6:	5f 90       	pop	r5
    1cf8:	4f 90       	pop	r4
    1cfa:	3f 90       	pop	r3
    1cfc:	2f 90       	pop	r2
    1cfe:	08 95       	ret

00001d00 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1d06:	0e 94 39 07 	call	0xe72	; 0xe72 <convertFileName>
  if(error) return;
    1d0a:	88 23       	and	r24, r24
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	be 01       	movw	r22, r28
    1d12:	0e 94 93 0c 	call	0x1926	; 0x1926 <findFiles>
}
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	08 95       	ret

00001d1c <readAndRetreiveFileContents>:
	return 0;
}


unsigned char readAndRetreiveFileContents (unsigned char *fileName, unsigned char *dataString)
{
    1d1c:	2f 92       	push	r2
    1d1e:	3f 92       	push	r3
    1d20:	4f 92       	push	r4
    1d22:	5f 92       	push	r5
    1d24:	6f 92       	push	r6
    1d26:	7f 92       	push	r7
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	28 97       	sbiw	r28, 0x08	; 8
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	8c 01       	movw	r16, r24
    1d52:	7e 83       	std	Y+6, r23	; 0x06
    1d54:	6d 83       	std	Y+5, r22	; 0x05
	unsigned int k;//,iCntForSingleAudioWrite;
	unsigned char j, error;
	unsigned int iReadByteCnt;
	bool bEndOfFile=false;

	error = convertFileName (fileName); //convert fileName into FAT format
    1d56:	0e 94 39 07 	call	0xe72	; 0xe72 <convertFileName>
	if(error) return 1;
    1d5a:	88 23       	and	r24, r24
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <readAndRetreiveFileContents+0x46>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	a8 c0       	rjmp	.+336    	; 0x1eb2 <readAndRetreiveFileContents+0x196>

	dir = findFiles (GET_FILE, fileName); //get the file location
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	b8 01       	movw	r22, r16
    1d66:	0e 94 93 0c 	call	0x1926	; 0x1926 <findFiles>
    1d6a:	9c 01       	movw	r18, r24
	if(dir == 0) 
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	11 f4       	brne	.+4      	; 0x1d74 <readAndRetreiveFileContents+0x58>
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	9f c0       	rjmp	.+318    	; 0x1eb2 <readAndRetreiveFileContents+0x196>
	  return (2);

//	if(flag == VERIFY) return (1);	//specified file name is already existing

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1d74:	dc 01       	movw	r26, r24
    1d76:	54 96       	adiw	r26, 0x14	; 20
    1d78:	8d 91       	ld	r24, X+
    1d7a:	9c 91       	ld	r25, X
    1d7c:	55 97       	sbiw	r26, 0x15	; 21
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	6c 01       	movw	r12, r24
    1d84:	bb 24       	eor	r11, r11
    1d86:	aa 24       	eor	r10, r10
    1d88:	f9 01       	movw	r30, r18
    1d8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	a8 2a       	or	r10, r24
    1d94:	b9 2a       	or	r11, r25
    1d96:	ca 2a       	or	r12, r26
    1d98:	db 2a       	or	r13, r27

	fileSize = dir->fileSize;
    1d9a:	d9 01       	movw	r26, r18
    1d9c:	5c 96       	adiw	r26, 0x1c	; 28
    1d9e:	2d 90       	ld	r2, X+
    1da0:	3d 90       	ld	r3, X+
    1da2:	4d 90       	ld	r4, X+
    1da4:	5c 90       	ld	r5, X
    1da6:	5f 97       	sbiw	r26, 0x1f	; 31
    1da8:	29 82       	std	Y+1, r2	; 0x01
    1daa:	3a 82       	std	Y+2, r3	; 0x02
    1dac:	4b 82       	std	Y+3, r4	; 0x03
    1dae:	5c 82       	std	Y+4, r5	; 0x04
    1db0:	22 24       	eor	r2, r2
    1db2:	33 24       	eor	r3, r3
    1db4:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1db6:	20 91 9b 05 	lds	r18, 0x059B
    1dba:	30 91 9c 05 	lds	r19, 0x059C
    1dbe:	e0 90 61 03 	lds	r14, 0x0361
    1dc2:	f0 90 62 03 	lds	r15, 0x0362
    1dc6:	00 91 63 03 	lds	r16, 0x0363
    1dca:	10 91 64 03 	lds	r17, 0x0364
    1dce:	c6 01       	movw	r24, r12
    1dd0:	b5 01       	movw	r22, r10
    1dd2:	62 50       	subi	r22, 0x02	; 2
    1dd4:	70 40       	sbci	r23, 0x00	; 0
    1dd6:	80 40       	sbci	r24, 0x00	; 0
    1dd8:	90 40       	sbci	r25, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    1de2:	3b 01       	movw	r6, r22
    1de4:	4c 01       	movw	r8, r24
    1de6:	6e 0c       	add	r6, r14
    1de8:	7f 1c       	adc	r7, r15
    1dea:	80 1e       	adc	r8, r16
    1dec:	91 1e       	adc	r9, r17
    1dee:	10 e0       	ldi	r17, 0x00	; 0
    1df0:	40 c0       	rjmp	.+128    	; 0x1e72 <readAndRetreiveFileContents+0x156>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    1df2:	c4 01       	movw	r24, r8
    1df4:	b3 01       	movw	r22, r6
    1df6:	61 0f       	add	r22, r17
    1df8:	71 1d       	adc	r23, r1
    1dfa:	81 1d       	adc	r24, r1
    1dfc:	91 1d       	adc	r25, r1
    1dfe:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    1e02:	a2 01       	movw	r20, r4
    1e04:	91 01       	movw	r18, r2
    1e06:	60 e0       	ldi	r22, 0x00	; 0


			for(k=0; k<512; k++)
    1e08:	d2 01       	movw	r26, r4
    1e0a:	c1 01       	movw	r24, r2
    1e0c:	80 50       	subi	r24, 0x00	; 0
    1e0e:	9e 4f       	sbci	r25, 0xFE	; 254
    1e10:	af 4f       	sbci	r26, 0xFF	; 255
    1e12:	bf 4f       	sbci	r27, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    1e14:	29 80       	ldd	r2, Y+1	; 0x01
    1e16:	3a 80       	ldd	r3, Y+2	; 0x02
    1e18:	4b 80       	ldd	r4, Y+3	; 0x03
    1e1a:	5c 80       	ldd	r5, Y+4	; 0x04
    1e1c:	22 15       	cp	r18, r2
    1e1e:	33 05       	cpc	r19, r3
    1e20:	44 05       	cpc	r20, r4
    1e22:	55 05       	cpc	r21, r5
    1e24:	08 f0       	brcs	.+2      	; 0x1e28 <readAndRetreiveFileContents+0x10c>
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	2f 5f       	subi	r18, 0xFF	; 255
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    1e30:	28 17       	cp	r18, r24
    1e32:	39 07       	cpc	r19, r25
    1e34:	4a 07       	cpc	r20, r26
    1e36:	5b 07       	cpc	r21, r27
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <readAndRetreiveFileContents+0xf8>
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <readAndRetreiveFileContents+0x13e>
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
				
			}
			while(iReadByteCnt<k)
			{
				*dataString++=buffer[iReadByteCnt];
    1e3c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e3e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e40:	e6 56       	subi	r30, 0x66	; 102
    1e42:	fc 4f       	sbci	r31, 0xFC	; 252
    1e44:	80 81       	ld	r24, Z
    1e46:	ad 81       	ldd	r26, Y+5	; 0x05
    1e48:	be 81       	ldd	r27, Y+6	; 0x06
    1e4a:	8d 93       	st	X+, r24
    1e4c:	be 83       	std	Y+6, r27	; 0x06
    1e4e:	ad 83       	std	Y+5, r26	; 0x05
				if(iReadByteCnt++==k)return 0;	
    1e50:	ef 81       	ldd	r30, Y+7	; 0x07
    1e52:	f8 85       	ldd	r31, Y+8	; 0x08
    1e54:	31 96       	adiw	r30, 0x01	; 1
    1e56:	f8 87       	std	Y+8, r31	; 0x08
    1e58:	ef 83       	std	Y+7, r30	; 0x07
			for(k=0; k<512; k++)
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
				
			}
			while(iReadByteCnt<k)
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5c:	98 85       	ldd	r25, Y+8	; 0x08
    1e5e:	80 50       	subi	r24, 0x00	; 0
    1e60:	92 40       	sbci	r25, 0x02	; 2
    1e62:	60 f3       	brcs	.-40     	; 0x1e3c <readAndRetreiveFileContents+0x120>
			{
				*dataString++=buffer[iReadByteCnt];
				if(iReadByteCnt++==k)return 0;	
			}
			if(bEndOfFile)
    1e64:	66 23       	and	r22, r22
    1e66:	11 f0       	breq	.+4      	; 0x1e6c <readAndRetreiveFileContents+0x150>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	23 c0       	rjmp	.+70     	; 0x1eb2 <readAndRetreiveFileContents+0x196>

	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    1e6c:	1f 5f       	subi	r17, 0xFF	; 255
    1e6e:	19 01       	movw	r2, r18
    1e70:	2a 01       	movw	r4, r20
    1e72:	20 91 9b 05 	lds	r18, 0x059B
    1e76:	30 91 9c 05 	lds	r19, 0x059C
    1e7a:	81 2f       	mov	r24, r17
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	82 17       	cp	r24, r18
    1e80:	93 07       	cpc	r25, r19
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <readAndRetreiveFileContents+0x16a>
    1e84:	b6 cf       	rjmp	.-148    	; 0x1df2 <readAndRetreiveFileContents+0xd6>
			if(bEndOfFile)
			{
				return 0;
			}
		}
		cluster = getSetNextCluster (cluster, GET, 0);
    1e86:	c6 01       	movw	r24, r12
    1e88:	b5 01       	movw	r22, r10
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	00 e0       	ldi	r16, 0x00	; 0
    1e8e:	10 e0       	ldi	r17, 0x00	; 0
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    1e98:	5b 01       	movw	r10, r22
    1e9a:	6c 01       	movw	r12, r24
		if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 3;}
    1e9c:	61 15       	cp	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	81 05       	cpc	r24, r1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <readAndRetreiveFileContents+0x18c>
    1ea6:	87 cf       	rjmp	.-242    	; 0x1db6 <readAndRetreiveFileContents+0x9a>
    1ea8:	80 e8       	ldi	r24, 0x80	; 128
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    1eb0:	83 e0       	ldi	r24, 0x03	; 3
	}
	return 4;
}
    1eb2:	28 96       	adiw	r28, 0x08	; 8
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	bf 90       	pop	r11
    1ed0:	af 90       	pop	r10
    1ed2:	9f 90       	pop	r9
    1ed4:	8f 90       	pop	r8
    1ed6:	7f 90       	pop	r7
    1ed8:	6f 90       	pop	r6
    1eda:	5f 90       	pop	r5
    1edc:	4f 90       	pop	r4
    1ede:	3f 90       	pop	r3
    1ee0:	2f 90       	pop	r2
    1ee2:	08 95       	ret

00001ee4 <readFile>:
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************

unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    1ee4:	2f 92       	push	r2
    1ee6:	3f 92       	push	r3
    1ee8:	4f 92       	push	r4
    1eea:	5f 92       	push	r5
    1eec:	6f 92       	push	r6
    1eee:	7f 92       	push	r7
    1ef0:	8f 92       	push	r8
    1ef2:	9f 92       	push	r9
    1ef4:	af 92       	push	r10
    1ef6:	bf 92       	push	r11
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <readFile+0x26>
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <readFile+0x28>
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	e8 2e       	mov	r14, r24
    1f12:	8b 01       	movw	r16, r22
	unsigned int k;//,iCntForSingleAudioWrite;
	unsigned char j, error;
	//unsigned int iAudioByteCnt;
	bool bEndOfFile=false;

	error = convertFileName (fileName); //convert fileName into FAT format
    1f14:	cb 01       	movw	r24, r22
    1f16:	0e 94 39 07 	call	0xe72	; 0xe72 <convertFileName>
	if(error) return 2;
    1f1a:	88 23       	and	r24, r24
    1f1c:	11 f0       	breq	.+4      	; 0x1f22 <readFile+0x3e>
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	94 c0       	rjmp	.+296    	; 0x204a <readFile+0x166>

	dir = findFiles (GET_FILE, fileName); //get the file location
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	b8 01       	movw	r22, r16
    1f26:	0e 94 93 0c 	call	0x1926	; 0x1926 <findFiles>
    1f2a:	9c 01       	movw	r18, r24
	if(dir == 0) 
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <readFile+0x4e>
    1f30:	8b c0       	rjmp	.+278    	; 0x2048 <readFile+0x164>
	  return (0);

	if(flag == VERIFY) return (1);	//specified file name is already existing
    1f32:	22 24       	eor	r2, r2
    1f34:	23 94       	inc	r2
    1f36:	e2 14       	cp	r14, r2
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <readFile+0x5a>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	86 c0       	rjmp	.+268    	; 0x204a <readFile+0x166>

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1f3e:	dc 01       	movw	r26, r24
    1f40:	54 96       	adiw	r26, 0x14	; 20
    1f42:	8d 91       	ld	r24, X+
    1f44:	9c 91       	ld	r25, X
    1f46:	55 97       	sbiw	r26, 0x15	; 21
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	6c 01       	movw	r12, r24
    1f4e:	bb 24       	eor	r11, r11
    1f50:	aa 24       	eor	r10, r10
    1f52:	f9 01       	movw	r30, r18
    1f54:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f56:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	a8 2a       	or	r10, r24
    1f5e:	b9 2a       	or	r11, r25
    1f60:	ca 2a       	or	r12, r26
    1f62:	db 2a       	or	r13, r27

	fileSize = dir->fileSize;
    1f64:	d9 01       	movw	r26, r18
    1f66:	5c 96       	adiw	r26, 0x1c	; 28
    1f68:	2d 90       	ld	r2, X+
    1f6a:	3d 90       	ld	r3, X+
    1f6c:	4d 90       	ld	r4, X+
    1f6e:	5c 90       	ld	r5, X
    1f70:	5f 97       	sbiw	r26, 0x1f	; 31
    1f72:	29 82       	std	Y+1, r2	; 0x01
    1f74:	3a 82       	std	Y+2, r3	; 0x02
    1f76:	4b 82       	std	Y+3, r4	; 0x03
    1f78:	5c 82       	std	Y+4, r5	; 0x04
    1f7a:	22 24       	eor	r2, r2
    1f7c:	33 24       	eor	r3, r3
    1f7e:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1f80:	20 91 9b 05 	lds	r18, 0x059B
    1f84:	30 91 9c 05 	lds	r19, 0x059C
    1f88:	e0 90 61 03 	lds	r14, 0x0361
    1f8c:	f0 90 62 03 	lds	r15, 0x0362
    1f90:	00 91 63 03 	lds	r16, 0x0363
    1f94:	10 91 64 03 	lds	r17, 0x0364
    1f98:	c6 01       	movw	r24, r12
    1f9a:	b5 01       	movw	r22, r10
    1f9c:	62 50       	subi	r22, 0x02	; 2
    1f9e:	70 40       	sbci	r23, 0x00	; 0
    1fa0:	80 40       	sbci	r24, 0x00	; 0
    1fa2:	90 40       	sbci	r25, 0x00	; 0
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    1fac:	3b 01       	movw	r6, r22
    1fae:	4c 01       	movw	r8, r24
    1fb0:	6e 0c       	add	r6, r14
    1fb2:	7f 1c       	adc	r7, r15
    1fb4:	80 1e       	adc	r8, r16
    1fb6:	91 1e       	adc	r9, r17
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	28 c0       	rjmp	.+80     	; 0x200c <readFile+0x128>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    1fbc:	c4 01       	movw	r24, r8
    1fbe:	b3 01       	movw	r22, r6
    1fc0:	61 0f       	add	r22, r17
    1fc2:	71 1d       	adc	r23, r1
    1fc4:	81 1d       	adc	r24, r1
    1fc6:	91 1d       	adc	r25, r1
    1fc8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    1fcc:	d2 01       	movw	r26, r4
    1fce:	c1 01       	movw	r24, r2
    1fd0:	60 e0       	ldi	r22, 0x00	; 0


			for(k=0; k<512; k++)
    1fd2:	a2 01       	movw	r20, r4
    1fd4:	91 01       	movw	r18, r2
    1fd6:	20 50       	subi	r18, 0x00	; 0
    1fd8:	3e 4f       	sbci	r19, 0xFE	; 254
    1fda:	4f 4f       	sbci	r20, 0xFF	; 255
    1fdc:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    1fde:	29 80       	ldd	r2, Y+1	; 0x01
    1fe0:	3a 80       	ldd	r3, Y+2	; 0x02
    1fe2:	4b 80       	ldd	r4, Y+3	; 0x03
    1fe4:	5c 80       	ldd	r5, Y+4	; 0x04
    1fe6:	82 15       	cp	r24, r2
    1fe8:	93 05       	cpc	r25, r3
    1fea:	a4 05       	cpc	r26, r4
    1fec:	b5 05       	cpc	r27, r5
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <readFile+0x10e>
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	b1 1d       	adc	r27, r1
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    1ff8:	82 17       	cp	r24, r18
    1ffa:	93 07       	cpc	r25, r19
    1ffc:	a4 07       	cpc	r26, r20
    1ffe:	b5 07       	cpc	r27, r21
    2000:	71 f7       	brne	.-36     	; 0x1fde <readFile+0xfa>
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
			}
			if(bEndOfFile)
    2002:	66 23       	and	r22, r22
    2004:	09 f5       	brne	.+66     	; 0x2048 <readFile+0x164>

	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    2006:	1f 5f       	subi	r17, 0xFF	; 255
    2008:	1c 01       	movw	r2, r24
    200a:	2d 01       	movw	r4, r26
    200c:	20 91 9b 05 	lds	r18, 0x059B
    2010:	30 91 9c 05 	lds	r19, 0x059C
    2014:	81 2f       	mov	r24, r17
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	82 17       	cp	r24, r18
    201a:	93 07       	cpc	r25, r19
    201c:	78 f2       	brcs	.-98     	; 0x1fbc <readFile+0xd8>
			if(bEndOfFile)
			{
				return 0;
			}
		}
		cluster = getSetNextCluster (cluster, GET, 0);
    201e:	c6 01       	movw	r24, r12
    2020:	b5 01       	movw	r22, r10
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	10 e0       	ldi	r17, 0x00	; 0
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    2030:	5b 01       	movw	r10, r22
    2032:	6c 01       	movw	r12, r24
		if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 0;}
    2034:	61 15       	cp	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	81 05       	cpc	r24, r1
    203a:	91 05       	cpc	r25, r1
    203c:	09 f0       	breq	.+2      	; 0x2040 <readFile+0x15c>
    203e:	a0 cf       	rjmp	.-192    	; 0x1f80 <readFile+0x9c>
    2040:	89 e9       	ldi	r24, 0x99	; 153
    2042:	92 e0       	ldi	r25, 0x02	; 2
    2044:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    2048:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	7f 90       	pop	r7
    206c:	6f 90       	pop	r6
    206e:	5f 90       	pop	r5
    2070:	4f 90       	pop	r4
    2072:	3f 90       	pop	r3
    2074:	2f 90       	pop	r2
    2076:	08 95       	ret

00002078 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    2078:	2f 92       	push	r2
    207a:	3f 92       	push	r3
    207c:	4f 92       	push	r4
    207e:	5f 92       	push	r5
    2080:	6f 92       	push	r6
    2082:	7f 92       	push	r7
    2084:	8f 92       	push	r8
    2086:	9f 92       	push	r9
    2088:	af 92       	push	r10
    208a:	bf 92       	push	r11
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	bc 01       	movw	r22, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <readFile>

if(j == 1) 
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <writeFile+0x2e>
    20a4:	55 c0       	rjmp	.+170    	; 0x2150 <writeFile+0xd8>
{
  USART_transmitStringToPCFromFlash(PSTR("  File already existing, appending data..")); 
    20a6:	8a e2       	ldi	r24, 0x2A	; 42
    20a8:	92 e0       	ldi	r25, 0x02	; 2
    20aa:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
  appendFile = 1;
  cluster = appendStartCluster;
    20ae:	60 90 be 05 	lds	r6, 0x05BE
    20b2:	70 90 bf 05 	lds	r7, 0x05BF
    20b6:	80 90 c0 05 	lds	r8, 0x05C0
    20ba:	90 90 c1 05 	lds	r9, 0x05C1
    20be:	aa 24       	eor	r10, r10
    20c0:	bb 24       	eor	r11, r11
    20c2:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    20c4:	c4 01       	movw	r24, r8
    20c6:	b3 01       	movw	r22, r6
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	00 e0       	ldi	r16, 0x00	; 0
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    if(nextCluster == EOF) break;
    20d6:	6f 3f       	cpi	r22, 0xFF	; 255
    20d8:	2f ef       	ldi	r18, 0xFF	; 255
    20da:	72 07       	cpc	r23, r18
    20dc:	2f ef       	ldi	r18, 0xFF	; 255
    20de:	82 07       	cpc	r24, r18
    20e0:	2f e0       	ldi	r18, 0x0F	; 15
    20e2:	92 07       	cpc	r25, r18
    20e4:	41 f0       	breq	.+16     	; 0x20f6 <writeFile+0x7e>
	cluster = nextCluster;
	clusterCount++;
    20e6:	08 94       	sec
    20e8:	a1 1c       	adc	r10, r1
    20ea:	b1 1c       	adc	r11, r1
    20ec:	c1 1c       	adc	r12, r1
    20ee:	d1 1c       	adc	r13, r1
    20f0:	3b 01       	movw	r6, r22
    20f2:	4c 01       	movw	r8, r24
    20f4:	e7 cf       	rjmp	.-50     	; 0x20c4 <writeFile+0x4c>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    20f6:	20 91 9b 05 	lds	r18, 0x059B
    20fa:	30 91 9c 05 	lds	r19, 0x059C
    20fe:	60 91 69 03 	lds	r22, 0x0369
    2102:	70 91 6a 03 	lds	r23, 0x036A
    2106:	e0 90 69 03 	lds	r14, 0x0369
    210a:	f0 90 6a 03 	lds	r15, 0x036A
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    211a:	a6 01       	movw	r20, r12
    211c:	95 01       	movw	r18, r10
    211e:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	60 91 65 03 	lds	r22, 0x0365
    212a:	70 91 66 03 	lds	r23, 0x0366
    212e:	80 91 67 03 	lds	r24, 0x0367
    2132:	90 91 68 03 	lds	r25, 0x0368
    2136:	62 1b       	sub	r22, r18
    2138:	73 0b       	sbc	r23, r19
    213a:	84 0b       	sbc	r24, r20
    213c:	95 0b       	sbc	r25, r21
    213e:	00 e0       	ldi	r16, 0x00	; 0
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	a8 01       	movw	r20, r16
    2144:	97 01       	movw	r18, r14
    2146:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    214a:	b2 2e       	mov	r11, r18
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	3e c0       	rjmp	.+124    	; 0x21cc <writeFile+0x154>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	09 f4       	brne	.+2      	; 0x2156 <writeFile+0xde>
    2154:	08 c1       	rjmp	.+528    	; 0x2366 <writeFile+0x2ee>
else
{
//  TX_NEWLINE_PC;
//  USART_transmitStringToPCFromFlash(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	0e 94 b2 08 	call	0x1164	; 0x1164 <getSetFreeCluster>
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    216a:	80 91 6b 03 	lds	r24, 0x036B
    216e:	90 91 6c 03 	lds	r25, 0x036C
    2172:	a0 91 6d 03 	lds	r26, 0x036D
    2176:	b0 91 6e 03 	lds	r27, 0x036E
    217a:	82 17       	cp	r24, r18
    217c:	93 07       	cpc	r25, r19
    217e:	a4 07       	cpc	r26, r20
    2180:	b5 07       	cpc	r27, r21
    2182:	40 f4       	brcc	.+16     	; 0x2194 <writeFile+0x11c>
     cluster = rootCluster;
    2184:	20 91 8f 03 	lds	r18, 0x038F
    2188:	30 91 90 03 	lds	r19, 0x0390
    218c:	40 91 91 03 	lds	r20, 0x0391
    2190:	50 91 92 03 	lds	r21, 0x0392

  cluster = searchNextFreeCluster(cluster);
    2194:	ca 01       	movw	r24, r20
    2196:	b9 01       	movw	r22, r18
    2198:	0e 94 28 08 	call	0x1050	; 0x1050 <searchNextFreeCluster>
    219c:	3b 01       	movw	r6, r22
    219e:	4c 01       	movw	r8, r24
   if(cluster == 0)
    21a0:	61 15       	cp	r22, r1
    21a2:	71 05       	cpc	r23, r1
    21a4:	81 05       	cpc	r24, r1
    21a6:	91 05       	cpc	r25, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <writeFile+0x134>
    21aa:	dd c0       	rjmp	.+442    	; 0x2366 <writeFile+0x2ee>
   {
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0f ef       	ldi	r16, 0xFF	; 255
    21b0:	1f ef       	ldi	r17, 0xFF	; 255
    21b2:	2f ef       	ldi	r18, 0xFF	; 255
    21b4:	3f e0       	ldi	r19, 0x0F	; 15
    21b6:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
    21ba:	10 92 65 03 	sts	0x0365, r1
    21be:	10 92 66 03 	sts	0x0366, r1
    21c2:	10 92 67 03 	sts	0x0367, r1
    21c6:	10 92 68 03 	sts	0x0368, r1
    21ca:	20 e0       	ldi	r18, 0x00	; 0
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    21cc:	2b 2c       	mov	r2, r11
    21ce:	33 24       	eor	r3, r3
    21d0:	44 24       	eor	r4, r4
    21d2:	55 24       	eor	r5, r5
    21d4:	c4 01       	movw	r24, r8
    21d6:	b3 01       	movw	r22, r6
    21d8:	62 50       	subi	r22, 0x02	; 2
    21da:	70 40       	sbci	r23, 0x00	; 0
    21dc:	80 40       	sbci	r24, 0x00	; 0
    21de:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    21e0:	22 23       	and	r18, r18
    21e2:	e1 f1       	breq	.+120    	; 0x225c <writeFile+0x1e4>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    21e4:	20 91 9b 05 	lds	r18, 0x059B
    21e8:	30 91 9c 05 	lds	r19, 0x059C
    21ec:	e0 90 61 03 	lds	r14, 0x0361
    21f0:	f0 90 62 03 	lds	r15, 0x0362
    21f4:	00 91 63 03 	lds	r16, 0x0363
    21f8:	10 91 64 03 	lds	r17, 0x0364
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    21fc:	e2 0c       	add	r14, r2
    21fe:	f3 1c       	adc	r15, r3
    2200:	04 1d       	adc	r16, r4
    2202:	15 1d       	adc	r17, r5
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    220c:	e6 0e       	add	r14, r22
    220e:	f7 1e       	adc	r15, r23
    2210:	08 1f       	adc	r16, r24
    2212:	19 1f       	adc	r17, r25
    2214:	e0 92 94 03 	sts	0x0394, r14
    2218:	f0 92 95 03 	sts	0x0395, r15
    221c:	00 93 96 03 	sts	0x0396, r16
    2220:	10 93 97 03 	sts	0x0397, r17
	  SD_readSingleBlock (startBlock);
    2224:	60 91 94 03 	lds	r22, 0x0394
    2228:	70 91 95 03 	lds	r23, 0x0395
    222c:	80 91 96 03 	lds	r24, 0x0396
    2230:	90 91 97 03 	lds	r25, 0x0397
    2234:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    2238:	20 91 69 03 	lds	r18, 0x0369
    223c:	30 91 6a 03 	lds	r19, 0x036A
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	60 91 65 03 	lds	r22, 0x0365
    2248:	70 91 66 03 	lds	r23, 0x0366
    224c:	80 91 67 03 	lds	r24, 0x0367
    2250:	90 91 68 03 	lds	r25, 0x0368
    2254:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__udivmodsi4>
    2258:	1b 2d       	mov	r17, r11
    225a:	1f c0       	rjmp	.+62     	; 0x229a <writeFile+0x222>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    225c:	20 91 9b 05 	lds	r18, 0x059B
    2260:	30 91 9c 05 	lds	r19, 0x059C
    2264:	e0 90 61 03 	lds	r14, 0x0361
    2268:	f0 90 62 03 	lds	r15, 0x0362
    226c:	00 91 63 03 	lds	r16, 0x0363
    2270:	10 91 64 03 	lds	r17, 0x0364
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    227c:	e6 0e       	add	r14, r22
    227e:	f7 1e       	adc	r15, r23
    2280:	08 1f       	adc	r16, r24
    2282:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    2284:	e0 92 94 03 	sts	0x0394, r14
    2288:	f0 92 95 03 	sts	0x0395, r15
    228c:	00 93 96 03 	sts	0x0396, r16
    2290:	10 93 97 03 	sts	0x0397, r17
    2294:	10 e0       	ldi	r17, 0x00	; 0
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	20 91 65 03 	lds	r18, 0x0365
    229e:	30 91 66 03 	lds	r19, 0x0366
    22a2:	40 91 67 03 	lds	r20, 0x0367
    22a6:	50 91 68 03 	lds	r21, 0x0368
		 fileSize--;
	   } 
	   continue;     
	 }
//	 USART_transmitByteToPC(data);
     buffer[i++] = data;
    22aa:	fb 01       	movw	r30, r22
    22ac:	e6 56       	subi	r30, 0x66	; 102
    22ae:	fc 4f       	sbci	r31, 0xFC	; 252
    22b0:	10 82       	st	Z, r1
    22b2:	6f 5f       	subi	r22, 0xFF	; 255
    22b4:	7f 4f       	sbci	r23, 0xFF	; 255
    22b6:	2f 5f       	subi	r18, 0xFF	; 255
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	4f 4f       	sbci	r20, 0xFF	; 255
    22bc:	5f 4f       	sbci	r21, 0xFF	; 255
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	60 30       	cpi	r22, 0x00	; 0
    22c2:	78 07       	cpc	r23, r24
    22c4:	90 f3       	brcs	.-28     	; 0x22aa <writeFile+0x232>
    22c6:	20 93 65 03 	sts	0x0365, r18
    22ca:	30 93 66 03 	sts	0x0366, r19
    22ce:	40 93 67 03 	sts	0x0367, r20
    22d2:	50 93 68 03 	sts	0x0368, r21
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    22d6:	60 91 94 03 	lds	r22, 0x0394
    22da:	70 91 95 03 	lds	r23, 0x0395
    22de:	80 91 96 03 	lds	r24, 0x0396
    22e2:	90 91 97 03 	lds	r25, 0x0397
    22e6:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
       j++;
    22ea:	1f 5f       	subi	r17, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    22ec:	20 91 9b 05 	lds	r18, 0x059B
    22f0:	30 91 9c 05 	lds	r19, 0x059C
    22f4:	81 2f       	mov	r24, r17
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	82 17       	cp	r24, r18
    22fa:	93 07       	cpc	r25, r19
    22fc:	61 f4       	brne	.+24     	; 0x2316 <writeFile+0x29e>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    22fe:	c4 01       	movw	r24, r8
    2300:	b3 01       	movw	r22, r6
    2302:	0e 94 28 08 	call	0x1050	; 0x1050 <searchNextFreeCluster>
    2306:	6b 01       	movw	r12, r22
    2308:	7c 01       	movw	r14, r24

   if(cluster == 0)
    230a:	61 15       	cp	r22, r1
    230c:	71 05       	cpc	r23, r1
    230e:	81 05       	cpc	r24, r1
    2310:	91 05       	cpc	r25, r1
    2312:	a9 f4       	brne	.+42     	; 0x233e <writeFile+0x2c6>
    2314:	28 c0       	rjmp	.+80     	; 0x2366 <writeFile+0x2ee>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
    2316:	80 91 94 03 	lds	r24, 0x0394
    231a:	90 91 95 03 	lds	r25, 0x0395
    231e:	a0 91 96 03 	lds	r26, 0x0396
    2322:	b0 91 97 03 	lds	r27, 0x0397
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	a1 1d       	adc	r26, r1
    232a:	b1 1d       	adc	r27, r1
    232c:	80 93 94 03 	sts	0x0394, r24
    2330:	90 93 95 03 	sts	0x0395, r25
    2334:	a0 93 96 03 	sts	0x0396, r26
    2338:	b0 93 97 03 	sts	0x0397, r27
    233c:	ac cf       	rjmp	.-168    	; 0x2296 <writeFile+0x21e>
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    233e:	c4 01       	movw	r24, r8
    2340:	b3 01       	movw	r22, r6
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	97 01       	movw	r18, r14
    2346:	86 01       	movw	r16, r12
    2348:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    234c:	c7 01       	movw	r24, r14
    234e:	b6 01       	movw	r22, r12
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0f ef       	ldi	r16, 0xFF	; 255
    2354:	1f ef       	ldi	r17, 0xFF	; 255
    2356:	2f ef       	ldi	r18, 0xFF	; 255
    2358:	3f e0       	ldi	r19, 0x0F	; 15
    235a:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	36 01       	movw	r6, r12
    2362:	47 01       	movw	r8, r14
    2364:	37 cf       	rjmp	.-402    	; 0x21d4 <writeFile+0x15c>
   
   prevCluster = cluster;
 }
 
 return;
}
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	df 90       	pop	r13
    2370:	cf 90       	pop	r12
    2372:	bf 90       	pop	r11
    2374:	af 90       	pop	r10
    2376:	9f 90       	pop	r9
    2378:	8f 90       	pop	r8
    237a:	7f 90       	pop	r7
    237c:	6f 90       	pop	r6
    237e:	5f 90       	pop	r5
    2380:	4f 90       	pop	r4
    2382:	3f 90       	pop	r3
    2384:	2f 90       	pop	r2
    2386:	08 95       	ret

00002388 <ReplaceTheContentOfThisFileWith>:
/*
Modified write file function with replacing all the text with new text given
*/

int ReplaceTheContentOfThisFileWith (unsigned char *fileName, unsigned char *fileContent)
{
    2388:	6f 92       	push	r6
    238a:	7f 92       	push	r7
    238c:	8f 92       	push	r8
    238e:	9f 92       	push	r9
    2390:	af 92       	push	r10
    2392:	bf 92       	push	r11
    2394:	cf 92       	push	r12
    2396:	df 92       	push	r13
    2398:	ef 92       	push	r14
    239a:	ff 92       	push	r15
    239c:	0f 93       	push	r16
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	9c 01       	movw	r18, r24
    23a6:	eb 01       	movw	r28, r22
	struct dir_Structure *dir;
	unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

	//j = readFile (VERIFY, fileName);

	if(readFile (VERIFY, fileName) == 1) 
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	b9 01       	movw	r22, r18
    23ac:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <readFile>
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	19 f0       	breq	.+6      	; 0x23ba <ReplaceTheContentOfThisFileWith+0x32>
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	d1 c0       	rjmp	.+418    	; 0x255c <ReplaceTheContentOfThisFileWith+0x1d4>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    23ba:	a0 90 be 05 	lds	r10, 0x05BE
    23be:	b0 90 bf 05 	lds	r11, 0x05BF
    23c2:	c0 90 c0 05 	lds	r12, 0x05C0
    23c6:	d0 90 c1 05 	lds	r13, 0x05C1
    23ca:	8e ef       	ldi	r24, 0xFE	; 254
    23cc:	9f ef       	ldi	r25, 0xFF	; 255
    23ce:	af ef       	ldi	r26, 0xFF	; 255
    23d0:	bf ef       	ldi	r27, 0xFF	; 255
    23d2:	a8 0e       	add	r10, r24
    23d4:	b9 1e       	adc	r11, r25
    23d6:	ca 1e       	adc	r12, r26
    23d8:	db 1e       	adc	r13, r27
    23da:	60 91 9b 05 	lds	r22, 0x059B
    23de:	70 91 9c 05 	lds	r23, 0x059C
    23e2:	e0 90 61 03 	lds	r14, 0x0361
    23e6:	f0 90 62 03 	lds	r15, 0x0362
    23ea:	00 91 63 03 	lds	r16, 0x0363
    23ee:	10 91 64 03 	lds	r17, 0x0364
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a6 01       	movw	r20, r12
    23f8:	95 01       	movw	r18, r10
    23fa:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    23fe:	3b 01       	movw	r6, r22
    2400:	4c 01       	movw	r8, r24
    2402:	6e 0c       	add	r6, r14
    2404:	7f 1c       	adc	r7, r15
    2406:	80 1e       	adc	r8, r16
    2408:	91 1e       	adc	r9, r17
		//TX_NEWLINE_PC;
		appendFile = 1;
		cluster = appendStartCluster;
		clusterCount=0;
		firstSector = getFirstSector (cluster);
		startBlock = getFirstSector (cluster);
    240a:	60 91 9b 05 	lds	r22, 0x059B
    240e:	70 91 9c 05 	lds	r23, 0x059C
    2412:	e0 90 61 03 	lds	r14, 0x0361
    2416:	f0 90 62 03 	lds	r15, 0x0362
    241a:	00 91 63 03 	lds	r16, 0x0363
    241e:	10 91 64 03 	lds	r17, 0x0364
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    242a:	e6 0e       	add	r14, r22
    242c:	f7 1e       	adc	r15, r23
    242e:	08 1f       	adc	r16, r24
    2430:	19 1f       	adc	r17, r25
    2432:	e0 92 94 03 	sts	0x0394, r14
    2436:	f0 92 95 03 	sts	0x0395, r15
    243a:	00 93 96 03 	sts	0x0396, r16
    243e:	10 93 97 03 	sts	0x0397, r17
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	10 e0       	ldi	r17, 0x00	; 0
    2448:	36 c0       	rjmp	.+108    	; 0x24b6 <ReplaceTheContentOfThisFileWith+0x12e>
		i=0;
		j=0;
		while(*fileContent!='$')
		{			
			buffer[i++]=*fileContent;
    244a:	fc 01       	movw	r30, r24
    244c:	e6 56       	subi	r30, 0x66	; 102
    244e:	fc 4f       	sbci	r31, 0xFC	; 252
    2450:	20 83       	st	Z, r18
    2452:	01 96       	adiw	r24, 0x01	; 1
			fileContent++;
    2454:	21 96       	adiw	r28, 0x01	; 1
			if(i >= 512)
    2456:	a2 e0       	ldi	r26, 0x02	; 2
    2458:	80 30       	cpi	r24, 0x00	; 0
    245a:	9a 07       	cpc	r25, r26
    245c:	60 f1       	brcs	.+88     	; 0x24b6 <ReplaceTheContentOfThisFileWith+0x12e>
			{				
				i=0;
				error = SD_writeSingleBlock (startBlock);
    245e:	60 91 94 03 	lds	r22, 0x0394
    2462:	70 91 95 03 	lds	r23, 0x0395
    2466:	80 91 96 03 	lds	r24, 0x0396
    246a:	90 91 97 03 	lds	r25, 0x0397
    246e:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
				j++;
    2472:	1f 5f       	subi	r17, 0xFF	; 255
				if(j == sectorPerCluster) {j = 0; break;}
    2474:	20 91 9b 05 	lds	r18, 0x059B
    2478:	30 91 9c 05 	lds	r19, 0x059C
    247c:	81 2f       	mov	r24, r17
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	82 17       	cp	r24, r18
    2482:	93 07       	cpc	r25, r19
    2484:	19 f4       	brne	.+6      	; 0x248c <ReplaceTheContentOfThisFileWith+0x104>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	18 c0       	rjmp	.+48     	; 0x24bc <ReplaceTheContentOfThisFileWith+0x134>
				startBlock++; 
    248c:	80 91 94 03 	lds	r24, 0x0394
    2490:	90 91 95 03 	lds	r25, 0x0395
    2494:	a0 91 96 03 	lds	r26, 0x0396
    2498:	b0 91 97 03 	lds	r27, 0x0397
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	a1 1d       	adc	r26, r1
    24a0:	b1 1d       	adc	r27, r1
    24a2:	80 93 94 03 	sts	0x0394, r24
    24a6:	90 93 95 03 	sts	0x0395, r25
    24aa:	a0 93 96 03 	sts	0x0396, r26
    24ae:	b0 93 97 03 	sts	0x0397, r27
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
		clusterCount=0;
		firstSector = getFirstSector (cluster);
		startBlock = getFirstSector (cluster);
		i=0;
		j=0;
		while(*fileContent!='$')
    24b6:	28 81       	ld	r18, Y
    24b8:	24 32       	cpi	r18, 0x24	; 36
    24ba:	39 f6       	brne	.-114    	; 0x244a <ReplaceTheContentOfThisFileWith+0xc2>
				if(j == sectorPerCluster) {j = 0; break;}
				startBlock++; 
			}
		}
		//fileContent--;
		if(*fileContent=='$')
    24bc:	68 81       	ld	r22, Y
    24be:	64 32       	cpi	r22, 0x24	; 36
    24c0:	09 f5       	brne	.+66     	; 0x2504 <ReplaceTheContentOfThisFileWith+0x17c>
		{
			buffer[i++]='$';
    24c2:	fc 01       	movw	r30, r24
    24c4:	e6 56       	subi	r30, 0x66	; 102
    24c6:	fc 4f       	sbci	r31, 0xFC	; 252
    24c8:	60 83       	st	Z, r22
    24ca:	04 c0       	rjmp	.+8      	; 0x24d4 <ReplaceTheContentOfThisFileWith+0x14c>
			for(;i<512;i++)  //fill the rest of the buffer with 0x00
				buffer[i]= 0x00;
    24cc:	fc 01       	movw	r30, r24
    24ce:	e6 56       	subi	r30, 0x66	; 102
    24d0:	fc 4f       	sbci	r31, 0xFC	; 252
    24d2:	10 82       	st	Z, r1
		}
		//fileContent--;
		if(*fileContent=='$')
		{
			buffer[i++]='$';
			for(;i<512;i++)  //fill the rest of the buffer with 0x00
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	b2 e0       	ldi	r27, 0x02	; 2
    24d8:	80 30       	cpi	r24, 0x00	; 0
    24da:	9b 07       	cpc	r25, r27
    24dc:	b8 f3       	brcs	.-18     	; 0x24cc <ReplaceTheContentOfThisFileWith+0x144>
				buffer[i]= 0x00;
			error = SD_writeSingleBlock (startBlock);
    24de:	60 91 94 03 	lds	r22, 0x0394
    24e2:	70 91 95 03 	lds	r23, 0x0395
    24e6:	80 91 96 03 	lds	r24, 0x0396
    24ea:	90 91 97 03 	lds	r25, 0x0397
    24ee:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
    24f2:	88 ee       	ldi	r24, 0xE8	; 232
    24f4:	93 e0       	ldi	r25, 0x03	; 3
    24f6:	28 ec       	ldi	r18, 0xC8	; 200
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	f9 01       	movw	r30, r18
    24fc:	31 97       	sbiw	r30, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <ReplaceTheContentOfThisFileWith+0x174>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	d9 f7       	brne	.-10     	; 0x24fa <ReplaceTheContentOfThisFileWith+0x172>
			_delay_ms(100);
			//USART_transmitStringToPCFromFlash(PSTR("Successfully replace the file content")); 
			//TX_NEWLINE_PC;
		}
		SD_readSingleBlock (firstSector);    
    2504:	c4 01       	movw	r24, r8
    2506:	b3 01       	movw	r22, r6
    2508:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    250c:	88 ee       	ldi	r24, 0xE8	; 232
    250e:	93 e0       	ldi	r25, 0x03	; 3
    2510:	28 ec       	ldi	r18, 0xC8	; 200
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	f9 01       	movw	r30, r18
    2516:	31 97       	sbiw	r30, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <ReplaceTheContentOfThisFileWith+0x18e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	d9 f7       	brne	.-10     	; 0x2514 <ReplaceTheContentOfThisFileWith+0x18c>
		_delay_ms(100);
		dir = (struct dir_Structure *) &buffer[0]; 
		//extraMemory = fileSize - dir->fileSize;
		dir->fileSize = fileSize;
    251e:	80 91 65 03 	lds	r24, 0x0365
    2522:	90 91 66 03 	lds	r25, 0x0366
    2526:	a0 91 67 03 	lds	r26, 0x0367
    252a:	b0 91 68 03 	lds	r27, 0x0368
    252e:	80 93 b6 03 	sts	0x03B6, r24
    2532:	90 93 b7 03 	sts	0x03B7, r25
    2536:	a0 93 b8 03 	sts	0x03B8, r26
    253a:	b0 93 b9 03 	sts	0x03B9, r27
		SD_writeSingleBlock (firstSector);
    253e:	c4 01       	movw	r24, r8
    2540:	b3 01       	movw	r22, r6
    2542:	0e 94 95 06 	call	0xd2a	; 0xd2a <SD_writeSingleBlock>
    2546:	88 ee       	ldi	r24, 0xE8	; 232
    2548:	93 e0       	ldi	r25, 0x03	; 3
    254a:	28 ec       	ldi	r18, 0xC8	; 200
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	f9 01       	movw	r30, r18
    2550:	31 97       	sbiw	r30, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <ReplaceTheContentOfThisFileWith+0x1c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	d9 f7       	brne	.-10     	; 0x254e <ReplaceTheContentOfThisFileWith+0x1c6>
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
		//USART_transmitStringToPCFromFlash(PSTR("SABT-ERR001")); 
		//TX_NEWLINE_PC;
	}
	return 2;
}
    255c:	c9 01       	movw	r24, r18
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	9f 90       	pop	r9
    2574:	8f 90       	pop	r8
    2576:	7f 90       	pop	r7
    2578:	6f 90       	pop	r6
    257a:	08 95       	ret

0000257c <PlayMP3file>:
2. Stop playing command issued from the controller

*/

unsigned char PlayMP3file (unsigned char *fileName)
{
    257c:	2f 92       	push	r2
    257e:	3f 92       	push	r3
    2580:	4f 92       	push	r4
    2582:	5f 92       	push	r5
    2584:	6f 92       	push	r6
    2586:	7f 92       	push	r7
    2588:	8f 92       	push	r8
    258a:	9f 92       	push	r9
    258c:	af 92       	push	r10
    258e:	bf 92       	push	r11
    2590:	cf 92       	push	r12
    2592:	df 92       	push	r13
    2594:	ef 92       	push	r14
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	2a 97       	sbiw	r28, 0x0a	; 10
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	8c 01       	movw	r16, r24
	unsigned int k,iCntForSingleAudioWrite;
	unsigned char j, error;
	unsigned int iAudioByteCnt;
	bool bEndOfFile=false;

	UI_MP3_file_Pending=false;
    25b2:	10 92 4e 03 	sts	0x034E, r1

	error = convertFileName (fileName); //convert fileName into FAT format
    25b6:	0e 94 39 07 	call	0xe72	; 0xe72 <convertFileName>
	if(error) return 2;
    25ba:	88 23       	and	r24, r24
    25bc:	11 f0       	breq	.+4      	; 0x25c2 <PlayMP3file+0x46>
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	d9 c0       	rjmp	.+434    	; 0x2774 <PlayMP3file+0x1f8>

	dir = findFiles (GET_FILE, fileName); //get the file location
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	b8 01       	movw	r22, r16
    25c6:	0e 94 93 0c 	call	0x1926	; 0x1926 <findFiles>
    25ca:	9c 01       	movw	r18, r24
	if(dir == 0) 
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <PlayMP3file+0x56>
    25d0:	d0 c0       	rjmp	.+416    	; 0x2772 <PlayMP3file+0x1f6>
	  return (0);

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    25d2:	dc 01       	movw	r26, r24
    25d4:	54 96       	adiw	r26, 0x14	; 20
    25d6:	8d 91       	ld	r24, X+
    25d8:	9c 91       	ld	r25, X
    25da:	55 97       	sbiw	r26, 0x15	; 21
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	5c 01       	movw	r10, r24
    25e2:	99 24       	eor	r9, r9
    25e4:	88 24       	eor	r8, r8
    25e6:	f9 01       	movw	r30, r18
    25e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	88 2a       	or	r8, r24
    25f2:	99 2a       	or	r9, r25
    25f4:	aa 2a       	or	r10, r26
    25f6:	bb 2a       	or	r11, r27

	fileSize = dir->fileSize;
    25f8:	d9 01       	movw	r26, r18
    25fa:	5c 96       	adiw	r26, 0x1c	; 28
    25fc:	8d 91       	ld	r24, X+
    25fe:	9d 91       	ld	r25, X+
    2600:	0d 90       	ld	r0, X+
    2602:	bc 91       	ld	r27, X
    2604:	a0 2d       	mov	r26, r0
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	ab 83       	std	Y+3, r26	; 0x03
    260c:	bc 83       	std	Y+4, r27	; 0x04
	VS1053_SKIP_PLAY=false;
    260e:	10 92 c4 05 	sts	0x05C4, r1
    2612:	1d 82       	std	Y+5, r1	; 0x05
    2614:	1e 82       	std	Y+6, r1	; 0x06
    2616:	1f 82       	std	Y+7, r1	; 0x07
    2618:	18 86       	std	Y+8, r1	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    261a:	20 91 9b 05 	lds	r18, 0x059B
    261e:	30 91 9c 05 	lds	r19, 0x059C
    2622:	e0 90 61 03 	lds	r14, 0x0361
    2626:	f0 90 62 03 	lds	r15, 0x0362
    262a:	00 91 63 03 	lds	r16, 0x0363
    262e:	10 91 64 03 	lds	r17, 0x0364
    2632:	c5 01       	movw	r24, r10
    2634:	b4 01       	movw	r22, r8
    2636:	62 50       	subi	r22, 0x02	; 2
    2638:	70 40       	sbci	r23, 0x00	; 0
    263a:	80 40       	sbci	r24, 0x00	; 0
    263c:	90 40       	sbci	r25, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	0e 94 c4 18 	call	0x3188	; 0x3188 <__mulsi3>
    2646:	2b 01       	movw	r4, r22
    2648:	3c 01       	movw	r6, r24
    264a:	4e 0c       	add	r4, r14
    264c:	5f 1c       	adc	r5, r15
    264e:	60 1e       	adc	r6, r16
    2650:	71 1e       	adc	r7, r17
    2652:	33 24       	eor	r3, r3
    2654:	6f c0       	rjmp	.+222    	; 0x2734 <PlayMP3file+0x1b8>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    2656:	c3 01       	movw	r24, r6
    2658:	b2 01       	movw	r22, r4
    265a:	63 0d       	add	r22, r3
    265c:	71 1d       	adc	r23, r1
    265e:	81 1d       	adc	r24, r1
    2660:	91 1d       	adc	r25, r1
    2662:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SD_readSingleBlock>
    2666:	cd 80       	ldd	r12, Y+5	; 0x05
    2668:	de 80       	ldd	r13, Y+6	; 0x06
    266a:	ef 80       	ldd	r14, Y+7	; 0x07
    266c:	f8 84       	ldd	r15, Y+8	; 0x08
    266e:	22 24       	eor	r2, r2


			for(k=0; k<512; k++)
    2670:	d7 01       	movw	r26, r14
    2672:	c6 01       	movw	r24, r12
    2674:	80 50       	subi	r24, 0x00	; 0
    2676:	9e 4f       	sbci	r25, 0xFE	; 254
    2678:	af 4f       	sbci	r26, 0xFF	; 255
    267a:	bf 4f       	sbci	r27, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    267c:	29 81       	ldd	r18, Y+1	; 0x01
    267e:	3a 81       	ldd	r19, Y+2	; 0x02
    2680:	4b 81       	ldd	r20, Y+3	; 0x03
    2682:	5c 81       	ldd	r21, Y+4	; 0x04
    2684:	c2 16       	cp	r12, r18
    2686:	d3 06       	cpc	r13, r19
    2688:	e4 06       	cpc	r14, r20
    268a:	f5 06       	cpc	r15, r21
    268c:	10 f0       	brcs	.+4      	; 0x2692 <PlayMP3file+0x116>
    268e:	22 24       	eor	r2, r2
    2690:	23 94       	inc	r2
    2692:	08 94       	sec
    2694:	c1 1c       	adc	r12, r1
    2696:	d1 1c       	adc	r13, r1
    2698:	e1 1c       	adc	r14, r1
    269a:	f1 1c       	adc	r15, r1
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    269c:	c8 16       	cp	r12, r24
    269e:	d9 06       	cpc	r13, r25
    26a0:	ea 06       	cpc	r14, r26
    26a2:	fb 06       	cpc	r15, r27
    26a4:	59 f7       	brne	.-42     	; 0x267c <PlayMP3file+0x100>
    26a6:	e0 e0       	ldi	r30, 0x00	; 0
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
			}
			//After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
			iAudioByteCnt=0;
			while(iAudioByteCnt<k)
			{
				if(VS1053_SKIP_PLAY)
    26aa:	80 91 c4 05 	lds	r24, 0x05C4
    26ae:	88 23       	and	r24, r24
    26b0:	29 f0       	breq	.+10     	; 0x26bc <PlayMP3file+0x140>
				{
					VS1053_SKIP_PLAY=false;
    26b2:	10 92 c4 05 	sts	0x05C4, r1
					VS1053_SoftwareReset();
    26b6:	0e 94 bf 04 	call	0x97e	; 0x97e <VS1053_SoftwareReset>
    26ba:	5b c0       	rjmp	.+182    	; 0x2772 <PlayMP3file+0x1f6>
					return 0;//playing stopped by user
				}
				if((PINB & (1<<MP3_DREQ)))
    26bc:	1b 99       	sbic	0x03, 3	; 3
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <PlayMP3file+0x148>
    26c0:	8f 01       	movw	r16, r30
    26c2:	18 c0       	rjmp	.+48     	; 0x26f4 <PlayMP3file+0x178>
    26c4:	8f 01       	movw	r16, r30
				{
					for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    26c6:	af 01       	movw	r20, r30
    26c8:	40 5e       	subi	r20, 0xE0	; 224
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	5a 87       	std	Y+10, r21	; 0x0a
    26ce:	49 87       	std	Y+9, r20	; 0x09
					{
						VS1053_WriteData(buffer[iAudioByteCnt]);
    26d0:	f8 01       	movw	r30, r16
    26d2:	e6 56       	subi	r30, 0x66	; 102
    26d4:	fc 4f       	sbci	r31, 0xFC	; 252
    26d6:	80 81       	ld	r24, Z
    26d8:	0e 94 c9 04 	call	0x992	; 0x992 <VS1053_WriteData>
						if(iAudioByteCnt++==k)return 0;		
    26dc:	52 e0       	ldi	r21, 0x02	; 2
    26de:	00 30       	cpi	r16, 0x00	; 0
    26e0:	15 07       	cpc	r17, r21
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <PlayMP3file+0x16a>
    26e4:	46 c0       	rjmp	.+140    	; 0x2772 <PlayMP3file+0x1f6>
    26e6:	0f 5f       	subi	r16, 0xFF	; 255
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
					VS1053_SoftwareReset();
					return 0;//playing stopped by user
				}
				if((PINB & (1<<MP3_DREQ)))
				{
					for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	08 17       	cp	r16, r24
    26f0:	19 07       	cpc	r17, r25
    26f2:	71 f7       	brne	.-36     	; 0x26d0 <PlayMP3file+0x154>
						VS1053_WriteData(buffer[iAudioByteCnt]);
						if(iAudioByteCnt++==k)return 0;		
					}	
				}
				//After playing a 32 bytes of data, check the user inputs
				if(USART_Keypad_DATA_RDY)
    26f4:	80 91 53 03 	lds	r24, 0x0353
    26f8:	88 23       	and	r24, r24
    26fa:	11 f0       	breq	.+4      	; 0x2700 <PlayMP3file+0x184>
				{
					USART_Keypad_ReceiveAction();
    26fc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <USART_Keypad_ReceiveAction>
				}
				if(USART_PC_DATA_RDY)
    2700:	80 91 c5 05 	lds	r24, 0x05C5
    2704:	88 23       	and	r24, r24
    2706:	11 f0       	breq	.+4      	; 0x270c <PlayMP3file+0x190>
				{
					USART_PC_ReceiveAction();
    2708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <USART_PC_ReceiveAction>
				}		
				if(USART_UI_Message_ready) //If a message ready from the user interface, process it
    270c:	80 91 99 03 	lds	r24, 0x0399
    2710:	88 23       	and	r24, r24
    2712:	19 f0       	breq	.+6      	; 0x271a <PlayMP3file+0x19e>
				{
					UI_parse_message(true);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UI_parse_message>
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
			}
			//After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
			iAudioByteCnt=0;
			while(iAudioByteCnt<k)
    271a:	92 e0       	ldi	r25, 0x02	; 2
    271c:	00 30       	cpi	r16, 0x00	; 0
    271e:	19 07       	cpc	r17, r25
    2720:	10 f4       	brcc	.+4      	; 0x2726 <PlayMP3file+0x1aa>
    2722:	f8 01       	movw	r30, r16
    2724:	c2 cf       	rjmp	.-124    	; 0x26aa <PlayMP3file+0x12e>
				if(USART_UI_Message_ready) //If a message ready from the user interface, process it
				{
					UI_parse_message(true);
				}
			}
			if(bEndOfFile)
    2726:	22 20       	and	r2, r2
    2728:	21 f5       	brne	.+72     	; 0x2772 <PlayMP3file+0x1f6>
	VS1053_SKIP_PLAY=false;
	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    272a:	33 94       	inc	r3
    272c:	cd 82       	std	Y+5, r12	; 0x05
    272e:	de 82       	std	Y+6, r13	; 0x06
    2730:	ef 82       	std	Y+7, r14	; 0x07
    2732:	f8 86       	std	Y+8, r15	; 0x08
    2734:	20 91 9b 05 	lds	r18, 0x059B
    2738:	30 91 9c 05 	lds	r19, 0x059C
    273c:	83 2d       	mov	r24, r3
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	82 17       	cp	r24, r18
    2742:	93 07       	cpc	r25, r19
    2744:	08 f4       	brcc	.+2      	; 0x2748 <PlayMP3file+0x1cc>
    2746:	87 cf       	rjmp	.-242    	; 0x2656 <PlayMP3file+0xda>
				return 0;
			}

		}

		cluster = getSetNextCluster (cluster, GET, 0);
    2748:	c5 01       	movw	r24, r10
    274a:	b4 01       	movw	r22, r8
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	00 e0       	ldi	r16, 0x00	; 0
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	0e 94 16 0c 	call	0x182c	; 0x182c <getSetNextCluster>
    275a:	4b 01       	movw	r8, r22
    275c:	5c 01       	movw	r10, r24
		if(cluster == 0) 
    275e:	61 15       	cp	r22, r1
    2760:	71 05       	cpc	r23, r1
    2762:	81 05       	cpc	r24, r1
    2764:	91 05       	cpc	r25, r1
    2766:	09 f0       	breq	.+2      	; 0x276a <PlayMP3file+0x1ee>
    2768:	58 cf       	rjmp	.-336    	; 0x261a <PlayMP3file+0x9e>
		{
			USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); 
    276a:	87 e6       	ldi	r24, 0x67	; 103
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			return 0;
    2772:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
    2774:	2a 96       	adiw	r28, 0x0a	; 10
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	ff 90       	pop	r15
    278a:	ef 90       	pop	r14
    278c:	df 90       	pop	r13
    278e:	cf 90       	pop	r12
    2790:	bf 90       	pop	r11
    2792:	af 90       	pop	r10
    2794:	9f 90       	pop	r9
    2796:	8f 90       	pop	r8
    2798:	7f 90       	pop	r7
    279a:	6f 90       	pop	r6
    279c:	5f 90       	pop	r5
    279e:	4f 90       	pop	r4
    27a0:	3f 90       	pop	r3
    27a2:	2f 90       	pop	r2
    27a4:	08 95       	ret

000027a6 <UI_calculate_CRC>:
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	fc 01       	movw	r30, r24
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
    27b0:	b2 81       	ldd	r27, Z+2	; 0x02
	uint16_t chksum=0;
	pstrMsg+=3;
    27b2:	8c 01       	movw	r16, r24
    27b4:	0d 5f       	subi	r16, 0xFD	; 253
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    27bc:	b5 50       	subi	r27, 0x05	; 5
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
	uint16_t chksum=0;
	pstrMsg+=3;
	while(msglen > 1)
    27be:	ab 2f       	mov	r26, r27
    27c0:	a6 95       	lsr	r26
    27c2:	ca 2f       	mov	r28, r26
    27c4:	d0 e0       	ldi	r29, 0x00	; 0
    27c6:	ae 01       	movw	r20, r28
    27c8:	4f 5f       	subi	r20, 0xFF	; 255
    27ca:	5f 4f       	sbci	r21, 0xFF	; 255
    27cc:	44 0f       	add	r20, r20
    27ce:	55 1f       	adc	r21, r21
    27d0:	4e 0f       	add	r20, r30
    27d2:	5f 1f       	adc	r21, r31
    27d4:	08 c0       	rjmp	.+16     	; 0x27e6 <UI_calculate_CRC+0x40>
	{
		chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    27d6:	31 81       	ldd	r19, Z+1	; 0x01
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	82 2b       	or	r24, r18
    27e0:	93 2b       	or	r25, r19
    27e2:	68 0f       	add	r22, r24
    27e4:	79 1f       	adc	r23, r25
    27e6:	32 96       	adiw	r30, 0x02	; 2
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
	uint16_t chksum=0;
	pstrMsg+=3;
	while(msglen > 1)
    27e8:	e4 17       	cp	r30, r20
    27ea:	f5 07       	cpc	r31, r21
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <UI_calculate_CRC+0x30>
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    27ee:	aa 0f       	add	r26, r26
    27f0:	fe 01       	movw	r30, r28
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	e0 0f       	add	r30, r16
    27f8:	f1 1f       	adc	r31, r17
		chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
		chksum = chksum & 0xffff;
		msglen-=2;
		pstrMsg+=2;
	}
	if(msglen>0) //If the packet size is odd numbered
    27fa:	ba 17       	cp	r27, r26
    27fc:	21 f0       	breq	.+8      	; 0x2806 <UI_calculate_CRC+0x60>
	{
		chksum = chksum^ (int)*(pstrMsg++);
    27fe:	80 81       	ld	r24, Z
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	68 27       	eor	r22, r24
    2804:	79 27       	eor	r23, r25
	}
	return(chksum);
}
    2806:	cb 01       	movw	r24, r22
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <UI_buildMessage>:

bool UI_buildMessage(char MessageType)
{
	
	return true;
}
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	08 95       	ret

00002816 <UI_ResetTheCurrentMode>:
	}
}

void UI_ResetTheCurrentMode(void)
{
	if(UI_MODE_SELECTED){
    2816:	80 91 70 03 	lds	r24, 0x0370
    281a:	88 23       	and	r24, r24
    281c:	81 f0       	breq	.+32     	; 0x283e <UI_ResetTheCurrentMode+0x28>
		switch(UI_Current_Mode)
    281e:	80 91 9a 05 	lds	r24, 0x059A
    2822:	82 30       	cpi	r24, 0x02	; 2
    2824:	39 f0       	breq	.+14     	; 0x2834 <UI_ResetTheCurrentMode+0x1e>
    2826:	83 30       	cpi	r24, 0x03	; 3
    2828:	41 f0       	breq	.+16     	; 0x283a <UI_ResetTheCurrentMode+0x24>
    282a:	81 30       	cpi	r24, 0x01	; 1
    282c:	41 f4       	brne	.+16     	; 0x283e <UI_ResetTheCurrentMode+0x28>
		{
			case 1:
				MD1_Reset();
    282e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <MD1_Reset>
    2832:	08 95       	ret
				break;
			case 2:
				MD2_Reset();
    2834:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <MD2_Reset>
    2838:	08 95       	ret
				break;
			case 3:
				MD3_Reset();
    283a:	0e 94 0c 18 	call	0x3018	; 0x3018 <MD3_Reset>
    283e:	08 95       	ret

00002840 <UI_RunMainOfCurrentMode>:
	}
}

void UI_RunMainOfCurrentMode(void)
{
	if(UI_MODE_SELECTED){
    2840:	80 91 70 03 	lds	r24, 0x0370
    2844:	88 23       	and	r24, r24
    2846:	81 f0       	breq	.+32     	; 0x2868 <UI_RunMainOfCurrentMode+0x28>
		switch(UI_Current_Mode)
    2848:	80 91 9a 05 	lds	r24, 0x059A
    284c:	82 30       	cpi	r24, 0x02	; 2
    284e:	39 f0       	breq	.+14     	; 0x285e <UI_RunMainOfCurrentMode+0x1e>
    2850:	83 30       	cpi	r24, 0x03	; 3
    2852:	41 f0       	breq	.+16     	; 0x2864 <UI_RunMainOfCurrentMode+0x24>
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	41 f4       	brne	.+16     	; 0x2868 <UI_RunMainOfCurrentMode+0x28>
		{
			case 1:
				MD1_Main();
    2858:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <MD1_Main>
    285c:	08 95       	ret
				break;
			case 2:
				MD2_Main();
    285e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <MD2_Main>
    2862:	08 95       	ret
				break;
			case 3:
				MD3_Main();
    2864:	0e 94 45 18 	call	0x308a	; 0x308a <MD3_Main>
    2868:	08 95       	ret

0000286a <UI_InputCellToCurrentMode>:
	}
}

void UI_InputCellToCurrentMode(char thisCell)
{
	switch(UI_Current_Mode)
    286a:	90 91 9a 05 	lds	r25, 0x059A
    286e:	92 30       	cpi	r25, 0x02	; 2
    2870:	39 f0       	breq	.+14     	; 0x2880 <UI_InputCellToCurrentMode+0x16>
    2872:	93 30       	cpi	r25, 0x03	; 3
    2874:	41 f0       	breq	.+16     	; 0x2886 <UI_InputCellToCurrentMode+0x1c>
    2876:	91 30       	cpi	r25, 0x01	; 1
    2878:	41 f4       	brne	.+16     	; 0x288a <UI_InputCellToCurrentMode+0x20>
	{
		case 1:
			MD1_InputCell(thisCell);
    287a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <MD1_InputCell>
    287e:	08 95       	ret
			break;
		case 2:
			MD2_InputCell(thisCell);
    2880:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <MD2_InputCell>
    2884:	08 95       	ret
			break;
		case 3:
			MD3_InputCell(thisCell);
    2886:	0e 94 1c 18 	call	0x3038	; 0x3038 <MD3_InputCell>
    288a:	08 95       	ret

0000288c <UI_InputDotToCurrentMode>:
	}
}

void UI_InputDotToCurrentMode(char thisDot)
{
	switch(UI_Current_Mode)
    288c:	90 91 9a 05 	lds	r25, 0x059A
    2890:	92 30       	cpi	r25, 0x02	; 2
    2892:	39 f0       	breq	.+14     	; 0x28a2 <UI_InputDotToCurrentMode+0x16>
    2894:	93 30       	cpi	r25, 0x03	; 3
    2896:	41 f0       	breq	.+16     	; 0x28a8 <UI_InputDotToCurrentMode+0x1c>
    2898:	91 30       	cpi	r25, 0x01	; 1
    289a:	41 f4       	brne	.+16     	; 0x28ac <UI_InputDotToCurrentMode+0x20>
	{
		case 1:
			MD1_InputDot(thisDot);
    289c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <MD1_InputDot>
    28a0:	08 95       	ret
			break;
		case 2:
			MD2_InputDot(thisDot);
    28a2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <MD2_InputDot>
    28a6:	08 95       	ret
			break;
		case 3:
			MD3_InputDot(thisDot);
    28a8:	0e 94 13 18 	call	0x3026	; 0x3026 <MD3_InputDot>
    28ac:	08 95       	ret

000028ae <UI_CallModeNoAnswer>:
	}
}

void UI_CallModeNoAnswer(void)
{
	switch(UI_Current_Mode)
    28ae:	80 91 9a 05 	lds	r24, 0x059A
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	39 f0       	breq	.+14     	; 0x28c4 <UI_CallModeNoAnswer+0x16>
    28b6:	83 30       	cpi	r24, 0x03	; 3
    28b8:	41 f0       	breq	.+16     	; 0x28ca <UI_CallModeNoAnswer+0x1c>
    28ba:	81 30       	cpi	r24, 0x01	; 1
    28bc:	41 f4       	brne	.+16     	; 0x28ce <UI_CallModeNoAnswer+0x20>
	{
		case 1:
			MD1_CallModeNoAnswer();
    28be:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <MD1_CallModeNoAnswer>
    28c2:	08 95       	ret
			break;
		case 2:
			MD2_CallModeNoAnswer();
    28c4:	0e 94 44 17 	call	0x2e88	; 0x2e88 <MD2_CallModeNoAnswer>
    28c8:	08 95       	ret
			break;
		case 3:
			MD3_CallModeNoAnswer();
    28ca:	0e 94 12 18 	call	0x3024	; 0x3024 <MD3_CallModeNoAnswer>
    28ce:	08 95       	ret

000028d0 <UI_CallModeYesAnswer>:
	}
}

void UI_CallModeYesAnswer(void)
{
	switch(UI_Current_Mode)
    28d0:	80 91 9a 05 	lds	r24, 0x059A
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	39 f0       	breq	.+14     	; 0x28e6 <UI_CallModeYesAnswer+0x16>
    28d8:	83 30       	cpi	r24, 0x03	; 3
    28da:	41 f0       	breq	.+16     	; 0x28ec <UI_CallModeYesAnswer+0x1c>
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	41 f4       	brne	.+16     	; 0x28f0 <UI_CallModeYesAnswer+0x20>
	{
		case 1:
			MD1_CallModeYesAnswer();
    28e0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <MD1_CallModeYesAnswer>
    28e4:	08 95       	ret
			break;
		case 2:
			MD2_CallModeYesAnswer();
    28e6:	0e 94 43 17 	call	0x2e86	; 0x2e86 <MD2_CallModeYesAnswer>
    28ea:	08 95       	ret
			break;
		case 3:
			MD3_CallModeYesAnswer();
    28ec:	0e 94 11 18 	call	0x3022	; 0x3022 <MD3_CallModeYesAnswer>
    28f0:	08 95       	ret

000028f2 <UI_Play_Intro_Currentmode>:
	}
}

void UI_Play_Intro_Currentmode(void)
{
	switch(UI_Current_Mode)
    28f2:	80 91 9a 05 	lds	r24, 0x059A
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	39 f0       	breq	.+14     	; 0x2908 <UI_Play_Intro_Currentmode+0x16>
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	51 f0       	breq	.+20     	; 0x2912 <UI_Play_Intro_Currentmode+0x20>
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	61 f4       	brne	.+24     	; 0x291a <UI_Play_Intro_Currentmode+0x28>
	{
		case 1:
			RequestToPlayMP3file("MD1.MP3");
    2902:	8c e1       	ldi	r24, 0x1C	; 28
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	02 c0       	rjmp	.+4      	; 0x290c <UI_Play_Intro_Currentmode+0x1a>
			break;
		case 2:
			RequestToPlayMP3file("MD2.MP3");
    2908:	84 e2       	ldi	r24, 0x24	; 36
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2910:	08 95       	ret
			break;
		case 3:
			RequestToPlayMP3file("MD3.MP3");
    2912:	8c e2       	ldi	r24, 0x2C	; 44
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    291a:	08 95       	ret

0000291c <UI_ControlKeyPressed>:
	USART_UI_Message_ready=false;
	return true;
}

void UI_ControlKeyPressed(void)
{
    291c:	1f 93       	push	r17
	switch(USART_UI_ReceivedPacket[5])
    291e:	10 91 a2 05 	lds	r17, 0x05A2
    2922:	13 30       	cpi	r17, 0x03	; 3
    2924:	09 f4       	brne	.+2      	; 0x2928 <UI_ControlKeyPressed+0xc>
    2926:	4a c0       	rjmp	.+148    	; 0x29bc <UI_ControlKeyPressed+0xa0>
    2928:	14 30       	cpi	r17, 0x04	; 4
    292a:	30 f4       	brcc	.+12     	; 0x2938 <UI_ControlKeyPressed+0x1c>
    292c:	11 30       	cpi	r17, 0x01	; 1
    292e:	71 f0       	breq	.+28     	; 0x294c <UI_ControlKeyPressed+0x30>
    2930:	12 30       	cpi	r17, 0x02	; 2
    2932:	09 f0       	breq	.+2      	; 0x2936 <UI_ControlKeyPressed+0x1a>
    2934:	ab c0       	rjmp	.+342    	; 0x2a8c <UI_ControlKeyPressed+0x170>
    2936:	25 c0       	rjmp	.+74     	; 0x2982 <UI_ControlKeyPressed+0x66>
    2938:	15 30       	cpi	r17, 0x05	; 5
    293a:	09 f4       	brne	.+2      	; 0x293e <UI_ControlKeyPressed+0x22>
    293c:	8e c0       	rjmp	.+284    	; 0x2a5a <UI_ControlKeyPressed+0x13e>
    293e:	15 30       	cpi	r17, 0x05	; 5
    2940:	08 f4       	brcc	.+2      	; 0x2944 <UI_ControlKeyPressed+0x28>
    2942:	5a c0       	rjmp	.+180    	; 0x29f8 <UI_ControlKeyPressed+0xdc>
    2944:	16 30       	cpi	r17, 0x06	; 6
    2946:	09 f0       	breq	.+2      	; 0x294a <UI_ControlKeyPressed+0x2e>
    2948:	a1 c0       	rjmp	.+322    	; 0x2a8c <UI_ControlKeyPressed+0x170>
    294a:	94 c0       	rjmp	.+296    	; 0x2a74 <UI_ControlKeyPressed+0x158>
	{
		case UI_CMD_NONE:
			
			break;
		case UI_CMD_ENT1: //Enter into a mode
			USART_transmitStringToPCFromFlash(PSTR("Enter 1 pressed"));
    294c:	8d e5       	ldi	r24, 0x5D	; 93
    294e:	93 e0       	ldi	r25, 0x03	; 3
    2950:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;	
    2954:	8d e0       	ldi	r24, 0x0D	; 13
    2956:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    295a:	8a e0       	ldi	r24, 0x0A	; 10
    295c:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED) //Then this command is to select the mode
    2960:	80 91 70 03 	lds	r24, 0x0370
    2964:	88 23       	and	r24, r24
    2966:	51 f4       	brne	.+20     	; 0x297c <UI_ControlKeyPressed+0x60>
			{
				if(UI_Selected_Mode>0)
    2968:	80 91 98 03 	lds	r24, 0x0398
    296c:	88 23       	and	r24, r24
    296e:	09 f4       	brne	.+2      	; 0x2972 <UI_ControlKeyPressed+0x56>
    2970:	8d c0       	rjmp	.+282    	; 0x2a8c <UI_ControlKeyPressed+0x170>
				{
					UI_MODE_SELECTED=true;
    2972:	10 93 70 03 	sts	0x0370, r17
					UI_ResetTheCurrentMode();
    2976:	0e 94 0b 14 	call	0x2816	; 0x2816 <UI_ResetTheCurrentMode>
    297a:	88 c0       	rjmp	.+272    	; 0x2a8c <UI_ControlKeyPressed+0x170>
					//RequestToPlayMP3file("ERR1.MP3");
				}
			}
			else //Then this the "YES" command in the mode, so call the function in the mode
			{
				UI_CallModeYesAnswer();
    297c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <UI_CallModeYesAnswer>
    2980:	85 c0       	rjmp	.+266    	; 0x2a8c <UI_ControlKeyPressed+0x170>
			}
			break;
		case UI_CMD_ENT2: //Exit from a mode
			USART_transmitStringToPCFromFlash(PSTR("Enter 2 pressed"));
    2982:	8d e4       	ldi	r24, 0x4D	; 77
    2984:	93 e0       	ldi	r25, 0x03	; 3
    2986:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    298a:	8d e0       	ldi	r24, 0x0D	; 13
    298c:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2990:	8a e0       	ldi	r24, 0x0A	; 10
    2992:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			if(UI_MODE_SELECTED) //This might be an exit from mode command or "NO" command in the mode
    2996:	80 91 70 03 	lds	r24, 0x0370
    299a:	88 23       	and	r24, r24
    299c:	09 f4       	brne	.+2      	; 0x29a0 <UI_ControlKeyPressed+0x84>
    299e:	76 c0       	rjmp	.+236    	; 0x2a8c <UI_ControlKeyPressed+0x170>
			{
				if(USART_UI_ReceivedPacket[6]==69) //If the next byte is 'E', this is exit command (when the user pressed E2 for more than 5 secs)
    29a0:	80 91 a3 05 	lds	r24, 0x05A3
    29a4:	85 34       	cpi	r24, 0x45	; 69
    29a6:	39 f4       	brne	.+14     	; 0x29b6 <UI_ControlKeyPressed+0x9a>
				{
					UI_MODE_SELECTED=false;
    29a8:	10 92 70 03 	sts	0x0370, r1
					RequestToPlayMP3file("MM.MP3");
    29ac:	84 e3       	ldi	r24, 0x34	; 52
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    29b4:	6b c0       	rjmp	.+214    	; 0x2a8c <UI_ControlKeyPressed+0x170>
				}
				else //Then this a "NO" answer, call the mode function for this
				{
					UI_CallModeNoAnswer();
    29b6:	0e 94 57 14 	call	0x28ae	; 0x28ae <UI_CallModeNoAnswer>
    29ba:	68 c0       	rjmp	.+208    	; 0x2a8c <UI_ControlKeyPressed+0x170>
				}
			}
			//This has no effect when no mode is selected
			break;
		case UI_CMD_MFOR:
			USART_transmitStringToPCFromFlash(PSTR("Mode 1 pressed"));
    29bc:	8e e3       	ldi	r24, 0x3E	; 62
    29be:	93 e0       	ldi	r25, 0x03	; 3
    29c0:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    29c4:	8d e0       	ldi	r24, 0x0D	; 13
    29c6:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    29ca:	8a e0       	ldi	r24, 0x0A	; 10
    29cc:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED)
    29d0:	80 91 70 03 	lds	r24, 0x0370
    29d4:	88 23       	and	r24, r24
    29d6:	09 f0       	breq	.+2      	; 0x29da <UI_ControlKeyPressed+0xbe>
    29d8:	59 c0       	rjmp	.+178    	; 0x2a8c <UI_ControlKeyPressed+0x170>
			{
				UI_Selected_Mode++;
    29da:	80 91 98 03 	lds	r24, 0x0398
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	80 93 98 03 	sts	0x0398, r24
				if(UI_Selected_Mode>Number_of_modes)
    29e4:	90 91 98 03 	lds	r25, 0x0398
    29e8:	80 91 93 03 	lds	r24, 0x0393
    29ec:	89 17       	cp	r24, r25
    29ee:	38 f5       	brcc	.+78     	; 0x2a3e <UI_ControlKeyPressed+0x122>
				{
					UI_Selected_Mode--;
    29f0:	80 91 98 03 	lds	r24, 0x0398
    29f4:	81 50       	subi	r24, 0x01	; 1
    29f6:	18 c0       	rjmp	.+48     	; 0x2a28 <UI_ControlKeyPressed+0x10c>
					UI_Play_Intro_Currentmode();
				}
			}
			break;
		case UI_CMD_MREV:
			USART_transmitStringToPCFromFlash(PSTR("Mode 2 pressed"));
    29f8:	8f e2       	ldi	r24, 0x2F	; 47
    29fa:	93 e0       	ldi	r25, 0x03	; 3
    29fc:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2a00:	8d e0       	ldi	r24, 0x0D	; 13
    2a02:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2a06:	8a e0       	ldi	r24, 0x0A	; 10
    2a08:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED)
    2a0c:	80 91 70 03 	lds	r24, 0x0370
    2a10:	88 23       	and	r24, r24
    2a12:	e1 f5       	brne	.+120    	; 0x2a8c <UI_ControlKeyPressed+0x170>
			{
				UI_Selected_Mode--;
    2a14:	80 91 98 03 	lds	r24, 0x0398
    2a18:	81 50       	subi	r24, 0x01	; 1
    2a1a:	80 93 98 03 	sts	0x0398, r24
				if(UI_Selected_Mode<1)
    2a1e:	80 91 98 03 	lds	r24, 0x0398
    2a22:	88 23       	and	r24, r24
    2a24:	61 f4       	brne	.+24     	; 0x2a3e <UI_ControlKeyPressed+0x122>
				{
					UI_Selected_Mode=1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	80 93 98 03 	sts	0x0398, r24
					UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2a2c:	e0 91 98 03 	lds	r30, 0x0398
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	ec 57       	subi	r30, 0x7C	; 124
    2a34:	fc 4f       	sbci	r31, 0xFC	; 252
    2a36:	80 81       	ld	r24, Z
    2a38:	80 93 9a 05 	sts	0x059A, r24
    2a3c:	27 c0       	rjmp	.+78     	; 0x2a8c <UI_ControlKeyPressed+0x170>
				}
				else
				{
					UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2a3e:	e0 91 98 03 	lds	r30, 0x0398
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	ec 57       	subi	r30, 0x7C	; 124
    2a46:	fc 4f       	sbci	r31, 0xFC	; 252
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 93 9a 05 	sts	0x059A, r24
					VS1053_SKIP_PLAY=true;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	80 93 c4 05 	sts	0x05C4, r24
					UI_Play_Intro_Currentmode();
    2a54:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UI_Play_Intro_Currentmode>
    2a58:	19 c0       	rjmp	.+50     	; 0x2a8c <UI_ControlKeyPressed+0x170>
				}	
			}		
			break;
		case UI_CMD_VOLU:
			USART_transmitStringToPCFromFlash(PSTR("Vol UP pressed"));
    2a5a:	80 e2       	ldi	r24, 0x20	; 32
    2a5c:	93 e0       	ldi	r25, 0x03	; 3
    2a5e:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2a62:	8d e0       	ldi	r24, 0x0D	; 13
    2a64:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2a68:	8a e0       	ldi	r24, 0x0A	; 10
    2a6a:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			VS1053_IncreaseVol();
    2a6e:	0e 94 87 04 	call	0x90e	; 0x90e <VS1053_IncreaseVol>
    2a72:	0c c0       	rjmp	.+24     	; 0x2a8c <UI_ControlKeyPressed+0x170>
			break;
		case UI_CMD_VOLD:
			USART_transmitStringToPCFromFlash(PSTR("Vol DOWN pressed"));
    2a74:	8f e0       	ldi	r24, 0x0F	; 15
    2a76:	93 e0       	ldi	r25, 0x03	; 3
    2a78:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2a7c:	8d e0       	ldi	r24, 0x0D	; 13
    2a7e:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2a82:	8a e0       	ldi	r24, 0x0A	; 10
    2a84:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
			VS1053_DecreaseVol();
    2a88:	0e 94 4f 04 	call	0x89e	; 0x89e <VS1053_DecreaseVol>
			break;
		default:
			
			break;
	}
}
    2a8c:	1f 91       	pop	r17
    2a8e:	08 95       	ret

00002a90 <UI_parse_message>:
	
	return true;
}

bool UI_parse_message(bool IsPlaying)
{
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	2a 97       	sbiw	r28, 0x0a	; 10
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	18 2f       	mov	r17, r24
		UI string 	: [U][I][msglen][msg_number][msgtype][payload][CRC1][CRC2]
		msgtypes	: 
	*/
	//First things first, check the CRC

	unsigned char message_len=USART_UI_ReceivedPacket[2];
    2aaa:	00 91 9f 05 	lds	r16, 0x059F

	unsigned char ADCmsg[10];
	//unsigned char message_payload[20];
//	unsigned char i=0;

	uint16_t chksum=UI_calculate_CRC(&USART_UI_ReceivedPacket);
    2aae:	8d e9       	ldi	r24, 0x9D	; 157
    2ab0:	95 e0       	ldi	r25, 0x05	; 5
    2ab2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <UI_calculate_CRC>
	if ( chksum == (USART_UI_ReceivedPacket[message_len-2] << 8 | USART_UI_ReceivedPacket[message_len-1]))
    2ab6:	a0 2f       	mov	r26, r16
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	fd 01       	movw	r30, r26
    2abc:	e5 56       	subi	r30, 0x65	; 101
    2abe:	fa 4f       	sbci	r31, 0xFA	; 250
    2ac0:	60 81       	ld	r22, Z
    2ac2:	a4 56       	subi	r26, 0x64	; 100
    2ac4:	ba 4f       	sbci	r27, 0xFA	; 250
    2ac6:	4c 91       	ld	r20, X
    2ac8:	36 2f       	mov	r19, r22
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	24 2b       	or	r18, r20
    2ad0:	35 2b       	or	r19, r21
    2ad2:	82 17       	cp	r24, r18
    2ad4:	93 07       	cpc	r25, r19
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <UI_parse_message+0x4a>
    2ad8:	74 c0       	rjmp	.+232    	; 0x2bc2 <UI_parse_message+0x132>
	{
		//If correct, store the message elements
		message_number=USART_UI_ReceivedPacket[3];
    2ada:	80 91 a0 05 	lds	r24, 0x05A0
		message_type=USART_UI_ReceivedPacket[4];
    2ade:	80 91 a1 05 	lds	r24, 0x05A1

		//process the message

		if(IsPlaying) //If a MP3 file is being played, only the commands are processed
    2ae2:	11 23       	and	r17, r17
    2ae4:	41 f0       	breq	.+16     	; 0x2af6 <UI_parse_message+0x66>
		{
			if(message_type==68)
    2ae6:	84 34       	cpi	r24, 0x44	; 68
    2ae8:	31 f4       	brne	.+12     	; 0x2af6 <UI_parse_message+0x66>
			{
				UI_ControlKeyPressed();
    2aea:	0e 94 8e 14 	call	0x291c	; 0x291c <UI_ControlKeyPressed>
				USART_UI_Message_ready=true;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	80 93 99 03 	sts	0x0399, r24
    2af4:	6d c0       	rjmp	.+218    	; 0x2bd0 <UI_parse_message+0x140>
				return true;
			}
		}
		
		switch(message_type)
    2af6:	82 34       	cpi	r24, 0x42	; 66
    2af8:	89 f0       	breq	.+34     	; 0x2b1c <UI_parse_message+0x8c>
    2afa:	83 34       	cpi	r24, 0x43	; 67
    2afc:	20 f4       	brcc	.+8      	; 0x2b06 <UI_parse_message+0x76>
    2afe:	81 34       	cpi	r24, 0x41	; 65
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <UI_parse_message+0x74>
    2b02:	63 c0       	rjmp	.+198    	; 0x2bca <UI_parse_message+0x13a>
    2b04:	06 c0       	rjmp	.+12     	; 0x2b12 <UI_parse_message+0x82>
    2b06:	84 34       	cpi	r24, 0x44	; 68
    2b08:	71 f0       	breq	.+28     	; 0x2b26 <UI_parse_message+0x96>
    2b0a:	85 34       	cpi	r24, 0x45	; 69
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <UI_parse_message+0x80>
    2b0e:	5d c0       	rjmp	.+186    	; 0x2bca <UI_parse_message+0x13a>
    2b10:	0d c0       	rjmp	.+26     	; 0x2b2c <UI_parse_message+0x9c>
		{
			case 65: 	//Braille dot
				//Only one character is being send to the current mode
				UI_InputDotToCurrentMode(USART_UI_ReceivedPacket[5]);
    2b12:	80 91 a2 05 	lds	r24, 0x05A2
    2b16:	0e 94 46 14 	call	0x288c	; 0x288c <UI_InputDotToCurrentMode>
    2b1a:	57 c0       	rjmp	.+174    	; 0x2bca <UI_parse_message+0x13a>
			case 66: 	//Braille cell
				/*
				Only one character is being send to the current mode. The cell number value is currently not used
				, if needed this information is available on USART_UI_ReceivedPacket[6]
				*/
				UI_InputCellToCurrentMode(USART_UI_ReceivedPacket[5]);
    2b1c:	80 91 a2 05 	lds	r24, 0x05A2
    2b20:	0e 94 35 14 	call	0x286a	; 0x286a <UI_InputCellToCurrentMode>
    2b24:	52 c0       	rjmp	.+164    	; 0x2bca <UI_parse_message+0x13a>
				break;
			case 67:	//Error message
				//When an error occured in the user input a message will be sent here
				break;
			case 68:	//User Command
				UI_ControlKeyPressed();
    2b26:	0e 94 8e 14 	call	0x291c	; 0x291c <UI_ControlKeyPressed>
    2b2a:	4f c0       	rjmp	.+158    	; 0x2bca <UI_parse_message+0x13a>
				break;
			case 69:	//Acknowledgement
				ADCmsg[0]=USART_UI_ReceivedPacket[5];
    2b2c:	80 91 a2 05 	lds	r24, 0x05A2
    2b30:	89 83       	std	Y+1, r24	; 0x01
				ADCmsg[1]=USART_UI_ReceivedPacket[6];
    2b32:	80 91 a3 05 	lds	r24, 0x05A3
    2b36:	8a 83       	std	Y+2, r24	; 0x02
				ADCmsg[2]=USART_UI_ReceivedPacket[7];
    2b38:	80 91 a4 05 	lds	r24, 0x05A4
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
				USART_transmitStringToPCFromFlash(PSTR("Analog Input channel,MSB,LSB :"));
    2b3e:	8d e6       	ldi	r24, 0x6D	; 109
    2b40:	93 e0       	ldi	r25, 0x03	; 3
    2b42:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
				sprintf(ADCmsg, "%d,%d,%d", USART_UI_ReceivedPacket[5],USART_UI_ReceivedPacket[6],USART_UI_ReceivedPacket[7]); 
    2b46:	20 91 a2 05 	lds	r18, 0x05A2
    2b4a:	30 91 a3 05 	lds	r19, 0x05A3
    2b4e:	40 91 a4 05 	lds	r20, 0x05A4
    2b52:	8d b7       	in	r24, 0x3d	; 61
    2b54:	9e b7       	in	r25, 0x3e	; 62
    2b56:	0a 97       	sbiw	r24, 0x0a	; 10
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	9e bf       	out	0x3e, r25	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	8d bf       	out	0x3d, r24	; 61
    2b62:	ed b7       	in	r30, 0x3d	; 61
    2b64:	fe b7       	in	r31, 0x3e	; 62
    2b66:	31 96       	adiw	r30, 0x01	; 1
    2b68:	8e 01       	movw	r16, r28
    2b6a:	0f 5f       	subi	r16, 0xFF	; 255
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6e:	ad b7       	in	r26, 0x3d	; 61
    2b70:	be b7       	in	r27, 0x3e	; 62
    2b72:	12 96       	adiw	r26, 0x02	; 2
    2b74:	1c 93       	st	X, r17
    2b76:	0e 93       	st	-X, r16
    2b78:	11 97       	sbiw	r26, 0x01	; 1
    2b7a:	8b e3       	ldi	r24, 0x3B	; 59
    2b7c:	91 e0       	ldi	r25, 0x01	; 1
    2b7e:	93 83       	std	Z+3, r25	; 0x03
    2b80:	82 83       	std	Z+2, r24	; 0x02
    2b82:	24 83       	std	Z+4, r18	; 0x04
    2b84:	15 82       	std	Z+5, r1	; 0x05
    2b86:	36 83       	std	Z+6, r19	; 0x06
    2b88:	17 82       	std	Z+7, r1	; 0x07
    2b8a:	40 87       	std	Z+8, r20	; 0x08
    2b8c:	11 86       	std	Z+9, r1	; 0x09
    2b8e:	0e 94 2b 19 	call	0x3256	; 0x3256 <sprintf>
				USART_transmitStringToPC(&ADCmsg);
    2b92:	8d b7       	in	r24, 0x3d	; 61
    2b94:	9e b7       	in	r25, 0x3e	; 62
    2b96:	0a 96       	adiw	r24, 0x0a	; 10
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	9e bf       	out	0x3e, r25	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	8d bf       	out	0x3d, r24	; 61
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	0e 94 c6 03 	call	0x78c	; 0x78c <USART_transmitStringToPC>
				TX_NEWLINE_PC;	
    2ba8:	8d e0       	ldi	r24, 0x0D	; 13
    2baa:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2bae:	8a e0       	ldi	r24, 0x0A	; 10
    2bb0:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
				TX_NEWLINE_PC;				
    2bb4:	8d e0       	ldi	r24, 0x0D	; 13
    2bb6:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2bba:	8a e0       	ldi	r24, 0x0A	; 10
    2bbc:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <UI_parse_message+0x13a>
		}
		//In the end: send the acknowledgement to the sender (with the message number, of course !!!)
	}
	else
	{
		USART_UI_Message_ready=false;
    2bc2:	10 92 99 03 	sts	0x0399, r1
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	03 c0       	rjmp	.+6      	; 0x2bd0 <UI_parse_message+0x140>
		return false;
	}
	USART_UI_Message_ready=false;
    2bca:	10 92 99 03 	sts	0x0399, r1
    2bce:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
    2bd0:	2a 96       	adiw	r28, 0x0a	; 10
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	08 95       	ret

00002be6 <UI_CheckModes>:
#include "Globals.h"
#include "Modes.h"


bool UI_CheckModes(void)
{
    2be6:	af 92       	push	r10
    2be8:	bf 92       	push	r11
    2bea:	df 92       	push	r13
    2bec:	ef 92       	push	r14
    2bee:	ff 92       	push	r15
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	c9 56       	subi	r28, 0x69	; 105
    2bfe:	d0 40       	sbci	r29, 0x00	; 0
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
	unsigned char PCPrintContent[2];
	int i=0;
	int iMoN;
	bool bBoNFound;
	const char* ModesFile="MODES.DAT";
	Number_of_modes=0;
    2c0a:	10 92 93 03 	sts	0x0393, r1
    2c0e:	56 e0       	ldi	r21, 0x06	; 6
    2c10:	e5 2e       	mov	r14, r21
    2c12:	f1 2c       	mov	r15, r1
    2c14:	ec 0e       	add	r14, r28
    2c16:	fd 1e       	adc	r15, r29
    2c18:	f7 01       	movw	r30, r14
	for(i=0;i<100;i++)
    2c1a:	c7 01       	movw	r24, r14
    2c1c:	1e 2d       	mov	r17, r14
    2c1e:	09 2f       	mov	r16, r25
    2c20:	ce 01       	movw	r24, r28
    2c22:	86 59       	subi	r24, 0x96	; 150
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
		FileContent[i]=0;
    2c26:	11 92       	st	Z+, r1
	int i=0;
	int iMoN;
	bool bBoNFound;
	const char* ModesFile="MODES.DAT";
	Number_of_modes=0;
	for(i=0;i<100;i++)
    2c28:	e8 17       	cp	r30, r24
    2c2a:	f9 07       	cpc	r31, r25
    2c2c:	e1 f7       	brne	.-8      	; 0x2c26 <UI_CheckModes+0x40>
		FileContent[i]=0;
	if(readAndRetreiveFileContents (ModesFile,FileContent)>0)
    2c2e:	84 e4       	ldi	r24, 0x44	; 68
    2c30:	91 e0       	ldi	r25, 0x01	; 1
    2c32:	61 2f       	mov	r22, r17
    2c34:	70 2f       	mov	r23, r16
    2c36:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <readAndRetreiveFileContents>
    2c3a:	88 23       	and	r24, r24
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <UI_CheckModes+0x5a>
    2c3e:	b4 c0       	rjmp	.+360    	; 0x2da8 <UI_CheckModes+0x1c2>
	{
		return false;
	}
	USART_transmitStringToPC(&FileContent);
    2c40:	81 2f       	mov	r24, r17
    2c42:	90 2f       	mov	r25, r16
    2c44:	0e 94 c6 03 	call	0x78c	; 0x78c <USART_transmitStringToPC>
	TX_NEWLINE_PC;
    2c48:	8d e0       	ldi	r24, 0x0D	; 13
    2c4a:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2c4e:	8a e0       	ldi	r24, 0x0A	; 10
    2c50:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2c54:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(iMoN==3)
			{
				return false;
			}
			ModeID[iMoN++]=FileContent[i];
    2c56:	43 e0       	ldi	r20, 0x03	; 3
    2c58:	a4 2e       	mov	r10, r20
    2c5a:	b1 2c       	mov	r11, r1
    2c5c:	ac 0e       	add	r10, r28
    2c5e:	bd 1e       	adc	r11, r29
    2c60:	2e c0       	rjmp	.+92     	; 0x2cbe <UI_CheckModes+0xd8>
	TX_NEWLINE_PC;
	bBoNFound=false;
	i=0;
	while(FileContent[i]!='$')
	{
		if(FileContent[i]=='>')
    2c62:	8e 33       	cpi	r24, 0x3E	; 62
    2c64:	89 f4       	brne	.+34     	; 0x2c88 <UI_CheckModes+0xa2>
		{
			UI_Modes[Number_of_modes]=atoi(ModeID);
    2c66:	80 91 93 03 	lds	r24, 0x0393
    2c6a:	08 2f       	mov	r16, r24
    2c6c:	10 e0       	ldi	r17, 0x00	; 0
    2c6e:	c5 01       	movw	r24, r10
    2c70:	0e 94 05 19 	call	0x320a	; 0x320a <atoi>
    2c74:	0b 57       	subi	r16, 0x7B	; 123
    2c76:	1c 4f       	sbci	r17, 0xFC	; 252
    2c78:	d8 01       	movw	r26, r16
    2c7a:	8c 93       	st	X, r24
			Number_of_modes++;
    2c7c:	80 91 93 03 	lds	r24, 0x0393
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	80 93 93 03 	sts	0x0393, r24
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <UI_CheckModes+0xa6>
			bBoNFound=false;
		}
		if(!bBoNFound)
    2c88:	99 23       	and	r25, r25
    2c8a:	39 f4       	brne	.+14     	; 0x2c9a <UI_CheckModes+0xb4>
		{
			ModeID[0]=0;
    2c8c:	1b 82       	std	Y+3, r1	; 0x03
			ModeID[1]=0;
    2c8e:	1c 82       	std	Y+4, r1	; 0x04
			ModeID[2]=0;
    2c90:	1d 82       	std	Y+5, r1	; 0x05
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0a c0       	rjmp	.+20     	; 0x2cae <UI_CheckModes+0xc8>
			iMoN=0;
		}
		else
		{
			if(iMoN==3)
    2c9a:	23 30       	cpi	r18, 0x03	; 3
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <UI_CheckModes+0xbc>
    2ca0:	83 c0       	rjmp	.+262    	; 0x2da8 <UI_CheckModes+0x1c2>
			{
				return false;
			}
			ModeID[iMoN++]=FileContent[i];
    2ca2:	f5 01       	movw	r30, r10
    2ca4:	e2 0f       	add	r30, r18
    2ca6:	f3 1f       	adc	r31, r19
    2ca8:	80 83       	st	Z, r24
    2caa:	2f 5f       	subi	r18, 0xFF	; 255
    2cac:	3f 4f       	sbci	r19, 0xFF	; 255

		}
		if(FileContent[i]=='<')
    2cae:	f7 01       	movw	r30, r14
    2cb0:	80 81       	ld	r24, Z
    2cb2:	8c 33       	cpi	r24, 0x3C	; 60
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <UI_CheckModes+0xd2>
    2cb6:	91 e0       	ldi	r25, 0x01	; 1
    2cb8:	08 94       	sec
    2cba:	e1 1c       	adc	r14, r1
    2cbc:	f1 1c       	adc	r15, r1
	}
	USART_transmitStringToPC(&FileContent);
	TX_NEWLINE_PC;
	bBoNFound=false;
	i=0;
	while(FileContent[i]!='$')
    2cbe:	d7 01       	movw	r26, r14
    2cc0:	8c 91       	ld	r24, X
    2cc2:	84 32       	cpi	r24, 0x24	; 36
    2cc4:	71 f6       	brne	.-100    	; 0x2c62 <UI_CheckModes+0x7c>
			bBoNFound=true;
		}

		i++;		
	}
	USART_transmitStringToPCFromFlash(PSTR("Number of modes selected: "));
    2cc6:	80 ea       	ldi	r24, 0xA0	; 160
    2cc8:	93 e0       	ldi	r25, 0x03	; 3
    2cca:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
	PCPrintContent[0]=0;
    2cce:	19 82       	std	Y+1, r1	; 0x01
	PCPrintContent[1]=0;
    2cd0:	1a 82       	std	Y+2, r1	; 0x02
	sprintf(PCPrintContent, "%d", Number_of_modes);
    2cd2:	20 91 93 03 	lds	r18, 0x0393
    2cd6:	00 d0       	rcall	.+0      	; 0x2cd8 <UI_CheckModes+0xf2>
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <UI_CheckModes+0xf4>
    2cda:	00 d0       	rcall	.+0      	; 0x2cdc <UI_CheckModes+0xf6>
    2cdc:	ed b7       	in	r30, 0x3d	; 61
    2cde:	fe b7       	in	r31, 0x3e	; 62
    2ce0:	31 96       	adiw	r30, 0x01	; 1
    2ce2:	8e 01       	movw	r16, r28
    2ce4:	0f 5f       	subi	r16, 0xFF	; 255
    2ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce8:	ad b7       	in	r26, 0x3d	; 61
    2cea:	be b7       	in	r27, 0x3e	; 62
    2cec:	12 96       	adiw	r26, 0x02	; 2
    2cee:	1c 93       	st	X, r17
    2cf0:	0e 93       	st	-X, r16
    2cf2:	11 97       	sbiw	r26, 0x01	; 1
    2cf4:	8e e4       	ldi	r24, 0x4E	; 78
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	93 83       	std	Z+3, r25	; 0x03
    2cfa:	82 83       	std	Z+2, r24	; 0x02
    2cfc:	24 83       	std	Z+4, r18	; 0x04
    2cfe:	15 82       	std	Z+5, r1	; 0x05
    2d00:	0e 94 2b 19 	call	0x3256	; 0x3256 <sprintf>
	USART_transmitStringToPC(&PCPrintContent);
    2d04:	ed b7       	in	r30, 0x3d	; 61
    2d06:	fe b7       	in	r31, 0x3e	; 62
    2d08:	36 96       	adiw	r30, 0x06	; 6
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	fe bf       	out	0x3e, r31	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	ed bf       	out	0x3d, r30	; 61
    2d14:	c8 01       	movw	r24, r16
    2d16:	0e 94 c6 03 	call	0x78c	; 0x78c <USART_transmitStringToPC>
	TX_NEWLINE_PC;
    2d1a:	8d e0       	ldi	r24, 0x0D	; 13
    2d1c:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2d20:	8a e0       	ldi	r24, 0x0A	; 10
    2d22:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
    2d26:	8c e8       	ldi	r24, 0x8C	; 140
    2d28:	93 e0       	ldi	r25, 0x03	; 3
    2d2a:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
    2d2e:	ee 24       	eor	r14, r14
    2d30:	ff 24       	eor	r15, r15
	for(i=0;i<Number_of_modes;i++)
	{
		sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    2d32:	d0 2e       	mov	r13, r16
    2d34:	01 2f       	mov	r16, r17
    2d36:	21 e5       	ldi	r18, 0x51	; 81
    2d38:	a2 2e       	mov	r10, r18
    2d3a:	21 e0       	ldi	r18, 0x01	; 1
    2d3c:	b2 2e       	mov	r11, r18
    2d3e:	26 c0       	rjmp	.+76     	; 0x2d8c <UI_CheckModes+0x1a6>
    2d40:	f7 01       	movw	r30, r14
    2d42:	eb 57       	subi	r30, 0x7B	; 123
    2d44:	fc 4f       	sbci	r31, 0xFC	; 252
    2d46:	80 81       	ld	r24, Z
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <UI_CheckModes+0x164>
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <UI_CheckModes+0x166>
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <UI_CheckModes+0x168>
    2d4e:	ed b7       	in	r30, 0x3d	; 61
    2d50:	fe b7       	in	r31, 0x3e	; 62
    2d52:	31 96       	adiw	r30, 0x01	; 1
    2d54:	ad b7       	in	r26, 0x3d	; 61
    2d56:	be b7       	in	r27, 0x3e	; 62
    2d58:	11 96       	adiw	r26, 0x01	; 1
    2d5a:	dc 92       	st	X, r13
    2d5c:	11 97       	sbiw	r26, 0x01	; 1
    2d5e:	12 96       	adiw	r26, 0x02	; 2
    2d60:	0c 93       	st	X, r16
    2d62:	b3 82       	std	Z+3, r11	; 0x03
    2d64:	a2 82       	std	Z+2, r10	; 0x02
    2d66:	84 83       	std	Z+4, r24	; 0x04
    2d68:	15 82       	std	Z+5, r1	; 0x05
    2d6a:	0e 94 2b 19 	call	0x3256	; 0x3256 <sprintf>
		USART_transmitStringToPC(&PCPrintContent);
    2d6e:	ed b7       	in	r30, 0x3d	; 61
    2d70:	fe b7       	in	r31, 0x3e	; 62
    2d72:	36 96       	adiw	r30, 0x06	; 6
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	fe bf       	out	0x3e, r31	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	ed bf       	out	0x3d, r30	; 61
    2d7e:	8d 2d       	mov	r24, r13
    2d80:	90 2f       	mov	r25, r16
    2d82:	0e 94 c6 03 	call	0x78c	; 0x78c <USART_transmitStringToPC>
	PCPrintContent[1]=0;
	sprintf(PCPrintContent, "%d", Number_of_modes);
	USART_transmitStringToPC(&PCPrintContent);
	TX_NEWLINE_PC;
	USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
	for(i=0;i<Number_of_modes;i++)
    2d86:	08 94       	sec
    2d88:	e1 1c       	adc	r14, r1
    2d8a:	f1 1c       	adc	r15, r1
    2d8c:	80 91 93 03 	lds	r24, 0x0393
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	e8 16       	cp	r14, r24
    2d94:	f9 06       	cpc	r15, r25
    2d96:	a4 f2       	brlt	.-88     	; 0x2d40 <UI_CheckModes+0x15a>
	{
		sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
		USART_transmitStringToPC(&PCPrintContent);
	}	
	TX_NEWLINE_PC;
    2d98:	8d e0       	ldi	r24, 0x0D	; 13
    2d9a:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2d9e:	8a e0       	ldi	r24, 0x0A	; 10
    2da0:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <UI_CheckModes+0x1c4>
	return true; 
    2da8:	80 e0       	ldi	r24, 0x00	; 0
}
    2daa:	c7 59       	subi	r28, 0x97	; 151
    2dac:	df 4f       	sbci	r29, 0xFF	; 255
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	bf 90       	pop	r11
    2dc8:	af 90       	pop	r10
    2dca:	08 95       	ret

00002dcc <MD1_Reset>:
	}
}

void MD1_Reset(void)
{
	Current_State=0;
    2dcc:	10 92 e3 05 	sts	0x05E3, r1
    2dd0:	10 92 e2 05 	sts	0x05E2, r1
}
    2dd4:	08 95       	ret

00002dd6 <MD1_CallModeYesAnswer>:
}

void MD1_CallModeYesAnswer(void)
{

}
    2dd6:	08 95       	ret

00002dd8 <MD1_CallModeNoAnswer>:

void MD1_CallModeNoAnswer(void)
{

}
    2dd8:	08 95       	ret

00002dda <MD1_InputDot>:

void MD1_InputDot(char thisDot)
{
	Last_Dot=thisDot;
    2dda:	80 93 e1 05 	sts	0x05E1, r24
	Current_State=2;
    2dde:	82 e0       	ldi	r24, 0x02	; 2
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	90 93 e3 05 	sts	0x05E3, r25
    2de6:	80 93 e2 05 	sts	0x05E2, r24
}
    2dea:	08 95       	ret

00002dec <MD1_InputCell>:

void MD1_InputCell(char thisCell)
{

}
    2dec:	08 95       	ret

00002dee <PlayRequestedDot>:

*/

void PlayRequestedDot(void)
{
	switch(Last_Dot)
    2dee:	80 91 e1 05 	lds	r24, 0x05E1
    2df2:	83 33       	cpi	r24, 0x33	; 51
    2df4:	a1 f0       	breq	.+40     	; 0x2e1e <PlayRequestedDot+0x30>
    2df6:	84 33       	cpi	r24, 0x34	; 52
    2df8:	28 f4       	brcc	.+10     	; 0x2e04 <PlayRequestedDot+0x16>
    2dfa:	81 33       	cpi	r24, 0x31	; 49
    2dfc:	51 f0       	breq	.+20     	; 0x2e12 <PlayRequestedDot+0x24>
    2dfe:	82 33       	cpi	r24, 0x32	; 50
    2e00:	e9 f4       	brne	.+58     	; 0x2e3c <PlayRequestedDot+0x4e>
    2e02:	0a c0       	rjmp	.+20     	; 0x2e18 <PlayRequestedDot+0x2a>
    2e04:	85 33       	cpi	r24, 0x35	; 53
    2e06:	89 f0       	breq	.+34     	; 0x2e2a <PlayRequestedDot+0x3c>
    2e08:	85 33       	cpi	r24, 0x35	; 53
    2e0a:	60 f0       	brcs	.+24     	; 0x2e24 <PlayRequestedDot+0x36>
    2e0c:	86 33       	cpi	r24, 0x36	; 54
    2e0e:	b1 f4       	brne	.+44     	; 0x2e3c <PlayRequestedDot+0x4e>
    2e10:	11 c0       	rjmp	.+34     	; 0x2e34 <PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD1_1.MP3");
    2e12:	86 e5       	ldi	r24, 0x56	; 86
    2e14:	91 e0       	ldi	r25, 0x01	; 1
    2e16:	0b c0       	rjmp	.+22     	; 0x2e2e <PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD1_2.MP3");
    2e18:	80 e6       	ldi	r24, 0x60	; 96
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	08 c0       	rjmp	.+16     	; 0x2e2e <PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD1_3.MP3");
    2e1e:	8a e6       	ldi	r24, 0x6A	; 106
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	05 c0       	rjmp	.+10     	; 0x2e2e <PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD1_4.MP3");
    2e24:	84 e7       	ldi	r24, 0x74	; 116
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD1_5.MP3");
    2e2a:	8e e7       	ldi	r24, 0x7E	; 126
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2e32:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD1_6.MP3");
    2e34:	88 e8       	ldi	r24, 0x88	; 136
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2e3c:	08 95       	ret

00002e3e <MD1_Main>:
	Current_State=0;
}

void MD1_Main(void)
{
	switch(Current_State)
    2e3e:	80 91 e2 05 	lds	r24, 0x05E2
    2e42:	90 91 e3 05 	lds	r25, 0x05E3
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	19 f0       	breq	.+6      	; 0x2e50 <MD1_Main+0x12>
    2e4a:	02 97       	sbiw	r24, 0x02	; 2
    2e4c:	a1 f4       	brne	.+40     	; 0x2e76 <MD1_Main+0x38>
    2e4e:	0b c0       	rjmp	.+22     	; 0x2e66 <MD1_Main+0x28>
	{
		case 0:
			RequestToPlayMP3file("MD1INT.MP3");
    2e50:	82 e9       	ldi	r24, 0x92	; 146
    2e52:	91 e0       	ldi	r25, 0x01	; 1
    2e54:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
			Current_State=1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	90 93 e3 05 	sts	0x05E3, r25
    2e60:	80 93 e2 05 	sts	0x05E2, r24
    2e64:	08 95       	ret
			break;
		case 1:
			break;
		case 2:
			PlayRequestedDot();
    2e66:	0e 94 f7 16 	call	0x2dee	; 0x2dee <PlayRequestedDot>
			Current_State=1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	90 93 e3 05 	sts	0x05E3, r25
    2e72:	80 93 e2 05 	sts	0x05E2, r24
    2e76:	08 95       	ret

00002e78 <MD2_Reset>:
}


void MD2_Reset(void)
{
	Current_State=0;
    2e78:	10 92 e3 05 	sts	0x05E3, r1
    2e7c:	10 92 e2 05 	sts	0x05E2, r1
	MD2_Last_Dot=0;
    2e80:	10 92 e5 05 	sts	0x05E5, r1
}
    2e84:	08 95       	ret

00002e86 <MD2_CallModeYesAnswer>:
}

void MD2_CallModeYesAnswer(void)
{

}
    2e86:	08 95       	ret

00002e88 <MD2_CallModeNoAnswer>:

void MD2_CallModeNoAnswer(void)
{

}
    2e88:	08 95       	ret

00002e8a <MD2_InputDot>:

void MD2_InputDot(char thisDot)
{
	MD2_Last_Dot=thisDot;
    2e8a:	80 93 e5 05 	sts	0x05E5, r24
	Current_State=3;
    2e8e:	83 e0       	ldi	r24, 0x03	; 3
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	90 93 e3 05 	sts	0x05E3, r25
    2e96:	80 93 e2 05 	sts	0x05E2, r24
}
    2e9a:	08 95       	ret

00002e9c <MD2_InputCell>:

void MD2_InputCell(char thisCell)
{
    2e9c:	98 2f       	mov	r25, r24
	if(MD2_Last_Dot!=0)
    2e9e:	80 91 e5 05 	lds	r24, 0x05E5
    2ea2:	88 23       	and	r24, r24
    2ea4:	41 f0       	breq	.+16     	; 0x2eb6 <MD2_InputCell+0x1a>
	{
		Last_Cell=thisCell;
    2ea6:	90 93 e4 05 	sts	0x05E4, r25
		Current_State=2;
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	90 93 e3 05 	sts	0x05E3, r25
    2eb2:	80 93 e2 05 	sts	0x05E2, r24
    2eb6:	08 95       	ret

00002eb8 <MD2_PlayRequestedDot>:
}


void MD2_PlayRequestedDot(void)
{
	switch(MD2_Last_Dot)
    2eb8:	80 91 e5 05 	lds	r24, 0x05E5
    2ebc:	83 33       	cpi	r24, 0x33	; 51
    2ebe:	a1 f0       	breq	.+40     	; 0x2ee8 <MD2_PlayRequestedDot+0x30>
    2ec0:	84 33       	cpi	r24, 0x34	; 52
    2ec2:	28 f4       	brcc	.+10     	; 0x2ece <MD2_PlayRequestedDot+0x16>
    2ec4:	81 33       	cpi	r24, 0x31	; 49
    2ec6:	51 f0       	breq	.+20     	; 0x2edc <MD2_PlayRequestedDot+0x24>
    2ec8:	82 33       	cpi	r24, 0x32	; 50
    2eca:	e9 f4       	brne	.+58     	; 0x2f06 <MD2_PlayRequestedDot+0x4e>
    2ecc:	0a c0       	rjmp	.+20     	; 0x2ee2 <MD2_PlayRequestedDot+0x2a>
    2ece:	85 33       	cpi	r24, 0x35	; 53
    2ed0:	89 f0       	breq	.+34     	; 0x2ef4 <MD2_PlayRequestedDot+0x3c>
    2ed2:	85 33       	cpi	r24, 0x35	; 53
    2ed4:	60 f0       	brcs	.+24     	; 0x2eee <MD2_PlayRequestedDot+0x36>
    2ed6:	86 33       	cpi	r24, 0x36	; 54
    2ed8:	b1 f4       	brne	.+44     	; 0x2f06 <MD2_PlayRequestedDot+0x4e>
    2eda:	11 c0       	rjmp	.+34     	; 0x2efe <MD2_PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD1_1.MP3");
    2edc:	8d e9       	ldi	r24, 0x9D	; 157
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	0b c0       	rjmp	.+22     	; 0x2ef8 <MD2_PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD1_2.MP3");
    2ee2:	87 ea       	ldi	r24, 0xA7	; 167
    2ee4:	91 e0       	ldi	r25, 0x01	; 1
    2ee6:	08 c0       	rjmp	.+16     	; 0x2ef8 <MD2_PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD1_3.MP3");
    2ee8:	81 eb       	ldi	r24, 0xB1	; 177
    2eea:	91 e0       	ldi	r25, 0x01	; 1
    2eec:	05 c0       	rjmp	.+10     	; 0x2ef8 <MD2_PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD1_4.MP3");
    2eee:	8b eb       	ldi	r24, 0xBB	; 187
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <MD2_PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD1_5.MP3");
    2ef4:	85 ec       	ldi	r24, 0xC5	; 197
    2ef6:	91 e0       	ldi	r25, 0x01	; 1
    2ef8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2efc:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD1_6.MP3");
    2efe:	8f ec       	ldi	r24, 0xCF	; 207
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2f06:	08 95       	ret

00002f08 <PlayRequestedCell>:

*/

void PlayRequestedCell(void)
{
	switch(Last_Cell)
    2f08:	80 91 e4 05 	lds	r24, 0x05E4
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	fc 01       	movw	r30, r24
    2f10:	e1 56       	subi	r30, 0x61	; 97
    2f12:	f0 40       	sbci	r31, 0x00	; 0
    2f14:	ea 31       	cpi	r30, 0x1A	; 26
    2f16:	f1 05       	cpc	r31, r1
    2f18:	08 f0       	brcs	.+2      	; 0x2f1c <PlayRequestedCell+0x14>
    2f1a:	56 c0       	rjmp	.+172    	; 0x2fc8 <PlayRequestedCell+0xc0>
    2f1c:	ea 5b       	subi	r30, 0xBA	; 186
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	ee 0f       	add	r30, r30
    2f22:	ff 1f       	adc	r31, r31
    2f24:	05 90       	lpm	r0, Z+
    2f26:	f4 91       	lpm	r31, Z+
    2f28:	e0 2d       	mov	r30, r0
    2f2a:	09 94       	ijmp
	{
		case 'a':
			RequestToPlayMP3file("MD2_a.MP3");
    2f2c:	89 ed       	ldi	r24, 0xD9	; 217
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	4d c0       	rjmp	.+154    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'b':
			RequestToPlayMP3file("MD2_b.MP3");
    2f32:	83 ee       	ldi	r24, 0xE3	; 227
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	4a c0       	rjmp	.+148    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'c':
			RequestToPlayMP3file("MD2_c.MP3");
    2f38:	8d ee       	ldi	r24, 0xED	; 237
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	47 c0       	rjmp	.+142    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'd':
			RequestToPlayMP3file("MD2_d.MP3");
    2f3e:	87 ef       	ldi	r24, 0xF7	; 247
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	44 c0       	rjmp	.+136    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'e':
			RequestToPlayMP3file("MD2_e.MP3");
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	92 e0       	ldi	r25, 0x02	; 2
    2f48:	41 c0       	rjmp	.+130    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'f':
			RequestToPlayMP3file("MD2_f.MP3");
    2f4a:	8b e0       	ldi	r24, 0x0B	; 11
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	3e c0       	rjmp	.+124    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'g':
			RequestToPlayMP3file("MD2_g.MP3");
    2f50:	85 e1       	ldi	r24, 0x15	; 21
    2f52:	92 e0       	ldi	r25, 0x02	; 2
    2f54:	3b c0       	rjmp	.+118    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'h':
			RequestToPlayMP3file("MD2_h.MP3");
    2f56:	8f e1       	ldi	r24, 0x1F	; 31
    2f58:	92 e0       	ldi	r25, 0x02	; 2
    2f5a:	38 c0       	rjmp	.+112    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'i':
			RequestToPlayMP3file("MD2_i.MP3");
    2f5c:	89 e2       	ldi	r24, 0x29	; 41
    2f5e:	92 e0       	ldi	r25, 0x02	; 2
    2f60:	35 c0       	rjmp	.+106    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'j':
			RequestToPlayMP3file("MD2_j.MP3");
    2f62:	83 e3       	ldi	r24, 0x33	; 51
    2f64:	92 e0       	ldi	r25, 0x02	; 2
    2f66:	32 c0       	rjmp	.+100    	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'k':
			RequestToPlayMP3file("MD2_k.MP3");
    2f68:	8d e3       	ldi	r24, 0x3D	; 61
    2f6a:	92 e0       	ldi	r25, 0x02	; 2
    2f6c:	2f c0       	rjmp	.+94     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'l':
			RequestToPlayMP3file("MD2_l.MP3");
    2f6e:	87 e4       	ldi	r24, 0x47	; 71
    2f70:	92 e0       	ldi	r25, 0x02	; 2
    2f72:	2c c0       	rjmp	.+88     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'm':
			RequestToPlayMP3file("MD2_m.MP3");
    2f74:	81 e5       	ldi	r24, 0x51	; 81
    2f76:	92 e0       	ldi	r25, 0x02	; 2
    2f78:	29 c0       	rjmp	.+82     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'n':
			RequestToPlayMP3file("MD2_n.MP3");
    2f7a:	8b e5       	ldi	r24, 0x5B	; 91
    2f7c:	92 e0       	ldi	r25, 0x02	; 2
    2f7e:	26 c0       	rjmp	.+76     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'o':
			RequestToPlayMP3file("MD2_o.MP3");
    2f80:	85 e6       	ldi	r24, 0x65	; 101
    2f82:	92 e0       	ldi	r25, 0x02	; 2
    2f84:	23 c0       	rjmp	.+70     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'p':
			RequestToPlayMP3file("MD2_p.MP3");
    2f86:	8f e6       	ldi	r24, 0x6F	; 111
    2f88:	92 e0       	ldi	r25, 0x02	; 2
    2f8a:	20 c0       	rjmp	.+64     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'q':
			RequestToPlayMP3file("MD2_q.MP3");
    2f8c:	89 e7       	ldi	r24, 0x79	; 121
    2f8e:	92 e0       	ldi	r25, 0x02	; 2
    2f90:	1d c0       	rjmp	.+58     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'r':
			RequestToPlayMP3file("MD2_r.MP3");
    2f92:	83 e8       	ldi	r24, 0x83	; 131
    2f94:	92 e0       	ldi	r25, 0x02	; 2
    2f96:	1a c0       	rjmp	.+52     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 's':
			RequestToPlayMP3file("MD2_s.MP3");
    2f98:	8d e8       	ldi	r24, 0x8D	; 141
    2f9a:	92 e0       	ldi	r25, 0x02	; 2
    2f9c:	17 c0       	rjmp	.+46     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 't':
			RequestToPlayMP3file("MD2_t.MP3");
    2f9e:	87 e9       	ldi	r24, 0x97	; 151
    2fa0:	92 e0       	ldi	r25, 0x02	; 2
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'u':
			RequestToPlayMP3file("MD2_u.MP3");
    2fa4:	81 ea       	ldi	r24, 0xA1	; 161
    2fa6:	92 e0       	ldi	r25, 0x02	; 2
    2fa8:	11 c0       	rjmp	.+34     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'v':
			RequestToPlayMP3file("MD2_v.MP3");
    2faa:	8b ea       	ldi	r24, 0xAB	; 171
    2fac:	92 e0       	ldi	r25, 0x02	; 2
    2fae:	0e c0       	rjmp	.+28     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'w':
			RequestToPlayMP3file("MD2_w.MP3");
    2fb0:	85 eb       	ldi	r24, 0xB5	; 181
    2fb2:	92 e0       	ldi	r25, 0x02	; 2
    2fb4:	0b c0       	rjmp	.+22     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'x':
			RequestToPlayMP3file("MD2_x.MP3");
    2fb6:	8f eb       	ldi	r24, 0xBF	; 191
    2fb8:	92 e0       	ldi	r25, 0x02	; 2
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'y':
			RequestToPlayMP3file("MD2_y.MP3");
    2fbc:	89 ec       	ldi	r24, 0xC9	; 201
    2fbe:	92 e0       	ldi	r25, 0x02	; 2
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		case 'z':
			RequestToPlayMP3file("MD2_z.MP3");
    2fc2:	83 ed       	ldi	r24, 0xD3	; 211
    2fc4:	92 e0       	ldi	r25, 0x02	; 2
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <PlayRequestedCell+0xc4>
			break;
		default:
			RequestToPlayMP3file("MD2ER1.MP3");
    2fc8:	8d ed       	ldi	r24, 0xDD	; 221
    2fca:	92 e0       	ldi	r25, 0x02	; 2
    2fcc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2fd0:	08 95       	ret

00002fd2 <MD2_Main>:
	MD2_Last_Dot=0;
}

void MD2_Main(void)
{
	switch(Current_State)
    2fd2:	80 91 e2 05 	lds	r24, 0x05E2
    2fd6:	90 91 e3 05 	lds	r25, 0x05E3
    2fda:	82 30       	cpi	r24, 0x02	; 2
    2fdc:	91 05       	cpc	r25, r1
    2fde:	51 f0       	breq	.+20     	; 0x2ff4 <MD2_Main+0x22>
    2fe0:	83 30       	cpi	r24, 0x03	; 3
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	81 f0       	breq	.+32     	; 0x3006 <MD2_Main+0x34>
    2fe6:	89 2b       	or	r24, r25
    2fe8:	b1 f4       	brne	.+44     	; 0x3016 <MD2_Main+0x44>
	{
		case 0:
			RequestToPlayMP3file("MD2INT.MP3");
    2fea:	88 ee       	ldi	r24, 0xE8	; 232
    2fec:	92 e0       	ldi	r25, 0x02	; 2
    2fee:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <MD2_Main+0x26>
			Current_State=1;
			break;
		case 1:
			break;
		case 2:
			PlayRequestedCell();
    2ff4:	0e 94 84 17 	call	0x2f08	; 0x2f08 <PlayRequestedCell>
			Current_State=1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	90 93 e3 05 	sts	0x05E3, r25
    3000:	80 93 e2 05 	sts	0x05E2, r24
    3004:	08 95       	ret
			break;
		case 3:
			MD2_PlayRequestedDot();
    3006:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <MD2_PlayRequestedDot>
			Current_State=1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	90 93 e3 05 	sts	0x05E3, r25
    3012:	80 93 e2 05 	sts	0x05E2, r24
    3016:	08 95       	ret

00003018 <MD3_Reset>:
	}
}

void MD3_Reset(void)
{
	MD3_Current_State=0;
    3018:	10 92 e8 05 	sts	0x05E8, r1
    301c:	10 92 e7 05 	sts	0x05E7, r1
}
    3020:	08 95       	ret

00003022 <MD3_CallModeYesAnswer>:
}

void MD3_CallModeYesAnswer(void)
{

}
    3022:	08 95       	ret

00003024 <MD3_CallModeNoAnswer>:

void MD3_CallModeNoAnswer(void)
{

}
    3024:	08 95       	ret

00003026 <MD3_InputDot>:

void MD3_InputDot(char thisDot)
{
	MD3_Last_Dot=thisDot;
    3026:	80 93 e6 05 	sts	0x05E6, r24
	MD3_Current_State=2;
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	90 93 e8 05 	sts	0x05E8, r25
    3032:	80 93 e7 05 	sts	0x05E7, r24
}
    3036:	08 95       	ret

00003038 <MD3_InputCell>:

void MD3_InputCell(char thisCell)
{

}
    3038:	08 95       	ret

0000303a <MD3_PlayRequestedDot>:

*/

void MD3_PlayRequestedDot(void)
{
	switch(MD3_Last_Dot)
    303a:	80 91 e6 05 	lds	r24, 0x05E6
    303e:	83 33       	cpi	r24, 0x33	; 51
    3040:	a1 f0       	breq	.+40     	; 0x306a <MD3_PlayRequestedDot+0x30>
    3042:	84 33       	cpi	r24, 0x34	; 52
    3044:	28 f4       	brcc	.+10     	; 0x3050 <MD3_PlayRequestedDot+0x16>
    3046:	81 33       	cpi	r24, 0x31	; 49
    3048:	51 f0       	breq	.+20     	; 0x305e <MD3_PlayRequestedDot+0x24>
    304a:	82 33       	cpi	r24, 0x32	; 50
    304c:	e9 f4       	brne	.+58     	; 0x3088 <MD3_PlayRequestedDot+0x4e>
    304e:	0a c0       	rjmp	.+20     	; 0x3064 <MD3_PlayRequestedDot+0x2a>
    3050:	85 33       	cpi	r24, 0x35	; 53
    3052:	89 f0       	breq	.+34     	; 0x3076 <MD3_PlayRequestedDot+0x3c>
    3054:	85 33       	cpi	r24, 0x35	; 53
    3056:	60 f0       	brcs	.+24     	; 0x3070 <MD3_PlayRequestedDot+0x36>
    3058:	86 33       	cpi	r24, 0x36	; 54
    305a:	b1 f4       	brne	.+44     	; 0x3088 <MD3_PlayRequestedDot+0x4e>
    305c:	11 c0       	rjmp	.+34     	; 0x3080 <MD3_PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD3_1.MP3");
    305e:	83 ef       	ldi	r24, 0xF3	; 243
    3060:	92 e0       	ldi	r25, 0x02	; 2
    3062:	0b c0       	rjmp	.+22     	; 0x307a <MD3_PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD3_2.MP3");
    3064:	8d ef       	ldi	r24, 0xFD	; 253
    3066:	92 e0       	ldi	r25, 0x02	; 2
    3068:	08 c0       	rjmp	.+16     	; 0x307a <MD3_PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD3_3.MP3");
    306a:	87 e0       	ldi	r24, 0x07	; 7
    306c:	93 e0       	ldi	r25, 0x03	; 3
    306e:	05 c0       	rjmp	.+10     	; 0x307a <MD3_PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD3_4.MP3");
    3070:	81 e1       	ldi	r24, 0x11	; 17
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	02 c0       	rjmp	.+4      	; 0x307a <MD3_PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD3_5.MP3");
    3076:	8b e1       	ldi	r24, 0x1B	; 27
    3078:	93 e0       	ldi	r25, 0x03	; 3
    307a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    307e:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD3_6.MP3");
    3080:	85 e2       	ldi	r24, 0x25	; 37
    3082:	93 e0       	ldi	r25, 0x03	; 3
    3084:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
    3088:	08 95       	ret

0000308a <MD3_Main>:
	MD3_Current_State=0;
}

void MD3_Main(void)
{
	switch(MD3_Current_State)
    308a:	80 91 e7 05 	lds	r24, 0x05E7
    308e:	90 91 e8 05 	lds	r25, 0x05E8
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	19 f0       	breq	.+6      	; 0x309c <MD3_Main+0x12>
    3096:	02 97       	sbiw	r24, 0x02	; 2
    3098:	a1 f4       	brne	.+40     	; 0x30c2 <MD3_Main+0x38>
    309a:	0b c0       	rjmp	.+22     	; 0x30b2 <MD3_Main+0x28>
	{
		case 0:
			RequestToPlayMP3file("MD3INT.MP3");
    309c:	8f e2       	ldi	r24, 0x2F	; 47
    309e:	93 e0       	ldi	r25, 0x03	; 3
    30a0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <RequestToPlayMP3file>
			MD3_Current_State=1;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	90 93 e8 05 	sts	0x05E8, r25
    30ac:	80 93 e7 05 	sts	0x05E7, r24
    30b0:	08 95       	ret
			break;
		case 1:
			break;
		case 2:
			MD3_PlayRequestedDot();
    30b2:	0e 94 1d 18 	call	0x303a	; 0x303a <MD3_PlayRequestedDot>
			MD3_Current_State=1;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	90 93 e8 05 	sts	0x05E8, r25
    30be:	80 93 e7 05 	sts	0x05E7, r24
    30c2:	08 95       	ret

000030c4 <PC_RequestsToModifyModesFile>:
			break;
	}
}

void PC_RequestsToModifyModesFile(void)
{
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	64 97       	sbiw	r28, 0x14	; 20
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	8e 01       	movw	r16, r28
    30de:	0f 5f       	subi	r16, 0xFF	; 255
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	f8 01       	movw	r30, r16
	const char* ModesFile="MODES.DAT";
	unsigned char WritingFileContent[20];
	int iT=0;
	for(iT=0;iT<20;iT++)
    30e4:	ce 01       	movw	r24, r28
    30e6:	45 96       	adiw	r24, 0x15	; 21
	{
		WritingFileContent[iT]=0x00;
    30e8:	11 92       	st	Z+, r1
void PC_RequestsToModifyModesFile(void)
{
	const char* ModesFile="MODES.DAT";
	unsigned char WritingFileContent[20];
	int iT=0;
	for(iT=0;iT<20;iT++)
    30ea:	e8 17       	cp	r30, r24
    30ec:	f9 07       	cpc	r31, r25
    30ee:	e1 f7       	brne	.-8      	; 0x30e8 <PC_RequestsToModifyModesFile+0x24>
	{
		WritingFileContent[iT]=0x00;
	}
	InitSDCard(false);
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	0e 94 96 0b 	call	0x172c	; 0x172c <InitSDCard>
    30f6:	23 e0       	ldi	r18, 0x03	; 3
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	09 c0       	rjmp	.+18     	; 0x310e <PC_RequestsToModifyModesFile+0x4a>
	iT=0;
	for(iT=3;iT<USART_PC_received_playload_len;iT++)
	{
		WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
    30fc:	f9 01       	movw	r30, r18
    30fe:	ef 58       	subi	r30, 0x8F	; 143
    3100:	fc 4f       	sbci	r31, 0xFC	; 252
    3102:	80 81       	ld	r24, Z
    3104:	f8 01       	movw	r30, r16
    3106:	81 93       	st	Z+, r24
    3108:	8f 01       	movw	r16, r30
	{
		WritingFileContent[iT]=0x00;
	}
	InitSDCard(false);
	iT=0;
	for(iT=3;iT<USART_PC_received_playload_len;iT++)
    310a:	2f 5f       	subi	r18, 0xFF	; 255
    310c:	3f 4f       	sbci	r19, 0xFF	; 255
    310e:	80 91 c7 05 	lds	r24, 0x05C7
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	28 17       	cp	r18, r24
    3116:	39 07       	cpc	r19, r25
    3118:	8c f3       	brlt	.-30     	; 0x30fc <PC_RequestsToModifyModesFile+0x38>
	{
		WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
	}
	if(ReplaceTheContentOfThisFileWith(ModesFile,WritingFileContent)==0)
    311a:	8a e3       	ldi	r24, 0x3A	; 58
    311c:	93 e0       	ldi	r25, 0x03	; 3
    311e:	be 01       	movw	r22, r28
    3120:	6f 5f       	subi	r22, 0xFF	; 255
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	0e 94 c4 11 	call	0x2388	; 0x2388 <ReplaceTheContentOfThisFileWith>
    3128:	89 2b       	or	r24, r25
    312a:	19 f4       	brne	.+6      	; 0x3132 <PC_RequestsToModifyModesFile+0x6e>
	{
		USART_transmitStringToPCFromFlash(PSTR("SABT-OK"));
    312c:	85 ec       	ldi	r24, 0xC5	; 197
    312e:	93 e0       	ldi	r25, 0x03	; 3
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <PC_RequestsToModifyModesFile+0x72>
		TX_NEWLINE_PC;			
	}else{
		USART_transmitStringToPCFromFlash(PSTR("SABT-FAIL"));
    3132:	8b eb       	ldi	r24, 0xBB	; 187
    3134:	93 e0       	ldi	r25, 0x03	; 3
    3136:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
		TX_NEWLINE_PC;	
    313a:	8d e0       	ldi	r24, 0x0D	; 13
    313c:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    3140:	8a e0       	ldi	r24, 0x0A	; 10
    3142:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
	}
}
    3146:	64 96       	adiw	r28, 0x14	; 20
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

0000315c <PC_parse_message>:
#include "Globals.h"

bool PC_parse_message()
{
	unsigned char MessageType;
	USART_PC_Message_ready=false;
    315c:	10 92 4b 03 	sts	0x034B, r1
	MessageType=USART_PC_ReceivedPacket[2];
    3160:	80 91 73 03 	lds	r24, 0x0373
	switch(MessageType)
    3164:	8d 34       	cpi	r24, 0x4D	; 77
    3166:	69 f0       	breq	.+26     	; 0x3182 <PC_parse_message+0x26>
    3168:	88 37       	cpi	r24, 0x78	; 120
    316a:	69 f4       	brne	.+26     	; 0x3186 <PC_parse_message+0x2a>
	{
		case PC_CMD_INIT:
			USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
    316c:	8d ec       	ldi	r24, 0xCD	; 205
    316e:	93 e0       	ldi	r25, 0x03	; 3
    3170:	0e 94 b9 03 	call	0x772	; 0x772 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;			
    3174:	8d e0       	ldi	r24, 0x0D	; 13
    3176:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    317a:	8a e0       	ldi	r24, 0x0A	; 10
    317c:	0e 94 b1 03 	call	0x762	; 0x762 <USART_transmitByteToPC>
    3180:	08 95       	ret
			break;
		case PC_CMD_NEWMODES:
			PC_RequestsToModifyModesFile();
    3182:	0e 94 62 18 	call	0x30c4	; 0x30c4 <PC_RequestsToModifyModesFile>
			break;
	}
}
    3186:	08 95       	ret

00003188 <__mulsi3>:
    3188:	62 9f       	mul	r22, r18
    318a:	d0 01       	movw	r26, r0
    318c:	73 9f       	mul	r23, r19
    318e:	f0 01       	movw	r30, r0
    3190:	82 9f       	mul	r24, r18
    3192:	e0 0d       	add	r30, r0
    3194:	f1 1d       	adc	r31, r1
    3196:	64 9f       	mul	r22, r20
    3198:	e0 0d       	add	r30, r0
    319a:	f1 1d       	adc	r31, r1
    319c:	92 9f       	mul	r25, r18
    319e:	f0 0d       	add	r31, r0
    31a0:	83 9f       	mul	r24, r19
    31a2:	f0 0d       	add	r31, r0
    31a4:	74 9f       	mul	r23, r20
    31a6:	f0 0d       	add	r31, r0
    31a8:	65 9f       	mul	r22, r21
    31aa:	f0 0d       	add	r31, r0
    31ac:	99 27       	eor	r25, r25
    31ae:	72 9f       	mul	r23, r18
    31b0:	b0 0d       	add	r27, r0
    31b2:	e1 1d       	adc	r30, r1
    31b4:	f9 1f       	adc	r31, r25
    31b6:	63 9f       	mul	r22, r19
    31b8:	b0 0d       	add	r27, r0
    31ba:	e1 1d       	adc	r30, r1
    31bc:	f9 1f       	adc	r31, r25
    31be:	bd 01       	movw	r22, r26
    31c0:	cf 01       	movw	r24, r30
    31c2:	11 24       	eor	r1, r1
    31c4:	08 95       	ret

000031c6 <__udivmodsi4>:
    31c6:	a1 e2       	ldi	r26, 0x21	; 33
    31c8:	1a 2e       	mov	r1, r26
    31ca:	aa 1b       	sub	r26, r26
    31cc:	bb 1b       	sub	r27, r27
    31ce:	fd 01       	movw	r30, r26
    31d0:	0d c0       	rjmp	.+26     	; 0x31ec <__udivmodsi4_ep>

000031d2 <__udivmodsi4_loop>:
    31d2:	aa 1f       	adc	r26, r26
    31d4:	bb 1f       	adc	r27, r27
    31d6:	ee 1f       	adc	r30, r30
    31d8:	ff 1f       	adc	r31, r31
    31da:	a2 17       	cp	r26, r18
    31dc:	b3 07       	cpc	r27, r19
    31de:	e4 07       	cpc	r30, r20
    31e0:	f5 07       	cpc	r31, r21
    31e2:	20 f0       	brcs	.+8      	; 0x31ec <__udivmodsi4_ep>
    31e4:	a2 1b       	sub	r26, r18
    31e6:	b3 0b       	sbc	r27, r19
    31e8:	e4 0b       	sbc	r30, r20
    31ea:	f5 0b       	sbc	r31, r21

000031ec <__udivmodsi4_ep>:
    31ec:	66 1f       	adc	r22, r22
    31ee:	77 1f       	adc	r23, r23
    31f0:	88 1f       	adc	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	1a 94       	dec	r1
    31f6:	69 f7       	brne	.-38     	; 0x31d2 <__udivmodsi4_loop>
    31f8:	60 95       	com	r22
    31fa:	70 95       	com	r23
    31fc:	80 95       	com	r24
    31fe:	90 95       	com	r25
    3200:	9b 01       	movw	r18, r22
    3202:	ac 01       	movw	r20, r24
    3204:	bd 01       	movw	r22, r26
    3206:	cf 01       	movw	r24, r30
    3208:	08 95       	ret

0000320a <atoi>:
    320a:	fc 01       	movw	r30, r24
    320c:	88 27       	eor	r24, r24
    320e:	99 27       	eor	r25, r25
    3210:	e8 94       	clt
    3212:	21 91       	ld	r18, Z+
    3214:	20 32       	cpi	r18, 0x20	; 32
    3216:	e9 f3       	breq	.-6      	; 0x3212 <atoi+0x8>
    3218:	29 30       	cpi	r18, 0x09	; 9
    321a:	10 f0       	brcs	.+4      	; 0x3220 <atoi+0x16>
    321c:	2e 30       	cpi	r18, 0x0E	; 14
    321e:	c8 f3       	brcs	.-14     	; 0x3212 <atoi+0x8>
    3220:	2b 32       	cpi	r18, 0x2B	; 43
    3222:	41 f0       	breq	.+16     	; 0x3234 <atoi+0x2a>
    3224:	2d 32       	cpi	r18, 0x2D	; 45
    3226:	39 f4       	brne	.+14     	; 0x3236 <atoi+0x2c>
    3228:	68 94       	set
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <atoi+0x2a>
    322c:	0e 94 23 19 	call	0x3246	; 0x3246 <__mulhi_const_10>
    3230:	82 0f       	add	r24, r18
    3232:	91 1d       	adc	r25, r1
    3234:	21 91       	ld	r18, Z+
    3236:	20 53       	subi	r18, 0x30	; 48
    3238:	2a 30       	cpi	r18, 0x0A	; 10
    323a:	c0 f3       	brcs	.-16     	; 0x322c <atoi+0x22>
    323c:	1e f4       	brtc	.+6      	; 0x3244 <atoi+0x3a>
    323e:	90 95       	com	r25
    3240:	81 95       	neg	r24
    3242:	9f 4f       	sbci	r25, 0xFF	; 255
    3244:	08 95       	ret

00003246 <__mulhi_const_10>:
    3246:	7a e0       	ldi	r23, 0x0A	; 10
    3248:	97 9f       	mul	r25, r23
    324a:	90 2d       	mov	r25, r0
    324c:	87 9f       	mul	r24, r23
    324e:	80 2d       	mov	r24, r0
    3250:	91 0d       	add	r25, r1
    3252:	11 24       	eor	r1, r1
    3254:	08 95       	ret

00003256 <sprintf>:
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	2e 97       	sbiw	r28, 0x0e	; 14
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	0d 89       	ldd	r16, Y+21	; 0x15
    3270:	1e 89       	ldd	r17, Y+22	; 0x16
    3272:	86 e0       	ldi	r24, 0x06	; 6
    3274:	8c 83       	std	Y+4, r24	; 0x04
    3276:	1a 83       	std	Y+2, r17	; 0x02
    3278:	09 83       	std	Y+1, r16	; 0x01
    327a:	8f ef       	ldi	r24, 0xFF	; 255
    327c:	9f e7       	ldi	r25, 0x7F	; 127
    327e:	9e 83       	std	Y+6, r25	; 0x06
    3280:	8d 83       	std	Y+5, r24	; 0x05
    3282:	9e 01       	movw	r18, r28
    3284:	27 5e       	subi	r18, 0xE7	; 231
    3286:	3f 4f       	sbci	r19, 0xFF	; 255
    3288:	ce 01       	movw	r24, r28
    328a:	01 96       	adiw	r24, 0x01	; 1
    328c:	6f 89       	ldd	r22, Y+23	; 0x17
    328e:	78 8d       	ldd	r23, Y+24	; 0x18
    3290:	a9 01       	movw	r20, r18
    3292:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <vfprintf>
    3296:	2f 81       	ldd	r18, Y+7	; 0x07
    3298:	38 85       	ldd	r19, Y+8	; 0x08
    329a:	02 0f       	add	r16, r18
    329c:	13 1f       	adc	r17, r19
    329e:	f8 01       	movw	r30, r16
    32a0:	10 82       	st	Z, r1
    32a2:	2e 96       	adiw	r28, 0x0e	; 14
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <vfprintf>:
    32b8:	2f 92       	push	r2
    32ba:	3f 92       	push	r3
    32bc:	4f 92       	push	r4
    32be:	5f 92       	push	r5
    32c0:	6f 92       	push	r6
    32c2:	7f 92       	push	r7
    32c4:	8f 92       	push	r8
    32c6:	9f 92       	push	r9
    32c8:	af 92       	push	r10
    32ca:	bf 92       	push	r11
    32cc:	cf 92       	push	r12
    32ce:	df 92       	push	r13
    32d0:	ef 92       	push	r14
    32d2:	ff 92       	push	r15
    32d4:	0f 93       	push	r16
    32d6:	1f 93       	push	r17
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	2b 97       	sbiw	r28, 0x0b	; 11
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	de bf       	out	0x3e, r29	; 62
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	cd bf       	out	0x3d, r28	; 61
    32ec:	3c 01       	movw	r6, r24
    32ee:	2b 01       	movw	r4, r22
    32f0:	5a 01       	movw	r10, r20
    32f2:	fc 01       	movw	r30, r24
    32f4:	17 82       	std	Z+7, r1	; 0x07
    32f6:	16 82       	std	Z+6, r1	; 0x06
    32f8:	83 81       	ldd	r24, Z+3	; 0x03
    32fa:	81 fd       	sbrc	r24, 1
    32fc:	03 c0       	rjmp	.+6      	; 0x3304 <vfprintf+0x4c>
    32fe:	6f ef       	ldi	r22, 0xFF	; 255
    3300:	7f ef       	ldi	r23, 0xFF	; 255
    3302:	c6 c1       	rjmp	.+908    	; 0x3690 <vfprintf+0x3d8>
    3304:	9a e0       	ldi	r25, 0x0A	; 10
    3306:	89 2e       	mov	r8, r25
    3308:	1e 01       	movw	r2, r28
    330a:	08 94       	sec
    330c:	21 1c       	adc	r2, r1
    330e:	31 1c       	adc	r3, r1
    3310:	f3 01       	movw	r30, r6
    3312:	23 81       	ldd	r18, Z+3	; 0x03
    3314:	f2 01       	movw	r30, r4
    3316:	23 fd       	sbrc	r18, 3
    3318:	85 91       	lpm	r24, Z+
    331a:	23 ff       	sbrs	r18, 3
    331c:	81 91       	ld	r24, Z+
    331e:	2f 01       	movw	r4, r30
    3320:	88 23       	and	r24, r24
    3322:	09 f4       	brne	.+2      	; 0x3326 <vfprintf+0x6e>
    3324:	b2 c1       	rjmp	.+868    	; 0x368a <vfprintf+0x3d2>
    3326:	85 32       	cpi	r24, 0x25	; 37
    3328:	39 f4       	brne	.+14     	; 0x3338 <vfprintf+0x80>
    332a:	23 fd       	sbrc	r18, 3
    332c:	85 91       	lpm	r24, Z+
    332e:	23 ff       	sbrs	r18, 3
    3330:	81 91       	ld	r24, Z+
    3332:	2f 01       	movw	r4, r30
    3334:	85 32       	cpi	r24, 0x25	; 37
    3336:	29 f4       	brne	.+10     	; 0x3342 <vfprintf+0x8a>
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	b3 01       	movw	r22, r6
    333c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    3340:	e7 cf       	rjmp	.-50     	; 0x3310 <vfprintf+0x58>
    3342:	98 2f       	mov	r25, r24
    3344:	ff 24       	eor	r15, r15
    3346:	ee 24       	eor	r14, r14
    3348:	99 24       	eor	r9, r9
    334a:	ff e1       	ldi	r31, 0x1F	; 31
    334c:	ff 15       	cp	r31, r15
    334e:	d0 f0       	brcs	.+52     	; 0x3384 <vfprintf+0xcc>
    3350:	9b 32       	cpi	r25, 0x2B	; 43
    3352:	69 f0       	breq	.+26     	; 0x336e <vfprintf+0xb6>
    3354:	9c 32       	cpi	r25, 0x2C	; 44
    3356:	28 f4       	brcc	.+10     	; 0x3362 <vfprintf+0xaa>
    3358:	90 32       	cpi	r25, 0x20	; 32
    335a:	59 f0       	breq	.+22     	; 0x3372 <vfprintf+0xba>
    335c:	93 32       	cpi	r25, 0x23	; 35
    335e:	91 f4       	brne	.+36     	; 0x3384 <vfprintf+0xcc>
    3360:	0e c0       	rjmp	.+28     	; 0x337e <vfprintf+0xc6>
    3362:	9d 32       	cpi	r25, 0x2D	; 45
    3364:	49 f0       	breq	.+18     	; 0x3378 <vfprintf+0xc0>
    3366:	90 33       	cpi	r25, 0x30	; 48
    3368:	69 f4       	brne	.+26     	; 0x3384 <vfprintf+0xcc>
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	24 c0       	rjmp	.+72     	; 0x33b6 <vfprintf+0xfe>
    336e:	52 e0       	ldi	r21, 0x02	; 2
    3370:	f5 2a       	or	r15, r21
    3372:	84 e0       	ldi	r24, 0x04	; 4
    3374:	f8 2a       	or	r15, r24
    3376:	28 c0       	rjmp	.+80     	; 0x33c8 <vfprintf+0x110>
    3378:	98 e0       	ldi	r25, 0x08	; 8
    337a:	f9 2a       	or	r15, r25
    337c:	25 c0       	rjmp	.+74     	; 0x33c8 <vfprintf+0x110>
    337e:	e0 e1       	ldi	r30, 0x10	; 16
    3380:	fe 2a       	or	r15, r30
    3382:	22 c0       	rjmp	.+68     	; 0x33c8 <vfprintf+0x110>
    3384:	f7 fc       	sbrc	r15, 7
    3386:	29 c0       	rjmp	.+82     	; 0x33da <vfprintf+0x122>
    3388:	89 2f       	mov	r24, r25
    338a:	80 53       	subi	r24, 0x30	; 48
    338c:	8a 30       	cpi	r24, 0x0A	; 10
    338e:	70 f4       	brcc	.+28     	; 0x33ac <vfprintf+0xf4>
    3390:	f6 fe       	sbrs	r15, 6
    3392:	05 c0       	rjmp	.+10     	; 0x339e <vfprintf+0xe6>
    3394:	98 9c       	mul	r9, r8
    3396:	90 2c       	mov	r9, r0
    3398:	11 24       	eor	r1, r1
    339a:	98 0e       	add	r9, r24
    339c:	15 c0       	rjmp	.+42     	; 0x33c8 <vfprintf+0x110>
    339e:	e8 9c       	mul	r14, r8
    33a0:	e0 2c       	mov	r14, r0
    33a2:	11 24       	eor	r1, r1
    33a4:	e8 0e       	add	r14, r24
    33a6:	f0 e2       	ldi	r31, 0x20	; 32
    33a8:	ff 2a       	or	r15, r31
    33aa:	0e c0       	rjmp	.+28     	; 0x33c8 <vfprintf+0x110>
    33ac:	9e 32       	cpi	r25, 0x2E	; 46
    33ae:	29 f4       	brne	.+10     	; 0x33ba <vfprintf+0x102>
    33b0:	f6 fc       	sbrc	r15, 6
    33b2:	6b c1       	rjmp	.+726    	; 0x368a <vfprintf+0x3d2>
    33b4:	40 e4       	ldi	r20, 0x40	; 64
    33b6:	f4 2a       	or	r15, r20
    33b8:	07 c0       	rjmp	.+14     	; 0x33c8 <vfprintf+0x110>
    33ba:	9c 36       	cpi	r25, 0x6C	; 108
    33bc:	19 f4       	brne	.+6      	; 0x33c4 <vfprintf+0x10c>
    33be:	50 e8       	ldi	r21, 0x80	; 128
    33c0:	f5 2a       	or	r15, r21
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <vfprintf+0x110>
    33c4:	98 36       	cpi	r25, 0x68	; 104
    33c6:	49 f4       	brne	.+18     	; 0x33da <vfprintf+0x122>
    33c8:	f2 01       	movw	r30, r4
    33ca:	23 fd       	sbrc	r18, 3
    33cc:	95 91       	lpm	r25, Z+
    33ce:	23 ff       	sbrs	r18, 3
    33d0:	91 91       	ld	r25, Z+
    33d2:	2f 01       	movw	r4, r30
    33d4:	99 23       	and	r25, r25
    33d6:	09 f0       	breq	.+2      	; 0x33da <vfprintf+0x122>
    33d8:	b8 cf       	rjmp	.-144    	; 0x334a <vfprintf+0x92>
    33da:	89 2f       	mov	r24, r25
    33dc:	85 54       	subi	r24, 0x45	; 69
    33de:	83 30       	cpi	r24, 0x03	; 3
    33e0:	18 f0       	brcs	.+6      	; 0x33e8 <vfprintf+0x130>
    33e2:	80 52       	subi	r24, 0x20	; 32
    33e4:	83 30       	cpi	r24, 0x03	; 3
    33e6:	38 f4       	brcc	.+14     	; 0x33f6 <vfprintf+0x13e>
    33e8:	44 e0       	ldi	r20, 0x04	; 4
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	a4 0e       	add	r10, r20
    33ee:	b5 1e       	adc	r11, r21
    33f0:	5f e3       	ldi	r21, 0x3F	; 63
    33f2:	59 83       	std	Y+1, r21	; 0x01
    33f4:	0f c0       	rjmp	.+30     	; 0x3414 <vfprintf+0x15c>
    33f6:	93 36       	cpi	r25, 0x63	; 99
    33f8:	31 f0       	breq	.+12     	; 0x3406 <vfprintf+0x14e>
    33fa:	93 37       	cpi	r25, 0x73	; 115
    33fc:	79 f0       	breq	.+30     	; 0x341c <vfprintf+0x164>
    33fe:	93 35       	cpi	r25, 0x53	; 83
    3400:	09 f0       	breq	.+2      	; 0x3404 <vfprintf+0x14c>
    3402:	56 c0       	rjmp	.+172    	; 0x34b0 <vfprintf+0x1f8>
    3404:	20 c0       	rjmp	.+64     	; 0x3446 <vfprintf+0x18e>
    3406:	f5 01       	movw	r30, r10
    3408:	80 81       	ld	r24, Z
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	42 e0       	ldi	r20, 0x02	; 2
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	a4 0e       	add	r10, r20
    3412:	b5 1e       	adc	r11, r21
    3414:	61 01       	movw	r12, r2
    3416:	01 e0       	ldi	r16, 0x01	; 1
    3418:	10 e0       	ldi	r17, 0x00	; 0
    341a:	12 c0       	rjmp	.+36     	; 0x3440 <vfprintf+0x188>
    341c:	f5 01       	movw	r30, r10
    341e:	c0 80       	ld	r12, Z
    3420:	d1 80       	ldd	r13, Z+1	; 0x01
    3422:	f6 fc       	sbrc	r15, 6
    3424:	03 c0       	rjmp	.+6      	; 0x342c <vfprintf+0x174>
    3426:	6f ef       	ldi	r22, 0xFF	; 255
    3428:	7f ef       	ldi	r23, 0xFF	; 255
    342a:	02 c0       	rjmp	.+4      	; 0x3430 <vfprintf+0x178>
    342c:	69 2d       	mov	r22, r9
    342e:	70 e0       	ldi	r23, 0x00	; 0
    3430:	42 e0       	ldi	r20, 0x02	; 2
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	a4 0e       	add	r10, r20
    3436:	b5 1e       	adc	r11, r21
    3438:	c6 01       	movw	r24, r12
    343a:	0e 94 6d 1b 	call	0x36da	; 0x36da <strnlen>
    343e:	8c 01       	movw	r16, r24
    3440:	5f e7       	ldi	r21, 0x7F	; 127
    3442:	f5 22       	and	r15, r21
    3444:	14 c0       	rjmp	.+40     	; 0x346e <vfprintf+0x1b6>
    3446:	f5 01       	movw	r30, r10
    3448:	c0 80       	ld	r12, Z
    344a:	d1 80       	ldd	r13, Z+1	; 0x01
    344c:	f6 fc       	sbrc	r15, 6
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <vfprintf+0x19e>
    3450:	6f ef       	ldi	r22, 0xFF	; 255
    3452:	7f ef       	ldi	r23, 0xFF	; 255
    3454:	02 c0       	rjmp	.+4      	; 0x345a <vfprintf+0x1a2>
    3456:	69 2d       	mov	r22, r9
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	42 e0       	ldi	r20, 0x02	; 2
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	a4 0e       	add	r10, r20
    3460:	b5 1e       	adc	r11, r21
    3462:	c6 01       	movw	r24, r12
    3464:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <strnlen_P>
    3468:	8c 01       	movw	r16, r24
    346a:	50 e8       	ldi	r21, 0x80	; 128
    346c:	f5 2a       	or	r15, r21
    346e:	f3 fe       	sbrs	r15, 3
    3470:	07 c0       	rjmp	.+14     	; 0x3480 <vfprintf+0x1c8>
    3472:	1a c0       	rjmp	.+52     	; 0x34a8 <vfprintf+0x1f0>
    3474:	80 e2       	ldi	r24, 0x20	; 32
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	b3 01       	movw	r22, r6
    347a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    347e:	ea 94       	dec	r14
    3480:	8e 2d       	mov	r24, r14
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	08 17       	cp	r16, r24
    3486:	19 07       	cpc	r17, r25
    3488:	a8 f3       	brcs	.-22     	; 0x3474 <vfprintf+0x1bc>
    348a:	0e c0       	rjmp	.+28     	; 0x34a8 <vfprintf+0x1f0>
    348c:	f6 01       	movw	r30, r12
    348e:	f7 fc       	sbrc	r15, 7
    3490:	85 91       	lpm	r24, Z+
    3492:	f7 fe       	sbrs	r15, 7
    3494:	81 91       	ld	r24, Z+
    3496:	6f 01       	movw	r12, r30
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	b3 01       	movw	r22, r6
    349c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    34a0:	e1 10       	cpse	r14, r1
    34a2:	ea 94       	dec	r14
    34a4:	01 50       	subi	r16, 0x01	; 1
    34a6:	10 40       	sbci	r17, 0x00	; 0
    34a8:	01 15       	cp	r16, r1
    34aa:	11 05       	cpc	r17, r1
    34ac:	79 f7       	brne	.-34     	; 0x348c <vfprintf+0x1d4>
    34ae:	ea c0       	rjmp	.+468    	; 0x3684 <vfprintf+0x3cc>
    34b0:	94 36       	cpi	r25, 0x64	; 100
    34b2:	11 f0       	breq	.+4      	; 0x34b8 <vfprintf+0x200>
    34b4:	99 36       	cpi	r25, 0x69	; 105
    34b6:	69 f5       	brne	.+90     	; 0x3512 <vfprintf+0x25a>
    34b8:	f7 fe       	sbrs	r15, 7
    34ba:	08 c0       	rjmp	.+16     	; 0x34cc <vfprintf+0x214>
    34bc:	f5 01       	movw	r30, r10
    34be:	20 81       	ld	r18, Z
    34c0:	31 81       	ldd	r19, Z+1	; 0x01
    34c2:	42 81       	ldd	r20, Z+2	; 0x02
    34c4:	53 81       	ldd	r21, Z+3	; 0x03
    34c6:	84 e0       	ldi	r24, 0x04	; 4
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0a c0       	rjmp	.+20     	; 0x34e0 <vfprintf+0x228>
    34cc:	f5 01       	movw	r30, r10
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	9c 01       	movw	r18, r24
    34d4:	44 27       	eor	r20, r20
    34d6:	37 fd       	sbrc	r19, 7
    34d8:	40 95       	com	r20
    34da:	54 2f       	mov	r21, r20
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	a8 0e       	add	r10, r24
    34e2:	b9 1e       	adc	r11, r25
    34e4:	9f e6       	ldi	r25, 0x6F	; 111
    34e6:	f9 22       	and	r15, r25
    34e8:	57 ff       	sbrs	r21, 7
    34ea:	09 c0       	rjmp	.+18     	; 0x34fe <vfprintf+0x246>
    34ec:	50 95       	com	r21
    34ee:	40 95       	com	r20
    34f0:	30 95       	com	r19
    34f2:	21 95       	neg	r18
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	4f 4f       	sbci	r20, 0xFF	; 255
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255
    34fa:	e0 e8       	ldi	r30, 0x80	; 128
    34fc:	fe 2a       	or	r15, r30
    34fe:	ca 01       	movw	r24, r20
    3500:	b9 01       	movw	r22, r18
    3502:	a1 01       	movw	r20, r2
    3504:	2a e0       	ldi	r18, 0x0A	; 10
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__ultoa_invert>
    350c:	d8 2e       	mov	r13, r24
    350e:	d2 18       	sub	r13, r2
    3510:	40 c0       	rjmp	.+128    	; 0x3592 <vfprintf+0x2da>
    3512:	95 37       	cpi	r25, 0x75	; 117
    3514:	29 f4       	brne	.+10     	; 0x3520 <vfprintf+0x268>
    3516:	1f 2d       	mov	r17, r15
    3518:	1f 7e       	andi	r17, 0xEF	; 239
    351a:	2a e0       	ldi	r18, 0x0A	; 10
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	1d c0       	rjmp	.+58     	; 0x355a <vfprintf+0x2a2>
    3520:	1f 2d       	mov	r17, r15
    3522:	19 7f       	andi	r17, 0xF9	; 249
    3524:	9f 36       	cpi	r25, 0x6F	; 111
    3526:	61 f0       	breq	.+24     	; 0x3540 <vfprintf+0x288>
    3528:	90 37       	cpi	r25, 0x70	; 112
    352a:	20 f4       	brcc	.+8      	; 0x3534 <vfprintf+0x27c>
    352c:	98 35       	cpi	r25, 0x58	; 88
    352e:	09 f0       	breq	.+2      	; 0x3532 <vfprintf+0x27a>
    3530:	ac c0       	rjmp	.+344    	; 0x368a <vfprintf+0x3d2>
    3532:	0f c0       	rjmp	.+30     	; 0x3552 <vfprintf+0x29a>
    3534:	90 37       	cpi	r25, 0x70	; 112
    3536:	39 f0       	breq	.+14     	; 0x3546 <vfprintf+0x28e>
    3538:	98 37       	cpi	r25, 0x78	; 120
    353a:	09 f0       	breq	.+2      	; 0x353e <vfprintf+0x286>
    353c:	a6 c0       	rjmp	.+332    	; 0x368a <vfprintf+0x3d2>
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <vfprintf+0x290>
    3540:	28 e0       	ldi	r18, 0x08	; 8
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	0a c0       	rjmp	.+20     	; 0x355a <vfprintf+0x2a2>
    3546:	10 61       	ori	r17, 0x10	; 16
    3548:	14 fd       	sbrc	r17, 4
    354a:	14 60       	ori	r17, 0x04	; 4
    354c:	20 e1       	ldi	r18, 0x10	; 16
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	04 c0       	rjmp	.+8      	; 0x355a <vfprintf+0x2a2>
    3552:	14 fd       	sbrc	r17, 4
    3554:	16 60       	ori	r17, 0x06	; 6
    3556:	20 e1       	ldi	r18, 0x10	; 16
    3558:	32 e0       	ldi	r19, 0x02	; 2
    355a:	17 ff       	sbrs	r17, 7
    355c:	08 c0       	rjmp	.+16     	; 0x356e <vfprintf+0x2b6>
    355e:	f5 01       	movw	r30, r10
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	44 e0       	ldi	r20, 0x04	; 4
    356a:	50 e0       	ldi	r21, 0x00	; 0
    356c:	08 c0       	rjmp	.+16     	; 0x357e <vfprintf+0x2c6>
    356e:	f5 01       	movw	r30, r10
    3570:	80 81       	ld	r24, Z
    3572:	91 81       	ldd	r25, Z+1	; 0x01
    3574:	bc 01       	movw	r22, r24
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	42 e0       	ldi	r20, 0x02	; 2
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	a4 0e       	add	r10, r20
    3580:	b5 1e       	adc	r11, r21
    3582:	a1 01       	movw	r20, r2
    3584:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__ultoa_invert>
    3588:	d8 2e       	mov	r13, r24
    358a:	d2 18       	sub	r13, r2
    358c:	8f e7       	ldi	r24, 0x7F	; 127
    358e:	f8 2e       	mov	r15, r24
    3590:	f1 22       	and	r15, r17
    3592:	f6 fe       	sbrs	r15, 6
    3594:	0b c0       	rjmp	.+22     	; 0x35ac <vfprintf+0x2f4>
    3596:	5e ef       	ldi	r21, 0xFE	; 254
    3598:	f5 22       	and	r15, r21
    359a:	d9 14       	cp	r13, r9
    359c:	38 f4       	brcc	.+14     	; 0x35ac <vfprintf+0x2f4>
    359e:	f4 fe       	sbrs	r15, 4
    35a0:	07 c0       	rjmp	.+14     	; 0x35b0 <vfprintf+0x2f8>
    35a2:	f2 fc       	sbrc	r15, 2
    35a4:	05 c0       	rjmp	.+10     	; 0x35b0 <vfprintf+0x2f8>
    35a6:	8f ee       	ldi	r24, 0xEF	; 239
    35a8:	f8 22       	and	r15, r24
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <vfprintf+0x2f8>
    35ac:	1d 2d       	mov	r17, r13
    35ae:	01 c0       	rjmp	.+2      	; 0x35b2 <vfprintf+0x2fa>
    35b0:	19 2d       	mov	r17, r9
    35b2:	f4 fe       	sbrs	r15, 4
    35b4:	0d c0       	rjmp	.+26     	; 0x35d0 <vfprintf+0x318>
    35b6:	fe 01       	movw	r30, r28
    35b8:	ed 0d       	add	r30, r13
    35ba:	f1 1d       	adc	r31, r1
    35bc:	80 81       	ld	r24, Z
    35be:	80 33       	cpi	r24, 0x30	; 48
    35c0:	19 f4       	brne	.+6      	; 0x35c8 <vfprintf+0x310>
    35c2:	99 ee       	ldi	r25, 0xE9	; 233
    35c4:	f9 22       	and	r15, r25
    35c6:	08 c0       	rjmp	.+16     	; 0x35d8 <vfprintf+0x320>
    35c8:	1f 5f       	subi	r17, 0xFF	; 255
    35ca:	f2 fe       	sbrs	r15, 2
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <vfprintf+0x320>
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <vfprintf+0x31e>
    35d0:	8f 2d       	mov	r24, r15
    35d2:	86 78       	andi	r24, 0x86	; 134
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <vfprintf+0x320>
    35d6:	1f 5f       	subi	r17, 0xFF	; 255
    35d8:	0f 2d       	mov	r16, r15
    35da:	f3 fc       	sbrc	r15, 3
    35dc:	14 c0       	rjmp	.+40     	; 0x3606 <vfprintf+0x34e>
    35de:	f0 fe       	sbrs	r15, 0
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <vfprintf+0x348>
    35e2:	1e 15       	cp	r17, r14
    35e4:	10 f0       	brcs	.+4      	; 0x35ea <vfprintf+0x332>
    35e6:	9d 2c       	mov	r9, r13
    35e8:	0b c0       	rjmp	.+22     	; 0x3600 <vfprintf+0x348>
    35ea:	9d 2c       	mov	r9, r13
    35ec:	9e 0c       	add	r9, r14
    35ee:	91 1a       	sub	r9, r17
    35f0:	1e 2d       	mov	r17, r14
    35f2:	06 c0       	rjmp	.+12     	; 0x3600 <vfprintf+0x348>
    35f4:	80 e2       	ldi	r24, 0x20	; 32
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	b3 01       	movw	r22, r6
    35fa:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    35fe:	1f 5f       	subi	r17, 0xFF	; 255
    3600:	1e 15       	cp	r17, r14
    3602:	c0 f3       	brcs	.-16     	; 0x35f4 <vfprintf+0x33c>
    3604:	04 c0       	rjmp	.+8      	; 0x360e <vfprintf+0x356>
    3606:	1e 15       	cp	r17, r14
    3608:	10 f4       	brcc	.+4      	; 0x360e <vfprintf+0x356>
    360a:	e1 1a       	sub	r14, r17
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <vfprintf+0x358>
    360e:	ee 24       	eor	r14, r14
    3610:	04 ff       	sbrs	r16, 4
    3612:	0f c0       	rjmp	.+30     	; 0x3632 <vfprintf+0x37a>
    3614:	80 e3       	ldi	r24, 0x30	; 48
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	b3 01       	movw	r22, r6
    361a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    361e:	02 ff       	sbrs	r16, 2
    3620:	1d c0       	rjmp	.+58     	; 0x365c <vfprintf+0x3a4>
    3622:	01 fd       	sbrc	r16, 1
    3624:	03 c0       	rjmp	.+6      	; 0x362c <vfprintf+0x374>
    3626:	88 e7       	ldi	r24, 0x78	; 120
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	0e c0       	rjmp	.+28     	; 0x3648 <vfprintf+0x390>
    362c:	88 e5       	ldi	r24, 0x58	; 88
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0b c0       	rjmp	.+22     	; 0x3648 <vfprintf+0x390>
    3632:	80 2f       	mov	r24, r16
    3634:	86 78       	andi	r24, 0x86	; 134
    3636:	91 f0       	breq	.+36     	; 0x365c <vfprintf+0x3a4>
    3638:	01 ff       	sbrs	r16, 1
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <vfprintf+0x388>
    363c:	8b e2       	ldi	r24, 0x2B	; 43
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <vfprintf+0x38a>
    3640:	80 e2       	ldi	r24, 0x20	; 32
    3642:	f7 fc       	sbrc	r15, 7
    3644:	8d e2       	ldi	r24, 0x2D	; 45
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	b3 01       	movw	r22, r6
    364a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    364e:	06 c0       	rjmp	.+12     	; 0x365c <vfprintf+0x3a4>
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	b3 01       	movw	r22, r6
    3656:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    365a:	9a 94       	dec	r9
    365c:	d9 14       	cp	r13, r9
    365e:	c0 f3       	brcs	.-16     	; 0x3650 <vfprintf+0x398>
    3660:	da 94       	dec	r13
    3662:	f1 01       	movw	r30, r2
    3664:	ed 0d       	add	r30, r13
    3666:	f1 1d       	adc	r31, r1
    3668:	80 81       	ld	r24, Z
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	b3 01       	movw	r22, r6
    366e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    3672:	dd 20       	and	r13, r13
    3674:	a9 f7       	brne	.-22     	; 0x3660 <vfprintf+0x3a8>
    3676:	06 c0       	rjmp	.+12     	; 0x3684 <vfprintf+0x3cc>
    3678:	80 e2       	ldi	r24, 0x20	; 32
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	b3 01       	movw	r22, r6
    367e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <fputc>
    3682:	ea 94       	dec	r14
    3684:	ee 20       	and	r14, r14
    3686:	c1 f7       	brne	.-16     	; 0x3678 <vfprintf+0x3c0>
    3688:	43 ce       	rjmp	.-890    	; 0x3310 <vfprintf+0x58>
    368a:	f3 01       	movw	r30, r6
    368c:	66 81       	ldd	r22, Z+6	; 0x06
    368e:	77 81       	ldd	r23, Z+7	; 0x07
    3690:	cb 01       	movw	r24, r22
    3692:	2b 96       	adiw	r28, 0x0b	; 11
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	ff 90       	pop	r15
    36a8:	ef 90       	pop	r14
    36aa:	df 90       	pop	r13
    36ac:	cf 90       	pop	r12
    36ae:	bf 90       	pop	r11
    36b0:	af 90       	pop	r10
    36b2:	9f 90       	pop	r9
    36b4:	8f 90       	pop	r8
    36b6:	7f 90       	pop	r7
    36b8:	6f 90       	pop	r6
    36ba:	5f 90       	pop	r5
    36bc:	4f 90       	pop	r4
    36be:	3f 90       	pop	r3
    36c0:	2f 90       	pop	r2
    36c2:	08 95       	ret

000036c4 <strnlen_P>:
    36c4:	fc 01       	movw	r30, r24
    36c6:	05 90       	lpm	r0, Z+
    36c8:	61 50       	subi	r22, 0x01	; 1
    36ca:	70 40       	sbci	r23, 0x00	; 0
    36cc:	01 10       	cpse	r0, r1
    36ce:	d8 f7       	brcc	.-10     	; 0x36c6 <strnlen_P+0x2>
    36d0:	80 95       	com	r24
    36d2:	90 95       	com	r25
    36d4:	8e 0f       	add	r24, r30
    36d6:	9f 1f       	adc	r25, r31
    36d8:	08 95       	ret

000036da <strnlen>:
    36da:	fc 01       	movw	r30, r24
    36dc:	61 50       	subi	r22, 0x01	; 1
    36de:	70 40       	sbci	r23, 0x00	; 0
    36e0:	01 90       	ld	r0, Z+
    36e2:	01 10       	cpse	r0, r1
    36e4:	d8 f7       	brcc	.-10     	; 0x36dc <strnlen+0x2>
    36e6:	80 95       	com	r24
    36e8:	90 95       	com	r25
    36ea:	8e 0f       	add	r24, r30
    36ec:	9f 1f       	adc	r25, r31
    36ee:	08 95       	ret

000036f0 <fputc>:
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	8c 01       	movw	r16, r24
    36fa:	eb 01       	movw	r28, r22
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	81 ff       	sbrs	r24, 1
    3700:	1b c0       	rjmp	.+54     	; 0x3738 <fputc+0x48>
    3702:	82 ff       	sbrs	r24, 2
    3704:	0d c0       	rjmp	.+26     	; 0x3720 <fputc+0x30>
    3706:	2e 81       	ldd	r18, Y+6	; 0x06
    3708:	3f 81       	ldd	r19, Y+7	; 0x07
    370a:	8c 81       	ldd	r24, Y+4	; 0x04
    370c:	9d 81       	ldd	r25, Y+5	; 0x05
    370e:	28 17       	cp	r18, r24
    3710:	39 07       	cpc	r19, r25
    3712:	64 f4       	brge	.+24     	; 0x372c <fputc+0x3c>
    3714:	e8 81       	ld	r30, Y
    3716:	f9 81       	ldd	r31, Y+1	; 0x01
    3718:	01 93       	st	Z+, r16
    371a:	f9 83       	std	Y+1, r31	; 0x01
    371c:	e8 83       	st	Y, r30
    371e:	06 c0       	rjmp	.+12     	; 0x372c <fputc+0x3c>
    3720:	e8 85       	ldd	r30, Y+8	; 0x08
    3722:	f9 85       	ldd	r31, Y+9	; 0x09
    3724:	80 2f       	mov	r24, r16
    3726:	09 95       	icall
    3728:	89 2b       	or	r24, r25
    372a:	31 f4       	brne	.+12     	; 0x3738 <fputc+0x48>
    372c:	8e 81       	ldd	r24, Y+6	; 0x06
    372e:	9f 81       	ldd	r25, Y+7	; 0x07
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	9f 83       	std	Y+7, r25	; 0x07
    3734:	8e 83       	std	Y+6, r24	; 0x06
    3736:	02 c0       	rjmp	.+4      	; 0x373c <fputc+0x4c>
    3738:	0f ef       	ldi	r16, 0xFF	; 255
    373a:	1f ef       	ldi	r17, 0xFF	; 255
    373c:	c8 01       	movw	r24, r16
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	08 95       	ret

00003748 <__ultoa_invert>:
    3748:	fa 01       	movw	r30, r20
    374a:	aa 27       	eor	r26, r26
    374c:	28 30       	cpi	r18, 0x08	; 8
    374e:	51 f1       	breq	.+84     	; 0x37a4 <__ultoa_invert+0x5c>
    3750:	20 31       	cpi	r18, 0x10	; 16
    3752:	81 f1       	breq	.+96     	; 0x37b4 <__ultoa_invert+0x6c>
    3754:	e8 94       	clt
    3756:	6f 93       	push	r22
    3758:	6e 7f       	andi	r22, 0xFE	; 254
    375a:	6e 5f       	subi	r22, 0xFE	; 254
    375c:	7f 4f       	sbci	r23, 0xFF	; 255
    375e:	8f 4f       	sbci	r24, 0xFF	; 255
    3760:	9f 4f       	sbci	r25, 0xFF	; 255
    3762:	af 4f       	sbci	r26, 0xFF	; 255
    3764:	b1 e0       	ldi	r27, 0x01	; 1
    3766:	3e d0       	rcall	.+124    	; 0x37e4 <__ultoa_invert+0x9c>
    3768:	b4 e0       	ldi	r27, 0x04	; 4
    376a:	3c d0       	rcall	.+120    	; 0x37e4 <__ultoa_invert+0x9c>
    376c:	67 0f       	add	r22, r23
    376e:	78 1f       	adc	r23, r24
    3770:	89 1f       	adc	r24, r25
    3772:	9a 1f       	adc	r25, r26
    3774:	a1 1d       	adc	r26, r1
    3776:	68 0f       	add	r22, r24
    3778:	79 1f       	adc	r23, r25
    377a:	8a 1f       	adc	r24, r26
    377c:	91 1d       	adc	r25, r1
    377e:	a1 1d       	adc	r26, r1
    3780:	6a 0f       	add	r22, r26
    3782:	71 1d       	adc	r23, r1
    3784:	81 1d       	adc	r24, r1
    3786:	91 1d       	adc	r25, r1
    3788:	a1 1d       	adc	r26, r1
    378a:	20 d0       	rcall	.+64     	; 0x37cc <__ultoa_invert+0x84>
    378c:	09 f4       	brne	.+2      	; 0x3790 <__ultoa_invert+0x48>
    378e:	68 94       	set
    3790:	3f 91       	pop	r19
    3792:	2a e0       	ldi	r18, 0x0A	; 10
    3794:	26 9f       	mul	r18, r22
    3796:	11 24       	eor	r1, r1
    3798:	30 19       	sub	r19, r0
    379a:	30 5d       	subi	r19, 0xD0	; 208
    379c:	31 93       	st	Z+, r19
    379e:	de f6       	brtc	.-74     	; 0x3756 <__ultoa_invert+0xe>
    37a0:	cf 01       	movw	r24, r30
    37a2:	08 95       	ret
    37a4:	46 2f       	mov	r20, r22
    37a6:	47 70       	andi	r20, 0x07	; 7
    37a8:	40 5d       	subi	r20, 0xD0	; 208
    37aa:	41 93       	st	Z+, r20
    37ac:	b3 e0       	ldi	r27, 0x03	; 3
    37ae:	0f d0       	rcall	.+30     	; 0x37ce <__ultoa_invert+0x86>
    37b0:	c9 f7       	brne	.-14     	; 0x37a4 <__ultoa_invert+0x5c>
    37b2:	f6 cf       	rjmp	.-20     	; 0x37a0 <__ultoa_invert+0x58>
    37b4:	46 2f       	mov	r20, r22
    37b6:	4f 70       	andi	r20, 0x0F	; 15
    37b8:	40 5d       	subi	r20, 0xD0	; 208
    37ba:	4a 33       	cpi	r20, 0x3A	; 58
    37bc:	18 f0       	brcs	.+6      	; 0x37c4 <__ultoa_invert+0x7c>
    37be:	49 5d       	subi	r20, 0xD9	; 217
    37c0:	31 fd       	sbrc	r19, 1
    37c2:	40 52       	subi	r20, 0x20	; 32
    37c4:	41 93       	st	Z+, r20
    37c6:	02 d0       	rcall	.+4      	; 0x37cc <__ultoa_invert+0x84>
    37c8:	a9 f7       	brne	.-22     	; 0x37b4 <__ultoa_invert+0x6c>
    37ca:	ea cf       	rjmp	.-44     	; 0x37a0 <__ultoa_invert+0x58>
    37cc:	b4 e0       	ldi	r27, 0x04	; 4
    37ce:	a6 95       	lsr	r26
    37d0:	97 95       	ror	r25
    37d2:	87 95       	ror	r24
    37d4:	77 95       	ror	r23
    37d6:	67 95       	ror	r22
    37d8:	ba 95       	dec	r27
    37da:	c9 f7       	brne	.-14     	; 0x37ce <__ultoa_invert+0x86>
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	61 05       	cpc	r22, r1
    37e0:	71 05       	cpc	r23, r1
    37e2:	08 95       	ret
    37e4:	9b 01       	movw	r18, r22
    37e6:	ac 01       	movw	r20, r24
    37e8:	0a 2e       	mov	r0, r26
    37ea:	06 94       	lsr	r0
    37ec:	57 95       	ror	r21
    37ee:	47 95       	ror	r20
    37f0:	37 95       	ror	r19
    37f2:	27 95       	ror	r18
    37f4:	ba 95       	dec	r27
    37f6:	c9 f7       	brne	.-14     	; 0x37ea <__ultoa_invert+0xa2>
    37f8:	62 0f       	add	r22, r18
    37fa:	73 1f       	adc	r23, r19
    37fc:	84 1f       	adc	r24, r20
    37fe:	95 1f       	adc	r25, r21
    3800:	a0 1d       	adc	r26, r0
    3802:	08 95       	ret

00003804 <_exit>:
    3804:	f8 94       	cli

00003806 <__stop_program>:
    3806:	ff cf       	rjmp	.-2      	; 0x3806 <__stop_program>
