
SABT_MainUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  00003a7c  00003b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a4  0080046a  0080046a  00003e7a  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00003104  00000000  00000000  00003ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000050d3  00000000  00000000  000070fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d16  00000000  00000000  0000c1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002be0  00000000  00000000  0000cee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000fac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001126  00000000  00000000  00010138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c42  00000000  00000000  0001125e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_13>
      38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      50:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_20>
      54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      64:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      68:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      6c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      70:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_28>
      74:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      78:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      7c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      80:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      84:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      88:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      8c:	a1 18       	sub	r10, r1
      8e:	a4 18       	sub	r10, r4
      90:	a7 18       	sub	r10, r7
      92:	aa 18       	sub	r10, r10
      94:	ad 18       	sub	r10, r13
      96:	b0 18       	sub	r11, r0
      98:	b3 18       	sub	r11, r3
      9a:	b6 18       	sub	r11, r6
      9c:	b9 18       	sub	r11, r9
      9e:	bc 18       	sub	r11, r12
      a0:	bf 18       	sub	r11, r15
      a2:	c2 18       	sub	r12, r2
      a4:	c5 18       	sub	r12, r5
      a6:	c8 18       	sub	r12, r8
      a8:	cb 18       	sub	r12, r11
      aa:	ce 18       	sub	r12, r14
      ac:	d1 18       	sub	r13, r1
      ae:	d4 18       	sub	r13, r4
      b0:	d7 18       	sub	r13, r7
      b2:	da 18       	sub	r13, r10
      b4:	dd 18       	sub	r13, r13
      b6:	e0 18       	sub	r14, r0
      b8:	e3 18       	sub	r14, r3
      ba:	e6 18       	sub	r14, r6
      bc:	e9 18       	sub	r14, r9
      be:	ec 18       	sub	r14, r12

000000c0 <__c.1822>:
      c0:	4d 6f 64 65 20 66 69 6c 65 20 66 6f 75 6e 64 00     Mode file found.

000000d0 <__c.1820>:
      d0:	4d 6f 64 65 20 66 69 6c 65 20 6e 6f 74 20 66 6f     Mode file not fo
      e0:	75 6e 64 00                                         und.

000000e4 <__c.1818>:
      e4:	53 41 42 54 20 74 65 73 74 69 6e 67 2e 2e 2e 00     SABT testing....

000000f4 <__c.2383>:
      f4:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 7a 69     Error initializi
     104:	6e 67 20 56 53 31 30 35 33 20 2d 20 43 4f 44 45     ng VS1053 - CODE
     114:	20 00                                                .

00000116 <__c.2381>:
     116:	56 53 31 30 35 33 20 4d 50 33 20 63 68 69 70 20     VS1053 MP3 chip 
     126:	73 75 63 65 73 73 66 75 6c 6c 79 20 69 6e 69 74     sucessfully init
     136:	69 61 6c 69 7a 65 64 00                             ialized.

0000013e <__c.2379>:
     13e:	46 41 54 33 32 20 66 69 6c 65 20 73 79 73 74 65     FAT32 file syste
     14e:	6d 20 64 65 74 65 63 74 65 64 2e 2e 2e 00           m detected....

0000015c <__c.2377>:
     15c:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000016d <__c.2375>:
     16d:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     17d:	44 65 74 65 63 74 65 64 00                          Detected.

00000186 <__c.2372>:
     186:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     196:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1a6:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001b0 <__c.2369>:
     1b0:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     1c0:	72 64 20 44 65 74 65 63 74 65 64 00                 rd Detected.

000001cc <__c.2365>:
     1cc:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1dc:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     1ec:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001f6 <__c.2361>:
     1f6:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     206:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000213 <__c.2359>:
     213:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     223:	63 74 65 64 2e 2e 00                                cted...

0000022a <__c.2161>:
     22a:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     23a:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     24a:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000254 <__c.2065>:
     254:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     264:	2e 00                                               ..

00000266 <__c.2027>:
     266:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     276:	20 63 6c 75 73 74 65 72 00                           cluster.

0000027f <__c.1980>:
     27f:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     28f:	20 63 6c 75 73 74 65 72 00                           cluster.

00000298 <__c.1939>:
     298:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2a8:	20 63 6c 75 73 74 65 72 00                           cluster.

000002b1 <__c.1888>:
     2b1:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2c1:	20 63 6c 75 73 74 65 72 00                           cluster.

000002ca <__c.1880>:
     2ca:	52 4f 4f 54 00                                      ROOT.

000002cf <__c.1878>:
     2cf:	44 49 52 00                                         DIR.

000002d3 <__c.1876>:
     2d3:	20 20 20 00                                            .

000002d7 <__c.1874>:
     2d7:	46 49 4c 45 00                                      FILE.

000002dc <__c.1872>:
     2dc:	20 20 20 00                                            .

000002e0 <__c.1866>:
     2e0:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000002ee <__c.1864>:
     2ee:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000002f9 <__c.1859>:
     2f9:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     309:	69 73 74 21 00                                      ist!.

0000030e <__c.1926>:
     30e:	56 6f 6c 20 44 4f 57 4e 20 70 72 65 73 73 65 64     Vol DOWN pressed
	...

0000031f <__c.1923>:
     31f:	56 6f 6c 20 55 50 20 70 72 65 73 73 65 64 00        Vol UP pressed.

0000032e <__c.1920>:
     32e:	4d 6f 64 65 20 32 20 70 72 65 73 73 65 64 00        Mode 2 pressed.

0000033d <__c.1917>:
     33d:	4d 6f 64 65 20 31 20 70 72 65 73 73 65 64 00        Mode 1 pressed.

0000034c <__c.1914>:
     34c:	45 6e 74 65 72 20 32 20 70 72 65 73 73 65 64 00     Enter 2 pressed.

0000035c <__c.1911>:
     35c:	45 6e 74 65 72 20 31 20 70 72 65 73 73 65 64 00     Enter 1 pressed.

0000036c <__c.1878>:
     36c:	41 6e 61 6c 6f 67 20 49 6e 70 75 74 20 63 68 61     Analog Input cha
     37c:	6e 6e 65 6c 2c 4d 53 42 2c 4c 53 42 20 3a 00        nnel,MSB,LSB :.

0000038b <__c.1816>:
     38b:	41 6e 64 20 74 68 65 20 6d 6f 64 65 73 20 61 72     And the modes ar
     39b:	65 3b 20 00                                         e; .

0000039f <__c.1814>:
     39f:	4e 75 6d 62 65 72 20 6f 66 20 6d 6f 64 65 73 20     Number of modes 
     3af:	73 65 6c 65 63 74 65 64 3a 20 00                    selected: .

000003ba <__c.1785>:
     3ba:	53 41 42 54 2d 46 41 49 4c 00                       SABT-FAIL.

000003c4 <__c.1783>:
     3c4:	53 41 42 54 2d 4f 4b 00                             SABT-OK.

000003cc <__c.1765>:
     3cc:	53 41 42 54 2d 76 32 2e 31 00                       SABT-v2.1.

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf ef       	ldi	r28, 0xFF	; 255
     3dc:	d0 e4       	ldi	r29, 0x40	; 64
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	14 e0       	ldi	r17, 0x04	; 4
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b1 e0       	ldi	r27, 0x01	; 1
     3e8:	ec e7       	ldi	r30, 0x7C	; 124
     3ea:	fa e3       	ldi	r31, 0x3A	; 58
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	0b bf       	out	0x3b, r16	; 59
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__do_copy_data+0x14>
     3f2:	07 90       	elpm	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	aa 36       	cpi	r26, 0x6A	; 106
     3f8:	b1 07       	cpc	r27, r17
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__do_copy_data+0x10>

000003fc <__do_clear_bss>:
     3fc:	18 e0       	ldi	r17, 0x08	; 8
     3fe:	aa e6       	ldi	r26, 0x6A	; 106
     400:	b4 e0       	ldi	r27, 0x04	; 4
     402:	01 c0       	rjmp	.+2      	; 0x406 <.do_clear_bss_start>

00000404 <.do_clear_bss_loop>:
     404:	1d 92       	st	X+, r1

00000406 <.do_clear_bss_start>:
     406:	ae 30       	cpi	r26, 0x0E	; 14
     408:	b1 07       	cpc	r27, r17
     40a:	e1 f7       	brne	.-8      	; 0x404 <.do_clear_bss_loop>
     40c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
     410:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <_exit>

00000414 <__bad_interrupt>:
     414:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000418 <TimeRoutine>:
 * @brief Turns off/on bits 5,6,7 in Portd depending on LED_STAT to make the 3 LEDs on the board blink?
 * @ref AtATmega1284P(Preferred).pdf
 * @return Void
 */
void TimeRoutine(void){
  if(!LED_STAT){
     418:	80 91 e0 06 	lds	r24, 0x06E0
     41c:	88 23       	and	r24, r24
     41e:	39 f4       	brne	.+14     	; 0x42e <TimeRoutine+0x16>
    PORTD &= ~_BV(5);
     420:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~_BV(6);
     422:	5e 98       	cbi	0x0b, 6	; 11
    PORTD &= ~_BV(7);
     424:	5f 98       	cbi	0x0b, 7	; 11
    LED_STAT=true;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 e0 06 	sts	0x06E0, r24
     42c:	08 95       	ret
  }else{
    PORTD |= _BV(5);
     42e:	5d 9a       	sbi	0x0b, 5	; 11
    PORTD |= _BV(6);
     430:	5e 9a       	sbi	0x0b, 6	; 11
    PORTD |= _BV(7);
     432:	5f 9a       	sbi	0x0b, 7	; 11
    LED_STAT=false;
     434:	10 92 e0 06 	sts	0x06E0, r1
     438:	08 95       	ret

0000043a <__vector_13>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(TIMER1_COMPA_vect){
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	8f 93       	push	r24
  TMR1_INT=true;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 94 04 	sts	0x0494, r24
};
     44c:	8f 91       	pop	r24
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_20>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART0_RX_vect){
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	8f 93       	push	r24
//Temporarly using the PC as the UI
//  USART_Keypad_Received_Data=UDR0;
//  USART_Keypad_DATA_RDY=true; 
///*  Temporaraly disabled the PC communications since we are simulating the UI with PC
  USART_PC_Received_Data=UDR0;
     464:	80 91 c6 00 	lds	r24, 0x00C6
     468:	80 93 db 06 	sts	0x06DB, r24
  USART_PC_DATA_RDY=true;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 ea 06 	sts	0x06EA, r24
//*/
};
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <InitializeSystem>:
/**
 * @brief Initialize the system and interrupts
 * @return Void
 */
void InitializeSystem(void){
  TMR1_INT = false;   // clear the timer interrupt flag
     47e:	10 92 94 04 	sts	0x0494, r1
  PORTA = 0x00;
     482:	12 b8       	out	0x02, r1	; 2
  DDRA = 0xFF;  
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	81 b9       	out	0x01, r24	; 1
  PORTA = 0x00;  
     488:	12 b8       	out	0x02, r1	; 2

  DDRD |= _BV(5)|_BV(6)|_BV(7);
     48a:	8a b1       	in	r24, 0x0a	; 10
     48c:	80 6e       	ori	r24, 0xE0	; 224
     48e:	8a b9       	out	0x0a, r24	; 10
  
  TCCR1A=0x00;
     490:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=0x0D;
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	80 93 81 00 	sts	0x0081, r24
  OCR1A=780; //1s interval
     49a:	8c e0       	ldi	r24, 0x0C	; 12
     49c:	93 e0       	ldi	r25, 0x03	; 3
     49e:	90 93 89 00 	sts	0x0089, r25
     4a2:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 |= (1<<OCIE1A); //Enable interrupt
     4a6:	80 91 6f 00 	lds	r24, 0x006F
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	80 93 6f 00 	sts	0x006F, r24

  init_USART_Keypad();
     4b0:	0e 94 29 03 	call	0x652	; 0x652 <init_USART_Keypad>
  init_USART_PC();
     4b4:	0e 94 b2 03 	call	0x764	; 0x764 <init_USART_PC>
  SPI_Initialize();
     4b8:	0e 94 0b 06 	call	0xc16	; 0xc16 <SPI_Initialize>
  sei();  // sets the interrupt flag (enables interrupts)
     4bc:	78 94       	sei

  UI_Current_Mode=0;  //No mode selected
     4be:	10 92 bf 06 	sts	0x06BF, r1
  TX_NEWLINE_PC;
     4c2:	8d e0       	ldi	r24, 0x0D	; 13
     4c4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
     4c8:	8a e0       	ldi	r24, 0x0A	; 10
     4ca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
  USART_transmitStringToPCFromFlash (PSTR("SABT testing..."));
     4ce:	84 ee       	ldi	r24, 0xE4	; 228
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
  TX_NEWLINE_PC;
     4d6:	8d e0       	ldi	r24, 0x0D	; 13
     4d8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
     4dc:	8a e0       	ldi	r24, 0x0A	; 10
     4de:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>

  InitSDCard(true);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <InitSDCard>
  
  if(!UI_CheckModes())
     4e8:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <UI_CheckModes>
     4ec:	88 23       	and	r24, r24
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <InitializeSystem+0x78>
  {
    USART_transmitStringToPCFromFlash (PSTR("Mode file not found"));
     4f0:	80 ed       	ldi	r24, 0xD0	; 208
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <InitializeSystem+0x7c>
    TX_NEWLINE_PC;
  }
  else
  {
    USART_transmitStringToPCFromFlash (PSTR("Mode file found"));
     4f6:	80 ec       	ldi	r24, 0xC0	; 192
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    TX_NEWLINE_PC;
     4fe:	8d e0       	ldi	r24, 0x0D	; 13
     500:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
     504:	8a e0       	ldi	r24, 0x0A	; 10
     506:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
  }
  
  RequestToPlayMP3file("INT.MP3");  // Play the welcome message
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
}
     512:	08 95       	ret

00000514 <__vector_28>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART1_RX_vect){
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	0b b6       	in	r0, 0x3b	; 59
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
  DPRINTF("%c\r\n", UDR1);
     542:	8e ec       	ldi	r24, 0xCE	; 206
     544:	e8 2e       	mov	r14, r24
     546:	f1 2c       	mov	r15, r1
     548:	d7 01       	movw	r26, r14
     54a:	2c 91       	ld	r18, X
     54c:	00 d0       	rcall	.+0      	; 0x54e <__vector_28+0x3a>
     54e:	00 d0       	rcall	.+0      	; 0x550 <__vector_28+0x3c>
     550:	00 d0       	rcall	.+0      	; 0x552 <__vector_28+0x3e>
     552:	ed b7       	in	r30, 0x3d	; 61
     554:	fe b7       	in	r31, 0x3e	; 62
     556:	31 96       	adiw	r30, 0x01	; 1
     558:	0d ee       	ldi	r16, 0xED	; 237
     55a:	16 e0       	ldi	r17, 0x06	; 6
     55c:	ad b7       	in	r26, 0x3d	; 61
     55e:	be b7       	in	r27, 0x3e	; 62
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	1c 93       	st	X, r17
     564:	0e 93       	st	-X, r16
     566:	11 97       	sbiw	r26, 0x01	; 1
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	93 83       	std	Z+3, r25	; 0x03
     56e:	82 83       	std	Z+2, r24	; 0x02
     570:	24 83       	std	Z+4, r18	; 0x04
     572:	15 82       	std	Z+5, r1	; 0x05
     574:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
     578:	ed b7       	in	r30, 0x3d	; 61
     57a:	fe b7       	in	r31, 0x3e	; 62
     57c:	36 96       	adiw	r30, 0x06	; 6
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	fe bf       	out	0x3e, r31	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	ed bf       	out	0x3d, r30	; 61
     588:	c8 01       	movw	r24, r16
     58a:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  USART_Keypad_Received_Data=UDR1;
     58e:	d7 01       	movw	r26, r14
     590:	8c 91       	ld	r24, X
     592:	80 93 ee 07 	sts	0x07EE, r24
  USART_Keypad_DATA_RDY=true; 
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 78 04 	sts	0x0478, r24
};
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	bf 91       	pop	r27
     5a2:	af 91       	pop	r26
     5a4:	9f 91       	pop	r25
     5a6:	8f 91       	pop	r24
     5a8:	7f 91       	pop	r23
     5aa:	6f 91       	pop	r22
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	0f 90       	pop	r0
     5be:	0b be       	out	0x3b, r0	; 59
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti

000005ca <main>:
/**
 * @brief the main routine
 * @return Void
 */
int main(void){  
  InitializeSystem();
     5ca:	0e 94 3f 02 	call	0x47e	; 0x47e <InitializeSystem>

  //Display the files in the SD card
  //TX_NEWLINE_PC;
  //findFiles(GET_LIST,0);
  //TX_NEWLINE_PC;
  TX_NEWLINE_PC;
     5ce:	8d e0       	ldi	r24, 0x0D	; 13
     5d0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
     5d4:	8a e0       	ldi	r24, 0x0A	; 10
     5d6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
  //USART_transmitStringToPCFromFlash (PSTR("Press a key and see it returns."));
  TX_NEWLINE_PC;
     5da:	8d e0       	ldi	r24, 0x0D	; 13
     5dc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
     5e0:	8a e0       	ldi	r24, 0x0A	; 10
     5e2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
  while(1){
    // TODO remove test string
    // DPRINTF("Small waves crashing against the sand%d.", 42);

    if(TMR1_INT){
     5e6:	80 91 94 04 	lds	r24, 0x0494
     5ea:	88 23       	and	r24, r24
     5ec:	11 f0       	breq	.+4      	; 0x5f2 <main+0x28>
      TMR1_INT=false;
     5ee:	10 92 94 04 	sts	0x0494, r1
    //  TimeRoutine();
    }

    // check to see if we've received data from UI board
    // if true, process the single byte
    if(USART_Keypad_DATA_RDY){
     5f2:	80 91 78 04 	lds	r24, 0x0478
     5f6:	88 23       	and	r24, r24
     5f8:	11 f0       	breq	.+4      	; 0x5fe <main+0x34>
       *  A: contains braille dot at this location in the UI
       *  B: contains braille character at this location in the UI
       *  C: payload contains an error message
       *  D: payload contains a control button input from UI
       *  E: miscellaneous */
      USART_Keypad_ReceiveAction();
     5fa:	0e 94 3f 03 	call	0x67e	; 0x67e <USART_Keypad_ReceiveAction>
    }

    // check to see if we've received data from a connected PC 
    // if true, process the single byte
    if(USART_PC_DATA_RDY){
     5fe:	80 91 ea 06 	lds	r24, 0x06EA
     602:	88 23       	and	r24, r24
     604:	11 f0       	breq	.+4      	; 0x60a <main+0x40>
      USART_PC_ReceiveAction();
     606:	0e 94 c2 03 	call	0x784	; 0x784 <USART_PC_ReceiveAction>
        USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
        TX_NEWLINE_PC;
      }
      */
    }
    if(USART_PC_Message_ready) //If a message ready from the PC, process it
     60a:	80 91 70 04 	lds	r24, 0x0470
     60e:	88 23       	and	r24, r24
     610:	11 f0       	breq	.+4      	; 0x616 <main+0x4c>
    {
      PC_parse_message();
     612:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <PC_parse_message>
    }
    if(USART_UI_Message_ready) //If a message ready from the user interface, process it
     616:	80 91 be 04 	lds	r24, 0x04BE
     61a:	88 23       	and	r24, r24
     61c:	19 f0       	breq	.+6      	; 0x624 <main+0x5a>
    {
      UI_parse_message(false);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 28 16 	call	0x2c50	; 0x2c50 <UI_parse_message>
    }
    if(UI_MP3_file_Pending)  //If the UI handler needs to play new file, play it (the main loop won't be called while playing another file, so don't worry)
     624:	80 91 73 04 	lds	r24, 0x0473
     628:	88 23       	and	r24, r24
     62a:	81 f0       	breq	.+32     	; 0x64c <main+0x82>
    {

      PlayMP3file(fileName);  //WHERE IS THIS FUNCTION?
     62c:	89 e7       	ldi	r24, 0x79	; 121
     62e:	94 e0       	ldi	r25, 0x04	; 4
     630:	0e 94 9e 13 	call	0x273c	; 0x273c <PlayMP3file>

      PlayMP3file(fileName);
     634:	89 e7       	ldi	r24, 0x79	; 121
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	0e 94 9e 13 	call	0x273c	; 0x273c <PlayMP3file>
      RequestToPlayMP3file("INT.MP3");
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
      PlayMP3file(fileName);
     644:	89 e7       	ldi	r24, 0x79	; 121
     646:	94 e0       	ldi	r25, 0x04	; 4
     648:	0e 94 9e 13 	call	0x273c	; 0x273c <PlayMP3file>
      
    }
    UI_RunMainOfCurrentMode();
     64c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <UI_RunMainOfCurrentMode>
     650:	ca cf       	rjmp	.-108    	; 0x5e6 <main+0x1c>

00000652 <init_USART_Keypad>:
 * @brief Initializes the baud communication over USART.
 * @return Void
 */
void init_USART_Keypad(void)
{
  UCSR1B = 0x00; //disable while setting baud rate
     652:	e9 ec       	ldi	r30, 0xC9	; 201
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	10 82       	st	Z, r1
  UCSR1A = 0x00;
     658:	10 92 c8 00 	sts	0x00C8, r1
  UCSR1C = 0x06;
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	80 93 ca 00 	sts	0x00CA, r24
  UBRR1L = 0x19; //set baud rate lo
     662:	89 e1       	ldi	r24, 0x19	; 25
     664:	80 93 cc 00 	sts	0x00CC, r24
  UBRR1H = 0x00; //set baud rate hi 19,200 baud with 8MHz clock
     668:	10 92 cd 00 	sts	0x00CD, r1
  UCSR1B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     66c:	88 e9       	ldi	r24, 0x98	; 152
     66e:	80 83       	st	Z, r24
  USART_UI_length_received=false;
     670:	10 92 f9 07 	sts	0x07F9, r1
  USART_UI_header_received=false;
     674:	10 92 f8 07 	sts	0x07F8, r1
  USART_UI_Message_ready=false;
     678:	10 92 be 04 	sts	0x04BE, r1
}
     67c:	08 95       	ret

0000067e <USART_Keypad_ReceiveAction>:
 *          Transfers data from USART_Keypad_Reiceved_Data->USART_UI_ReceivedPacket
 * @ref  tech_report.pdf
 * @return Void
 */
void USART_Keypad_ReceiveAction(void){
  USART_Keypad_DATA_RDY=false;
     67e:	10 92 78 04 	sts	0x0478, r1

  if(!USART_UI_header_received)
     682:	80 91 f8 07 	lds	r24, 0x07F8
     686:	88 23       	and	r24, r24
     688:	d9 f4       	brne	.+54     	; 0x6c0 <USART_Keypad_ReceiveAction+0x42>
  {
    USART_UI_prefix[2]=USART_Keypad_Received_Data;
     68a:	20 91 ee 07 	lds	r18, 0x07EE
     68e:	20 93 f7 07 	sts	0x07F7, r18
    USART_UI_prefix[0]=USART_UI_prefix[1];
     692:	90 91 f6 07 	lds	r25, 0x07F6
     696:	90 93 f5 07 	sts	0x07F5, r25
    USART_UI_prefix[1]=USART_UI_prefix[2];
     69a:	20 93 f6 07 	sts	0x07F6, r18
    if((USART_UI_prefix[0]=='U')&&(USART_UI_prefix[1]=='I'))
     69e:	95 35       	cpi	r25, 0x55	; 85
     6a0:	f1 f5       	brne	.+124    	; 0x71e <USART_Keypad_ReceiveAction+0xa0>
     6a2:	29 34       	cpi	r18, 0x49	; 73
     6a4:	e1 f5       	brne	.+120    	; 0x71e <USART_Keypad_ReceiveAction+0xa0>
    {
      USART_UI_header_received=true;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 f8 07 	sts	0x07F8, r24
      USART_UI_ReceivedPacket[0]=USART_UI_prefix[0];
     6ac:	90 93 c2 06 	sts	0x06C2, r25
      USART_UI_ReceivedPacket[1]=USART_UI_prefix[1];
     6b0:	20 93 c3 06 	sts	0x06C3, r18
      USART_UI_receive_msgcnt=2;
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	80 93 f4 07 	sts	0x07F4, r24
      USART_UI_length_received=false;
     6ba:	10 92 f9 07 	sts	0x07F9, r1
     6be:	08 95       	ret
      //USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
      //USART_UI_length_reveived=true;
      //USART_UI_receive_msgcnt++;
    }
  }
  else if(!USART_UI_length_received)
     6c0:	80 91 f9 07 	lds	r24, 0x07F9
     6c4:	90 91 f4 07 	lds	r25, 0x07F4
     6c8:	88 23       	and	r24, r24
     6ca:	a1 f4       	brne	.+40     	; 0x6f4 <USART_Keypad_ReceiveAction+0x76>
  {
    if(USART_UI_receive_msgcnt==2)
     6cc:	92 30       	cpi	r25, 0x02	; 2
     6ce:	79 f4       	brne	.+30     	; 0x6ee <USART_Keypad_ReceiveAction+0x70>
    {
      USART_UI_received_playload_len=USART_Keypad_Received_Data;
     6d0:	80 91 ee 07 	lds	r24, 0x07EE
     6d4:	80 93 fa 07 	sts	0x07FA, r24
      USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
     6d8:	80 91 ee 07 	lds	r24, 0x07EE
     6dc:	80 93 c4 06 	sts	0x06C4, r24
      USART_UI_length_received=true;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 f9 07 	sts	0x07F9, r24
      USART_UI_receive_msgcnt++;
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	80 93 f4 07 	sts	0x07F4, r24
     6ec:	08 95       	ret
    }
    else
    {
      USART_UI_header_received=false;
     6ee:	10 92 f8 07 	sts	0x07F8, r1
     6f2:	08 95       	ret
    }
  }
  else
  {
    USART_UI_ReceivedPacket[USART_UI_receive_msgcnt++]=USART_Keypad_Received_Data;
     6f4:	e9 2f       	mov	r30, r25
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 91 ee 07 	lds	r24, 0x07EE
     6fc:	ee 53       	subi	r30, 0x3E	; 62
     6fe:	f9 4f       	sbci	r31, 0xF9	; 249
     700:	80 83       	st	Z, r24
     702:	9f 5f       	subi	r25, 0xFF	; 255
     704:	90 93 f4 07 	sts	0x07F4, r25
    if(USART_UI_receive_msgcnt==USART_UI_received_playload_len) //full message has been received
     708:	80 91 fa 07 	lds	r24, 0x07FA
     70c:	98 17       	cp	r25, r24
     70e:	39 f4       	brne	.+14     	; 0x71e <USART_Keypad_ReceiveAction+0xa0>
    {
      USART_UI_Message_ready=true;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 be 04 	sts	0x04BE, r24
      USART_UI_header_received=false;
     716:	10 92 f8 07 	sts	0x07F8, r1
      USART_UI_length_received=false;
     71a:	10 92 f9 07 	sts	0x07F9, r1
     71e:	08 95       	ret

00000720 <USART_transmitByteToKeypad>:
    }
  }    
}  

void USART_transmitByteToKeypad( unsigned char data )
{
     720:	98 2f       	mov	r25, r24
  while ( !(UCSR1A & (1<<UDRE1)) )
     722:	80 91 c8 00 	lds	r24, 0x00C8
     726:	85 ff       	sbrs	r24, 5
     728:	fc cf       	rjmp	.-8      	; 0x722 <USART_transmitByteToKeypad+0x2>
    ;                       /* Wait for empty transmit buffer */
  UDR1 = data;               /* Start transmition */
     72a:	90 93 ce 00 	sts	0x00CE, r25
}
     72e:	08 95       	ret

00000730 <USART_transmitStringToKeypadFromFlash>:

void USART_transmitStringToKeypadFromFlash(char* string)
{
     730:	fc 01       	movw	r30, r24
     732:	07 c0       	rjmp	.+14     	; 0x742 <USART_transmitStringToKeypadFromFlash+0x12>
  }    
}  

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
     734:	80 91 c8 00 	lds	r24, 0x00C8
     738:	85 ff       	sbrs	r24, 5
     73a:	fc cf       	rjmp	.-8      	; 0x734 <USART_transmitStringToKeypadFromFlash+0x4>
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
     73c:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
    ;                       /* Wait for empty transmit buffer */
  UDR1 = data;               /* Start transmition */
     73e:	90 93 ce 00 	sts	0x00CE, r25
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
     742:	94 91       	lpm	r25, Z+
     744:	99 23       	and	r25, r25
     746:	b1 f7       	brne	.-20     	; 0x734 <USART_transmitStringToKeypadFromFlash+0x4>
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
}
     748:	08 95       	ret

0000074a <USART_transmitStringToKeypad>:


void USART_transmitStringToKeypad(unsigned char* string)
{
     74a:	fc 01       	movw	r30, r24
     74c:	07 c0       	rjmp	.+14     	; 0x75c <USART_transmitStringToKeypad+0x12>
  }    
}  

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
     74e:	80 91 c8 00 	lds	r24, 0x00C8
     752:	85 ff       	sbrs	r24, 5
     754:	fc cf       	rjmp	.-8      	; 0x74e <USART_transmitStringToKeypad+0x4>


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
   USART_transmitByteToKeypad(*string++);
     756:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
    ;                       /* Wait for empty transmit buffer */
  UDR1 = data;               /* Start transmition */
     758:	90 93 ce 00 	sts	0x00CE, r25
}


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
     75c:	90 81       	ld	r25, Z
     75e:	99 23       	and	r25, r25
     760:	b1 f7       	brne	.-20     	; 0x74e <USART_transmitStringToKeypad+0x4>
   USART_transmitByteToKeypad(*string++);
}
     762:	08 95       	ret

00000764 <init_USART_PC>:
 * @brief Initializes the buad communication over USART.
 * @return Void
 */
void init_USART_PC(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     764:	e1 ec       	ldi	r30, 0xC1	; 193
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     76a:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     76e:	86 e0       	ldi	r24, 0x06	; 6
     770:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x19;
     774:	89 e1       	ldi	r24, 0x19	; 25
     776:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate to 19,200 with 8MHz clock
     77a:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     77e:	88 e9       	ldi	r24, 0x98	; 152
     780:	80 83       	st	Z, r24
}
     782:	08 95       	ret

00000784 <USART_PC_ReceiveAction>:
 *          messages to be sent
 * @ref  tech_report.pdf
 * @return always 0?
 */
unsigned char USART_PC_ReceiveAction(void){
  USART_PC_DATA_RDY=false;
     784:	10 92 ea 06 	sts	0x06EA, r1

  if(!USART_PC_header_received)
     788:	80 91 00 08 	lds	r24, 0x0800
     78c:	88 23       	and	r24, r24
     78e:	b9 f4       	brne	.+46     	; 0x7be <USART_PC_ReceiveAction+0x3a>
  {
    USART_PC_prefix[2]=USART_PC_Received_Data;
     790:	20 91 db 06 	lds	r18, 0x06DB
     794:	20 93 fe 07 	sts	0x07FE, r18
    USART_PC_prefix[0]=USART_PC_prefix[1];
     798:	90 91 fd 07 	lds	r25, 0x07FD
     79c:	90 93 fc 07 	sts	0x07FC, r25
    USART_PC_prefix[1]=USART_PC_prefix[2];
     7a0:	20 93 fd 07 	sts	0x07FD, r18
    if((USART_PC_prefix[0]=='P')&&(USART_PC_prefix[1]=='C'))
     7a4:	90 35       	cpi	r25, 0x50	; 80
     7a6:	21 f5       	brne	.+72     	; 0x7f0 <USART_PC_ReceiveAction+0x6c>
     7a8:	23 34       	cpi	r18, 0x43	; 67
     7aa:	11 f5       	brne	.+68     	; 0x7f0 <USART_PC_ReceiveAction+0x6c>
    {
      USART_PC_header_received=true;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 00 08 	sts	0x0800, r24
      USART_PC_ReceivedPacket[0]=USART_PC_prefix[0];
     7b2:	90 93 96 04 	sts	0x0496, r25
      USART_PC_ReceivedPacket[1]=USART_PC_prefix[1];
     7b6:	20 93 97 04 	sts	0x0497, r18
      USART_PC_receive_msgcnt=2;
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	17 c0       	rjmp	.+46     	; 0x7ec <USART_PC_ReceiveAction+0x68>
      //USART_PC_length_reveived=true;
      //USART_PC_receive_msgcnt++;
    }
  }
  else{
    if(USART_PC_Received_Data==13) //If carraige return found --> end of the command
     7be:	80 91 db 06 	lds	r24, 0x06DB
     7c2:	8d 30       	cpi	r24, 0x0D	; 13
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <USART_PC_ReceiveAction+0x54>
    {
      USART_PC_received_playload_len=USART_PC_receive_msgcnt;
     7c6:	80 91 ff 07 	lds	r24, 0x07FF
     7ca:	80 93 ec 06 	sts	0x06EC, r24
      USART_PC_Message_ready=true;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	80 93 70 04 	sts	0x0470, r24
      USART_PC_header_received=false;
     7d4:	10 92 00 08 	sts	0x0800, r1
      //USART_PC_length_reveived=false;
    }
    USART_PC_ReceivedPacket[USART_PC_receive_msgcnt++]=USART_PC_Received_Data;
     7d8:	80 91 ff 07 	lds	r24, 0x07FF
     7dc:	e8 2f       	mov	r30, r24
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	90 91 db 06 	lds	r25, 0x06DB
     7e4:	ea 56       	subi	r30, 0x6A	; 106
     7e6:	fb 4f       	sbci	r31, 0xFB	; 251
     7e8:	90 83       	st	Z, r25
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	80 93 ff 07 	sts	0x07FF, r24
      USART_PC_length_reveived=false;
    }
  }    
*/
  return 0;
}
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret

000007f4 <USART_transmitByteToPC>:
 * @brief transmit one byte to UDR0 (PC connection) 
 * @param bData contains the byte that needs to be sent
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
     7f4:	98 2f       	mov	r25, r24
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
     7f6:	80 91 c0 00 	lds	r24, 0x00C0
     7fa:	85 ff       	sbrs	r24, 5
     7fc:	fc cf       	rjmp	.-8      	; 0x7f6 <USART_transmitByteToPC+0x2>
  UDR0 = bData;                     // Transmit one byte of data
     7fe:	90 93 c6 00 	sts	0x00C6, r25
//  */
}
     802:	08 95       	ret

00000804 <USART_transmitStringToPCFromFlash>:
 * @brief reads each byte of data and sends it to the Flash individually
 * @param strData   String     Contains message to be sent to PC
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
     804:	fc 01       	movw	r30, r24
     806:	07 c0       	rjmp	.+14     	; 0x816 <USART_transmitStringToPCFromFlash+0x12>
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
     808:	80 91 c0 00 	lds	r24, 0x00C0
     80c:	85 ff       	sbrs	r24, 5
     80e:	fc cf       	rjmp	.-8      	; 0x808 <USART_transmitStringToPCFromFlash+0x4>
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
     810:	31 96       	adiw	r30, 0x01	; 1
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
  UDR0 = bData;                     // Transmit one byte of data
     812:	90 93 c6 00 	sts	0x00C6, r25
 * @param strData   String     Contains message to be sent to PC
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
     816:	94 91       	lpm	r25, Z+
     818:	99 23       	and	r25, r25
     81a:	b1 f7       	brne	.-20     	; 0x808 <USART_transmitStringToPCFromFlash+0x4>
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
}
     81c:	08 95       	ret

0000081e <USART_transmitStringToPC>:
 * @param strData string to transmit
 * @return Void
 * TODO: does this method send null terminator?
 */
void USART_transmitStringToPC(unsigned char* strData)
{
     81e:	fc 01       	movw	r30, r24
     820:	07 c0       	rjmp	.+14     	; 0x830 <USART_transmitStringToPC+0x12>
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
     822:	80 91 c0 00 	lds	r24, 0x00C0
     826:	85 ff       	sbrs	r24, 5
     828:	fc cf       	rjmp	.-8      	; 0x822 <USART_transmitStringToPC+0x4>
 * TODO: does this method send null terminator?
 */
void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
   USART_transmitByteToPC(*strData++);
     82a:	31 96       	adiw	r30, 0x01	; 1
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
  UDR0 = bData;                     // Transmit one byte of data
     82c:	90 93 c6 00 	sts	0x00C6, r25
 * @return Void
 * TODO: does this method send null terminator?
 */
void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
     830:	90 81       	ld	r25, Z
     832:	99 23       	and	r25, r25
     834:	b1 f7       	brne	.-20     	; 0x822 <USART_transmitStringToPC+0x4>
   USART_transmitByteToPC(*strData++);
}
     836:	08 95       	ret

00000838 <RequestToPlayMP3file>:
 * loop)
 * @param thisFile  the name of the MP3 file to be played
 * @return Void
 */
void RequestToPlayMP3file(const char* thisFile)
{
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	7c 01       	movw	r14, r24
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
  int i = 0;
  
  while(i < strlen(fileName))
     84a:	a9 e7       	ldi	r26, 0x79	; 121
     84c:	b4 e0       	ldi	r27, 0x04	; 4
  {
    fileName[i++] = "";
     84e:	2d e0       	ldi	r18, 0x0D	; 13
     850:	31 e0       	ldi	r19, 0x01	; 1
     852:	05 c0       	rjmp	.+10     	; 0x85e <RequestToPlayMP3file+0x26>
     854:	fc 01       	movw	r30, r24
     856:	e7 58       	subi	r30, 0x87	; 135
     858:	fb 4f       	sbci	r31, 0xFB	; 251
     85a:	20 83       	st	Z, r18
     85c:	01 96       	adiw	r24, 0x01	; 1
 */
void RequestToPlayMP3file(const char* thisFile)
{
  int i = 0;
  
  while(i < strlen(fileName))
     85e:	fd 01       	movw	r30, r26
     860:	01 90       	ld	r0, Z+
     862:	00 20       	and	r0, r0
     864:	e9 f7       	brne	.-6      	; 0x860 <RequestToPlayMP3file+0x28>
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	e9 57       	subi	r30, 0x79	; 121
     86a:	f4 40       	sbci	r31, 0x04	; 4
     86c:	8e 17       	cp	r24, r30
     86e:	9f 07       	cpc	r25, r31
     870:	88 f3       	brcs	.-30     	; 0x854 <RequestToPlayMP3file+0x1c>
  {
    fileName[i++] = "";
  }
  DPRINTF("fileName = %s\n\r", fileName);
     872:	00 d0       	rcall	.+0      	; 0x874 <RequestToPlayMP3file+0x3c>
     874:	00 d0       	rcall	.+0      	; 0x876 <RequestToPlayMP3file+0x3e>
     876:	00 d0       	rcall	.+0      	; 0x878 <RequestToPlayMP3file+0x40>
     878:	ed b7       	in	r30, 0x3d	; 61
     87a:	fe b7       	in	r31, 0x3e	; 62
     87c:	31 96       	adiw	r30, 0x01	; 1
     87e:	0d ee       	ldi	r16, 0xED	; 237
     880:	16 e0       	ldi	r17, 0x06	; 6
     882:	ad b7       	in	r26, 0x3d	; 61
     884:	be b7       	in	r27, 0x3e	; 62
     886:	12 96       	adiw	r26, 0x02	; 2
     888:	1c 93       	st	X, r17
     88a:	0e 93       	st	-X, r16
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	8e e0       	ldi	r24, 0x0E	; 14
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	93 83       	std	Z+3, r25	; 0x03
     894:	82 83       	std	Z+2, r24	; 0x02
     896:	89 e7       	ldi	r24, 0x79	; 121
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	95 83       	std	Z+5, r25	; 0x05
     89c:	84 83       	std	Z+4, r24	; 0x04
     89e:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
     8a2:	8d b7       	in	r24, 0x3d	; 61
     8a4:	9e b7       	in	r25, 0x3e	; 62
     8a6:	06 96       	adiw	r24, 0x06	; 6
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	9e bf       	out	0x3e, r25	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	8d bf       	out	0x3d, r24	; 61
     8b2:	c8 01       	movw	r24, r16
     8b4:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <RequestToPlayMP3file+0x8c>
  i = 0;
  
    // copy the file name to the global variable
  while(*thisFile != '.')
  {
    fileName[i++] = *(thisFile++);
     8be:	80 83       	st	Z, r24
     8c0:	d9 01       	movw	r26, r18
     8c2:	7e 01       	movw	r14, r28
  }
  DPRINTF("fileName = %s\n\r", fileName);
  i = 0;
  
    // copy the file name to the global variable
  while(*thisFile != '.')
     8c4:	e7 01       	movw	r28, r14
     8c6:	89 91       	ld	r24, Y+
     8c8:	fd 01       	movw	r30, r26
     8ca:	e7 58       	subi	r30, 0x87	; 135
     8cc:	fb 4f       	sbci	r31, 0xFB	; 251
     8ce:	9d 01       	movw	r18, r26
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	8e 32       	cpi	r24, 0x2E	; 46
     8d6:	99 f7       	brne	.-26     	; 0x8be <RequestToPlayMP3file+0x86>
  {
    fileName[i++] = *(thisFile++);
  }
  fileName[i++] = *(thisFile++);
     8d8:	80 83       	st	Z, r24
  fileName[i++] = *(thisFile++);
     8da:	d9 01       	movw	r26, r18
     8dc:	a7 58       	subi	r26, 0x87	; 135
     8de:	bb 4f       	sbci	r27, 0xFB	; 251
     8e0:	fe 01       	movw	r30, r28
     8e2:	81 91       	ld	r24, Z+
     8e4:	8c 93       	st	X, r24
  fileName[i++] = *(thisFile++);
     8e6:	d9 01       	movw	r26, r18
     8e8:	a6 58       	subi	r26, 0x86	; 134
     8ea:	bb 4f       	sbci	r27, 0xFB	; 251
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	8c 93       	st	X, r24
  fileName[i++] = *(thisFile++);
     8f0:	81 81       	ldd	r24, Z+1	; 0x01
     8f2:	11 96       	adiw	r26, 0x01	; 1
     8f4:	8c 93       	st	X, r24
  DPRINTF("end fileName = %s\n\r", fileName);
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <RequestToPlayMP3file+0xc0>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <RequestToPlayMP3file+0xc2>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <RequestToPlayMP3file+0xc4>
     8fc:	ed b7       	in	r30, 0x3d	; 61
     8fe:	fe b7       	in	r31, 0x3e	; 62
     900:	31 96       	adiw	r30, 0x01	; 1
     902:	0d ee       	ldi	r16, 0xED	; 237
     904:	16 e0       	ldi	r17, 0x06	; 6
     906:	ad b7       	in	r26, 0x3d	; 61
     908:	be b7       	in	r27, 0x3e	; 62
     90a:	12 96       	adiw	r26, 0x02	; 2
     90c:	1c 93       	st	X, r17
     90e:	0e 93       	st	-X, r16
     910:	11 97       	sbiw	r26, 0x01	; 1
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	93 83       	std	Z+3, r25	; 0x03
     918:	82 83       	std	Z+2, r24	; 0x02
     91a:	89 e7       	ldi	r24, 0x79	; 121
     91c:	94 e0       	ldi	r25, 0x04	; 4
     91e:	95 83       	std	Z+5, r25	; 0x05
     920:	84 83       	std	Z+4, r24	; 0x04
     922:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
     926:	8d b7       	in	r24, 0x3d	; 61
     928:	9e b7       	in	r25, 0x3e	; 62
     92a:	06 96       	adiw	r24, 0x06	; 6
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	9e bf       	out	0x3e, r25	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	8d bf       	out	0x3d, r24	; 61
     936:	c8 01       	movw	r24, r16
     938:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>

  // Mark that a file is queued to be played by the user interface
  UI_MP3_file_Pending = true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 73 04 	sts	0x0473, r24
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <VS1053_ReadCmd>:
  SPI_transmit(temp5);
  SPI_DeselectAll();
}

unsigned int VS1053_ReadCmd(unsigned char addr)
{
     950:	1f 93       	push	r17
     952:	18 2f       	mov	r17, r24
  tempAddr=addr;
     954:	80 93 01 08 	sts	0x0801, r24
  SPI_Select_MP3_Cmd();
     958:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <SPI_Select_MP3_Cmd>
  SPI_transmit(0x03);
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  SPI_transmit(addr);
     962:	81 2f       	mov	r24, r17
     964:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  temp1 = SPI_receive();
     968:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 6b 04 	sts	0x046B, r25
     972:	80 93 6a 04 	sts	0x046A, r24
  temp2 = SPI_receive();
     976:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	90 93 6d 04 	sts	0x046D, r25
     980:	80 93 6c 04 	sts	0x046C, r24
  temp3 = temp1*256 + temp2;
     984:	80 91 6a 04 	lds	r24, 0x046A
     988:	90 91 6b 04 	lds	r25, 0x046B
     98c:	20 91 6c 04 	lds	r18, 0x046C
     990:	30 91 6d 04 	lds	r19, 0x046D
     994:	98 2f       	mov	r25, r24
     996:	88 27       	eor	r24, r24
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	90 93 6f 04 	sts	0x046F, r25
     9a0:	80 93 6e 04 	sts	0x046E, r24
  SPI_DeselectAll();
     9a4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_DeselectAll>
  return temp3;
     9a8:	20 91 6e 04 	lds	r18, 0x046E
     9ac:	30 91 6f 04 	lds	r19, 0x046F
}
     9b0:	c9 01       	movw	r24, r18
     9b2:	1f 91       	pop	r17
     9b4:	08 95       	ret

000009b6 <VS1053_WriteCmd>:
  SPI_transmit(data);
  SPI_DeselectAll();
}

void VS1053_WriteCmd(unsigned char addr, unsigned int cmd)
{
     9b6:	1f 93       	push	r17
     9b8:	18 2f       	mov	r17, r24
    temp4 = (cmd & 0xFF00) >> 8;
     9ba:	70 93 03 08 	sts	0x0803, r23
    temp5 = (cmd & 0x00FF);
     9be:	60 93 02 08 	sts	0x0802, r22
  tempAddr=addr;
     9c2:	80 93 01 08 	sts	0x0801, r24
  SPI_Select_MP3_Cmd();
     9c6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <SPI_Select_MP3_Cmd>
  SPI_transmit(0x02);
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  SPI_transmit(addr);
     9d0:	81 2f       	mov	r24, r17
     9d2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  SPI_transmit(temp4);
     9d6:	80 91 03 08 	lds	r24, 0x0803
     9da:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  SPI_transmit(temp5);
     9de:	80 91 02 08 	lds	r24, 0x0802
     9e2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  SPI_DeselectAll();
     9e6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_DeselectAll>
}
     9ea:	1f 91       	pop	r17
     9ec:	08 95       	ret

000009ee <VS1053_DecreaseVol>:
  }
  return true;
}

bool VS1053_DecreaseVol(void)
{
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
  int retry=0;
  VS1053_Vol=VS1053_Vol-((uint16_t)(1<<8)+1);
     9f2:	80 91 04 08 	lds	r24, 0x0804
     9f6:	90 91 05 08 	lds	r25, 0x0805
     9fa:	81 50       	subi	r24, 0x01	; 1
     9fc:	91 40       	sbci	r25, 0x01	; 1
     9fe:	90 93 05 08 	sts	0x0805, r25
     a02:	80 93 04 08 	sts	0x0804, r24
  if(VS1053_Vol<=0x0101)
     a06:	80 91 04 08 	lds	r24, 0x0804
     a0a:	90 91 05 08 	lds	r25, 0x0805
     a0e:	82 50       	subi	r24, 0x02	; 2
     a10:	91 40       	sbci	r25, 0x01	; 1
     a12:	18 f0       	brcs	.+6      	; 0xa1a <VS1053_DecreaseVol+0x2c>
     a14:	c0 e0       	ldi	r28, 0x00	; 0
     a16:	d0 e0       	ldi	r29, 0x00	; 0
     a18:	14 c0       	rjmp	.+40     	; 0xa42 <VS1053_DecreaseVol+0x54>
  {
    VS1053_Vol=0x0101;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	90 93 05 08 	sts	0x0805, r25
     a22:	80 93 04 08 	sts	0x0804, r24
     a26:	17 c0       	rjmp	.+46     	; 0xa56 <VS1053_DecreaseVol+0x68>
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
    {
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
     a28:	60 91 04 08 	lds	r22, 0x0804
     a2c:	70 91 05 08 	lds	r23, 0x0805
     a30:	8b e0       	ldi	r24, 0x0B	; 11
     a32:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
      if(retry++ >10 )return false;
     a36:	cb 30       	cpi	r28, 0x0B	; 11
     a38:	d1 05       	cpc	r29, r1
     a3a:	11 f4       	brne	.+4      	; 0xa40 <VS1053_DecreaseVol+0x52>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0c c0       	rjmp	.+24     	; 0xa58 <VS1053_DecreaseVol+0x6a>
     a40:	21 96       	adiw	r28, 0x01	; 1
  {
    VS1053_Vol=0x0101;
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
     a42:	8b e0       	ldi	r24, 0x0B	; 11
     a44:	0e 94 a8 04 	call	0x950	; 0x950 <VS1053_ReadCmd>
     a48:	20 91 04 08 	lds	r18, 0x0804
     a4c:	30 91 05 08 	lds	r19, 0x0805
     a50:	82 17       	cp	r24, r18
     a52:	93 07       	cpc	r25, r19
     a54:	49 f7       	brne	.-46     	; 0xa28 <VS1053_DecreaseVol+0x3a>
     a56:	81 e0       	ldi	r24, 0x01	; 1
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
      if(retry++ >10 )return false;
    }
  }
  return true;
}          
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <VS1053_IncreaseVol>:
  VS1053_WriteCmd(0x00,0x0804);    //Software reset via mode register
  _delay_ms(20);
}

bool VS1053_IncreaseVol(void)
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
  int retry=0;
  VS1053_Vol=VS1053_Vol+((uint16_t)(1<<8)+1);
     a62:	80 91 04 08 	lds	r24, 0x0804
     a66:	90 91 05 08 	lds	r25, 0x0805
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	9e 4f       	sbci	r25, 0xFE	; 254
     a6e:	90 93 05 08 	sts	0x0805, r25
     a72:	80 93 04 08 	sts	0x0804, r24
  if(VS1053_Vol>=0xFEFE)
     a76:	80 91 04 08 	lds	r24, 0x0804
     a7a:	90 91 05 08 	lds	r25, 0x0805
     a7e:	8e 5f       	subi	r24, 0xFE	; 254
     a80:	9e 4f       	sbci	r25, 0xFE	; 254
     a82:	18 f4       	brcc	.+6      	; 0xa8a <VS1053_IncreaseVol+0x2c>
     a84:	c0 e0       	ldi	r28, 0x00	; 0
     a86:	d0 e0       	ldi	r29, 0x00	; 0
     a88:	14 c0       	rjmp	.+40     	; 0xab2 <VS1053_IncreaseVol+0x54>
  {
    VS1053_Vol=0xFEFE; 
     a8a:	8e ef       	ldi	r24, 0xFE	; 254
     a8c:	9e ef       	ldi	r25, 0xFE	; 254
     a8e:	90 93 05 08 	sts	0x0805, r25
     a92:	80 93 04 08 	sts	0x0804, r24
     a96:	17 c0       	rjmp	.+46     	; 0xac6 <VS1053_IncreaseVol+0x68>
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
    {
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
     a98:	60 91 04 08 	lds	r22, 0x0804
     a9c:	70 91 05 08 	lds	r23, 0x0805
     aa0:	8b e0       	ldi	r24, 0x0B	; 11
     aa2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
      if(retry++ >10 )return false;
     aa6:	cb 30       	cpi	r28, 0x0B	; 11
     aa8:	d1 05       	cpc	r29, r1
     aaa:	11 f4       	brne	.+4      	; 0xab0 <VS1053_IncreaseVol+0x52>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0c c0       	rjmp	.+24     	; 0xac8 <VS1053_IncreaseVol+0x6a>
     ab0:	21 96       	adiw	r28, 0x01	; 1
  {
    VS1053_Vol=0xFEFE; 
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
     ab2:	8b e0       	ldi	r24, 0x0B	; 11
     ab4:	0e 94 a8 04 	call	0x950	; 0x950 <VS1053_ReadCmd>
     ab8:	20 91 04 08 	lds	r18, 0x0804
     abc:	30 91 05 08 	lds	r19, 0x0805
     ac0:	82 17       	cp	r24, r18
     ac2:	93 07       	cpc	r25, r19
     ac4:	49 f7       	brne	.-46     	; 0xa98 <VS1053_IncreaseVol+0x3a>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
      if(retry++ >10 )return false;
    }
  }
  return true;
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <VS1053_SoftwareReset>:
  return 0;
}

void VS1053_SoftwareReset(void)
{
  VS1053_WriteCmd(0x00,0x0804);    //Software reset via mode register
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	64 e0       	ldi	r22, 0x04	; 4
     ad2:	78 e0       	ldi	r23, 0x08	; 8
     ad4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad8:	80 e4       	ldi	r24, 0x40	; 64
     ada:	9c e9       	ldi	r25, 0x9C	; 156
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <VS1053_SoftwareReset+0xe>
  _delay_ms(20);
}
     ae0:	08 95       	ret

00000ae2 <VS1053_WriteData>:
  }
  return true;
}          

void VS1053_WriteData(unsigned char data)
{
     ae2:	1f 93       	push	r17
     ae4:	18 2f       	mov	r17, r24
  SPI_Select_MP3_Data();
     ae6:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_Select_MP3_Data>
  SPI_transmit(data);
     aea:	81 2f       	mov	r24, r17
     aec:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
  SPI_DeselectAll();
     af0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_DeselectAll>
}
     af4:	1f 91       	pop	r17
     af6:	08 95       	ret

00000af8 <VS1053_Initialize>:
/**
 * @brief initialize the audio codec
 * @return ?
 */
unsigned char VS1053_Initialize(void)
{
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
  unsigned char retry;
  SPI_DeselectAll();
     afc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_DeselectAll>
  SPI_PORT &= ~_BV(MP3_RESET);  //De assert RESET line (Chip in the reset state)
     b00:	2c 98       	cbi	0x05, 4	; 5
     b02:	00 e4       	ldi	r16, 0x40	; 64
     b04:	1c e9       	ldi	r17, 0x9C	; 156
     b06:	c8 01       	movw	r24, r16
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <VS1053_Initialize+0x10>
  _delay_ms(20);          //Hold for 20ms
  SPI_PORT |= _BV(MP3_RESET);    //Assert RESET line (Chip is powered now)
     b0c:	2c 9a       	sbi	0x05, 4	; 5
  SPI_1X();            //Low speed mode
     b0e:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_1X>
     b12:	c8 01       	movw	r24, r16
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <VS1053_Initialize+0x1c>
     b18:	00 e0       	ldi	r16, 0x00	; 0
     b1a:	0a c0       	rjmp	.+20     	; 0xb30 <VS1053_Initialize+0x38>
  _delay_ms(20);          //Hold for 20ms
  retry=0;

  while(VS1053_ReadCmd(0x03) != 0x9800)  //REDO if not written properly  
  {
    VS1053_WriteCmd(0x03,0x9800);    //set PLL register to 3.5 (preferred for normal operation)
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	78 e9       	ldi	r23, 0x98	; 152
     b22:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
    if(retry++ >10 )return 1;      //try this for 10 times
     b26:	0b 30       	cpi	r16, 0x0B	; 11
     b28:	11 f4       	brne	.+4      	; 0xb2e <VS1053_Initialize+0x36>
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	54 c0       	rjmp	.+168    	; 0xbd6 <VS1053_Initialize+0xde>
     b2e:	0f 5f       	subi	r16, 0xFF	; 255
  SPI_PORT |= _BV(MP3_RESET);    //Assert RESET line (Chip is powered now)
  SPI_1X();            //Low speed mode
  _delay_ms(20);          //Hold for 20ms
  retry=0;

  while(VS1053_ReadCmd(0x03) != 0x9800)  //REDO if not written properly  
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	0e 94 a8 04 	call	0x950	; 0x950 <VS1053_ReadCmd>
     b36:	80 50       	subi	r24, 0x00	; 0
     b38:	98 49       	sbci	r25, 0x98	; 152
     b3a:	81 f7       	brne	.-32     	; 0xb1c <VS1053_Initialize+0x24>
     b3c:	80 e4       	ldi	r24, 0x40	; 64
     b3e:	9c e9       	ldi	r25, 0x9C	; 156
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <VS1053_Initialize+0x48>
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	0a c0       	rjmp	.+20     	; 0xb5c <VS1053_Initialize+0x64>
  //VS1053_WriteCmd(0x05,0x000A);      //Set low sample rate
  
  retry=0;
  while(VS1053_ReadCmd(0x0B) != 0xFEFE)  //REDO if not written properly
  {
    VS1053_WriteCmd(0x0B,0xfefe);    //Total silence
     b48:	8b e0       	ldi	r24, 0x0B	; 11
     b4a:	6e ef       	ldi	r22, 0xFE	; 254
     b4c:	7e ef       	ldi	r23, 0xFE	; 254
     b4e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
    if(retry++ >10 )return 2;
     b52:	0b 30       	cpi	r16, 0x0B	; 11
     b54:	11 f4       	brne	.+4      	; 0xb5a <VS1053_Initialize+0x62>
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	3e c0       	rjmp	.+124    	; 0xbd6 <VS1053_Initialize+0xde>
     b5a:	0f 5f       	subi	r16, 0xFF	; 255
  _delay_ms(20);
  
  //VS1053_WriteCmd(0x05,0x000A);      //Set low sample rate
  
  retry=0;
  while(VS1053_ReadCmd(0x0B) != 0xFEFE)  //REDO if not written properly
     b5c:	8b e0       	ldi	r24, 0x0B	; 11
     b5e:	0e 94 a8 04 	call	0x950	; 0x950 <VS1053_ReadCmd>
     b62:	8e 5f       	subi	r24, 0xFE	; 254
     b64:	9e 4f       	sbci	r25, 0xFE	; 254
     b66:	81 f7       	brne	.-32     	; 0xb48 <VS1053_Initialize+0x50>
  {
    VS1053_WriteCmd(0x0B,0xfefe);    //Total silence
    if(retry++ >10 )return 2;
  }

  VS1053_WriteCmd(0x05,0xac45);      //Activate sample rate as 44.1kHz stereo
     b68:	85 e0       	ldi	r24, 0x05	; 5
     b6a:	65 e4       	ldi	r22, 0x45	; 69
     b6c:	7c ea       	ldi	r23, 0xAC	; 172
     b6e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <VS1053_Initialize+0x92>

  retry=0;
  while(VS1053_ReadCmd(0x0b) != 0x2828)  //REDO if not written properly
  {
    VS1053_WriteCmd(0x0b,0x2828);    //Set volume to a midrange value
     b76:	8b e0       	ldi	r24, 0x0B	; 11
     b78:	68 e2       	ldi	r22, 0x28	; 40
     b7a:	78 e2       	ldi	r23, 0x28	; 40
     b7c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
    if(retry++ >10 )return 3;      //try this for 10 times
     b80:	0b 30       	cpi	r16, 0x0B	; 11
     b82:	11 f4       	brne	.+4      	; 0xb88 <VS1053_Initialize+0x90>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	27 c0       	rjmp	.+78     	; 0xbd6 <VS1053_Initialize+0xde>
     b88:	0f 5f       	subi	r16, 0xFF	; 255
  }

  VS1053_WriteCmd(0x05,0xac45);      //Activate sample rate as 44.1kHz stereo

  retry=0;
  while(VS1053_ReadCmd(0x0b) != 0x2828)  //REDO if not written properly
     b8a:	8b e0       	ldi	r24, 0x0B	; 11
     b8c:	0e 94 a8 04 	call	0x950	; 0x950 <VS1053_ReadCmd>
     b90:	28 e2       	ldi	r18, 0x28	; 40
     b92:	88 32       	cpi	r24, 0x28	; 40
     b94:	92 07       	cpc	r25, r18
     b96:	79 f7       	brne	.-34     	; 0xb76 <VS1053_Initialize+0x7e>
  {
    VS1053_WriteCmd(0x0b,0x2828);    //Set volume to a midrange value
    if(retry++ >10 )return 3;      //try this for 10 times
  }
  VS1053_Vol=0x2828;
     b98:	90 93 05 08 	sts	0x0805, r25
     b9c:	80 93 04 08 	sts	0x0804, r24
     ba0:	00 e0       	ldi	r16, 0x00	; 0
     ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <VS1053_Initialize+0xc0>
  retry=0;
  while(VS1053_ReadCmd(0x00) != 0x0800)      //REDO if not written properly
  {
    VS1053_WriteCmd(0x00,0x0800);        //Set mode register to SDINEW mode and MICIN
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	78 e0       	ldi	r23, 0x08	; 8
     baa:	0e 94 db 04 	call	0x9b6	; 0x9b6 <VS1053_WriteCmd>
    if(retry++ >10 )return 4;          //try this for 10 times
     bae:	0b 30       	cpi	r16, 0x0B	; 11
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <VS1053_Initialize+0xbe>
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	10 c0       	rjmp	.+32     	; 0xbd6 <VS1053_Initialize+0xde>
     bb6:	0f 5f       	subi	r16, 0xFF	; 255
    VS1053_WriteCmd(0x0b,0x2828);    //Set volume to a midrange value
    if(retry++ >10 )return 3;      //try this for 10 times
  }
  VS1053_Vol=0x2828;
  retry=0;
  while(VS1053_ReadCmd(0x00) != 0x0800)      //REDO if not written properly
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 a8 04 	call	0x950	; 0x950 <VS1053_ReadCmd>
     bbe:	80 50       	subi	r24, 0x00	; 0
     bc0:	98 40       	sbci	r25, 0x08	; 8
     bc2:	81 f7       	brne	.-32     	; 0xba4 <VS1053_Initialize+0xac>
     bc4:	80 e4       	ldi	r24, 0x40	; 64
     bc6:	9c e9       	ldi	r25, 0x9C	; 156
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <VS1053_Initialize+0xd0>
  {
    VS1053_WriteCmd(0x00,0x0800);        //Set mode register to SDINEW mode and MICIN
    if(retry++ >10 )return 4;          //try this for 10 times
  }
  _delay_ms(20);
  VS1053_SoftwareReset();
     bcc:	0e 94 67 05 	call	0xace	; 0xace <VS1053_SoftwareReset>
  //_delay_ms(20);
  SPI_2X();
     bd0:	0e 94 01 06 	call	0xc02	; 0xc02 <SPI_2X>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <SPI_DeselectAll>:
  SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
  SPI_2X();
}

void SPI_DeselectAll(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     bdc:	85 b1       	in	r24, 0x05	; 5
     bde:	87 60       	ori	r24, 0x07	; 7
     be0:	85 b9       	out	0x05, r24	; 5
}
     be2:	08 95       	ret

00000be4 <SPI_Select_SD>:

void SPI_Select_SD(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     be4:	85 b1       	in	r24, 0x05	; 5
     be6:	87 60       	ori	r24, 0x07	; 7
     be8:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(SD_SELECT);
     bea:	28 98       	cbi	0x05, 0	; 5
}
     bec:	08 95       	ret

00000bee <SPI_Select_MP3_Data>:

void SPI_Select_MP3_Data(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     bee:	85 b1       	in	r24, 0x05	; 5
     bf0:	87 60       	ori	r24, 0x07	; 7
     bf2:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(MP3_DATA);
     bf4:	2a 98       	cbi	0x05, 2	; 5
}
     bf6:	08 95       	ret

00000bf8 <SPI_Select_MP3_Cmd>:

void SPI_Select_MP3_Cmd(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     bf8:	85 b1       	in	r24, 0x05	; 5
     bfa:	87 60       	ori	r24, 0x07	; 7
     bfc:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(MP3_CMD);
     bfe:	29 98       	cbi	0x05, 1	; 5
}
     c00:	08 95       	ret

00000c02 <SPI_2X>:

void SPI_2X(void){ //4MHz
  SPCR &= ~_BV(SPR1);
     c02:	8c b5       	in	r24, 0x2c	; 44
     c04:	8d 7f       	andi	r24, 0xFD	; 253
     c06:	8c bd       	out	0x2c, r24	; 44
  SPCR &= ~_BV(SPR0);
     c08:	8c b5       	in	r24, 0x2c	; 44
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	8c bd       	out	0x2c, r24	; 44
  SPSR |= _BV(SPI2X);
     c0e:	8d b5       	in	r24, 0x2d	; 45
     c10:	81 60       	ori	r24, 0x01	; 1
     c12:	8d bd       	out	0x2d, r24	; 45
}
     c14:	08 95       	ret

00000c16 <SPI_Initialize>:
/**
 * @brief Initilizes variables for SPI
 * @return Void
 */
void SPI_Initialize(void){
  DDRB |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD)|_BV(MP3_RESET);
     c16:	84 b1       	in	r24, 0x04	; 4
     c18:	87 61       	ori	r24, 0x17	; 23
     c1a:	84 b9       	out	0x04, r24	; 4
  DDRB &= ~_BV(MP3_DREQ);
     c1c:	23 98       	cbi	0x04, 3	; 4
  DDRB=0xB7;
     c1e:	87 eb       	ldi	r24, 0xB7	; 183
     c20:	84 b9       	out	0x04, r24	; 4
  SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
     c22:	80 e5       	ldi	r24, 0x50	; 80
     c24:	8c bd       	out	0x2c, r24	; 44
  SPI_2X();
     c26:	0e 94 01 06 	call	0xc02	; 0xc02 <SPI_2X>
}
     c2a:	08 95       	ret

00000c2c <SPI_1X>:
  SPCR &= ~_BV(SPR0);
  SPSR |= _BV(SPI2X);
}

void SPI_1X(void){  //62.5 kHz
  SPCR |= _BV(SPR1)|_BV(SPR0);
     c2c:	8c b5       	in	r24, 0x2c	; 44
     c2e:	83 60       	ori	r24, 0x03	; 3
     c30:	8c bd       	out	0x2c, r24	; 44
  SPSR &= ~_BV(SPI2X);
     c32:	8d b5       	in	r24, 0x2d	; 45
     c34:	8e 7f       	andi	r24, 0xFE	; 254
     c36:	8d bd       	out	0x2d, r24	; 45
}
     c38:	08 95       	ret

00000c3a <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data){
  // Start transmission
  SPDR = data;
     c3a:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     c3c:	0d b4       	in	r0, 0x2d	; 45
     c3e:	07 fe       	sbrs	r0, 7
     c40:	fd cf       	rjmp	.-6      	; 0xc3c <SPI_transmit+0x2>
  data = SPDR;
     c42:	8e b5       	in	r24, 0x2e	; 46
  return(data);
}
     c44:	08 95       	ret

00000c46 <SPI_receive>:

unsigned char SPI_receive(void){
  unsigned char data;
  // Wait for reception complete

  SPDR = 0xff;
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
     c4a:	0d b4       	in	r0, 0x2d	; 45
     c4c:	07 fe       	sbrs	r0, 7
     c4e:	fd cf       	rjmp	.-6      	; 0xc4a <SPI_receive+0x4>
  data = SPDR;
     c50:	8e b5       	in	r24, 0x2e	; 46

  // Return data register
  return data;
}
     c52:	08 95       	ret

00000c54 <SD_sendCommand>:
//Arguments  : unsigned char (8-bit command value)
//         & unsigned long (32-bit command argument)
//return  : unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	d8 2e       	mov	r13, r24
     c60:	7a 01       	movw	r14, r20
     c62:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)    
     c64:	80 91 da 06 	lds	r24, 0x06DA
     c68:	88 23       	and	r24, r24
     c6a:	b9 f4       	brne	.+46     	; 0xc9a <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
     c6c:	8d 2d       	mov	r24, r13
     c6e:	81 51       	subi	r24, 0x11	; 17
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	60 f0       	brcs	.+24     	; 0xc8c <SD_sendCommand+0x38>
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	d8 16       	cp	r13, r24
     c78:	49 f0       	breq	.+18     	; 0xc8c <SD_sendCommand+0x38>
     c7a:	89 e1       	ldi	r24, 0x19	; 25
     c7c:	d8 16       	cp	r13, r24
     c7e:	31 f0       	breq	.+12     	; 0xc8c <SD_sendCommand+0x38>
     c80:	80 e2       	ldi	r24, 0x20	; 32
     c82:	d8 16       	cp	r13, r24
     c84:	19 f0       	breq	.+6      	; 0xc8c <SD_sendCommand+0x38>
     c86:	81 e2       	ldi	r24, 0x21	; 33
     c88:	d8 16       	cp	r13, r24
     c8a:	39 f4       	brne	.+14     	; 0xc9a <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
     c8c:	39 e0       	ldi	r19, 0x09	; 9
     c8e:	ee 0c       	add	r14, r14
     c90:	ff 1c       	adc	r15, r15
     c92:	00 1f       	adc	r16, r16
     c94:	11 1f       	adc	r17, r17
     c96:	3a 95       	dec	r19
     c98:	d1 f7       	brne	.-12     	; 0xc8e <SD_sendCommand+0x3a>
   }     

SD_CS_ASSERT;
     c9a:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
     c9c:	8d 2d       	mov	r24, r13
     c9e:	80 64       	ori	r24, 0x40	; 64
     ca0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
SPI_transmit(arg>>24);
     ca4:	81 2f       	mov	r24, r17
     ca6:	99 27       	eor	r25, r25
     ca8:	aa 27       	eor	r26, r26
     caa:	bb 27       	eor	r27, r27
     cac:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
SPI_transmit(arg>>16);
     cb0:	c8 01       	movw	r24, r16
     cb2:	aa 27       	eor	r26, r26
     cb4:	bb 27       	eor	r27, r27
     cb6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
SPI_transmit(arg>>8);
     cba:	bb 27       	eor	r27, r27
     cbc:	a1 2f       	mov	r26, r17
     cbe:	90 2f       	mov	r25, r16
     cc0:	8f 2d       	mov	r24, r15
     cc2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
SPI_transmit(arg);
     cc6:	8e 2d       	mov	r24, r14
     cc8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>

if(cmd == SEND_IF_COND)   //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	d8 16       	cp	r13, r24
     cd0:	11 f4       	brne	.+4      	; 0xcd6 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
     cd2:	87 e8       	ldi	r24, 0x87	; 135
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
     cd6:	85 e9       	ldi	r24, 0x95	; 149
     cd8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)   //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
     ce0:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     ce2:	d1 f0       	breq	.+52     	; 0xd18 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)   //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
     ce4:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     ce8:	08 2f       	mov	r16, r24
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	c9 f3       	breq	.-14     	; 0xce0 <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
     cee:	88 23       	and	r24, r24
     cf0:	99 f4       	brne	.+38     	; 0xd18 <SD_sendCommand+0xc4>
     cf2:	8a e3       	ldi	r24, 0x3A	; 58
     cf4:	d8 16       	cp	r13, r24
     cf6:	81 f4       	brne	.+32     	; 0xd18 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
     cf8:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
     cfc:	86 ff       	sbrs	r24, 6
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <SD_sendCommand+0xb4>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 da 06 	sts	0x06DA, r24
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
     d08:	10 92 da 06 	sts	0x06DA, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
     d0c:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
     d10:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
  SPI_receive(); 
     d14:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
     d18:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
SD_CS_DEASSERT;
     d1c:	28 9a       	sbi	0x05, 0	; 5

return response; //return state
}
     d1e:	80 2f       	mov	r24, r16
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	08 95       	ret

00000d2c <SD_erase>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	7b 01       	movw	r14, r22
     d3e:	8c 01       	movw	r16, r24
     d40:	59 01       	movw	r10, r18
     d42:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
     d44:	80 e2       	ldi	r24, 0x20	; 32
     d46:	b8 01       	movw	r22, r16
     d48:	a7 01       	movw	r20, r14
     d4a:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     d4e:	88 23       	and	r24, r24
     d50:	b9 f4       	brne	.+46     	; 0xd80 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
     d52:	08 94       	sec
     d54:	e1 08       	sbc	r14, r1
     d56:	f1 08       	sbc	r15, r1
     d58:	01 09       	sbc	r16, r1
     d5a:	11 09       	sbc	r17, r1
     d5c:	ea 0c       	add	r14, r10
     d5e:	fb 1c       	adc	r15, r11
     d60:	0c 1d       	adc	r16, r12
     d62:	1d 1d       	adc	r17, r13
     d64:	81 e2       	ldi	r24, 0x21	; 33
     d66:	b8 01       	movw	r22, r16
     d68:	a7 01       	movw	r20, r14
     d6a:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
if(response != 0x00)
     d6e:	88 23       	and	r24, r24
     d70:	39 f4       	brne	.+14     	; 0xd80 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
     d72:	86 e2       	ldi	r24, 0x26	; 38
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	08 95       	ret

00000d92 <SD_init>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	10 e0       	ldi	r17, 0x00	; 0
  unsigned char i, response, SD_version;
  unsigned int retry=0 ;

  for(i=0;i<10;i++)
    SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
unsigned char SD_init(void)
{
  unsigned char i, response, SD_version;
  unsigned int retry=0 ;

  for(i=0;i<10;i++)
     da0:	1f 5f       	subi	r17, 0xFF	; 255
     da2:	1a 30       	cpi	r17, 0x0A	; 10
     da4:	d1 f7       	brne	.-12     	; 0xd9a <SD_init+0x8>
    SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    SD_CS_ASSERT;
     da6:	28 98       	cbi	0x05, 0	; 5
     da8:	c0 e0       	ldi	r28, 0x00	; 0
     daa:	d0 e0       	ldi	r29, 0x00	; 0
    do
    {
       response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
       retry++;
     dba:	21 96       	adiw	r28, 0x01	; 1
       if(retry>0x20) 
     dbc:	c1 32       	cpi	r28, 0x21	; 33
     dbe:	d1 05       	cpc	r29, r1
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <SD_init+0x34>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	56 c0       	rjmp	.+172    	; 0xe72 <SD_init+0xe0>
         return 1;   //time out, card not detected
    } while(response != 0x01);
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	89 f7       	brne	.-30     	; 0xdac <SD_init+0x1a>

    SD_CS_DEASSERT;
     dca:	28 9a       	sbi	0x05, 0	; 5
    SPI_transmit (0xff);
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
    SPI_transmit (0xff);
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0

    SD_version = 2; //default set to SD compliance with ver2.x; 
        //this may change after checking the next command
    do
    {
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
     ddc:	88 e0       	ldi	r24, 0x08	; 8
     dde:	4a ea       	ldi	r20, 0xAA	; 170
     de0:	51 e0       	ldi	r21, 0x01	; 1
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
retry++;
     dea:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     dec:	cf 3f       	cpi	r28, 0xFF	; 255
     dee:	d1 05       	cpc	r29, r1
     df0:	29 f4       	brne	.+10     	; 0xdfc <SD_init+0x6a>
   {
    //TX_NEWLINE;
    SD_version = 1;
    cardType = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 e8 06 	sts	0x06E8, r24
     df8:	11 e0       	ldi	r17, 0x01	; 1
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <SD_init+0x70>
    break;
   } //time out

}while(response != 0x01);
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	71 f7       	brne	.-36     	; 0xddc <SD_init+0x4a>
     e00:	12 e0       	ldi	r17, 0x02	; 2
     e02:	c0 e0       	ldi	r28, 0x00	; 0
     e04:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
     e06:	87 e3       	ldi	r24, 0x37	; 55
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
     e14:	89 e2       	ldi	r24, 0x29	; 41
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e4       	ldi	r23, 0x40	; 64
     e1e:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>

retry++;
     e22:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     e24:	cf 3f       	cpi	r28, 0xFF	; 255
     e26:	d1 05       	cpc	r29, r1
     e28:	11 f4       	brne	.+4      	; 0xe2e <SD_init+0x9c>
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	22 c0       	rjmp	.+68     	; 0xe72 <SD_init+0xe0>
   {
      //TX_NEWLINE;
    return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
     e2e:	88 23       	and	r24, r24
     e30:	51 f7       	brne	.-44     	; 0xe06 <SD_init+0x74>


retry = 0;
SDHC_flag = 0;
     e32:	10 92 da 06 	sts	0x06DA, r1

if (SD_version == 2)
     e36:	12 30       	cpi	r17, 0x02	; 2
     e38:	e1 f4       	brne	.+56     	; 0xe72 <SD_init+0xe0>
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
   response = SD_sendCommand(READ_OCR,0);
     e3e:	8a e3       	ldi	r24, 0x3A	; 58
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
   retry++;
     e4c:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0xfe) 
     e4e:	cf 3f       	cpi	r28, 0xFF	; 255
     e50:	d1 05       	cpc	r29, r1
     e52:	19 f4       	brne	.+6      	; 0xe5a <SD_init+0xc8>
     {
       //TX_NEWLINE;
     cardType = 0;
     e54:	10 92 e8 06 	sts	0x06E8, r1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <SD_init+0xcc>
     break;
     } //time out

   }while(response != 0x00);
     e5a:	88 23       	and	r24, r24
     e5c:	81 f7       	brne	.-32     	; 0xe3e <SD_init+0xac>

   if(SDHC_flag == 1) cardType = 2;
     e5e:	80 91 da 06 	lds	r24, 0x06DA
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	11 f4       	brne	.+4      	; 0xe6a <SD_init+0xd8>
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <SD_init+0xda>
   else cardType = 3;
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	80 93 e8 06 	sts	0x06E8, r24
     e70:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	08 95       	ret

00000e7a <SD_writeSingleBlock>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ab 01       	movw	r20, r22
     e80:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
     e82:	88 e1       	ldi	r24, 0x18	; 24
     e84:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     e88:	88 23       	and	r24, r24
     e8a:	11 f0       	breq	.+4      	; 0xe90 <SD_writeSingleBlock+0x16>
     e8c:	98 2f       	mov	r25, r24
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
     e90:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     e92:	8e ef       	ldi	r24, 0xFE	; 254
     e94:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
     e98:	c0 e0       	ldi	r28, 0x00	; 0
     e9a:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
     e9c:	fe 01       	movw	r30, r28
     e9e:	e1 54       	subi	r30, 0x41	; 65
     ea0:	fb 4f       	sbci	r31, 0xFB	; 251
     ea2:	80 81       	ld	r24, Z
     ea4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
     ea8:	21 96       	adiw	r28, 0x01	; 1
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	c0 30       	cpi	r28, 0x00	; 0
     eae:	d8 07       	cpc	r29, r24
     eb0:	a9 f7       	brne	.-22     	; 0xe9c <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
SPI_transmit(0xff);
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>

response = SPI_receive();
     ebe:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     ec2:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     ec4:	8f 71       	andi	r24, 0x1F	; 31
     ec6:	85 30       	cpi	r24, 0x05	; 5
     ec8:	41 f0       	breq	.+16     	; 0xeda <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     eca:	28 9a       	sbi	0x05, 0	; 5
     ecc:	20 c0       	rjmp	.+64     	; 0xf0e <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	cf 3f       	cpi	r28, 0xFF	; 255
     ed2:	d8 07       	cpc	r29, r24
     ed4:	91 f0       	breq	.+36     	; 0xefa <SD_writeSingleBlock+0x80>
     ed6:	21 96       	adiw	r28, 0x01	; 1
     ed8:	02 c0       	rjmp	.+4      	; 0xede <SD_writeSingleBlock+0x64>
     eda:	c0 e0       	ldi	r28, 0x00	; 0
     edc:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     ede:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     ee2:	88 23       	and	r24, r24
     ee4:	a1 f3       	breq	.-24     	; 0xece <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
     ee6:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     eee:	28 98       	cbi	0x05, 0	; 5
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	cf 3f       	cpi	r28, 0xFF	; 255
     ef6:	d8 07       	cpc	r29, r24
     ef8:	19 f4       	brne	.+6      	; 0xf00 <SD_writeSingleBlock+0x86>
     efa:	28 9a       	sbi	0x05, 0	; 5
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <SD_writeSingleBlock+0x94>
     f00:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     f02:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     f06:	88 23       	and	r24, r24
     f08:	a1 f3       	breq	.-24     	; 0xef2 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
     f0a:	28 9a       	sbi	0x05, 0	; 5
     f0c:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
     f0e:	89 2f       	mov	r24, r25
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <SD_readSingleBlock>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	ab 01       	movw	r20, r22
     f1e:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
     f20:	81 e1       	ldi	r24, 0x11	; 17
     f22:	0e 94 2a 06 	call	0xc54	; 0xc54 <SD_sendCommand>
     f26:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     f28:	88 23       	and	r24, r24
     f2a:	09 f5       	brne	.+66     	; 0xf6e <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
     f2c:	28 98       	cbi	0x05, 0	; 5
     f2e:	c0 e0       	ldi	r28, 0x00	; 0
     f30:	d0 e0       	ldi	r29, 0x00	; 0
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     f34:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
     f36:	19 f4       	brne	.+6      	; 0xf3e <SD_readSingleBlock+0x28>
     f38:	28 9a       	sbi	0x05, 0	; 5
     f3a:	11 e0       	ldi	r17, 0x01	; 1
     f3c:	18 c0       	rjmp	.+48     	; 0xf6e <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     f3e:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     f42:	8e 3f       	cpi	r24, 0xFE	; 254
     f44:	b9 f7       	brne	.-18     	; 0xf34 <SD_readSingleBlock+0x1e>
     f46:	c0 e0       	ldi	r28, 0x00	; 0
     f48:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
     f4a:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
     f4e:	fe 01       	movw	r30, r28
     f50:	e1 54       	subi	r30, 0x41	; 65
     f52:	fb 4f       	sbci	r31, 0xFB	; 251
     f54:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
     f56:	21 96       	adiw	r28, 0x01	; 1
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	c0 30       	cpi	r28, 0x00	; 0
     f5c:	d8 07       	cpc	r29, r24
     f5e:	a9 f7       	brne	.-22     	; 0xf4a <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     f60:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
SPI_receive();
     f64:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
     f68:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_receive>
SD_CS_DEASSERT;
     f6c:	28 9a       	sbi	0x05, 0	; 5

return 0;
}
     f6e:	81 2f       	mov	r24, r17
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	08 95       	ret

00000f78 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     f80:	20 91 c0 06 	lds	r18, 0x06C0
     f84:	30 91 c1 06 	lds	r19, 0x06C1
     f88:	e0 90 86 04 	lds	r14, 0x0486
     f8c:	f0 90 87 04 	lds	r15, 0x0487
     f90:	00 91 88 04 	lds	r16, 0x0488
     f94:	10 91 89 04 	lds	r17, 0x0489
     f98:	62 50       	subi	r22, 0x02	; 2
     f9a:	70 40       	sbci	r23, 0x00	; 0
     f9c:	80 40       	sbci	r24, 0x00	; 0
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	2e 0d       	add	r18, r14
     fae:	3f 1d       	adc	r19, r15
     fb0:	40 1f       	adc	r20, r16
     fb2:	51 1f       	adc	r21, r17
}
     fb4:	b9 01       	movw	r22, r18
     fb6:	ca 01       	movw	r24, r20
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	08 95       	ret

00000fc2 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//       2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     fc2:	8f 92       	push	r8
     fc4:	9f 92       	push	r9
     fc6:	af 92       	push	r10
     fc8:	bf 92       	push	r11
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	64 97       	sbiw	r28, 0x14	; 20
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	98 2e       	mov	r9, r24
     fea:	6a 01       	movw	r12, r20
     fec:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     fee:	de 01       	movw	r26, r28
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	84 e1       	ldi	r24, 0x14	; 20
     ff8:	01 90       	ld	r0, Z+
     ffa:	0d 92       	st	X+, r0
     ffc:	81 50       	subi	r24, 0x01	; 1
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <displayMemory+0x36>
    1000:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
  {
     memoryString[i-1] = ',';  
    1002:	8c e2       	ldi	r24, 0x2C	; 44
    1004:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
    1006:	05 30       	cpi	r16, 0x05	; 5
    1008:	11 f0       	breq	.+4      	; 0x100e <displayMemory+0x4c>
    100a:	09 30       	cpi	r16, 0x09	; 9
    100c:	29 f4       	brne	.+10     	; 0x1018 <displayMemory+0x56>
  {
     memoryString[i-1] = ',';  
    100e:	fe 01       	movw	r30, r28
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1d       	adc	r31, r1
    1014:	80 82       	st	Z, r8
     i--;
    1016:	01 50       	subi	r16, 0x01	; 1
  }
    memoryString[i-1] = (memory % 10) | 0x30;
    1018:	5e 01       	movw	r10, r28
    101a:	a0 0e       	add	r10, r16
    101c:	b1 1c       	adc	r11, r1
    101e:	c7 01       	movw	r24, r14
    1020:	b6 01       	movw	r22, r12
    1022:	2a e0       	ldi	r18, 0x0A	; 10
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    102e:	60 63       	ori	r22, 0x30	; 48
    1030:	f5 01       	movw	r30, r10
    1032:	60 83       	st	Z, r22
    memory /= 10;
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    1044:	c9 01       	movw	r24, r18
    1046:	da 01       	movw	r26, r20
    1048:	6c 01       	movw	r12, r24
    104a:	7d 01       	movw	r14, r26
  if(memory == 0) break;
    104c:	c1 14       	cp	r12, r1
    104e:	d1 04       	cpc	r13, r1
    1050:	e1 04       	cpc	r14, r1
    1052:	f1 04       	cpc	r15, r1
    1054:	11 f0       	breq	.+4      	; 0x105a <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1056:	01 50       	subi	r16, 0x01	; 1
    1058:	b1 f6       	brne	.-84     	; 0x1006 <displayMemory+0x44>
  }
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
  if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    105a:	f1 e0       	ldi	r31, 0x01	; 1
    105c:	9f 16       	cp	r9, r31
    105e:	11 f4       	brne	.+4      	; 0x1064 <displayMemory+0xa2>
    1060:	8b e4       	ldi	r24, 0x4B	; 75
    1062:	8e 87       	std	Y+14, r24	; 0x0e
  USART_transmitStringToPC(memoryString);
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
}
    106c:	64 96       	adiw	r28, 0x14	; 20
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	08 95       	ret

00001090 <convertFileName>:
 * @TODO Currently overwrites the passed in buffer so if you pass in the same buffer twice, it 
 * will have already converted the fileName (specifically removed the '.' which is what the invalid
 * file check is done off of)
*/ 
unsigned char convertFileName (unsigned char *fileName)
{
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	2b 97       	sbiw	r28, 0x0b	; 11
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	8c 01       	movw	r16, r24
  unsigned char fileNameFAT[11];
  unsigned char j, k;

  PRINTF("[convertFileName]Filename:");
    10ae:	86 e4       	ldi	r24, 0x46	; 70
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  PRINTF(fileName);
    10b6:	c8 01       	movw	r24, r16
    10b8:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    10bc:	8d e0       	ldi	r24, 0x0D	; 13
    10be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    10c2:	8a e0       	ldi	r24, 0x0A	; 10
    10c4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    10c8:	50 2f       	mov	r21, r16
    10ca:	a1 2f       	mov	r26, r17
    10cc:	f8 01       	movw	r30, r16
    10ce:	40 e0       	ldi	r20, 0x00	; 0

  for(j=0; j<12; j++) {
    if(fileName[j] == '.') 
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 32       	cpi	r24, 0x2E	; 46
    10d4:	19 f4       	brne	.+6      	; 0x10dc <convertFileName+0x4c>
  if (j == 12)
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    10d6:	49 30       	cpi	r20, 0x09	; 9
    10d8:	30 f0       	brcs	.+12     	; 0x10e6 <convertFileName+0x56>
    10da:	0e c0       	rjmp	.+28     	; 0x10f8 <convertFileName+0x68>

  PRINTF("[convertFileName]Filename:");
  PRINTF(fileName);
  TX_NEWLINE_PC;

  for(j=0; j<12; j++) {
    10dc:	4f 5f       	subi	r20, 0xFF	; 255
    10de:	31 96       	adiw	r30, 0x01	; 1
    10e0:	4c 30       	cpi	r20, 0x0C	; 12
    10e2:	b1 f7       	brne	.-20     	; 0x10d0 <convertFileName+0x40>
    10e4:	7b c0       	rjmp	.+246    	; 0x11dc <convertFileName+0x14c>
    10e6:	be 01       	movw	r22, r28
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	85 2f       	mov	r24, r21
    10ee:	9a 2f       	mov	r25, r26
    10f0:	9c 01       	movw	r18, r24
    10f2:	f9 01       	movw	r30, r18
    10f4:	db 01       	movw	r26, r22
    10f6:	08 c0       	rjmp	.+16     	; 0x1108 <convertFileName+0x78>
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    USART_transmitStringToPCFromFlash(PSTR("Invalid fileName.")); 
    10f8:	84 e5       	ldi	r24, 0x54	; 84
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	6d c0       	rjmp	.+218    	; 0x11de <convertFileName+0x14e>
    return 1;
  }

  for(k=0; k<j; k++) //setting file name
    fileNameFAT[k] = fileName[k];
    1104:	81 91       	ld	r24, Z+
    1106:	8d 93       	st	X+, r24
  if(j>8) {
    USART_transmitStringToPCFromFlash(PSTR("Invalid fileName.")); 
    return 1;
  }

  for(k=0; k<j; k++) //setting file name
    1108:	8e 2f       	mov	r24, r30
    110a:	85 1b       	sub	r24, r21
    110c:	84 17       	cp	r24, r20
    110e:	d0 f3       	brcs	.-12     	; 0x1104 <convertFileName+0x74>
    1110:	84 2f       	mov	r24, r20
    fileNameFAT[k] = fileName[k];

  for(k=j; k<=7; k++) //filling file name trail with blanks
    fileNameFAT[k] = ' ';
    1112:	9e 01       	movw	r18, r28
    1114:	2f 5f       	subi	r18, 0xFF	; 255
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	90 e2       	ldi	r25, 0x20	; 32
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <convertFileName+0x96>
    111c:	f9 01       	movw	r30, r18
    111e:	e8 0f       	add	r30, r24
    1120:	f1 1d       	adc	r31, r1
    1122:	90 83       	st	Z, r25
  }

  for(k=0; k<j; k++) //setting file name
    fileNameFAT[k] = fileName[k];

  for(k=j; k<=7; k++) //filling file name trail with blanks
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	88 30       	cpi	r24, 0x08	; 8
    1128:	c9 f7       	brne	.-14     	; 0x111c <convertFileName+0x8c>
    fileNameFAT[k] = ' ';

  j++;
    112a:	24 2f       	mov	r18, r20
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    }
    else //filling extension trail with blanks
    {
      while(k<11)
      {
        fileNameFAT[k++] = ' ';
    112e:	ae 01       	movw	r20, r28
    1130:	4f 5f       	subi	r20, 0xFF	; 255
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	30 e2       	ldi	r19, 0x20	; 32

  j++;

  for(k=8; k<11; k++) //setting file extention
  {
    if(fileName[j] != 0)
    1136:	f8 01       	movw	r30, r16
    1138:	e2 0f       	add	r30, r18
    113a:	f1 1d       	adc	r31, r1
    113c:	90 81       	ld	r25, Z
    113e:	99 23       	and	r25, r25
    1140:	59 f0       	breq	.+22     	; 0x1158 <convertFileName+0xc8>
    {
      fileNameFAT[k] = fileName[j++];
    1142:	fa 01       	movw	r30, r20
    1144:	e8 0f       	add	r30, r24
    1146:	f1 1d       	adc	r31, r1
    1148:	90 83       	st	Z, r25
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	07 c0       	rjmp	.+14     	; 0x115c <convertFileName+0xcc>
    }
    else //filling extension trail with blanks
    {
      while(k<11)
      {
        fileNameFAT[k++] = ' ';
    114e:	fa 01       	movw	r30, r20
    1150:	e8 0f       	add	r30, r24
    1152:	f1 1d       	adc	r31, r1
    1154:	30 83       	st	Z, r19
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    {
      fileNameFAT[k] = fileName[j++];
    }
    else //filling extension trail with blanks
    {
      while(k<11)
    1158:	8b 30       	cpi	r24, 0x0B	; 11
    115a:	c8 f3       	brcs	.-14     	; 0x114e <convertFileName+0xbe>
  for(k=j; k<=7; k++) //filling file name trail with blanks
    fileNameFAT[k] = ' ';

  j++;

  for(k=8; k<11; k++) //setting file extention
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	8b 30       	cpi	r24, 0x0B	; 11
    1160:	50 f3       	brcs	.-44     	; 0x1136 <convertFileName+0xa6>
        fileNameFAT[k++] = ' ';
      }
    }
  }

  for(j=0; j<11; j++) //converting small letters to caps
    1162:	9e 01       	movw	r18, r28
    1164:	24 5f       	subi	r18, 0xF4	; 244
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
  {
    if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    1168:	fb 01       	movw	r30, r22
    116a:	90 81       	ld	r25, Z
    116c:	89 2f       	mov	r24, r25
    116e:	81 56       	subi	r24, 0x61	; 97
    1170:	8a 31       	cpi	r24, 0x1A	; 26
    1172:	10 f4       	brcc	.+4      	; 0x1178 <convertFileName+0xe8>
    {
        fileNameFAT[j] -= 0x20;
    1174:	90 52       	subi	r25, 0x20	; 32
    1176:	90 83       	st	Z, r25
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
        fileNameFAT[k++] = ' ';
      }
    }
  }

  for(j=0; j<11; j++) //converting small letters to caps
    117c:	62 17       	cp	r22, r18
    117e:	73 07       	cpc	r23, r19
    1180:	99 f7       	brne	.-26     	; 0x1168 <convertFileName+0xd8>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    }
  }


  for(j=0; j<11; j++)
    fileName[j] = fileNameFAT[j];
    1186:	7e 01       	movw	r14, r28
    1188:	08 94       	sec
    118a:	e1 1c       	adc	r14, r1
    118c:	f1 1c       	adc	r15, r1
    118e:	f8 01       	movw	r30, r16
    1190:	e2 0f       	add	r30, r18
    1192:	f3 1f       	adc	r31, r19
    1194:	d7 01       	movw	r26, r14
    1196:	a2 0f       	add	r26, r18
    1198:	b3 1f       	adc	r27, r19
    119a:	8c 91       	ld	r24, X
    119c:	80 83       	st	Z, r24
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
        fileNameFAT[j] -= 0x20;
    }
  }


  for(j=0; j<11; j++)
    11a2:	2b 30       	cpi	r18, 0x0B	; 11
    11a4:	31 05       	cpc	r19, r1
    11a6:	99 f7       	brne	.-26     	; 0x118e <convertFileName+0xfe>
    fileName[j] = fileNameFAT[j];

  // Add null terminator to filename
  //fileName[11] = '\0';

  PRINTF("[convertFileName]File name FAT:");
    11a8:	81 e6       	ldi	r24, 0x61	; 97
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  PRINTF(fileNameFAT);
    11b0:	c7 01       	movw	r24, r14
    11b2:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    11b6:	8d e0       	ldi	r24, 0x0D	; 13
    11b8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    11bc:	8a e0       	ldi	r24, 0x0A	; 10
    11be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>


  PRINTF("[convertFileName]File name after:");
    11c2:	81 e8       	ldi	r24, 0x81	; 129
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  PRINTF(fileName);
    11ca:	c8 01       	movw	r24, r16
    11cc:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    11d0:	8d e0       	ldi	r24, 0x0D	; 13
    11d2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    11dc:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
    11de:	2b 96       	adiw	r28, 0x0b	; 11
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
  startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    1210:	60 78       	andi	r22, 0x80	; 128
    1212:	3b 01       	movw	r6, r22
    1214:	4c 01       	movw	r8, r24
    1216:	22 e0       	ldi	r18, 0x02	; 2
    1218:	66 0c       	add	r6, r6
    121a:	77 1c       	adc	r7, r7
    121c:	88 1c       	adc	r8, r8
    121e:	99 1c       	adc	r9, r9
    1220:	2a 95       	dec	r18
    1222:	d1 f7       	brne	.-12     	; 0x1218 <searchNextFreeCluster+0x20>
    1224:	5b 01       	movw	r10, r22
    1226:	6c 01       	movw	r12, r24
    1228:	50 c0       	rjmp	.+160    	; 0x12ca <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    122a:	e0 90 e1 06 	lds	r14, 0x06E1
    122e:	f0 90 e2 06 	lds	r15, 0x06E2
    1232:	20 91 8e 04 	lds	r18, 0x048E
    1236:	30 91 8f 04 	lds	r19, 0x048F
      SD_readSingleBlock(sector);
    123a:	00 e0       	ldi	r16, 0x00	; 0
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	80 91 d6 06 	lds	r24, 0x06D6
    1242:	90 91 d7 06 	lds	r25, 0x06D7
    1246:	a0 91 d8 06 	lds	r26, 0x06D8
    124a:	b0 91 d9 06 	lds	r27, 0x06D9
    124e:	e8 0e       	add	r14, r24
    1250:	f9 1e       	adc	r15, r25
    1252:	0a 1f       	adc	r16, r26
    1254:	1b 1f       	adc	r17, r27
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	c4 01       	movw	r24, r8
    125c:	b3 01       	movw	r22, r6
    125e:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    1262:	e2 0e       	add	r14, r18
    1264:	f3 1e       	adc	r15, r19
    1266:	04 1f       	adc	r16, r20
    1268:	15 1f       	adc	r17, r21
    126a:	c8 01       	movw	r24, r16
    126c:	b7 01       	movw	r22, r14
    126e:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    1272:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
          value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    1274:	e6 2f       	mov	r30, r22
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	e1 54       	subi	r30, 0x41	; 65
    1282:	fb 4f       	sbci	r31, 0xFB	; 251
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	a2 81       	ldd	r26, Z+2	; 0x02
    128a:	b3 81       	ldd	r27, Z+3	; 0x03
    128c:	bf 70       	andi	r27, 0x0F	; 15
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	a1 05       	cpc	r26, r1
    1292:	b1 05       	cpc	r27, r1
    1294:	39 f4       	brne	.+14     	; 0x12a4 <searchNextFreeCluster+0xac>
            return(cluster+i);
    1296:	a6 01       	movw	r20, r12
    1298:	95 01       	movw	r18, r10
    129a:	26 0f       	add	r18, r22
    129c:	31 1d       	adc	r19, r1
    129e:	41 1d       	adc	r20, r1
    12a0:	51 1d       	adc	r21, r1
    12a2:	25 c0       	rjmp	.+74     	; 0x12ee <searchNextFreeCluster+0xf6>
  startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    12a4:	6f 5f       	subi	r22, 0xFF	; 255
    12a6:	60 38       	cpi	r22, 0x80	; 128
    12a8:	29 f7       	brne	.-54     	; 0x1274 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
  startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    12aa:	80 e8       	ldi	r24, 0x80	; 128
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	a8 0e       	add	r10, r24
    12b4:	b9 1e       	adc	r11, r25
    12b6:	ca 1e       	adc	r12, r26
    12b8:	db 1e       	adc	r13, r27
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	68 0e       	add	r6, r24
    12c4:	79 1e       	adc	r7, r25
    12c6:	8a 1e       	adc	r8, r26
    12c8:	9b 1e       	adc	r9, r27
    12ca:	80 91 90 04 	lds	r24, 0x0490
    12ce:	90 91 91 04 	lds	r25, 0x0491
    12d2:	a0 91 92 04 	lds	r26, 0x0492
    12d6:	b0 91 93 04 	lds	r27, 0x0493
    12da:	a8 16       	cp	r10, r24
    12dc:	b9 06       	cpc	r11, r25
    12de:	ca 06       	cpc	r12, r26
    12e0:	db 06       	cpc	r13, r27
    12e2:	08 f4       	brcc	.+2      	; 0x12e6 <searchNextFreeCluster+0xee>
    12e4:	a2 cf       	rjmp	.-188    	; 0x122a <searchNextFreeCluster+0x32>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    12ee:	b9 01       	movw	r22, r18
    12f0:	ca 01       	movw	r24, r20
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	7f 90       	pop	r7
    1308:	6f 90       	pop	r6
    130a:	08 95       	ret

0000130c <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//      0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	d8 2e       	mov	r13, r24
    131a:	c6 2e       	mov	r12, r22
    131c:	79 01       	movw	r14, r18
    131e:	8a 01       	movw	r16, r20
  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
  unsigned char error;

  SD_readSingleBlock(unusedSectors + 1);
    1320:	60 91 d6 06 	lds	r22, 0x06D6
    1324:	70 91 d7 06 	lds	r23, 0x06D7
    1328:	80 91 d8 06 	lds	r24, 0x06D8
    132c:	90 91 d9 06 	lds	r25, 0x06D9
    1330:	6f 5f       	subi	r22, 0xFF	; 255
    1332:	7f 4f       	sbci	r23, 0xFF	; 255
    1334:	8f 4f       	sbci	r24, 0xFF	; 255
    1336:	9f 4f       	sbci	r25, 0xFF	; 255
    1338:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>

  if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    133c:	80 91 bf 04 	lds	r24, 0x04BF
    1340:	90 91 c0 04 	lds	r25, 0x04C0
    1344:	a0 91 c1 04 	lds	r26, 0x04C1
    1348:	b0 91 c2 04 	lds	r27, 0x04C2
    134c:	82 55       	subi	r24, 0x52	; 82
    134e:	92 45       	sbci	r25, 0x52	; 82
    1350:	a1 46       	sbci	r26, 0x61	; 97
    1352:	b1 44       	sbci	r27, 0x41	; 65
    1354:	09 f0       	breq	.+2      	; 0x1358 <getSetFreeCluster+0x4c>
    1356:	54 c0       	rjmp	.+168    	; 0x1400 <getSetFreeCluster+0xf4>
    1358:	80 91 a3 06 	lds	r24, 0x06A3
    135c:	90 91 a4 06 	lds	r25, 0x06A4
    1360:	a0 91 a5 06 	lds	r26, 0x06A5
    1364:	b0 91 a6 06 	lds	r27, 0x06A6
    1368:	82 57       	subi	r24, 0x72	; 114
    136a:	92 47       	sbci	r25, 0x72	; 114
    136c:	a1 44       	sbci	r26, 0x41	; 65
    136e:	b1 46       	sbci	r27, 0x61	; 97
    1370:	09 f0       	breq	.+2      	; 0x1374 <getSetFreeCluster+0x68>
    1372:	46 c0       	rjmp	.+140    	; 0x1400 <getSetFreeCluster+0xf4>
    1374:	80 91 bb 06 	lds	r24, 0x06BB
    1378:	90 91 bc 06 	lds	r25, 0x06BC
    137c:	a0 91 bd 06 	lds	r26, 0x06BD
    1380:	b0 91 be 06 	lds	r27, 0x06BE
    1384:	80 50       	subi	r24, 0x00	; 0
    1386:	90 40       	sbci	r25, 0x00	; 0
    1388:	a5 45       	sbci	r26, 0x55	; 85
    138a:	ba 4a       	sbci	r27, 0xAA	; 170
    138c:	c9 f5       	brne	.+114    	; 0x1400 <getSetFreeCluster+0xf4>
  return 0xffffffff;

  if(get_set == GET)
    138e:	cc 20       	and	r12, r12
    1390:	a9 f4       	brne	.+42     	; 0x13bc <getSetFreeCluster+0xb0>
  {
  if(totOrNext == TOTAL_FREE)
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	d8 16       	cp	r13, r24
    1396:	49 f4       	brne	.+18     	; 0x13aa <getSetFreeCluster+0x9e>
    return(FS->freeClusterCount);
    1398:	20 91 a7 06 	lds	r18, 0x06A7
    139c:	30 91 a8 06 	lds	r19, 0x06A8
    13a0:	40 91 a9 06 	lds	r20, 0x06A9
    13a4:	50 91 aa 06 	lds	r21, 0x06AA
    13a8:	2f c0       	rjmp	.+94     	; 0x1408 <getSetFreeCluster+0xfc>
  else // when totOrNext = NEXT_FREE
    return(FS->nextFreeCluster);
    13aa:	20 91 ab 06 	lds	r18, 0x06AB
    13ae:	30 91 ac 06 	lds	r19, 0x06AC
    13b2:	40 91 ad 06 	lds	r20, 0x06AD
    13b6:	50 91 ae 06 	lds	r21, 0x06AE
    13ba:	26 c0       	rjmp	.+76     	; 0x1408 <getSetFreeCluster+0xfc>
  }
  else
  {
  if(totOrNext == TOTAL_FREE)
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	d2 16       	cp	r13, r18
    13c0:	49 f4       	brne	.+18     	; 0x13d4 <getSetFreeCluster+0xc8>
    FS->freeClusterCount = FSEntry;
    13c2:	e0 92 a7 06 	sts	0x06A7, r14
    13c6:	f0 92 a8 06 	sts	0x06A8, r15
    13ca:	00 93 a9 06 	sts	0x06A9, r16
    13ce:	10 93 aa 06 	sts	0x06AA, r17
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <getSetFreeCluster+0xd8>
  else // when totOrNext = NEXT_FREE
    FS->nextFreeCluster = FSEntry;
    13d4:	e0 92 ab 06 	sts	0x06AB, r14
    13d8:	f0 92 ac 06 	sts	0x06AC, r15
    13dc:	00 93 ad 06 	sts	0x06AD, r16
    13e0:	10 93 ae 06 	sts	0x06AE, r17

  error = SD_writeSingleBlock(unusedSectors + 1);  //update FSinfo
    13e4:	60 91 d6 06 	lds	r22, 0x06D6
    13e8:	70 91 d7 06 	lds	r23, 0x06D7
    13ec:	80 91 d8 06 	lds	r24, 0x06D8
    13f0:	90 91 d9 06 	lds	r25, 0x06D9
    13f4:	6f 5f       	subi	r22, 0xFF	; 255
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	8f 4f       	sbci	r24, 0xFF	; 255
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
  }
  return 0xffffffff;
    1400:	2f ef       	ldi	r18, 0xFF	; 255
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f ef       	ldi	r20, 0xFF	; 255
    1406:	5f ef       	ldi	r21, 0xFF	; 255
}
    1408:	b9 01       	movw	r22, r18
    140a:	ca 01       	movw	r24, r20
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	08 95       	ret

0000141a <freeMemoryUpdate>:
//      to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	d8 2e       	mov	r13, r24
    1426:	db 01       	movw	r26, r22
    1428:	ca 01       	movw	r24, r20
    142a:	e9 e0       	ldi	r30, 0x09	; 9
    142c:	b6 95       	lsr	r27
    142e:	a7 95       	ror	r26
    1430:	97 95       	ror	r25
    1432:	87 95       	ror	r24
    1434:	ea 95       	dec	r30
    1436:	d1 f7       	brne	.-12     	; 0x142c <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    1438:	51 70       	andi	r21, 0x01	; 1
    143a:	60 70       	andi	r22, 0x00	; 0
    143c:	70 70       	andi	r23, 0x00	; 0
    143e:	41 15       	cp	r20, r1
    1440:	51 05       	cpc	r21, r1
    1442:	61 05       	cpc	r22, r1
    1444:	71 05       	cpc	r23, r1
    1446:	19 f4       	brne	.+6      	; 0x144e <freeMemoryUpdate+0x34>
    1448:	ac 01       	movw	r20, r24
    144a:	bd 01       	movw	r22, r26
    144c:	06 c0       	rjmp	.+12     	; 0x145a <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    144e:	ac 01       	movw	r20, r24
    1450:	bd 01       	movw	r22, r26
    1452:	4f 5f       	subi	r20, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	6f 4f       	sbci	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	db 01       	movw	r26, r22
    145c:	ca 01       	movw	r24, r20
    145e:	33 e0       	ldi	r19, 0x03	; 3
    1460:	b6 95       	lsr	r27
    1462:	a7 95       	ror	r26
    1464:	97 95       	ror	r25
    1466:	87 95       	ror	r24
    1468:	3a 95       	dec	r19
    146a:	d1 f7       	brne	.-12     	; 0x1460 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    146c:	47 70       	andi	r20, 0x07	; 7
    146e:	50 70       	andi	r21, 0x00	; 0
    1470:	60 70       	andi	r22, 0x00	; 0
    1472:	70 70       	andi	r23, 0x00	; 0
    1474:	41 15       	cp	r20, r1
    1476:	51 05       	cpc	r21, r1
    1478:	61 05       	cpc	r22, r1
    147a:	71 05       	cpc	r23, r1
    147c:	19 f4       	brne	.+6      	; 0x1484 <freeMemoryUpdate+0x6a>
    147e:	7c 01       	movw	r14, r24
    1480:	8d 01       	movw	r16, r26
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    1484:	7c 01       	movw	r14, r24
    1486:	8d 01       	movw	r16, r26
    1488:	08 94       	sec
    148a:	e1 1c       	adc	r14, r1
    148c:	f1 1c       	adc	r15, r1
    148e:	01 1d       	adc	r16, r1
    1490:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    1492:	80 91 ed 07 	lds	r24, 0x07ED
    1496:	88 23       	and	r24, r24
    1498:	d9 f0       	breq	.+54     	; 0x14d0 <freeMemoryUpdate+0xb6>
  {
  freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
  if(flag == ADD)
    14aa:	dd 20       	and	r13, r13
    14ac:	39 f4       	brne	.+14     	; 0x14bc <freeMemoryUpdate+0xa2>
       freeClusters = freeClusters + size;
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	2e 0d       	add	r18, r14
    14b4:	3f 1d       	adc	r19, r15
    14b6:	40 1f       	adc	r20, r16
    14b8:	51 1f       	adc	r21, r17
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <freeMemoryUpdate+0xae>
  else  //when flag = REMOVE
     freeClusters = freeClusters - size;
    14bc:	9b 01       	movw	r18, r22
    14be:	ac 01       	movw	r20, r24
    14c0:	2e 19       	sub	r18, r14
    14c2:	3f 09       	sbc	r19, r15
    14c4:	40 0b       	sbc	r20, r16
    14c6:	51 0b       	sbc	r21, r17
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
  }
}
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	08 95       	ret

000014dc <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    14dc:	2f 92       	push	r2
    14de:	3f 92       	push	r3
    14e0:	4f 92       	push	r4
    14e2:	5f 92       	push	r5
    14e4:	6f 92       	push	r6
    14e6:	7f 92       	push	r7
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    14fc:	20 91 90 04 	lds	r18, 0x0490
    1500:	30 91 91 04 	lds	r19, 0x0491
    1504:	40 91 92 04 	lds	r20, 0x0492
    1508:	50 91 93 04 	lds	r21, 0x0493
    150c:	60 91 c0 06 	lds	r22, 0x06C0
    1510:	70 91 c1 06 	lds	r23, 0x06C1
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    151c:	5b 01       	movw	r10, r22
    151e:	6c 01       	movw	r12, r24
    1520:	1a e0       	ldi	r17, 0x0A	; 10
    1522:	d6 94       	lsr	r13
    1524:	c7 94       	ror	r12
    1526:	b7 94       	ror	r11
    1528:	a7 94       	ror	r10
    152a:	1a 95       	dec	r17
    152c:	d1 f7       	brne	.-12     	; 0x1522 <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
    152e:	e0 90 8e 04 	lds	r14, 0x048E
    1532:	f0 90 8f 04 	lds	r15, 0x048F

TX_NEWLINE_PC;
    1536:	8d e0       	ldi	r24, 0x0D	; 13
    1538:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    153c:	8a e0       	ldi	r24, 0x0A	; 10
    153e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
TX_NEWLINE_PC;
    1542:	8d e0       	ldi	r24, 0x0D	; 13
    1544:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1548:	8a e0       	ldi	r24, 0x0A	; 10
    154a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
//USART_transmitStringToPCFromFlash(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
    154e:	00 e0       	ldi	r16, 0x00	; 0
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	c6 01       	movw	r24, r12
    1554:	b5 01       	movw	r22, r10
    1556:	a8 01       	movw	r20, r16
    1558:	97 01       	movw	r18, r14
    155a:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    155e:	ab 01       	movw	r20, r22
    1560:	bc 01       	movw	r22, r24
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
    1578:	3b 01       	movw	r6, r22
    157a:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    157c:	80 91 90 04 	lds	r24, 0x0490
    1580:	90 91 91 04 	lds	r25, 0x0491
    1584:	a0 91 92 04 	lds	r26, 0x0492
    1588:	b0 91 93 04 	lds	r27, 0x0493
    158c:	86 15       	cp	r24, r6
    158e:	97 05       	cpc	r25, r7
    1590:	a8 05       	cpc	r26, r8
    1592:	b9 05       	cpc	r27, r9
    1594:	08 f0       	brcs	.+2      	; 0x1598 <memoryStatistics+0xbc>
    1596:	7c c0       	rjmp	.+248    	; 0x1690 <memoryStatistics+0x1b4>
{
   freeClusterCountUpdated = 0;
    1598:	10 92 ed 07 	sts	0x07ED, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    159c:	a0 90 b4 04 	lds	r10, 0x04B4
    15a0:	b0 90 b5 04 	lds	r11, 0x04B5
    15a4:	c0 90 b6 04 	lds	r12, 0x04B6
    15a8:	d0 90 b7 04 	lds	r13, 0x04B7
    15ac:	b2 e0       	ldi	r27, 0x02	; 2
    15ae:	aa 0c       	add	r10, r10
    15b0:	bb 1c       	adc	r11, r11
    15b2:	cc 1c       	adc	r12, r12
    15b4:	dd 1c       	adc	r13, r13
    15b6:	ba 95       	dec	r27
    15b8:	d1 f7       	brne	.-12     	; 0x15ae <memoryStatistics+0xd2>
    15ba:	66 24       	eor	r6, r6
    15bc:	77 24       	eor	r7, r7
    15be:	43 01       	movw	r8, r6
    15c0:	22 24       	eor	r2, r2
    15c2:	33 24       	eor	r3, r3
    15c4:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    15c6:	e0 90 e1 06 	lds	r14, 0x06E1
    15ca:	f0 90 e2 06 	lds	r15, 0x06E2
    15ce:	20 91 8e 04 	lds	r18, 0x048E
    15d2:	30 91 8f 04 	lds	r19, 0x048F
      SD_readSingleBlock(sector);
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	80 91 d6 06 	lds	r24, 0x06D6
    15de:	90 91 d7 06 	lds	r25, 0x06D7
    15e2:	a0 91 d8 06 	lds	r26, 0x06D8
    15e6:	b0 91 d9 06 	lds	r27, 0x06D9
    15ea:	e8 0e       	add	r14, r24
    15ec:	f9 1e       	adc	r15, r25
    15ee:	0a 1f       	adc	r16, r26
    15f0:	1b 1f       	adc	r17, r27
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	c6 01       	movw	r24, r12
    15f8:	b5 01       	movw	r22, r10
    15fa:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    15fe:	e2 0e       	add	r14, r18
    1600:	f3 1e       	adc	r15, r19
    1602:	04 1f       	adc	r16, r20
    1604:	15 1f       	adc	r17, r21
    1606:	c8 01       	movw	r24, r16
    1608:	b7 01       	movw	r22, r14
    160a:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    160e:	a2 01       	movw	r20, r4
    1610:	91 01       	movw	r18, r2
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    1616:	fb 01       	movw	r30, r22
    1618:	e1 54       	subi	r30, 0x41	; 65
    161a:	fb 4f       	sbci	r31, 0xFB	; 251
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	a2 81       	ldd	r26, Z+2	; 0x02
    1622:	b3 81       	ldd	r27, Z+3	; 0x03
    1624:	bf 70       	andi	r27, 0x0F	; 15
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	29 f4       	brne	.+10     	; 0x1638 <memoryStatistics+0x15c>
            freeClusters++;;
    162e:	08 94       	sec
    1630:	61 1c       	adc	r6, r1
    1632:	71 1c       	adc	r7, r1
    1634:	81 1c       	adc	r8, r1
    1636:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    1638:	2f 5f       	subi	r18, 0xFF	; 255
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	4f 4f       	sbci	r20, 0xFF	; 255
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    1640:	80 91 90 04 	lds	r24, 0x0490
    1644:	90 91 91 04 	lds	r25, 0x0491
    1648:	a0 91 92 04 	lds	r26, 0x0492
    164c:	b0 91 93 04 	lds	r27, 0x0493
    1650:	02 96       	adiw	r24, 0x02	; 2
    1652:	a1 1d       	adc	r26, r1
    1654:	b1 1d       	adc	r27, r1
    1656:	28 17       	cp	r18, r24
    1658:	39 07       	cpc	r19, r25
    165a:	4a 07       	cpc	r20, r26
    165c:	5b 07       	cpc	r21, r27
    165e:	c1 f0       	breq	.+48     	; 0x1690 <memoryStatistics+0x1b4>
    1660:	c9 01       	movw	r24, r18
    1662:	82 19       	sub	r24, r2
    1664:	93 09       	sbc	r25, r3
    1666:	6c 5f       	subi	r22, 0xFC	; 252
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    166a:	02 e0       	ldi	r16, 0x02	; 2
    166c:	60 30       	cpi	r22, 0x00	; 0
    166e:	70 07       	cpc	r23, r16
    1670:	91 f6       	brne	.-92     	; 0x1616 <memoryStatistics+0x13a>
    1672:	e1 2c       	mov	r14, r1
    1674:	a2 e0       	ldi	r26, 0x02	; 2
    1676:	fa 2e       	mov	r15, r26
    1678:	01 2d       	mov	r16, r1
    167a:	11 2d       	mov	r17, r1
    167c:	ae 0c       	add	r10, r14
    167e:	bf 1c       	adc	r11, r15
    1680:	c0 1e       	adc	r12, r16
    1682:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    1684:	80 38       	cpi	r24, 0x80	; 128
    1686:	91 05       	cpc	r25, r1
    1688:	18 f0       	brcs	.+6      	; 0x1690 <memoryStatistics+0x1b4>
    168a:	19 01       	movw	r2, r18
    168c:	2a 01       	movw	r4, r20
    168e:	9b cf       	rjmp	.-202    	; 0x15c6 <memoryStatistics+0xea>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
    1690:	80 91 ed 07 	lds	r24, 0x07ED
    1694:	88 23       	and	r24, r24
    1696:	31 f4       	brne	.+12     	; 0x16a4 <memoryStatistics+0x1c8>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	a4 01       	movw	r20, r8
    169e:	93 01       	movw	r18, r6
    16a0:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 ed 07 	sts	0x07ED, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
    16aa:	20 91 c0 06 	lds	r18, 0x06C0
    16ae:	30 91 c1 06 	lds	r19, 0x06C1
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	c4 01       	movw	r24, r8
    16b8:	b3 01       	movw	r22, r6
    16ba:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    16be:	fa e0       	ldi	r31, 0x0A	; 10
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	77 95       	ror	r23
    16c6:	67 95       	ror	r22
    16c8:	fa 95       	dec	r31
    16ca:	d1 f7       	brne	.-12     	; 0x16c0 <memoryStatistics+0x1e4>
freeMemory *= bytesPerSector ;
    16cc:	20 91 8e 04 	lds	r18, 0x048E
    16d0:	30 91 8f 04 	lds	r19, 0x048F
//TX_NEWLINE_PC;
//USART_transmitStringToPCFromFlash(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    16dc:	ab 01       	movw	r20, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <displayMemory>
//TX_NEWLINE_PC; 
}
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	3f 90       	pop	r3
    1704:	2f 90       	pop	r2
    1706:	08 95       	ret

00001708 <getBootSectorData>:
 */

#include "Globals.h"

unsigned char getBootSectorData (void)
{
    1708:	6f 92       	push	r6
    170a:	7f 92       	push	r7
    170c:	8f 92       	push	r8
    170e:	9f 92       	push	r9
    1710:	af 92       	push	r10
    1712:	bf 92       	push	r11
    1714:	cf 92       	push	r12
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
  struct BS_Structure *bpb; //mapping the buffer onto the structure
  struct MBRinfo_Structure *mbr;
  struct partitionInfo_Structure *partition;
  unsigned long dataSectors;

  unusedSectors = 0;
    1720:	10 92 d6 06 	sts	0x06D6, r1
    1724:	10 92 d7 06 	sts	0x06D7, r1
    1728:	10 92 d8 06 	sts	0x06D8, r1
    172c:	10 92 d9 06 	sts	0x06D9, r1

  SD_readSingleBlock(0);
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;

  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    173c:	80 91 bf 04 	lds	r24, 0x04BF
    1740:	89 3e       	cpi	r24, 0xE9	; 233
    1742:	19 f1       	breq	.+70     	; 0x178a <getBootSectorData+0x82>
    1744:	8b 3e       	cpi	r24, 0xEB	; 235
    1746:	09 f1       	breq	.+66     	; 0x178a <getBootSectorData+0x82>
  {
    mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR

    if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    1748:	80 91 bd 06 	lds	r24, 0x06BD
    174c:	90 91 be 06 	lds	r25, 0x06BE
    1750:	85 55       	subi	r24, 0x55	; 85
    1752:	9a 4a       	sbci	r25, 0xAA	; 170
    1754:	09 f0       	breq	.+2      	; 0x1758 <getBootSectorData+0x50>
    1756:	b0 c0       	rjmp	.+352    	; 0x18b8 <getBootSectorData+0x1b0>

    partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
    unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    1758:	60 91 85 06 	lds	r22, 0x0685
    175c:	70 91 86 06 	lds	r23, 0x0686
    1760:	80 91 87 06 	lds	r24, 0x0687
    1764:	90 91 88 06 	lds	r25, 0x0688
    1768:	60 93 d6 06 	sts	0x06D6, r22
    176c:	70 93 d7 06 	sts	0x06D7, r23
    1770:	80 93 d8 06 	sts	0x06D8, r24
    1774:	90 93 d9 06 	sts	0x06D9, r25

    SD_readSingleBlock(partition->firstSector);//read the bpb sector
    1778:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    bpb = (struct BS_Structure *)buffer;
    if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    177c:	80 91 bf 04 	lds	r24, 0x04BF
    1780:	89 3e       	cpi	r24, 0xE9	; 233
    1782:	19 f0       	breq	.+6      	; 0x178a <getBootSectorData+0x82>
    1784:	8b 3e       	cpi	r24, 0xEB	; 235
    1786:	09 f0       	breq	.+2      	; 0x178a <getBootSectorData+0x82>
    1788:	97 c0       	rjmp	.+302    	; 0x18b8 <getBootSectorData+0x1b0>
  }

  bytesPerSector = bpb->bytesPerSector;
    178a:	80 91 ca 04 	lds	r24, 0x04CA
    178e:	90 91 cb 04 	lds	r25, 0x04CB
    1792:	90 93 8f 04 	sts	0x048F, r25
    1796:	80 93 8e 04 	sts	0x048E, r24
  //transmitHex(INT, bytesPerSector); USART_transmitByteToPC(' ');
  sectorPerCluster = bpb->sectorPerCluster;
    179a:	80 91 cc 04 	lds	r24, 0x04CC
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	90 93 c1 06 	sts	0x06C1, r25
    17a4:	80 93 c0 06 	sts	0x06C0, r24
  //transmitHex(INT, sectorPerCluster); USART_transmitByteToPC(' ');
  reservedSectorCount = bpb->reservedSectorCount;
    17a8:	a0 90 cd 04 	lds	r10, 0x04CD
    17ac:	b0 90 ce 04 	lds	r11, 0x04CE
    17b0:	b0 92 e2 06 	sts	0x06E2, r11
    17b4:	a0 92 e1 06 	sts	0x06E1, r10
  rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    17b8:	80 91 eb 04 	lds	r24, 0x04EB
    17bc:	90 91 ec 04 	lds	r25, 0x04EC
    17c0:	a0 91 ed 04 	lds	r26, 0x04ED
    17c4:	b0 91 ee 04 	lds	r27, 0x04EE
    17c8:	80 93 b4 04 	sts	0x04B4, r24
    17cc:	90 93 b5 04 	sts	0x04B5, r25
    17d0:	a0 93 b6 04 	sts	0x04B6, r26
    17d4:	b0 93 b7 04 	sts	0x04B7, r27
  firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    17d8:	e0 90 e1 06 	lds	r14, 0x06E1
    17dc:	f0 90 e2 06 	lds	r15, 0x06E2
    17e0:	60 91 cf 04 	lds	r22, 0x04CF
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	20 91 e3 04 	lds	r18, 0x04E3
    17ee:	30 91 e4 04 	lds	r19, 0x04E4
    17f2:	40 91 e5 04 	lds	r20, 0x04E5
    17f6:	50 91 e6 04 	lds	r21, 0x04E6
    17fa:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    17fe:	3b 01       	movw	r6, r22
    1800:	4c 01       	movw	r8, r24
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	10 e0       	ldi	r17, 0x00	; 0
    1806:	80 91 db 04 	lds	r24, 0x04DB
    180a:	90 91 dc 04 	lds	r25, 0x04DC
    180e:	a0 91 dd 04 	lds	r26, 0x04DD
    1812:	b0 91 de 04 	lds	r27, 0x04DE
    1816:	e8 0e       	add	r14, r24
    1818:	f9 1e       	adc	r15, r25
    181a:	0a 1f       	adc	r16, r26
    181c:	1b 1f       	adc	r17, r27
    181e:	e6 0c       	add	r14, r6
    1820:	f7 1c       	adc	r15, r7
    1822:	08 1d       	adc	r16, r8
    1824:	19 1d       	adc	r17, r9
    1826:	e0 92 86 04 	sts	0x0486, r14
    182a:	f0 92 87 04 	sts	0x0487, r15
    182e:	00 93 88 04 	sts	0x0488, r16
    1832:	10 93 89 04 	sts	0x0489, r17

  dataSectors = bpb->totalSectors_F32
                - bpb->reservedSectorCount
                - ( bpb->numberofFATs * bpb->FATsize_F32);
  totalClusters = dataSectors / sectorPerCluster;
    1836:	20 91 c0 06 	lds	r18, 0x06C0
    183a:	30 91 c1 06 	lds	r19, 0x06C1
    183e:	cc 24       	eor	r12, r12
    1840:	dd 24       	eor	r13, r13
    1842:	60 91 df 04 	lds	r22, 0x04DF
    1846:	70 91 e0 04 	lds	r23, 0x04E0
    184a:	80 91 e1 04 	lds	r24, 0x04E1
    184e:	90 91 e2 04 	lds	r25, 0x04E2
    1852:	6a 19       	sub	r22, r10
    1854:	7b 09       	sbc	r23, r11
    1856:	8c 09       	sbc	r24, r12
    1858:	9d 09       	sbc	r25, r13
    185a:	66 19       	sub	r22, r6
    185c:	77 09       	sbc	r23, r7
    185e:	88 09       	sbc	r24, r8
    1860:	99 09       	sbc	r25, r9
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    186a:	c9 01       	movw	r24, r18
    186c:	da 01       	movw	r26, r20
    186e:	80 93 90 04 	sts	0x0490, r24
    1872:	90 93 91 04 	sts	0x0491, r25
    1876:	a0 93 92 04 	sts	0x0492, r26
    187a:	b0 93 93 04 	sts	0x0493, r27
  //transmitHex(LONG, totalClusters); USART_transmitByteToPC(' ');

  if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
    188e:	20 91 90 04 	lds	r18, 0x0490
    1892:	30 91 91 04 	lds	r19, 0x0491
    1896:	40 91 92 04 	lds	r20, 0x0492
    189a:	50 91 93 04 	lds	r21, 0x0493
    189e:	26 17       	cp	r18, r22
    18a0:	37 07       	cpc	r19, r23
    18a2:	48 07       	cpc	r20, r24
    18a4:	59 07       	cpc	r21, r25
    18a6:	18 f4       	brcc	.+6      	; 0x18ae <getBootSectorData+0x1a6>
       freeClusterCountUpdated = 0;
    18a8:	10 92 ed 07 	sts	0x07ED, r1
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <getBootSectorData+0x1ac>
  else
     freeClusterCountUpdated = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 ed 07 	sts	0x07ED, r24
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <getBootSectorData+0x1b2>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
  return 0;
}
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	9f 90       	pop	r9
    18cc:	8f 90       	pop	r8
    18ce:	7f 90       	pop	r7
    18d0:	6f 90       	pop	r6
    18d2:	08 95       	ret

000018d4 <InitSDCard>:
 *        to the computer
 * @ref   www.dharmanitech.com
 * @return Void
 */
void InitSDCard(bool bVerb)
{
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	18 2f       	mov	r17, r24
  unsigned char iInit=0;
  unsigned char option, error, data, FAT32_active;
  unsigned int i;
  cardType = 0;
    18dc:	10 92 e8 06 	sts	0x06E8, r1
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
    18e2:	d0 e0       	ldi	r29, 0x00	; 0

  for (i=0; i<10; i++)
  {
    error = SD_init();
    18e4:	0e 94 c9 06 	call	0xd92	; 0xd92 <SD_init>
    if(!error) break;
    18e8:	88 23       	and	r24, r24
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <InitSDCard+0x20>
  unsigned char iInit=0;
  unsigned char option, error, data, FAT32_active;
  unsigned int i;
  cardType = 0;

  for (i=0; i<10; i++)
    18ec:	21 96       	adiw	r28, 0x01	; 1
    18ee:	ca 30       	cpi	r28, 0x0A	; 10
    18f0:	d1 05       	cpc	r29, r1
    18f2:	c1 f7       	brne	.-16     	; 0x18e4 <InitSDCard+0x10>
  {
    error = SD_init();
    if(!error) break;
  }

  if(bVerb)
    18f4:	11 23       	and	r17, r17
    18f6:	09 f4       	brne	.+2      	; 0x18fa <InitSDCard+0x26>
    18f8:	5f c0       	rjmp	.+190    	; 0x19b8 <InitSDCard+0xe4>
  {
    if(error)
    18fa:	88 23       	and	r24, r24
    18fc:	71 f0       	breq	.+28     	; 0x191a <InitSDCard+0x46>
    {
      if(error == 1) USART_transmitStringToPCFromFlash(PSTR("SD card not detected.."));
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	29 f4       	brne	.+10     	; 0x190c <InitSDCard+0x38>
    1902:	83 e1       	ldi	r24, 0x13	; 19
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <InitSDCard+0x44>
      if(error == 2) USART_transmitStringToPCFromFlash(PSTR("Card Initialization failed.."));
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	21 f4       	brne	.+8      	; 0x1918 <InitSDCard+0x44>
    1910:	86 ef       	ldi	r24, 0xF6	; 246
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    1918:	ff cf       	rjmp	.-2      	; 0x1918 <InitSDCard+0x44>
        while(1);  //wait here forever if error in SD init   
    }


    switch (cardType)
    191a:	80 91 e8 06 	lds	r24, 0x06E8
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	39 f0       	breq	.+14     	; 0x1930 <InitSDCard+0x5c>
    1922:	83 30       	cpi	r24, 0x03	; 3
    1924:	41 f0       	breq	.+16     	; 0x1936 <InitSDCard+0x62>
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	49 f4       	brne	.+18     	; 0x193c <InitSDCard+0x68>
    {
      case 1:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 1.x) Detected"));
    192a:	8c ec       	ldi	r24, 0xCC	; 204
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <InitSDCard+0x6c>
           break;
      case 2:USART_transmitStringToPCFromFlash(PSTR("High Capacity Card Detected"));
    1930:	80 eb       	ldi	r24, 0xB0	; 176
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <InitSDCard+0x6c>
           break;
      case 3:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 2.x) Detected"));
    1936:	86 e8       	ldi	r24, 0x86	; 134
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <InitSDCard+0x6c>
           break;
      default:USART_transmitStringToPCFromFlash(PSTR("Unknown SD Card Detected"));
    193c:	8d e6       	ldi	r24, 0x6D	; 109
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    1944:	80 ed       	ldi	r24, 0xD0	; 208
    1946:	97 e0       	ldi	r25, 0x07	; 7
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <InitSDCard+0x74>
  

    _delay_ms(1);   //some delay

    FAT32_active = 1;
    error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    194c:	0e 94 84 0b 	call	0x1708	; 0x1708 <getBootSectorData>
    if(error)   
    1950:	88 23       	and	r24, r24
    1952:	49 f0       	breq	.+18     	; 0x1966 <InitSDCard+0x92>
    {
      TX_NEWLINE_PC;
    1954:	8d e0       	ldi	r24, 0x0D	; 13
    1956:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    195a:	8a e0       	ldi	r24, 0x0A	; 10
    195c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      USART_transmitStringToPCFromFlash (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1960:	8c e5       	ldi	r24, 0x5C	; 92
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <InitSDCard+0xa2>
      FAT32_active = 0;
    }else{
      TX_NEWLINE_PC;
    1966:	8d e0       	ldi	r24, 0x0D	; 13
    1968:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    196c:	8a e0       	ldi	r24, 0x0A	; 10
    196e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      USART_transmitStringToPCFromFlash (PSTR("FAT32 file system detected..."));
    1972:	8e e3       	ldi	r24, 0x3E	; 62
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    }
    TX_NEWLINE_PC;  
    197a:	8d e0       	ldi	r24, 0x0D	; 13
    197c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1980:	8a e0       	ldi	r24, 0x0A	; 10
    1982:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    iInit=VS1053_Initialize();
    1986:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <VS1053_Initialize>
    198a:	18 2f       	mov	r17, r24
    if(iInit==0){
    198c:	88 23       	and	r24, r24
    198e:	29 f4       	brne	.+10     	; 0x199a <InitSDCard+0xc6>
      USART_transmitStringToPCFromFlash (PSTR("VS1053 MP3 chip sucessfully initialized"));
    1990:	86 e1       	ldi	r24, 0x16	; 22
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    1998:	08 c0       	rjmp	.+16     	; 0x19aa <InitSDCard+0xd6>
      TX_NEWLINE_PC;  
    }else{
      USART_transmitStringToPCFromFlash (PSTR("Error initializing VS1053 - CODE "));
    199a:	84 ef       	ldi	r24, 0xF4	; 244
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      USART_transmitByteToPC(iInit+64);
    19a2:	81 2f       	mov	r24, r17
    19a4:	80 5c       	subi	r24, 0xC0	; 192
    19a6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      TX_NEWLINE_PC;
    19aa:	8d e0       	ldi	r24, 0x0D	; 13
    19ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    19b0:	8a e0       	ldi	r24, 0x0A	; 10
    19b2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    19b6:	0a c0       	rjmp	.+20     	; 0x19cc <InitSDCard+0xf8>
    }
  }
  else
  {
    if(error)
    19b8:	81 11       	cpse	r24, r1
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <InitSDCard+0xe6>
    19bc:	80 ed       	ldi	r24, 0xD0	; 208
    19be:	97 e0       	ldi	r25, 0x07	; 7
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <InitSDCard+0xec>
        while(1);  //wait here forever if error in SD init   
    }
    _delay_ms(1);   //some delay

    FAT32_active = 1;
    error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    19c4:	0e 94 84 0b 	call	0x1708	; 0x1708 <getBootSectorData>
    {
      FAT32_active = 0;
    }else{

    }
    iInit=VS1053_Initialize();
    19c8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <VS1053_Initialize>
  }
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	08 95       	ret

000019d4 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    19d4:	4f 92       	push	r4
    19d6:	5f 92       	push	r5
    19d8:	6f 92       	push	r6
    19da:	7f 92       	push	r7
    19dc:	8f 92       	push	r8
    19de:	9f 92       	push	r9
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	5b 01       	movw	r10, r22
    19f6:	6c 01       	movw	r12, r24
    19f8:	84 2e       	mov	r8, r20
    19fa:	28 01       	movw	r4, r16
    19fc:	39 01       	movw	r6, r18
  unsigned long *FATEntryValue;
  unsigned long FATEntrySector;
  unsigned char retry = 0;

  //get sector number of the cluster entry in the FAT
  FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    19fe:	80 91 e1 06 	lds	r24, 0x06E1
    1a02:	90 91 e2 06 	lds	r25, 0x06E2
    1a06:	02 e0       	ldi	r16, 0x02	; 2
    1a08:	aa 0c       	add	r10, r10
    1a0a:	bb 1c       	adc	r11, r11
    1a0c:	cc 1c       	adc	r12, r12
    1a0e:	dd 1c       	adc	r13, r13
    1a10:	0a 95       	dec	r16
    1a12:	d1 f7       	brne	.-12     	; 0x1a08 <getSetNextCluster+0x34>
    1a14:	20 91 8e 04 	lds	r18, 0x048E
    1a18:	30 91 8f 04 	lds	r19, 0x048F
    1a1c:	7c 01       	movw	r14, r24
    1a1e:	00 e0       	ldi	r16, 0x00	; 0
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	80 91 d6 06 	lds	r24, 0x06D6
    1a26:	90 91 d7 06 	lds	r25, 0x06D7
    1a2a:	a0 91 d8 06 	lds	r26, 0x06D8
    1a2e:	b0 91 d9 06 	lds	r27, 0x06D9
    1a32:	e8 0e       	add	r14, r24
    1a34:	f9 1e       	adc	r15, r25
    1a36:	0a 1f       	adc	r16, r26
    1a38:	1b 1f       	adc	r17, r27
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	c6 01       	movw	r24, r12
    1a40:	b5 01       	movw	r22, r10
    1a42:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    1a46:	e2 0e       	add	r14, r18
    1a48:	f3 1e       	adc	r15, r19
    1a4a:	04 1f       	adc	r16, r20
    1a4c:	15 1f       	adc	r17, r21

  //get the offset address in that sector number
  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    1a4e:	c0 91 8e 04 	lds	r28, 0x048E
    1a52:	d0 91 8f 04 	lds	r29, 0x048F
    1a56:	99 24       	eor	r9, r9

  //read the sector into a buffer
  while(retry <10)
  { if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    1a58:	c8 01       	movw	r24, r16
    1a5a:	b7 01       	movw	r22, r14
    1a5c:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    1a60:	88 23       	and	r24, r24
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <getSetNextCluster+0x98>
    1a64:	93 94       	inc	r9

  //get the offset address in that sector number
  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

  //read the sector into a buffer
  while(retry <10)
    1a66:	8a e0       	ldi	r24, 0x0A	; 10
    1a68:	98 16       	cp	r9, r24
    1a6a:	b1 f7       	brne	.-20     	; 0x1a58 <getSetNextCluster+0x84>
  { if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

  //get the cluster address from the buffer
  FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	c6 01       	movw	r24, r12
    1a74:	b5 01       	movw	r22, r10
    1a76:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    1a7a:	fb 01       	movw	r30, r22
    1a7c:	e1 54       	subi	r30, 0x41	; 65
    1a7e:	fb 4f       	sbci	r31, 0xFB	; 251

  if(get_set == GET)
    1a80:	88 20       	and	r8, r8
    1a82:	31 f4       	brne	.+12     	; 0x1a90 <getSetNextCluster+0xbc>
    return ((*FATEntryValue) & 0x0fffffff);
    1a84:	20 81       	ld	r18, Z
    1a86:	31 81       	ldd	r19, Z+1	; 0x01
    1a88:	42 81       	ldd	r20, Z+2	; 0x02
    1a8a:	53 81       	ldd	r21, Z+3	; 0x03
    1a8c:	5f 70       	andi	r21, 0x0F	; 15
    1a8e:	0c c0       	rjmp	.+24     	; 0x1aa8 <getSetNextCluster+0xd4>


  *FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    1a90:	40 82       	st	Z, r4
    1a92:	51 82       	std	Z+1, r5	; 0x01
    1a94:	62 82       	std	Z+2, r6	; 0x02
    1a96:	73 82       	std	Z+3, r7	; 0x03

  SD_writeSingleBlock(FATEntrySector);
    1a98:	c8 01       	movw	r24, r16
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0

  return (0);
}
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	ca 01       	movw	r24, r20
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	5f 90       	pop	r5
    1aca:	4f 90       	pop	r4
    1acc:	08 95       	ret

00001ace <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//      Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1ace:	2f 92       	push	r2
    1ad0:	3f 92       	push	r3
    1ad2:	4f 92       	push	r4
    1ad4:	5f 92       	push	r5
    1ad6:	6f 92       	push	r6
    1ad8:	7f 92       	push	r7
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	2a 97       	sbiw	r28, 0x0a	; 10
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	7f 83       	std	Y+7, r23	; 0x07
    1b06:	6e 83       	std	Y+6, r22	; 0x06
  unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
  struct dir_Structure *dir;
  unsigned int i;
  unsigned char j;

  cluster = rootCluster; //root cluster
    1b08:	a0 90 b4 04 	lds	r10, 0x04B4
    1b0c:	b0 90 b5 04 	lds	r11, 0x04B5
    1b10:	c0 90 b6 04 	lds	r12, 0x04B6
    1b14:	d0 90 b7 04 	lds	r13, 0x04B7
            USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
        return 0;   
      }
      if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
          {
            if((flag == GET_FILE) || (flag == DELETE))
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1b1c:	20 91 c0 06 	lds	r18, 0x06C0
    1b20:	30 91 c1 06 	lds	r19, 0x06C1
    1b24:	e0 90 86 04 	lds	r14, 0x0486
    1b28:	f0 90 87 04 	lds	r15, 0x0487
    1b2c:	00 91 88 04 	lds	r16, 0x0488
    1b30:	10 91 89 04 	lds	r17, 0x0489
    1b34:	c6 01       	movw	r24, r12
    1b36:	b5 01       	movw	r22, r10
    1b38:	62 50       	subi	r22, 0x02	; 2
    1b3a:	70 40       	sbci	r23, 0x00	; 0
    1b3c:	80 40       	sbci	r24, 0x00	; 0
    1b3e:	90 40       	sbci	r25, 0x00	; 0
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    1b48:	1b 01       	movw	r2, r22
    1b4a:	2c 01       	movw	r4, r24
    1b4c:	2e 0c       	add	r2, r14
    1b4e:	3f 1c       	adc	r3, r15
    1b50:	40 1e       	adc	r4, r16
    1b52:	51 1e       	adc	r5, r17
    1b54:	66 24       	eor	r6, r6
    1b56:	77 24       	eor	r7, r7
    1b58:	43 01       	movw	r8, r6
    1b5a:	60 c1       	rjmp	.+704    	; 0x1e1c <findFiles+0x34e>

  while(1)
  {
     firstSector = getFirstSector (cluster);

     for(sector = 0; sector < sectorPerCluster; sector++)
    1b5c:	d4 01       	movw	r26, r8
    1b5e:	c3 01       	movw	r24, r6
    1b60:	82 0d       	add	r24, r2
    1b62:	93 1d       	adc	r25, r3
    1b64:	a4 1d       	adc	r26, r4
    1b66:	b5 1d       	adc	r27, r5
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	ab 83       	std	Y+3, r26	; 0x03
    1b6e:	bc 83       	std	Y+4, r27	; 0x04
     {
       SD_readSingleBlock (firstSector + sector);
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	e4 2e       	mov	r14, r20
    1b7c:	f1 2c       	mov	r15, r1
    1b7e:	3e c1       	rjmp	.+636    	; 0x1dfc <findFiles+0x32e>
  

       for(i=0; i<bytesPerSector; i+=32)
    1b80:	8a 01       	movw	r16, r20
    1b82:	01 54       	subi	r16, 0x41	; 65
    1b84:	1b 4f       	sbci	r17, 0xFB	; 251
       {
        dir = (struct dir_Structure *) &buffer[i];

          if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1b86:	f7 01       	movw	r30, r14
    1b88:	e1 54       	subi	r30, 0x41	; 65
    1b8a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b8c:	b0 97       	sbiw	r30, 0x20	; 32
    1b8e:	80 81       	ld	r24, Z
    1b90:	b0 96       	adiw	r30, 0x20	; 32
    1b92:	88 23       	and	r24, r24
    1b94:	41 f4       	brne	.+16     	; 0x1ba6 <findFiles+0xd8>
      {
        if((flag == GET_FILE) || (flag == DELETE))
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	91 50       	subi	r25, 0x01	; 1
    1b9a:	92 30       	cpi	r25, 0x02	; 2
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <findFiles+0xd2>
    1b9e:	68 c1       	rjmp	.+720    	; 0x1e70 <findFiles+0x3a2>
            USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
    1ba0:	89 ef       	ldi	r24, 0xF9	; 249
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	63 c1       	rjmp	.+710    	; 0x1e6c <findFiles+0x39e>
        return 0;   
      }
      if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1ba6:	85 3e       	cpi	r24, 0xE5	; 229
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <findFiles+0xde>
    1baa:	24 c1       	rjmp	.+584    	; 0x1df4 <findFiles+0x326>
    1bac:	75 97       	sbiw	r30, 0x15	; 21
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 30       	cpi	r24, 0x0F	; 15
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <findFiles+0xe8>
    1bb4:	1f c1       	rjmp	.+574    	; 0x1df4 <findFiles+0x326>
          {
            if((flag == GET_FILE) || (flag == DELETE))
    1bb6:	a8 85       	ldd	r26, Y+8	; 0x08
    1bb8:	a2 30       	cpi	r26, 0x02	; 2
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <findFiles+0xf0>
    1bbc:	d2 c0       	rjmp	.+420    	; 0x1d62 <findFiles+0x294>
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
            {
              for(j=0; j<11; j++)
              if(dir->name[j] != fileName[j]) break;
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	82 0f       	add	r24, r18
    1bc6:	93 1f       	adc	r25, r19
    1bc8:	ae 81       	ldd	r26, Y+6	; 0x06
    1bca:	bf 81       	ldd	r27, Y+7	; 0x07
    1bcc:	a2 0f       	add	r26, r18
    1bce:	b3 1f       	adc	r27, r19
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	90 81       	ld	r25, Z
    1bd4:	8c 91       	ld	r24, X
    1bd6:	98 17       	cp	r25, r24
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <findFiles+0x10e>
    1bda:	0c c1       	rjmp	.+536    	; 0x1df4 <findFiles+0x326>
    1bdc:	82 2f       	mov	r24, r18
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	2f 5f       	subi	r18, 0xFF	; 255
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
      }
      if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
          {
            if((flag == GET_FILE) || (flag == DELETE))
            {
              for(j=0; j<11; j++)
    1be4:	2b 30       	cpi	r18, 0x0B	; 11
    1be6:	31 05       	cpc	r19, r1
    1be8:	61 f7       	brne	.-40     	; 0x1bc2 <findFiles+0xf4>
              if(dir->name[j] != fileName[j]) break;
              if(j == 11)
    1bea:	8b 30       	cpi	r24, 0x0B	; 11
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <findFiles+0x122>
    1bee:	02 c1       	rjmp	.+516    	; 0x1df4 <findFiles+0x326>
        {
          if(flag == GET_FILE)
    1bf0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf2:	f1 30       	cpi	r31, 0x01	; 1
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <findFiles+0x12a>
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <findFiles+0x1a8>
                {
            appendFileSector = firstSector + sector;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	ab 81       	ldd	r26, Y+3	; 0x03
    1bfe:	bc 81       	ldd	r27, Y+4	; 0x04
    1c00:	80 93 ef 07 	sts	0x07EF, r24
    1c04:	90 93 f0 07 	sts	0x07F0, r25
    1c08:	a0 93 f1 07 	sts	0x07F1, r26
    1c0c:	b0 93 f2 07 	sts	0x07F2, r27
          appendFileLocation = i;
    1c10:	ca 01       	movw	r24, r20
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	80 93 74 04 	sts	0x0474, r24
    1c1a:	90 93 75 04 	sts	0x0475, r25
    1c1e:	a0 93 76 04 	sts	0x0476, r26
    1c22:	b0 93 77 04 	sts	0x0477, r27
          appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1c26:	d8 01       	movw	r26, r16
    1c28:	54 96       	adiw	r26, 0x14	; 20
    1c2a:	8d 91       	ld	r24, X+
    1c2c:	9c 91       	ld	r25, X
    1c2e:	55 97       	sbiw	r26, 0x15	; 21
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	dc 01       	movw	r26, r24
    1c36:	99 27       	eor	r25, r25
    1c38:	88 27       	eor	r24, r24
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c3e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	82 2b       	or	r24, r18
    1c46:	93 2b       	or	r25, r19
    1c48:	a4 2b       	or	r26, r20
    1c4a:	b5 2b       	or	r27, r21
    1c4c:	80 93 e3 06 	sts	0x06E3, r24
    1c50:	90 93 e4 06 	sts	0x06E4, r25
    1c54:	a0 93 e5 06 	sts	0x06E5, r26
    1c58:	b0 93 e6 06 	sts	0x06E6, r27
          fileSize = dir->fileSize;
    1c5c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c5e:	95 8d       	ldd	r25, Z+29	; 0x1d
    1c60:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1c62:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1c64:	80 93 8a 04 	sts	0x048A, r24
    1c68:	90 93 8b 04 	sts	0x048B, r25
    1c6c:	a0 93 8c 04 	sts	0x048C, r26
    1c70:	b0 93 8d 04 	sts	0x048D, r27
    1c74:	ff c0       	rjmp	.+510    	; 0x1e74 <findFiles+0x3a6>
            return (dir);
          }  
          else    //when flag = DELETE
          {
             TX_NEWLINE_PC;
    1c76:	8d e0       	ldi	r24, 0x0D	; 13
    1c78:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1c7c:	8a e0       	ldi	r24, 0x0A	; 10
    1c7e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
           USART_transmitStringToPCFromFlash(PSTR("Deleting.."));
    1c82:	8e ee       	ldi	r24, 0xEE	; 238
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
           TX_NEWLINE_PC;
    1c8a:	8d e0       	ldi	r24, 0x0D	; 13
    1c8c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1c90:	8a e0       	ldi	r24, 0x0A	; 10
    1c92:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
           TX_NEWLINE_PC;
    1c96:	8d e0       	ldi	r24, 0x0D	; 13
    1c98:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1c9c:	8a e0       	ldi	r24, 0x0A	; 10
    1c9e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
           firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1ca2:	d8 01       	movw	r26, r16
    1ca4:	54 96       	adiw	r26, 0x14	; 20
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	55 97       	sbiw	r26, 0x15	; 21
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	5c 01       	movw	r10, r24
    1cb2:	99 24       	eor	r9, r9
    1cb4:	88 24       	eor	r8, r8
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cba:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cbc:	a0 e0       	ldi	r26, 0x00	; 0
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	88 2a       	or	r8, r24
    1cc2:	99 2a       	or	r9, r25
    1cc4:	aa 2a       	or	r10, r26
    1cc6:	bb 2a       	or	r11, r27
                
           //mark file as 'deleted' in FAT table
           dir->name[0] = DELETED;    
    1cc8:	85 ee       	ldi	r24, 0xE5	; 229
    1cca:	80 83       	st	Z, r24
           SD_writeSingleBlock (firstSector+sector);
    1ccc:	69 81       	ldd	r22, Y+1	; 0x01
    1cce:	7a 81       	ldd	r23, Y+2	; 0x02
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
                
           freeMemoryUpdate (ADD, dir->fileSize);
    1cd8:	d8 01       	movw	r26, r16
    1cda:	5c 96       	adiw	r26, 0x1c	; 28
    1cdc:	4d 91       	ld	r20, X+
    1cde:	5d 91       	ld	r21, X+
    1ce0:	6d 91       	ld	r22, X+
    1ce2:	7c 91       	ld	r23, X
    1ce4:	5f 97       	sbiw	r26, 0x1f	; 31
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	0e 94 0d 0a 	call	0x141a	; 0x141a <freeMemoryUpdate>

           //update next free cluster entry in FSinfo sector
           cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
           if(firstCluster < cluster)
    1cfc:	86 16       	cp	r8, r22
    1cfe:	97 06       	cpc	r9, r23
    1d00:	a8 06       	cpc	r10, r24
    1d02:	b9 06       	cpc	r11, r25
    1d04:	30 f4       	brcc	.+12     	; 0x1d12 <findFiles+0x244>
               getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	a5 01       	movw	r20, r10
    1d0c:	94 01       	movw	r18, r8
    1d0e:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>

           //mark all the clusters allocated to the file as 'free'
             while(1)  
             {
                nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1d12:	c5 01       	movw	r24, r10
    1d14:	b4 01       	movw	r22, r8
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	00 e0       	ldi	r16, 0x00	; 0
    1d1a:	10 e0       	ldi	r17, 0x00	; 0
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    1d24:	f6 2e       	mov	r15, r22
    1d26:	e7 2e       	mov	r14, r23
    1d28:	d8 2e       	mov	r13, r24
    1d2a:	c9 2e       	mov	r12, r25
            getSetNextCluster (firstCluster, SET, 0);
    1d2c:	c5 01       	movw	r24, r10
    1d2e:	b4 01       	movw	r22, r8
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	10 e0       	ldi	r17, 0x00	; 0
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    1d3e:	8f 2d       	mov	r24, r15
    1d40:	9e 2d       	mov	r25, r14
    1d42:	ad 2d       	mov	r26, r13
    1d44:	bc 2d       	mov	r27, r12
    1d46:	4c 01       	movw	r8, r24
    1d48:	5d 01       	movw	r10, r26
            if(nextCluster > 0x0ffffff6) 
    1d4a:	b7 ef       	ldi	r27, 0xF7	; 247
    1d4c:	8b 16       	cp	r8, r27
    1d4e:	bf ef       	ldi	r27, 0xFF	; 255
    1d50:	9b 06       	cpc	r9, r27
    1d52:	bf ef       	ldi	r27, 0xFF	; 255
    1d54:	ab 06       	cpc	r10, r27
    1d56:	bf e0       	ldi	r27, 0x0F	; 15
    1d58:	bb 06       	cpc	r11, r27
    1d5a:	d8 f2       	brcs	.-74     	; 0x1d12 <findFiles+0x244>
               {USART_transmitStringToPCFromFlash(PSTR("File deleted!"));return 0;}
    1d5c:	80 ee       	ldi	r24, 0xE0	; 224
    1d5e:	92 e0       	ldi	r25, 0x02	; 2
    1d60:	85 c0       	rjmp	.+266    	; 0x1e6c <findFiles+0x39e>
          }
              }
            }
            else  //when flag = GET_LIST
        {
           TX_NEWLINE_PC;
    1d62:	8d e0       	ldi	r24, 0x0D	; 13
    1d64:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1d68:	8a e0       	ldi	r24, 0x0A	; 10
    1d6a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1d6e:	1a 86       	std	Y+10, r1	; 0x0a
    1d70:	19 86       	std	Y+9, r1	; 0x09
    1d72:	0b c0       	rjmp	.+22     	; 0x1d8a <findFiles+0x2bc>
         for(j=0; j<11; j++)
           {
           if(j == 8) USART_transmitByteToPC(' ');
    1d74:	e9 85       	ldd	r30, Y+9	; 0x09
    1d76:	e7 30       	cpi	r30, 0x07	; 7
    1d78:	19 f4       	brne	.+6      	; 0x1d80 <findFiles+0x2b2>
    1d7a:	80 e2       	ldi	r24, 0x20	; 32
    1d7c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	9a 87       	std	Y+10, r25	; 0x0a
    1d88:	89 87       	std	Y+9, r24	; 0x09
           USART_transmitByteToPC (dir->name[j]);
    1d8a:	e9 85       	ldd	r30, Y+9	; 0x09
    1d8c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d8e:	e0 0f       	add	r30, r16
    1d90:	f1 1f       	adc	r31, r17
    1d92:	80 81       	ld	r24, Z
    1d94:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
              }
            }
            else  //when flag = GET_LIST
        {
           TX_NEWLINE_PC;
         for(j=0; j<11; j++)
    1d98:	a9 85       	ldd	r26, Y+9	; 0x09
    1d9a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1d9c:	1a 97       	sbiw	r26, 0x0a	; 10
    1d9e:	51 f7       	brne	.-44     	; 0x1d74 <findFiles+0x2a6>
           {
           if(j == 8) USART_transmitByteToPC(' ');
           USART_transmitByteToPC (dir->name[j]);
         }
           USART_transmitStringToPCFromFlash (PSTR("   "));
    1da0:	8c ed       	ldi	r24, 0xDC	; 220
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
           if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1da8:	87 01       	movw	r16, r14
    1daa:	01 54       	subi	r16, 0x41	; 65
    1dac:	1b 4f       	sbci	r17, 0xFB	; 251
    1dae:	05 51       	subi	r16, 0x15	; 21
    1db0:	10 40       	sbci	r17, 0x00	; 0
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 81       	ld	r24, Z
    1db6:	0b 5e       	subi	r16, 0xEB	; 235
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	80 31       	cpi	r24, 0x10	; 16
    1dbc:	b9 f0       	breq	.+46     	; 0x1dec <findFiles+0x31e>
    1dbe:	88 30       	cpi	r24, 0x08	; 8
    1dc0:	19 f4       	brne	.+6      	; 0x1dc8 <findFiles+0x2fa>
             USART_transmitStringToPCFromFlash (PSTR("FILE" ));
               USART_transmitStringToPCFromFlash (PSTR("   "));
             displayMemory (LOW, dir->fileSize);
         }
         else
           USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1dc2:	8a ec       	ldi	r24, 0xCA	; 202
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <findFiles+0x322>
           USART_transmitByteToPC (dir->name[j]);
         }
           USART_transmitStringToPCFromFlash (PSTR("   "));
           if((dir->attrib != 0x10) && (dir->attrib != 0x08))
         {
             USART_transmitStringToPCFromFlash (PSTR("FILE" ));
    1dc8:	87 ed       	ldi	r24, 0xD7	; 215
    1dca:	92 e0       	ldi	r25, 0x02	; 2
    1dcc:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
               USART_transmitStringToPCFromFlash (PSTR("   "));
    1dd0:	83 ed       	ldi	r24, 0xD3	; 211
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
             displayMemory (LOW, dir->fileSize);
    1dd8:	f8 01       	movw	r30, r16
    1dda:	34 97       	sbiw	r30, 0x04	; 4
    1ddc:	40 81       	ld	r20, Z
    1dde:	51 81       	ldd	r21, Z+1	; 0x01
    1de0:	62 81       	ldd	r22, Z+2	; 0x02
    1de2:	73 81       	ldd	r23, Z+3	; 0x03
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <displayMemory>
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <findFiles+0x326>
         }
         else
           USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1dec:	8f ec       	ldi	r24, 0xCF	; 207
    1dee:	92 e0       	ldi	r25, 0x02	; 2
    1df0:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    1df4:	80 e2       	ldi	r24, 0x20	; 32
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	e8 0e       	add	r14, r24
    1dfa:	f9 1e       	adc	r15, r25
    1dfc:	a7 01       	movw	r20, r14
    1dfe:	40 52       	subi	r20, 0x20	; 32
    1e00:	50 40       	sbci	r21, 0x00	; 0
     for(sector = 0; sector < sectorPerCluster; sector++)
     {
       SD_readSingleBlock (firstSector + sector);
  

       for(i=0; i<bytesPerSector; i+=32)
    1e02:	80 91 8e 04 	lds	r24, 0x048E
    1e06:	90 91 8f 04 	lds	r25, 0x048F
    1e0a:	48 17       	cp	r20, r24
    1e0c:	59 07       	cpc	r21, r25
    1e0e:	08 f4       	brcc	.+2      	; 0x1e12 <findFiles+0x344>
    1e10:	b7 ce       	rjmp	.-658    	; 0x1b80 <findFiles+0xb2>

  while(1)
  {
     firstSector = getFirstSector (cluster);

     for(sector = 0; sector < sectorPerCluster; sector++)
    1e12:	08 94       	sec
    1e14:	61 1c       	adc	r6, r1
    1e16:	71 1c       	adc	r7, r1
    1e18:	81 1c       	adc	r8, r1
    1e1a:	91 1c       	adc	r9, r1
    1e1c:	80 91 c0 06 	lds	r24, 0x06C0
    1e20:	90 91 c1 06 	lds	r25, 0x06C1
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	68 16       	cp	r6, r24
    1e2a:	79 06       	cpc	r7, r25
    1e2c:	8a 06       	cpc	r8, r26
    1e2e:	9b 06       	cpc	r9, r27
    1e30:	08 f4       	brcc	.+2      	; 0x1e34 <findFiles+0x366>
    1e32:	94 ce       	rjmp	.-728    	; 0x1b5c <findFiles+0x8e>
        }
         }
       }
     }

     cluster = (getSetNextCluster (cluster, GET, 0));
    1e34:	c6 01       	movw	r24, r12
    1e36:	b5 01       	movw	r22, r10
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	00 e0       	ldi	r16, 0x00	; 0
    1e3c:	10 e0       	ldi	r17, 0x00	; 0
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    1e46:	5b 01       	movw	r10, r22
    1e48:	6c 01       	movw	r12, r24

     if(cluster > 0x0ffffff6)
    1e4a:	97 ef       	ldi	r25, 0xF7	; 247
    1e4c:	a9 16       	cp	r10, r25
    1e4e:	9f ef       	ldi	r25, 0xFF	; 255
    1e50:	b9 06       	cpc	r11, r25
    1e52:	9f ef       	ldi	r25, 0xFF	; 255
    1e54:	c9 06       	cpc	r12, r25
    1e56:	9f e0       	ldi	r25, 0x0F	; 15
    1e58:	d9 06       	cpc	r13, r25
    1e5a:	50 f4       	brcc	.+20     	; 0x1e70 <findFiles+0x3a2>
        return 0;
     if(cluster == 0) 
    1e5c:	a1 14       	cp	r10, r1
    1e5e:	b1 04       	cpc	r11, r1
    1e60:	c1 04       	cpc	r12, r1
    1e62:	d1 04       	cpc	r13, r1
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <findFiles+0x39a>
    1e66:	5a ce       	rjmp	.-844    	; 0x1b1c <findFiles+0x4e>
     {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster"));  return 0;}
    1e68:	81 eb       	ldi	r24, 0xB1	; 177
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    1e70:	00 e0       	ldi	r16, 0x00	; 0
    1e72:	10 e0       	ldi	r17, 0x00	; 0
   }
  return 0;
}
    1e74:	c8 01       	movw	r24, r16
    1e76:	2a 96       	adiw	r28, 0x0a	; 10
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	9f 90       	pop	r9
    1e98:	8f 90       	pop	r8
    1e9a:	7f 90       	pop	r7
    1e9c:	6f 90       	pop	r6
    1e9e:	5f 90       	pop	r5
    1ea0:	4f 90       	pop	r4
    1ea2:	3f 90       	pop	r3
    1ea4:	2f 90       	pop	r2
    1ea6:	08 95       	ret

00001ea8 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1eae:	0e 94 48 08 	call	0x1090	; 0x1090 <convertFileName>
  if(error) return;
    1eb2:	88 23       	and	r24, r24
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	be 01       	movw	r22, r28
    1eba:	0e 94 67 0d 	call	0x1ace	; 0x1ace <findFiles>
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <readAndRetreiveFileContents>:
 * @param fileName    char *   That contains the file name of what you want to read
          dataString  char *   Where the data is put, can store 100 bytes
 * @return unsigned char - number where zero means success
 */
unsigned char readAndRetreiveFileContents (unsigned char *fileName, unsigned char *dataString)
{
    1ec4:	2f 92       	push	r2
    1ec6:	3f 92       	push	r3
    1ec8:	4f 92       	push	r4
    1eca:	5f 92       	push	r5
    1ecc:	6f 92       	push	r6
    1ece:	7f 92       	push	r7
    1ed0:	8f 92       	push	r8
    1ed2:	9f 92       	push	r9
    1ed4:	af 92       	push	r10
    1ed6:	bf 92       	push	r11
    1ed8:	cf 92       	push	r12
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	28 97       	sbiw	r28, 0x08	; 8
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	8c 01       	movw	r16, r24
    1efa:	7e 83       	std	Y+6, r23	; 0x06
    1efc:	6d 83       	std	Y+5, r22	; 0x05
  unsigned int k;//,iCntForSingleAudioWrite;
  unsigned char j, error;
  unsigned int iReadByteCnt;
  bool bEndOfFile=false;

  PRINTF("In readAndRetrieve, fileName:");
    1efe:	83 ea       	ldi	r24, 0xA3	; 163
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  PRINTF(fileName);
    1f06:	c8 01       	movw	r24, r16
    1f08:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    1f0c:	8d e0       	ldi	r24, 0x0D	; 13
    1f0e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    1f12:	8a e0       	ldi	r24, 0x0A	; 10
    1f14:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>

  error = convertFileName (fileName); //convert fileName into FAT format
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 48 08 	call	0x1090	; 0x1090 <convertFileName>
  if(error) return 1;
    1f1e:	88 23       	and	r24, r24
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <readAndRetreiveFileContents+0x62>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	a8 c0       	rjmp	.+336    	; 0x2076 <readAndRetreiveFileContents+0x1b2>

  dir = findFiles (GET_FILE, fileName); //get the file location
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	b8 01       	movw	r22, r16
    1f2a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <findFiles>
    1f2e:	9c 01       	movw	r18, r24
  if(dir == 0) 
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	11 f4       	brne	.+4      	; 0x1f38 <readAndRetreiveFileContents+0x74>
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	9f c0       	rjmp	.+318    	; 0x2076 <readAndRetreiveFileContents+0x1b2>
    return (2);

//  if(flag == VERIFY) return (1);  //specified file name is already existing

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1f38:	dc 01       	movw	r26, r24
    1f3a:	54 96       	adiw	r26, 0x14	; 20
    1f3c:	8d 91       	ld	r24, X+
    1f3e:	9c 91       	ld	r25, X
    1f40:	55 97       	sbiw	r26, 0x15	; 21
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	6c 01       	movw	r12, r24
    1f48:	bb 24       	eor	r11, r11
    1f4a:	aa 24       	eor	r10, r10
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f50:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f52:	a0 e0       	ldi	r26, 0x00	; 0
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	a8 2a       	or	r10, r24
    1f58:	b9 2a       	or	r11, r25
    1f5a:	ca 2a       	or	r12, r26
    1f5c:	db 2a       	or	r13, r27

  fileSize = dir->fileSize;
    1f5e:	d9 01       	movw	r26, r18
    1f60:	5c 96       	adiw	r26, 0x1c	; 28
    1f62:	2d 90       	ld	r2, X+
    1f64:	3d 90       	ld	r3, X+
    1f66:	4d 90       	ld	r4, X+
    1f68:	5c 90       	ld	r5, X
    1f6a:	5f 97       	sbiw	r26, 0x1f	; 31
    1f6c:	29 82       	std	Y+1, r2	; 0x01
    1f6e:	3a 82       	std	Y+2, r3	; 0x02
    1f70:	4b 82       	std	Y+3, r4	; 0x03
    1f72:	5c 82       	std	Y+4, r5	; 0x04
    1f74:	22 24       	eor	r2, r2
    1f76:	33 24       	eor	r3, r3
    1f78:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1f7a:	20 91 c0 06 	lds	r18, 0x06C0
    1f7e:	30 91 c1 06 	lds	r19, 0x06C1
    1f82:	e0 90 86 04 	lds	r14, 0x0486
    1f86:	f0 90 87 04 	lds	r15, 0x0487
    1f8a:	00 91 88 04 	lds	r16, 0x0488
    1f8e:	10 91 89 04 	lds	r17, 0x0489
    1f92:	c6 01       	movw	r24, r12
    1f94:	b5 01       	movw	r22, r10
    1f96:	62 50       	subi	r22, 0x02	; 2
    1f98:	70 40       	sbci	r23, 0x00	; 0
    1f9a:	80 40       	sbci	r24, 0x00	; 0
    1f9c:	90 40       	sbci	r25, 0x00	; 0
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    1fa6:	3b 01       	movw	r6, r22
    1fa8:	4c 01       	movw	r8, r24
    1faa:	6e 0c       	add	r6, r14
    1fac:	7f 1c       	adc	r7, r15
    1fae:	80 1e       	adc	r8, r16
    1fb0:	91 1e       	adc	r9, r17
    1fb2:	10 e0       	ldi	r17, 0x00	; 0
    1fb4:	40 c0       	rjmp	.+128    	; 0x2036 <readAndRetreiveFileContents+0x172>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    1fb6:	c4 01       	movw	r24, r8
    1fb8:	b3 01       	movw	r22, r6
    1fba:	61 0f       	add	r22, r17
    1fbc:	71 1d       	adc	r23, r1
    1fbe:	81 1d       	adc	r24, r1
    1fc0:	91 1d       	adc	r25, r1
    1fc2:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    1fc6:	a2 01       	movw	r20, r4
    1fc8:	91 01       	movw	r18, r2
    1fca:	60 e0       	ldi	r22, 0x00	; 0


      for(k=0; k<512; k++)
    1fcc:	d2 01       	movw	r26, r4
    1fce:	c1 01       	movw	r24, r2
    1fd0:	80 50       	subi	r24, 0x00	; 0
    1fd2:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd4:	af 4f       	sbci	r26, 0xFF	; 255
    1fd6:	bf 4f       	sbci	r27, 0xFF	; 255
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    1fd8:	29 80       	ldd	r2, Y+1	; 0x01
    1fda:	3a 80       	ldd	r3, Y+2	; 0x02
    1fdc:	4b 80       	ldd	r4, Y+3	; 0x03
    1fde:	5c 80       	ldd	r5, Y+4	; 0x04
    1fe0:	22 15       	cp	r18, r2
    1fe2:	33 05       	cpc	r19, r3
    1fe4:	44 05       	cpc	r20, r4
    1fe6:	55 05       	cpc	r21, r5
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <readAndRetreiveFileContents+0x128>
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	2f 5f       	subi	r18, 0xFF	; 255
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);


      for(k=0; k<512; k++)
    1ff4:	28 17       	cp	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	4a 07       	cpc	r20, r26
    1ffa:	5b 07       	cpc	r21, r27
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <readAndRetreiveFileContents+0x114>
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <readAndRetreiveFileContents+0x15a>
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
        
      }
      while(iReadByteCnt<k)
      {
        *dataString++=buffer[iReadByteCnt];
    2000:	ef 81       	ldd	r30, Y+7	; 0x07
    2002:	f8 85       	ldd	r31, Y+8	; 0x08
    2004:	e1 54       	subi	r30, 0x41	; 65
    2006:	fb 4f       	sbci	r31, 0xFB	; 251
    2008:	80 81       	ld	r24, Z
    200a:	ad 81       	ldd	r26, Y+5	; 0x05
    200c:	be 81       	ldd	r27, Y+6	; 0x06
    200e:	8d 93       	st	X+, r24
    2010:	be 83       	std	Y+6, r27	; 0x06
    2012:	ad 83       	std	Y+5, r26	; 0x05
        if(iReadByteCnt++==k)return 0;  
    2014:	ef 81       	ldd	r30, Y+7	; 0x07
    2016:	f8 85       	ldd	r31, Y+8	; 0x08
    2018:	31 96       	adiw	r30, 0x01	; 1
    201a:	f8 87       	std	Y+8, r31	; 0x08
    201c:	ef 83       	std	Y+7, r30	; 0x07
      for(k=0; k<512; k++)
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
        
      }
      while(iReadByteCnt<k)
    201e:	8f 81       	ldd	r24, Y+7	; 0x07
    2020:	98 85       	ldd	r25, Y+8	; 0x08
    2022:	80 50       	subi	r24, 0x00	; 0
    2024:	92 40       	sbci	r25, 0x02	; 2
    2026:	60 f3       	brcs	.-40     	; 0x2000 <readAndRetreiveFileContents+0x13c>
      {
        *dataString++=buffer[iReadByteCnt];
        if(iReadByteCnt++==k)return 0;  
      }
      if(bEndOfFile)
    2028:	66 23       	and	r22, r22
    202a:	11 f0       	breq	.+4      	; 0x2030 <readAndRetreiveFileContents+0x16c>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	23 c0       	rjmp	.+70     	; 0x2076 <readAndRetreiveFileContents+0x1b2>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    2030:	1f 5f       	subi	r17, 0xFF	; 255
    2032:	19 01       	movw	r2, r18
    2034:	2a 01       	movw	r4, r20
    2036:	20 91 c0 06 	lds	r18, 0x06C0
    203a:	30 91 c1 06 	lds	r19, 0x06C1
    203e:	81 2f       	mov	r24, r17
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	82 17       	cp	r24, r18
    2044:	93 07       	cpc	r25, r19
    2046:	08 f4       	brcc	.+2      	; 0x204a <readAndRetreiveFileContents+0x186>
    2048:	b6 cf       	rjmp	.-148    	; 0x1fb6 <readAndRetreiveFileContents+0xf2>
      if(bEndOfFile)
      {
        return 0;
      }
    }
    cluster = getSetNextCluster (cluster, GET, 0);
    204a:	c6 01       	movw	r24, r12
    204c:	b5 01       	movw	r22, r10
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	00 e0       	ldi	r16, 0x00	; 0
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    205c:	5b 01       	movw	r10, r22
    205e:	6c 01       	movw	r12, r24
    if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 3;}
    2060:	61 15       	cp	r22, r1
    2062:	71 05       	cpc	r23, r1
    2064:	81 05       	cpc	r24, r1
    2066:	91 05       	cpc	r25, r1
    2068:	09 f0       	breq	.+2      	; 0x206c <readAndRetreiveFileContents+0x1a8>
    206a:	87 cf       	rjmp	.-242    	; 0x1f7a <readAndRetreiveFileContents+0xb6>
    206c:	8f e7       	ldi	r24, 0x7F	; 127
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    2074:	83 e0       	ldi	r24, 0x03	; 3
  }
  return 4;
}
    2076:	28 96       	adiw	r28, 0x08	; 8
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	9f 90       	pop	r9
    2098:	8f 90       	pop	r8
    209a:	7f 90       	pop	r7
    209c:	6f 90       	pop	r6
    209e:	5f 90       	pop	r5
    20a0:	4f 90       	pop	r4
    20a2:	3f 90       	pop	r3
    20a4:	2f 90       	pop	r2
    20a6:	08 95       	ret

000020a8 <readFile>:
//        1, if file is already existing and flag = VERIFY
//      2, if file name is incompatible
//***************************************************************************

unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    20a8:	2f 92       	push	r2
    20aa:	3f 92       	push	r3
    20ac:	4f 92       	push	r4
    20ae:	5f 92       	push	r5
    20b0:	6f 92       	push	r6
    20b2:	7f 92       	push	r7
    20b4:	8f 92       	push	r8
    20b6:	9f 92       	push	r9
    20b8:	af 92       	push	r10
    20ba:	bf 92       	push	r11
    20bc:	cf 92       	push	r12
    20be:	df 92       	push	r13
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <readFile+0x26>
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <readFile+0x28>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	e8 2e       	mov	r14, r24
    20d6:	8b 01       	movw	r16, r22
  unsigned int k;//,iCntForSingleAudioWrite;
  unsigned char j, error;
  //unsigned int iAudioByteCnt;
  bool bEndOfFile=false;

  error = convertFileName (fileName); //convert fileName into FAT format
    20d8:	cb 01       	movw	r24, r22
    20da:	0e 94 48 08 	call	0x1090	; 0x1090 <convertFileName>
  if(error) return 2;
    20de:	88 23       	and	r24, r24
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <readFile+0x3e>
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	94 c0       	rjmp	.+296    	; 0x220e <readFile+0x166>

  dir = findFiles (GET_FILE, fileName); //get the file location
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	b8 01       	movw	r22, r16
    20ea:	0e 94 67 0d 	call	0x1ace	; 0x1ace <findFiles>
    20ee:	9c 01       	movw	r18, r24
  if(dir == 0) 
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <readFile+0x4e>
    20f4:	8b c0       	rjmp	.+278    	; 0x220c <readFile+0x164>
    return (0);

  if(flag == VERIFY) return (1);  //specified file name is already existing
    20f6:	22 24       	eor	r2, r2
    20f8:	23 94       	inc	r2
    20fa:	e2 14       	cp	r14, r2
    20fc:	11 f4       	brne	.+4      	; 0x2102 <readFile+0x5a>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	86 c0       	rjmp	.+268    	; 0x220e <readFile+0x166>

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2102:	dc 01       	movw	r26, r24
    2104:	54 96       	adiw	r26, 0x14	; 20
    2106:	8d 91       	ld	r24, X+
    2108:	9c 91       	ld	r25, X
    210a:	55 97       	sbiw	r26, 0x15	; 21
    210c:	a0 e0       	ldi	r26, 0x00	; 0
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	6c 01       	movw	r12, r24
    2112:	bb 24       	eor	r11, r11
    2114:	aa 24       	eor	r10, r10
    2116:	f9 01       	movw	r30, r18
    2118:	82 8d       	ldd	r24, Z+26	; 0x1a
    211a:	93 8d       	ldd	r25, Z+27	; 0x1b
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	a8 2a       	or	r10, r24
    2122:	b9 2a       	or	r11, r25
    2124:	ca 2a       	or	r12, r26
    2126:	db 2a       	or	r13, r27

  fileSize = dir->fileSize;
    2128:	d9 01       	movw	r26, r18
    212a:	5c 96       	adiw	r26, 0x1c	; 28
    212c:	2d 90       	ld	r2, X+
    212e:	3d 90       	ld	r3, X+
    2130:	4d 90       	ld	r4, X+
    2132:	5c 90       	ld	r5, X
    2134:	5f 97       	sbiw	r26, 0x1f	; 31
    2136:	29 82       	std	Y+1, r2	; 0x01
    2138:	3a 82       	std	Y+2, r3	; 0x02
    213a:	4b 82       	std	Y+3, r4	; 0x03
    213c:	5c 82       	std	Y+4, r5	; 0x04
    213e:	22 24       	eor	r2, r2
    2140:	33 24       	eor	r3, r3
    2142:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2144:	20 91 c0 06 	lds	r18, 0x06C0
    2148:	30 91 c1 06 	lds	r19, 0x06C1
    214c:	e0 90 86 04 	lds	r14, 0x0486
    2150:	f0 90 87 04 	lds	r15, 0x0487
    2154:	00 91 88 04 	lds	r16, 0x0488
    2158:	10 91 89 04 	lds	r17, 0x0489
    215c:	c6 01       	movw	r24, r12
    215e:	b5 01       	movw	r22, r10
    2160:	62 50       	subi	r22, 0x02	; 2
    2162:	70 40       	sbci	r23, 0x00	; 0
    2164:	80 40       	sbci	r24, 0x00	; 0
    2166:	90 40       	sbci	r25, 0x00	; 0
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    2170:	3b 01       	movw	r6, r22
    2172:	4c 01       	movw	r8, r24
    2174:	6e 0c       	add	r6, r14
    2176:	7f 1c       	adc	r7, r15
    2178:	80 1e       	adc	r8, r16
    217a:	91 1e       	adc	r9, r17
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	28 c0       	rjmp	.+80     	; 0x21d0 <readFile+0x128>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    2180:	c4 01       	movw	r24, r8
    2182:	b3 01       	movw	r22, r6
    2184:	61 0f       	add	r22, r17
    2186:	71 1d       	adc	r23, r1
    2188:	81 1d       	adc	r24, r1
    218a:	91 1d       	adc	r25, r1
    218c:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    2190:	d2 01       	movw	r26, r4
    2192:	c1 01       	movw	r24, r2
    2194:	60 e0       	ldi	r22, 0x00	; 0


      for(k=0; k<512; k++)
    2196:	a2 01       	movw	r20, r4
    2198:	91 01       	movw	r18, r2
    219a:	20 50       	subi	r18, 0x00	; 0
    219c:	3e 4f       	sbci	r19, 0xFE	; 254
    219e:	4f 4f       	sbci	r20, 0xFF	; 255
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    21a2:	29 80       	ldd	r2, Y+1	; 0x01
    21a4:	3a 80       	ldd	r3, Y+2	; 0x02
    21a6:	4b 80       	ldd	r4, Y+3	; 0x03
    21a8:	5c 80       	ldd	r5, Y+4	; 0x04
    21aa:	82 15       	cp	r24, r2
    21ac:	93 05       	cpc	r25, r3
    21ae:	a4 05       	cpc	r26, r4
    21b0:	b5 05       	cpc	r27, r5
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <readFile+0x10e>
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	a1 1d       	adc	r26, r1
    21ba:	b1 1d       	adc	r27, r1
    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);


      for(k=0; k<512; k++)
    21bc:	82 17       	cp	r24, r18
    21be:	93 07       	cpc	r25, r19
    21c0:	a4 07       	cpc	r26, r20
    21c2:	b5 07       	cpc	r27, r21
    21c4:	71 f7       	brne	.-36     	; 0x21a2 <readFile+0xfa>
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
      }
      if(bEndOfFile)
    21c6:	66 23       	and	r22, r22
    21c8:	09 f5       	brne	.+66     	; 0x220c <readFile+0x164>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    21ca:	1f 5f       	subi	r17, 0xFF	; 255
    21cc:	1c 01       	movw	r2, r24
    21ce:	2d 01       	movw	r4, r26
    21d0:	20 91 c0 06 	lds	r18, 0x06C0
    21d4:	30 91 c1 06 	lds	r19, 0x06C1
    21d8:	81 2f       	mov	r24, r17
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	82 17       	cp	r24, r18
    21de:	93 07       	cpc	r25, r19
    21e0:	78 f2       	brcs	.-98     	; 0x2180 <readFile+0xd8>
      if(bEndOfFile)
      {
        return 0;
      }
    }
    cluster = getSetNextCluster (cluster, GET, 0);
    21e2:	c6 01       	movw	r24, r12
    21e4:	b5 01       	movw	r22, r10
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	00 e0       	ldi	r16, 0x00	; 0
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    21f4:	5b 01       	movw	r10, r22
    21f6:	6c 01       	movw	r12, r24
    if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 0;}
    21f8:	61 15       	cp	r22, r1
    21fa:	71 05       	cpc	r23, r1
    21fc:	81 05       	cpc	r24, r1
    21fe:	91 05       	cpc	r25, r1
    2200:	09 f0       	breq	.+2      	; 0x2204 <readFile+0x15c>
    2202:	a0 cf       	rjmp	.-192    	; 0x2144 <readFile+0x9c>
    2204:	88 e9       	ldi	r24, 0x98	; 152
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    220c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 0;
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	df 90       	pop	r13
    2224:	cf 90       	pop	r12
    2226:	bf 90       	pop	r11
    2228:	af 90       	pop	r10
    222a:	9f 90       	pop	r9
    222c:	8f 90       	pop	r8
    222e:	7f 90       	pop	r7
    2230:	6f 90       	pop	r6
    2232:	5f 90       	pop	r5
    2234:	4f 90       	pop	r4
    2236:	3f 90       	pop	r3
    2238:	2f 90       	pop	r2
    223a:	08 95       	ret

0000223c <writeFile>:
//      file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    223c:	2f 92       	push	r2
    223e:	3f 92       	push	r3
    2240:	4f 92       	push	r4
    2242:	5f 92       	push	r5
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	bc 01       	movw	r22, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	0e 94 54 10 	call	0x20a8	; 0x20a8 <readFile>

if(j == 1) 
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	09 f0       	breq	.+2      	; 0x226a <writeFile+0x2e>
    2268:	55 c0       	rjmp	.+170    	; 0x2314 <writeFile+0xd8>
{
  USART_transmitStringToPCFromFlash(PSTR("  File already existing, appending data..")); 
    226a:	8a e2       	ldi	r24, 0x2A	; 42
    226c:	92 e0       	ldi	r25, 0x02	; 2
    226e:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
  appendFile = 1;
  cluster = appendStartCluster;
    2272:	60 90 e3 06 	lds	r6, 0x06E3
    2276:	70 90 e4 06 	lds	r7, 0x06E4
    227a:	80 90 e5 06 	lds	r8, 0x06E5
    227e:	90 90 e6 06 	lds	r9, 0x06E6
    2282:	aa 24       	eor	r10, r10
    2284:	bb 24       	eor	r11, r11
    2286:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    2288:	c4 01       	movw	r24, r8
    228a:	b3 01       	movw	r22, r6
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	00 e0       	ldi	r16, 0x00	; 0
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    if(nextCluster == EOF) break;
    229a:	6f 3f       	cpi	r22, 0xFF	; 255
    229c:	2f ef       	ldi	r18, 0xFF	; 255
    229e:	72 07       	cpc	r23, r18
    22a0:	2f ef       	ldi	r18, 0xFF	; 255
    22a2:	82 07       	cpc	r24, r18
    22a4:	2f e0       	ldi	r18, 0x0F	; 15
    22a6:	92 07       	cpc	r25, r18
    22a8:	41 f0       	breq	.+16     	; 0x22ba <writeFile+0x7e>
  cluster = nextCluster;
  clusterCount++;
    22aa:	08 94       	sec
    22ac:	a1 1c       	adc	r10, r1
    22ae:	b1 1c       	adc	r11, r1
    22b0:	c1 1c       	adc	r12, r1
    22b2:	d1 1c       	adc	r13, r1
    22b4:	3b 01       	movw	r6, r22
    22b6:	4c 01       	movw	r8, r24
    22b8:	e7 cf       	rjmp	.-50     	; 0x2288 <writeFile+0x4c>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    22ba:	20 91 c0 06 	lds	r18, 0x06C0
    22be:	30 91 c1 06 	lds	r19, 0x06C1
    22c2:	60 91 8e 04 	lds	r22, 0x048E
    22c6:	70 91 8f 04 	lds	r23, 0x048F
    22ca:	e0 90 8e 04 	lds	r14, 0x048E
    22ce:	f0 90 8f 04 	lds	r15, 0x048F
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    22de:	a6 01       	movw	r20, r12
    22e0:	95 01       	movw	r18, r10
    22e2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	60 91 8a 04 	lds	r22, 0x048A
    22ee:	70 91 8b 04 	lds	r23, 0x048B
    22f2:	80 91 8c 04 	lds	r24, 0x048C
    22f6:	90 91 8d 04 	lds	r25, 0x048D
    22fa:	62 1b       	sub	r22, r18
    22fc:	73 0b       	sbc	r23, r19
    22fe:	84 0b       	sbc	r24, r20
    2300:	95 0b       	sbc	r25, r21
    2302:	00 e0       	ldi	r16, 0x00	; 0
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	a8 01       	movw	r20, r16
    2308:	97 01       	movw	r18, r14
    230a:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    230e:	b2 2e       	mov	r11, r18
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	3e c0       	rjmp	.+124    	; 0x2390 <writeFile+0x154>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    2314:	82 30       	cpi	r24, 0x02	; 2
    2316:	09 f4       	brne	.+2      	; 0x231a <writeFile+0xde>
    2318:	08 c1       	rjmp	.+528    	; 0x252a <writeFile+0x2ee>
else
{
//  TX_NEWLINE_PC;
//  USART_transmitStringToPCFromFlash(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	0e 94 86 09 	call	0x130c	; 0x130c <getSetFreeCluster>
    232a:	9b 01       	movw	r18, r22
    232c:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    232e:	80 91 90 04 	lds	r24, 0x0490
    2332:	90 91 91 04 	lds	r25, 0x0491
    2336:	a0 91 92 04 	lds	r26, 0x0492
    233a:	b0 91 93 04 	lds	r27, 0x0493
    233e:	82 17       	cp	r24, r18
    2340:	93 07       	cpc	r25, r19
    2342:	a4 07       	cpc	r26, r20
    2344:	b5 07       	cpc	r27, r21
    2346:	40 f4       	brcc	.+16     	; 0x2358 <writeFile+0x11c>
     cluster = rootCluster;
    2348:	20 91 b4 04 	lds	r18, 0x04B4
    234c:	30 91 b5 04 	lds	r19, 0x04B5
    2350:	40 91 b6 04 	lds	r20, 0x04B6
    2354:	50 91 b7 04 	lds	r21, 0x04B7

  cluster = searchNextFreeCluster(cluster);
    2358:	ca 01       	movw	r24, r20
    235a:	b9 01       	movw	r22, r18
    235c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <searchNextFreeCluster>
    2360:	3b 01       	movw	r6, r22
    2362:	4c 01       	movw	r8, r24
   if(cluster == 0)
    2364:	61 15       	cp	r22, r1
    2366:	71 05       	cpc	r23, r1
    2368:	81 05       	cpc	r24, r1
    236a:	91 05       	cpc	r25, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <writeFile+0x134>
    236e:	dd c0       	rjmp	.+442    	; 0x252a <writeFile+0x2ee>
   {
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
    return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0f ef       	ldi	r16, 0xFF	; 255
    2374:	1f ef       	ldi	r17, 0xFF	; 255
    2376:	2f ef       	ldi	r18, 0xFF	; 255
    2378:	3f e0       	ldi	r19, 0x0F	; 15
    237a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
    237e:	10 92 8a 04 	sts	0x048A, r1
    2382:	10 92 8b 04 	sts	0x048B, r1
    2386:	10 92 8c 04 	sts	0x048C, r1
    238a:	10 92 8d 04 	sts	0x048D, r1
    238e:	20 e0       	ldi	r18, 0x00	; 0
while(1)
{
   if(start)
   {
      start = 0;
    startBlock = getFirstSector (cluster) + sector;
    2390:	2b 2c       	mov	r2, r11
    2392:	33 24       	eor	r3, r3
    2394:	44 24       	eor	r4, r4
    2396:	55 24       	eor	r5, r5
    2398:	c4 01       	movw	r24, r8
    239a:	b3 01       	movw	r22, r6
    239c:	62 50       	subi	r22, 0x02	; 2
    239e:	70 40       	sbci	r23, 0x00	; 0
    23a0:	80 40       	sbci	r24, 0x00	; 0
    23a2:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    23a4:	22 23       	and	r18, r18
    23a6:	e1 f1       	breq	.+120    	; 0x2420 <writeFile+0x1e4>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    23a8:	20 91 c0 06 	lds	r18, 0x06C0
    23ac:	30 91 c1 06 	lds	r19, 0x06C1
    23b0:	e0 90 86 04 	lds	r14, 0x0486
    23b4:	f0 90 87 04 	lds	r15, 0x0487
    23b8:	00 91 88 04 	lds	r16, 0x0488
    23bc:	10 91 89 04 	lds	r17, 0x0489
while(1)
{
   if(start)
   {
      start = 0;
    startBlock = getFirstSector (cluster) + sector;
    23c0:	e2 0c       	add	r14, r2
    23c2:	f3 1c       	adc	r15, r3
    23c4:	04 1d       	adc	r16, r4
    23c6:	15 1d       	adc	r17, r5
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    23d0:	e6 0e       	add	r14, r22
    23d2:	f7 1e       	adc	r15, r23
    23d4:	08 1f       	adc	r16, r24
    23d6:	19 1f       	adc	r17, r25
    23d8:	e0 92 b9 04 	sts	0x04B9, r14
    23dc:	f0 92 ba 04 	sts	0x04BA, r15
    23e0:	00 93 bb 04 	sts	0x04BB, r16
    23e4:	10 93 bc 04 	sts	0x04BC, r17
    SD_readSingleBlock (startBlock);
    23e8:	60 91 b9 04 	lds	r22, 0x04B9
    23ec:	70 91 ba 04 	lds	r23, 0x04BA
    23f0:	80 91 bb 04 	lds	r24, 0x04BB
    23f4:	90 91 bc 04 	lds	r25, 0x04BC
    23f8:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    i = fileSize % bytesPerSector;
    23fc:	20 91 8e 04 	lds	r18, 0x048E
    2400:	30 91 8f 04 	lds	r19, 0x048F
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 91 8a 04 	lds	r22, 0x048A
    240c:	70 91 8b 04 	lds	r23, 0x048B
    2410:	80 91 8c 04 	lds	r24, 0x048C
    2414:	90 91 8d 04 	lds	r25, 0x048D
    2418:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodsi4>
    241c:	1b 2d       	mov	r17, r11
    241e:	1f c0       	rjmp	.+62     	; 0x245e <writeFile+0x222>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2420:	20 91 c0 06 	lds	r18, 0x06C0
    2424:	30 91 c1 06 	lds	r19, 0x06C1
    2428:	e0 90 86 04 	lds	r14, 0x0486
    242c:	f0 90 87 04 	lds	r15, 0x0487
    2430:	00 91 88 04 	lds	r16, 0x0488
    2434:	10 91 89 04 	lds	r17, 0x0489
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    2440:	e6 0e       	add	r14, r22
    2442:	f7 1e       	adc	r15, r23
    2444:	08 1f       	adc	r16, r24
    2446:	19 1f       	adc	r17, r25
    i = fileSize % bytesPerSector;
    j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    2448:	e0 92 b9 04 	sts	0x04B9, r14
    244c:	f0 92 ba 04 	sts	0x04BA, r15
    2450:	00 93 bb 04 	sts	0x04BB, r16
    2454:	10 93 bc 04 	sts	0x04BC, r17
    2458:	10 e0       	ldi	r17, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	20 91 8a 04 	lds	r18, 0x048A
    2462:	30 91 8b 04 	lds	r19, 0x048B
    2466:	40 91 8c 04 	lds	r20, 0x048C
    246a:	50 91 8d 04 	lds	r21, 0x048D
     fileSize--;
     } 
     continue;     
   }
//   USART_transmitByteToPC(data);
     buffer[i++] = data;
    246e:	fb 01       	movw	r30, r22
    2470:	e1 54       	subi	r30, 0x41	; 65
    2472:	fb 4f       	sbci	r31, 0xFB	; 251
    2474:	10 82       	st	Z, r1
    2476:	6f 5f       	subi	r22, 0xFF	; 255
    2478:	7f 4f       	sbci	r23, 0xFF	; 255
    247a:	2f 5f       	subi	r18, 0xFF	; 255
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	4f 4f       	sbci	r20, 0xFF	; 255
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
       fileSize++;
      }
     }
   
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	60 30       	cpi	r22, 0x00	; 0
    2486:	78 07       	cpc	r23, r24
    2488:	90 f3       	brcs	.-28     	; 0x246e <writeFile+0x232>
    248a:	20 93 8a 04 	sts	0x048A, r18
    248e:	30 93 8b 04 	sts	0x048B, r19
    2492:	40 93 8c 04 	sts	0x048C, r20
    2496:	50 93 8d 04 	sts	0x048D, r21
   {        //infinite loop in case it happens to be greater than 512 due to some data corruption
     i=0;
     error = SD_writeSingleBlock (startBlock);
    249a:	60 91 b9 04 	lds	r22, 0x04B9
    249e:	70 91 ba 04 	lds	r23, 0x04BA
    24a2:	80 91 bb 04 	lds	r24, 0x04BB
    24a6:	90 91 bc 04 	lds	r25, 0x04BC
    24aa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
       j++;
    24ae:	1f 5f       	subi	r17, 0xFF	; 255
     if(j == sectorPerCluster) {j = 0; break;}
    24b0:	20 91 c0 06 	lds	r18, 0x06C0
    24b4:	30 91 c1 06 	lds	r19, 0x06C1
    24b8:	81 2f       	mov	r24, r17
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	82 17       	cp	r24, r18
    24be:	93 07       	cpc	r25, r19
    24c0:	61 f4       	brne	.+24     	; 0x24da <writeFile+0x29e>
      break;
   } 
    
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    24c2:	c4 01       	movw	r24, r8
    24c4:	b3 01       	movw	r22, r6
    24c6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <searchNextFreeCluster>
    24ca:	6b 01       	movw	r12, r22
    24cc:	7c 01       	movw	r14, r24

   if(cluster == 0)
    24ce:	61 15       	cp	r22, r1
    24d0:	71 05       	cpc	r23, r1
    24d2:	81 05       	cpc	r24, r1
    24d4:	91 05       	cpc	r25, r1
    24d6:	a9 f4       	brne	.+42     	; 0x2502 <writeFile+0x2c6>
    24d8:	28 c0       	rjmp	.+80     	; 0x252a <writeFile+0x2ee>
   {        //infinite loop in case it happens to be greater than 512 due to some data corruption
     i=0;
     error = SD_writeSingleBlock (startBlock);
       j++;
     if(j == sectorPerCluster) {j = 0; break;}
     startBlock++; 
    24da:	80 91 b9 04 	lds	r24, 0x04B9
    24de:	90 91 ba 04 	lds	r25, 0x04BA
    24e2:	a0 91 bb 04 	lds	r26, 0x04BB
    24e6:	b0 91 bc 04 	lds	r27, 0x04BC
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	a1 1d       	adc	r26, r1
    24ee:	b1 1d       	adc	r27, r1
    24f0:	80 93 b9 04 	sts	0x04B9, r24
    24f4:	90 93 ba 04 	sts	0x04BA, r25
    24f8:	a0 93 bb 04 	sts	0x04BB, r26
    24fc:	b0 93 bc 04 	sts	0x04BC, r27
    2500:	ac cf       	rjmp	.-168    	; 0x245a <writeFile+0x21e>
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
    return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    2502:	c4 01       	movw	r24, r8
    2504:	b3 01       	movw	r22, r6
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	97 01       	movw	r18, r14
    250a:	86 01       	movw	r16, r12
    250c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2510:	c7 01       	movw	r24, r14
    2512:	b6 01       	movw	r22, r12
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0f ef       	ldi	r16, 0xFF	; 255
    2518:	1f ef       	ldi	r17, 0xFF	; 255
    251a:	2f ef       	ldi	r18, 0xFF	; 255
    251c:	3f e0       	ldi	r19, 0x0F	; 15
    251e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	36 01       	movw	r6, r12
    2526:	47 01       	movw	r8, r14
    2528:	37 cf       	rjmp	.-402    	; 0x2398 <writeFile+0x15c>
   
   prevCluster = cluster;
 }
 
 return;
}
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	df 90       	pop	r13
    2534:	cf 90       	pop	r12
    2536:	bf 90       	pop	r11
    2538:	af 90       	pop	r10
    253a:	9f 90       	pop	r9
    253c:	8f 90       	pop	r8
    253e:	7f 90       	pop	r7
    2540:	6f 90       	pop	r6
    2542:	5f 90       	pop	r5
    2544:	4f 90       	pop	r4
    2546:	3f 90       	pop	r3
    2548:	2f 90       	pop	r2
    254a:	08 95       	ret

0000254c <ReplaceTheContentOfThisFileWith>:
/*
Modified write file function with replacing all the text with new text given
*/

int ReplaceTheContentOfThisFileWith (unsigned char *fileName, unsigned char *fileContent)
{
    254c:	6f 92       	push	r6
    254e:	7f 92       	push	r7
    2550:	8f 92       	push	r8
    2552:	9f 92       	push	r9
    2554:	af 92       	push	r10
    2556:	bf 92       	push	r11
    2558:	cf 92       	push	r12
    255a:	df 92       	push	r13
    255c:	ef 92       	push	r14
    255e:	ff 92       	push	r15
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	9c 01       	movw	r18, r24
    256a:	eb 01       	movw	r28, r22
  struct dir_Structure *dir;
  unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

  //j = readFile (VERIFY, fileName);

  if(readFile (VERIFY, fileName) == 1) 
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	b9 01       	movw	r22, r18
    2570:	0e 94 54 10 	call	0x20a8	; 0x20a8 <readFile>
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	19 f0       	breq	.+6      	; 0x257e <ReplaceTheContentOfThisFileWith+0x32>
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	cf c0       	rjmp	.+414    	; 0x271c <ReplaceTheContentOfThisFileWith+0x1d0>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    257e:	a0 90 e3 06 	lds	r10, 0x06E3
    2582:	b0 90 e4 06 	lds	r11, 0x06E4
    2586:	c0 90 e5 06 	lds	r12, 0x06E5
    258a:	d0 90 e6 06 	lds	r13, 0x06E6
    258e:	8e ef       	ldi	r24, 0xFE	; 254
    2590:	9f ef       	ldi	r25, 0xFF	; 255
    2592:	af ef       	ldi	r26, 0xFF	; 255
    2594:	bf ef       	ldi	r27, 0xFF	; 255
    2596:	a8 0e       	add	r10, r24
    2598:	b9 1e       	adc	r11, r25
    259a:	ca 1e       	adc	r12, r26
    259c:	db 1e       	adc	r13, r27
    259e:	60 91 c0 06 	lds	r22, 0x06C0
    25a2:	70 91 c1 06 	lds	r23, 0x06C1
    25a6:	e0 90 86 04 	lds	r14, 0x0486
    25aa:	f0 90 87 04 	lds	r15, 0x0487
    25ae:	00 91 88 04 	lds	r16, 0x0488
    25b2:	10 91 89 04 	lds	r17, 0x0489
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a6 01       	movw	r20, r12
    25bc:	95 01       	movw	r18, r10
    25be:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    25c2:	3b 01       	movw	r6, r22
    25c4:	4c 01       	movw	r8, r24
    25c6:	6e 0c       	add	r6, r14
    25c8:	7f 1c       	adc	r7, r15
    25ca:	80 1e       	adc	r8, r16
    25cc:	91 1e       	adc	r9, r17
    //TX_NEWLINE_PC;
    appendFile = 1;
    cluster = appendStartCluster;
    clusterCount=0;
    firstSector = getFirstSector (cluster);
    startBlock = getFirstSector (cluster);
    25ce:	60 91 c0 06 	lds	r22, 0x06C0
    25d2:	70 91 c1 06 	lds	r23, 0x06C1
    25d6:	e0 90 86 04 	lds	r14, 0x0486
    25da:	f0 90 87 04 	lds	r15, 0x0487
    25de:	00 91 88 04 	lds	r16, 0x0488
    25e2:	10 91 89 04 	lds	r17, 0x0489
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    25ee:	e6 0e       	add	r14, r22
    25f0:	f7 1e       	adc	r15, r23
    25f2:	08 1f       	adc	r16, r24
    25f4:	19 1f       	adc	r17, r25
    25f6:	e0 92 b9 04 	sts	0x04B9, r14
    25fa:	f0 92 ba 04 	sts	0x04BA, r15
    25fe:	00 93 bb 04 	sts	0x04BB, r16
    2602:	10 93 bc 04 	sts	0x04BC, r17
    2606:	10 e0       	ldi	r17, 0x00	; 0
    2608:	34 c0       	rjmp	.+104    	; 0x2672 <ReplaceTheContentOfThisFileWith+0x126>
    i=0;
    j=0;
    while(*fileContent != '$')
    {      
      buffer[i++]=*fileContent;
    260a:	fc 01       	movw	r30, r24
    260c:	e1 54       	subi	r30, 0x41	; 65
    260e:	fb 4f       	sbci	r31, 0xFB	; 251
    2610:	20 83       	st	Z, r18
    2612:	01 96       	adiw	r24, 0x01	; 1
      fileContent++;
    2614:	21 96       	adiw	r28, 0x01	; 1
      if(i >= 512)
    2616:	a2 e0       	ldi	r26, 0x02	; 2
    2618:	80 30       	cpi	r24, 0x00	; 0
    261a:	9a 07       	cpc	r25, r26
    261c:	60 f1       	brcs	.+88     	; 0x2676 <ReplaceTheContentOfThisFileWith+0x12a>
      {        
        i=0;
        error = SD_writeSingleBlock (startBlock);
    261e:	60 91 b9 04 	lds	r22, 0x04B9
    2622:	70 91 ba 04 	lds	r23, 0x04BA
    2626:	80 91 bb 04 	lds	r24, 0x04BB
    262a:	90 91 bc 04 	lds	r25, 0x04BC
    262e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
        j++;
    2632:	1f 5f       	subi	r17, 0xFF	; 255
        if(j == sectorPerCluster) {j = 0; break;}
    2634:	20 91 c0 06 	lds	r18, 0x06C0
    2638:	30 91 c1 06 	lds	r19, 0x06C1
    263c:	81 2f       	mov	r24, r17
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	82 17       	cp	r24, r18
    2642:	93 07       	cpc	r25, r19
    2644:	19 f4       	brne	.+6      	; 0x264c <ReplaceTheContentOfThisFileWith+0x100>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	18 c0       	rjmp	.+48     	; 0x267c <ReplaceTheContentOfThisFileWith+0x130>
        startBlock++; 
    264c:	80 91 b9 04 	lds	r24, 0x04B9
    2650:	90 91 ba 04 	lds	r25, 0x04BA
    2654:	a0 91 bb 04 	lds	r26, 0x04BB
    2658:	b0 91 bc 04 	lds	r27, 0x04BC
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	a1 1d       	adc	r26, r1
    2660:	b1 1d       	adc	r27, r1
    2662:	80 93 b9 04 	sts	0x04B9, r24
    2666:	90 93 ba 04 	sts	0x04BA, r25
    266a:	a0 93 bb 04 	sts	0x04BB, r26
    266e:	b0 93 bc 04 	sts	0x04BC, r27
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    clusterCount=0;
    firstSector = getFirstSector (cluster);
    startBlock = getFirstSector (cluster);
    i=0;
    j=0;
    while(*fileContent != '$')
    2676:	28 81       	ld	r18, Y
    2678:	24 32       	cpi	r18, 0x24	; 36
    267a:	39 f6       	brne	.-114    	; 0x260a <ReplaceTheContentOfThisFileWith+0xbe>
        if(j == sectorPerCluster) {j = 0; break;}
        startBlock++; 
      }
    }
    //fileContent--;
    if(*fileContent=='$')
    267c:	68 81       	ld	r22, Y
    267e:	64 32       	cpi	r22, 0x24	; 36
    2680:	09 f5       	brne	.+66     	; 0x26c4 <ReplaceTheContentOfThisFileWith+0x178>
    {
      buffer[i++]='$';
    2682:	fc 01       	movw	r30, r24
    2684:	e1 54       	subi	r30, 0x41	; 65
    2686:	fb 4f       	sbci	r31, 0xFB	; 251
    2688:	60 83       	st	Z, r22
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <ReplaceTheContentOfThisFileWith+0x148>
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    268c:	fc 01       	movw	r30, r24
    268e:	e1 54       	subi	r30, 0x41	; 65
    2690:	fb 4f       	sbci	r31, 0xFB	; 251
    2692:	10 82       	st	Z, r1
    }
    //fileContent--;
    if(*fileContent=='$')
    {
      buffer[i++]='$';
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	b2 e0       	ldi	r27, 0x02	; 2
    2698:	80 30       	cpi	r24, 0x00	; 0
    269a:	9b 07       	cpc	r25, r27
    269c:	b8 f3       	brcs	.-18     	; 0x268c <ReplaceTheContentOfThisFileWith+0x140>
        buffer[i]= 0x00;
      error = SD_writeSingleBlock (startBlock);
    269e:	60 91 b9 04 	lds	r22, 0x04B9
    26a2:	70 91 ba 04 	lds	r23, 0x04BA
    26a6:	80 91 bb 04 	lds	r24, 0x04BB
    26aa:	90 91 bc 04 	lds	r25, 0x04BC
    26ae:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
    26b2:	88 ee       	ldi	r24, 0xE8	; 232
    26b4:	93 e0       	ldi	r25, 0x03	; 3
    26b6:	28 ec       	ldi	r18, 0xC8	; 200
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	f9 01       	movw	r30, r18
    26bc:	31 97       	sbiw	r30, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <ReplaceTheContentOfThisFileWith+0x170>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	d9 f7       	brne	.-10     	; 0x26ba <ReplaceTheContentOfThisFileWith+0x16e>
      _delay_ms(100);
      //USART_transmitStringToPCFromFlash(PSTR("Successfully replace the file content")); 
      //TX_NEWLINE_PC;
    }
    SD_readSingleBlock (firstSector);    
    26c4:	c4 01       	movw	r24, r8
    26c6:	b3 01       	movw	r22, r6
    26c8:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    26cc:	88 ee       	ldi	r24, 0xE8	; 232
    26ce:	93 e0       	ldi	r25, 0x03	; 3
    26d0:	28 ec       	ldi	r18, 0xC8	; 200
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	f9 01       	movw	r30, r18
    26d6:	31 97       	sbiw	r30, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <ReplaceTheContentOfThisFileWith+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	d9 f7       	brne	.-10     	; 0x26d4 <ReplaceTheContentOfThisFileWith+0x188>
    _delay_ms(100);
    dir = (struct dir_Structure *) &buffer[0]; 
    //extraMemory = fileSize - dir->fileSize;
    dir->fileSize = fileSize;
    26de:	80 91 8a 04 	lds	r24, 0x048A
    26e2:	90 91 8b 04 	lds	r25, 0x048B
    26e6:	a0 91 8c 04 	lds	r26, 0x048C
    26ea:	b0 91 8d 04 	lds	r27, 0x048D
    26ee:	80 93 db 04 	sts	0x04DB, r24
    26f2:	90 93 dc 04 	sts	0x04DC, r25
    26f6:	a0 93 dd 04 	sts	0x04DD, r26
    26fa:	b0 93 de 04 	sts	0x04DE, r27
    SD_writeSingleBlock (firstSector);
    26fe:	c4 01       	movw	r24, r8
    2700:	b3 01       	movw	r22, r6
    2702:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SD_writeSingleBlock>
    2706:	88 ee       	ldi	r24, 0xE8	; 232
    2708:	93 e0       	ldi	r25, 0x03	; 3
    270a:	28 ec       	ldi	r18, 0xC8	; 200
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	f9 01       	movw	r30, r18
    2710:	31 97       	sbiw	r30, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <ReplaceTheContentOfThisFileWith+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	d9 f7       	brne	.-10     	; 0x270e <ReplaceTheContentOfThisFileWith+0x1c2>
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    return 1;
    //USART_transmitStringToPCFromFlash(PSTR("SABT-ERR001")); 
    //TX_NEWLINE_PC;
  }
  return 2;
}
    271c:	c9 01       	movw	r24, r18
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	9f 90       	pop	r9
    2734:	8f 90       	pop	r8
    2736:	7f 90       	pop	r7
    2738:	6f 90       	pop	r6
    273a:	08 95       	ret

0000273c <PlayMP3file>:
2. Stop playing command issued from the controller

*/

unsigned char PlayMP3file (unsigned char *fileName)
{
    273c:	2f 92       	push	r2
    273e:	3f 92       	push	r3
    2740:	4f 92       	push	r4
    2742:	5f 92       	push	r5
    2744:	6f 92       	push	r6
    2746:	7f 92       	push	r7
    2748:	8f 92       	push	r8
    274a:	9f 92       	push	r9
    274c:	af 92       	push	r10
    274e:	bf 92       	push	r11
    2750:	cf 92       	push	r12
    2752:	df 92       	push	r13
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	2a 97       	sbiw	r28, 0x0a	; 10
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	8c 01       	movw	r16, r24
  unsigned int k,iCntForSingleAudioWrite;
  unsigned char j, error;
  unsigned int iAudioByteCnt;
  bool bEndOfFile=false;

  UI_MP3_file_Pending=false;
    2772:	10 92 73 04 	sts	0x0473, r1

  error = convertFileName (fileName); //convert fileName into FAT format
    2776:	0e 94 48 08 	call	0x1090	; 0x1090 <convertFileName>
  if(error) return 2;
    277a:	88 23       	and	r24, r24
    277c:	11 f0       	breq	.+4      	; 0x2782 <PlayMP3file+0x46>
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	d9 c0       	rjmp	.+434    	; 0x2934 <PlayMP3file+0x1f8>

  dir = findFiles (GET_FILE, fileName); //get the file location
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	b8 01       	movw	r22, r16
    2786:	0e 94 67 0d 	call	0x1ace	; 0x1ace <findFiles>
    278a:	9c 01       	movw	r18, r24
  if(dir == 0) 
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	09 f4       	brne	.+2      	; 0x2792 <PlayMP3file+0x56>
    2790:	d0 c0       	rjmp	.+416    	; 0x2932 <PlayMP3file+0x1f6>
    return (0);

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2792:	dc 01       	movw	r26, r24
    2794:	54 96       	adiw	r26, 0x14	; 20
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	55 97       	sbiw	r26, 0x15	; 21
    279c:	a0 e0       	ldi	r26, 0x00	; 0
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	5c 01       	movw	r10, r24
    27a2:	99 24       	eor	r9, r9
    27a4:	88 24       	eor	r8, r8
    27a6:	f9 01       	movw	r30, r18
    27a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    27aa:	93 8d       	ldd	r25, Z+27	; 0x1b
    27ac:	a0 e0       	ldi	r26, 0x00	; 0
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	88 2a       	or	r8, r24
    27b2:	99 2a       	or	r9, r25
    27b4:	aa 2a       	or	r10, r26
    27b6:	bb 2a       	or	r11, r27

  fileSize = dir->fileSize;
    27b8:	d9 01       	movw	r26, r18
    27ba:	5c 96       	adiw	r26, 0x1c	; 28
    27bc:	8d 91       	ld	r24, X+
    27be:	9d 91       	ld	r25, X+
    27c0:	0d 90       	ld	r0, X+
    27c2:	bc 91       	ld	r27, X
    27c4:	a0 2d       	mov	r26, r0
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	ab 83       	std	Y+3, r26	; 0x03
    27cc:	bc 83       	std	Y+4, r27	; 0x04
  VS1053_SKIP_PLAY=false;
    27ce:	10 92 e9 06 	sts	0x06E9, r1
    27d2:	1d 82       	std	Y+5, r1	; 0x05
    27d4:	1e 82       	std	Y+6, r1	; 0x06
    27d6:	1f 82       	std	Y+7, r1	; 0x07
    27d8:	18 86       	std	Y+8, r1	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    27da:	20 91 c0 06 	lds	r18, 0x06C0
    27de:	30 91 c1 06 	lds	r19, 0x06C1
    27e2:	e0 90 86 04 	lds	r14, 0x0486
    27e6:	f0 90 87 04 	lds	r15, 0x0487
    27ea:	00 91 88 04 	lds	r16, 0x0488
    27ee:	10 91 89 04 	lds	r17, 0x0489
    27f2:	c5 01       	movw	r24, r10
    27f4:	b4 01       	movw	r22, r8
    27f6:	62 50       	subi	r22, 0x02	; 2
    27f8:	70 40       	sbci	r23, 0x00	; 0
    27fa:	80 40       	sbci	r24, 0x00	; 0
    27fc:	90 40       	sbci	r25, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__mulsi3>
    2806:	2b 01       	movw	r4, r22
    2808:	3c 01       	movw	r6, r24
    280a:	4e 0c       	add	r4, r14
    280c:	5f 1c       	adc	r5, r15
    280e:	60 1e       	adc	r6, r16
    2810:	71 1e       	adc	r7, r17
    2812:	33 24       	eor	r3, r3
    2814:	6f c0       	rjmp	.+222    	; 0x28f4 <PlayMP3file+0x1b8>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    2816:	c3 01       	movw	r24, r6
    2818:	b2 01       	movw	r22, r4
    281a:	63 0d       	add	r22, r3
    281c:	71 1d       	adc	r23, r1
    281e:	81 1d       	adc	r24, r1
    2820:	91 1d       	adc	r25, r1
    2822:	0e 94 8b 07 	call	0xf16	; 0xf16 <SD_readSingleBlock>
    2826:	cd 80       	ldd	r12, Y+5	; 0x05
    2828:	de 80       	ldd	r13, Y+6	; 0x06
    282a:	ef 80       	ldd	r14, Y+7	; 0x07
    282c:	f8 84       	ldd	r15, Y+8	; 0x08
    282e:	22 24       	eor	r2, r2


      for(k=0; k<512; k++)
    2830:	d7 01       	movw	r26, r14
    2832:	c6 01       	movw	r24, r12
    2834:	80 50       	subi	r24, 0x00	; 0
    2836:	9e 4f       	sbci	r25, 0xFE	; 254
    2838:	af 4f       	sbci	r26, 0xFF	; 255
    283a:	bf 4f       	sbci	r27, 0xFF	; 255
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    283c:	29 81       	ldd	r18, Y+1	; 0x01
    283e:	3a 81       	ldd	r19, Y+2	; 0x02
    2840:	4b 81       	ldd	r20, Y+3	; 0x03
    2842:	5c 81       	ldd	r21, Y+4	; 0x04
    2844:	c2 16       	cp	r12, r18
    2846:	d3 06       	cpc	r13, r19
    2848:	e4 06       	cpc	r14, r20
    284a:	f5 06       	cpc	r15, r21
    284c:	10 f0       	brcs	.+4      	; 0x2852 <PlayMP3file+0x116>
    284e:	22 24       	eor	r2, r2
    2850:	23 94       	inc	r2
    2852:	08 94       	sec
    2854:	c1 1c       	adc	r12, r1
    2856:	d1 1c       	adc	r13, r1
    2858:	e1 1c       	adc	r14, r1
    285a:	f1 1c       	adc	r15, r1
    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);


      for(k=0; k<512; k++)
    285c:	c8 16       	cp	r12, r24
    285e:	d9 06       	cpc	r13, r25
    2860:	ea 06       	cpc	r14, r26
    2862:	fb 06       	cpc	r15, r27
    2864:	59 f7       	brne	.-42     	; 0x283c <PlayMP3file+0x100>
    2866:	e0 e0       	ldi	r30, 0x00	; 0
    2868:	f0 e0       	ldi	r31, 0x00	; 0
      }
      //After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
      iAudioByteCnt=0;
      while(iAudioByteCnt<k)
      {
        if(VS1053_SKIP_PLAY)
    286a:	80 91 e9 06 	lds	r24, 0x06E9
    286e:	88 23       	and	r24, r24
    2870:	29 f0       	breq	.+10     	; 0x287c <PlayMP3file+0x140>
        {
          VS1053_SKIP_PLAY=false;
    2872:	10 92 e9 06 	sts	0x06E9, r1
          VS1053_SoftwareReset();
    2876:	0e 94 67 05 	call	0xace	; 0xace <VS1053_SoftwareReset>
    287a:	5b c0       	rjmp	.+182    	; 0x2932 <PlayMP3file+0x1f6>
          return 0;//playing stopped by user
        }
        if((PINB & (1<<MP3_DREQ)))
    287c:	1b 99       	sbic	0x03, 3	; 3
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <PlayMP3file+0x148>
    2880:	8f 01       	movw	r16, r30
    2882:	18 c0       	rjmp	.+48     	; 0x28b4 <PlayMP3file+0x178>
    2884:	8f 01       	movw	r16, r30
        {
          for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    2886:	af 01       	movw	r20, r30
    2888:	40 5e       	subi	r20, 0xE0	; 224
    288a:	5f 4f       	sbci	r21, 0xFF	; 255
    288c:	5a 87       	std	Y+10, r21	; 0x0a
    288e:	49 87       	std	Y+9, r20	; 0x09
          {
            VS1053_WriteData(buffer[iAudioByteCnt]);
    2890:	f8 01       	movw	r30, r16
    2892:	e1 54       	subi	r30, 0x41	; 65
    2894:	fb 4f       	sbci	r31, 0xFB	; 251
    2896:	80 81       	ld	r24, Z
    2898:	0e 94 71 05 	call	0xae2	; 0xae2 <VS1053_WriteData>
            if(iAudioByteCnt++==k)return 0;    
    289c:	52 e0       	ldi	r21, 0x02	; 2
    289e:	00 30       	cpi	r16, 0x00	; 0
    28a0:	15 07       	cpc	r17, r21
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <PlayMP3file+0x16a>
    28a4:	46 c0       	rjmp	.+140    	; 0x2932 <PlayMP3file+0x1f6>
    28a6:	0f 5f       	subi	r16, 0xFF	; 255
    28a8:	1f 4f       	sbci	r17, 0xFF	; 255
          VS1053_SoftwareReset();
          return 0;//playing stopped by user
        }
        if((PINB & (1<<MP3_DREQ)))
        {
          for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	08 17       	cp	r16, r24
    28b0:	19 07       	cpc	r17, r25
    28b2:	71 f7       	brne	.-36     	; 0x2890 <PlayMP3file+0x154>
            VS1053_WriteData(buffer[iAudioByteCnt]);
            if(iAudioByteCnt++==k)return 0;    
          }  
        }
        //After playing a 32 bytes of data, check the user inputs
        if(USART_Keypad_DATA_RDY)
    28b4:	80 91 78 04 	lds	r24, 0x0478
    28b8:	88 23       	and	r24, r24
    28ba:	11 f0       	breq	.+4      	; 0x28c0 <PlayMP3file+0x184>
        {
          USART_Keypad_ReceiveAction();
    28bc:	0e 94 3f 03 	call	0x67e	; 0x67e <USART_Keypad_ReceiveAction>
        }
        if(USART_PC_DATA_RDY)
    28c0:	80 91 ea 06 	lds	r24, 0x06EA
    28c4:	88 23       	and	r24, r24
    28c6:	11 f0       	breq	.+4      	; 0x28cc <PlayMP3file+0x190>
        {
          USART_PC_ReceiveAction();
    28c8:	0e 94 c2 03 	call	0x784	; 0x784 <USART_PC_ReceiveAction>
        }    
        if(USART_UI_Message_ready) //If a message ready from the user interface, process it
    28cc:	80 91 be 04 	lds	r24, 0x04BE
    28d0:	88 23       	and	r24, r24
    28d2:	19 f0       	breq	.+6      	; 0x28da <PlayMP3file+0x19e>
        {
          UI_parse_message(true);
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	0e 94 28 16 	call	0x2c50	; 0x2c50 <UI_parse_message>
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
      }
      //After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
      iAudioByteCnt=0;
      while(iAudioByteCnt<k)
    28da:	92 e0       	ldi	r25, 0x02	; 2
    28dc:	00 30       	cpi	r16, 0x00	; 0
    28de:	19 07       	cpc	r17, r25
    28e0:	10 f4       	brcc	.+4      	; 0x28e6 <PlayMP3file+0x1aa>
    28e2:	f8 01       	movw	r30, r16
    28e4:	c2 cf       	rjmp	.-124    	; 0x286a <PlayMP3file+0x12e>
        if(USART_UI_Message_ready) //If a message ready from the user interface, process it
        {
          UI_parse_message(true);
        }
      }
      if(bEndOfFile)
    28e6:	22 20       	and	r2, r2
    28e8:	21 f5       	brne	.+72     	; 0x2932 <PlayMP3file+0x1f6>
  VS1053_SKIP_PLAY=false;
  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    28ea:	33 94       	inc	r3
    28ec:	cd 82       	std	Y+5, r12	; 0x05
    28ee:	de 82       	std	Y+6, r13	; 0x06
    28f0:	ef 82       	std	Y+7, r14	; 0x07
    28f2:	f8 86       	std	Y+8, r15	; 0x08
    28f4:	20 91 c0 06 	lds	r18, 0x06C0
    28f8:	30 91 c1 06 	lds	r19, 0x06C1
    28fc:	83 2d       	mov	r24, r3
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	82 17       	cp	r24, r18
    2902:	93 07       	cpc	r25, r19
    2904:	08 f4       	brcc	.+2      	; 0x2908 <PlayMP3file+0x1cc>
    2906:	87 cf       	rjmp	.-242    	; 0x2816 <PlayMP3file+0xda>
        return 0;
      }

    }

    cluster = getSetNextCluster (cluster, GET, 0);
    2908:	c5 01       	movw	r24, r10
    290a:	b4 01       	movw	r22, r8
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <getSetNextCluster>
    291a:	4b 01       	movw	r8, r22
    291c:	5c 01       	movw	r10, r24
    if(cluster == 0) 
    291e:	61 15       	cp	r22, r1
    2920:	71 05       	cpc	r23, r1
    2922:	81 05       	cpc	r24, r1
    2924:	91 05       	cpc	r25, r1
    2926:	09 f0       	breq	.+2      	; 0x292a <PlayMP3file+0x1ee>
    2928:	58 cf       	rjmp	.-336    	; 0x27da <PlayMP3file+0x9e>
    {
      USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); 
    292a:	86 e6       	ldi	r24, 0x66	; 102
    292c:	92 e0       	ldi	r25, 0x02	; 2
    292e:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      return 0;
    2932:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return 0;
}
    2934:	2a 96       	adiw	r28, 0x0a	; 10
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	df 90       	pop	r13
    294e:	cf 90       	pop	r12
    2950:	bf 90       	pop	r11
    2952:	af 90       	pop	r10
    2954:	9f 90       	pop	r9
    2956:	8f 90       	pop	r8
    2958:	7f 90       	pop	r7
    295a:	6f 90       	pop	r6
    295c:	5f 90       	pop	r5
    295e:	4f 90       	pop	r4
    2960:	3f 90       	pop	r3
    2962:	2f 90       	pop	r2
    2964:	08 95       	ret

00002966 <UI_calculate_CRC>:
 * @brief calculate CRC (cyclic redundancy check)
 * @param pstrMsg message (?)
 * @return CRC value
 */
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	fc 01       	movw	r30, r24
  unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
    2970:	b2 81       	ldd	r27, Z+2	; 0x02
  uint16_t chksum=0;

  pstrMsg+=3;
    2972:	8c 01       	movw	r16, r24
    2974:	0d 5f       	subi	r16, 0xFD	; 253
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	70 e0       	ldi	r23, 0x00	; 0
 * @brief calculate CRC (cyclic redundancy check)
 * @param pstrMsg message (?)
 * @return CRC value
 */
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    297c:	b5 50       	subi	r27, 0x05	; 5
  unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
  uint16_t chksum=0;

  pstrMsg+=3;
  while(msglen > 1)
    297e:	ab 2f       	mov	r26, r27
    2980:	a6 95       	lsr	r26
    2982:	ca 2f       	mov	r28, r26
    2984:	d0 e0       	ldi	r29, 0x00	; 0
    2986:	ae 01       	movw	r20, r28
    2988:	4f 5f       	subi	r20, 0xFF	; 255
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	44 0f       	add	r20, r20
    298e:	55 1f       	adc	r21, r21
    2990:	4e 0f       	add	r20, r30
    2992:	5f 1f       	adc	r21, r31
    2994:	08 c0       	rjmp	.+16     	; 0x29a6 <UI_calculate_CRC+0x40>
  {
    chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    2996:	31 81       	ldd	r19, Z+1	; 0x01
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	82 2b       	or	r24, r18
    29a0:	93 2b       	or	r25, r19
    29a2:	68 0f       	add	r22, r24
    29a4:	79 1f       	adc	r23, r25
    29a6:	32 96       	adiw	r30, 0x02	; 2
{
  unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
  uint16_t chksum=0;

  pstrMsg+=3;
  while(msglen > 1)
    29a8:	e4 17       	cp	r30, r20
    29aa:	f5 07       	cpc	r31, r21
    29ac:	a1 f7       	brne	.-24     	; 0x2996 <UI_calculate_CRC+0x30>
 * @brief calculate CRC (cyclic redundancy check)
 * @param pstrMsg message (?)
 * @return CRC value
 */
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    29ae:	aa 0f       	add	r26, r26
    29b0:	fe 01       	movw	r30, r28
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	e0 0f       	add	r30, r16
    29b8:	f1 1f       	adc	r31, r17
    chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    chksum = chksum & 0xffff;
    msglen-=2;
    pstrMsg+=2;
  }
  if(msglen>0) //If the packet size is odd numbered
    29ba:	ba 17       	cp	r27, r26
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <UI_calculate_CRC+0x60>
  {
    chksum = chksum^ (int)*(pstrMsg++);
    29be:	80 81       	ld	r24, Z
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	68 27       	eor	r22, r24
    29c4:	79 27       	eor	r23, r25
  }
  return (chksum);
}
    29c6:	cb 01       	movw	r24, r22
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	08 95       	ret

000029d2 <UI_buildMessage>:

//TODO this seems pointless?
bool UI_buildMessage(char MessageType)
{
  return true;
}
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	08 95       	ret

000029d6 <UI_ResetTheCurrentMode>:
  }
}

void UI_ResetTheCurrentMode(void)
{
  if(UI_MODE_SELECTED){
    29d6:	80 91 95 04 	lds	r24, 0x0495
    29da:	88 23       	and	r24, r24
    29dc:	81 f0       	breq	.+32     	; 0x29fe <UI_ResetTheCurrentMode+0x28>
    switch(UI_Current_Mode)
    29de:	80 91 bf 06 	lds	r24, 0x06BF
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	39 f0       	breq	.+14     	; 0x29f4 <UI_ResetTheCurrentMode+0x1e>
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	41 f0       	breq	.+16     	; 0x29fa <UI_ResetTheCurrentMode+0x24>
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	41 f4       	brne	.+16     	; 0x29fe <UI_ResetTheCurrentMode+0x28>
    {
      case 1:
        MD1_Reset();
    29ee:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <MD1_Reset>
    29f2:	08 95       	ret
        break;
      case 2:
        MD2_Reset();
    29f4:	0e 94 47 18 	call	0x308e	; 0x308e <MD2_Reset>
    29f8:	08 95       	ret
        break;
      case 3:
        MD3_Reset();
    29fa:	0e 94 17 19 	call	0x322e	; 0x322e <MD3_Reset>
    29fe:	08 95       	ret

00002a00 <UI_RunMainOfCurrentMode>:
 * @brief   Decides which of the three UI modes to go into based on UI_Current_Mode
 * @return  Void
 */
void UI_RunMainOfCurrentMode(void)
{
  if(UI_MODE_SELECTED){
    2a00:	80 91 95 04 	lds	r24, 0x0495
    2a04:	88 23       	and	r24, r24
    2a06:	81 f0       	breq	.+32     	; 0x2a28 <UI_RunMainOfCurrentMode+0x28>
    switch(UI_Current_Mode)
    2a08:	80 91 bf 06 	lds	r24, 0x06BF
    2a0c:	82 30       	cpi	r24, 0x02	; 2
    2a0e:	39 f0       	breq	.+14     	; 0x2a1e <UI_RunMainOfCurrentMode+0x1e>
    2a10:	83 30       	cpi	r24, 0x03	; 3
    2a12:	41 f0       	breq	.+16     	; 0x2a24 <UI_RunMainOfCurrentMode+0x24>
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	41 f4       	brne	.+16     	; 0x2a28 <UI_RunMainOfCurrentMode+0x28>
    {
      case 1:
        MD1_Main();
    2a18:	0e 94 08 18 	call	0x3010	; 0x3010 <MD1_Main>
    2a1c:	08 95       	ret
        break;
      case 2:
        MD2_Main();
    2a1e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <MD2_Main>
    2a22:	08 95       	ret
        break;
      case 3:
        MD3_Main();
    2a24:	0e 94 50 19 	call	0x32a0	; 0x32a0 <MD3_Main>
    2a28:	08 95       	ret

00002a2a <UI_InputCellToCurrentMode>:
  }
}

void UI_InputCellToCurrentMode(char thisCell)
{
  switch(UI_Current_Mode)
    2a2a:	90 91 bf 06 	lds	r25, 0x06BF
    2a2e:	92 30       	cpi	r25, 0x02	; 2
    2a30:	39 f0       	breq	.+14     	; 0x2a40 <UI_InputCellToCurrentMode+0x16>
    2a32:	93 30       	cpi	r25, 0x03	; 3
    2a34:	41 f0       	breq	.+16     	; 0x2a46 <UI_InputCellToCurrentMode+0x1c>
    2a36:	91 30       	cpi	r25, 0x01	; 1
    2a38:	41 f4       	brne	.+16     	; 0x2a4a <UI_InputCellToCurrentMode+0x20>
  {
    case 1:
      MD1_InputCell(thisCell);
    2a3a:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <MD1_InputCell>
    2a3e:	08 95       	ret
      break;
    case 2:
      MD2_InputCell(thisCell);
    2a40:	0e 94 59 18 	call	0x30b2	; 0x30b2 <MD2_InputCell>
    2a44:	08 95       	ret
      break;
    case 3:
      MD3_InputCell(thisCell);
    2a46:	0e 94 27 19 	call	0x324e	; 0x324e <MD3_InputCell>
    2a4a:	08 95       	ret

00002a4c <UI_InputDotToCurrentMode>:
  }
}

void UI_InputDotToCurrentMode(char thisDot)
{
  switch(UI_Current_Mode)
    2a4c:	90 91 bf 06 	lds	r25, 0x06BF
    2a50:	92 30       	cpi	r25, 0x02	; 2
    2a52:	39 f0       	breq	.+14     	; 0x2a62 <UI_InputDotToCurrentMode+0x16>
    2a54:	93 30       	cpi	r25, 0x03	; 3
    2a56:	41 f0       	breq	.+16     	; 0x2a68 <UI_InputDotToCurrentMode+0x1c>
    2a58:	91 30       	cpi	r25, 0x01	; 1
    2a5a:	41 f4       	brne	.+16     	; 0x2a6c <UI_InputDotToCurrentMode+0x20>
  {
    case 1:
      MD1_InputDot(thisDot);
    2a5c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MD1_InputDot>
    2a60:	08 95       	ret
      break;
    case 2:
      MD2_InputDot(thisDot);
    2a62:	0e 94 50 18 	call	0x30a0	; 0x30a0 <MD2_InputDot>
    2a66:	08 95       	ret
      break;
    case 3:
      MD3_InputDot(thisDot);
    2a68:	0e 94 1e 19 	call	0x323c	; 0x323c <MD3_InputDot>
    2a6c:	08 95       	ret

00002a6e <UI_CallModeNoAnswer>:
 * @brief (?)
 * @return Void
 */
void UI_CallModeNoAnswer(void)
{
  switch(UI_Current_Mode)
    2a6e:	80 91 bf 06 	lds	r24, 0x06BF
    2a72:	82 30       	cpi	r24, 0x02	; 2
    2a74:	39 f0       	breq	.+14     	; 0x2a84 <UI_CallModeNoAnswer+0x16>
    2a76:	83 30       	cpi	r24, 0x03	; 3
    2a78:	41 f0       	breq	.+16     	; 0x2a8a <UI_CallModeNoAnswer+0x1c>
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	41 f4       	brne	.+16     	; 0x2a8e <UI_CallModeNoAnswer+0x20>
  {
    case 1:
      MD1_CallModeNoAnswer();
    2a7e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <MD1_CallModeNoAnswer>
    2a82:	08 95       	ret
      break;
    case 2:
      MD2_CallModeNoAnswer();
    2a84:	0e 94 4f 18 	call	0x309e	; 0x309e <MD2_CallModeNoAnswer>
    2a88:	08 95       	ret
      break;
    case 3:
      MD3_CallModeNoAnswer();
    2a8a:	0e 94 1d 19 	call	0x323a	; 0x323a <MD3_CallModeNoAnswer>
    2a8e:	08 95       	ret

00002a90 <UI_CallModeYesAnswer>:
 * @brief (?)
 * @return Void
 */
void UI_CallModeYesAnswer(void)
{
  switch(UI_Current_Mode)
    2a90:	80 91 bf 06 	lds	r24, 0x06BF
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	39 f0       	breq	.+14     	; 0x2aa6 <UI_CallModeYesAnswer+0x16>
    2a98:	83 30       	cpi	r24, 0x03	; 3
    2a9a:	41 f0       	breq	.+16     	; 0x2aac <UI_CallModeYesAnswer+0x1c>
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	41 f4       	brne	.+16     	; 0x2ab0 <UI_CallModeYesAnswer+0x20>
  {
    case 1:
      MD1_CallModeYesAnswer();
    2aa0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <MD1_CallModeYesAnswer>
    2aa4:	08 95       	ret
      break;
    case 2:
      MD2_CallModeYesAnswer();
    2aa6:	0e 94 4e 18 	call	0x309c	; 0x309c <MD2_CallModeYesAnswer>
    2aaa:	08 95       	ret
      break;
    case 3:
      MD3_CallModeYesAnswer();
    2aac:	0e 94 1c 19 	call	0x3238	; 0x3238 <MD3_CallModeYesAnswer>
    2ab0:	08 95       	ret

00002ab2 <UI_Play_Intro_Currentmode>:
 * @brief play the MP3 associated with the current mode
 * @return Void
 */
void UI_Play_Intro_Currentmode(void)
{
  switch(UI_Current_Mode)
    2ab2:	80 91 bf 06 	lds	r24, 0x06BF
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	39 f0       	breq	.+14     	; 0x2ac8 <UI_Play_Intro_Currentmode+0x16>
    2aba:	83 30       	cpi	r24, 0x03	; 3
    2abc:	51 f0       	breq	.+20     	; 0x2ad2 <UI_Play_Intro_Currentmode+0x20>
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	61 f4       	brne	.+24     	; 0x2ada <UI_Play_Intro_Currentmode+0x28>
  {
    case 1:
      RequestToPlayMP3file("MD1.MP3");
    2ac2:	81 ec       	ldi	r24, 0xC1	; 193
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <UI_Play_Intro_Currentmode+0x1a>
      break;
    case 2:
      RequestToPlayMP3file("MD2.MP3");
    2ac8:	89 ec       	ldi	r24, 0xC9	; 201
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    2ad0:	08 95       	ret
      break;
    case 3:
      RequestToPlayMP3file("MD3.MP3");
    2ad2:	81 ed       	ldi	r24, 0xD1	; 209
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    2ada:	08 95       	ret

00002adc <UI_ControlKeyPressed>:
/**
 * @brief (?) 
 * @return Void
 */
void UI_ControlKeyPressed(void)
{
    2adc:	1f 93       	push	r17
  switch(USART_UI_ReceivedPacket[5])
    2ade:	10 91 c7 06 	lds	r17, 0x06C7
    2ae2:	13 30       	cpi	r17, 0x03	; 3
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <UI_ControlKeyPressed+0xc>
    2ae6:	4a c0       	rjmp	.+148    	; 0x2b7c <UI_ControlKeyPressed+0xa0>
    2ae8:	14 30       	cpi	r17, 0x04	; 4
    2aea:	30 f4       	brcc	.+12     	; 0x2af8 <UI_ControlKeyPressed+0x1c>
    2aec:	11 30       	cpi	r17, 0x01	; 1
    2aee:	71 f0       	breq	.+28     	; 0x2b0c <UI_ControlKeyPressed+0x30>
    2af0:	12 30       	cpi	r17, 0x02	; 2
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <UI_ControlKeyPressed+0x1a>
    2af4:	ab c0       	rjmp	.+342    	; 0x2c4c <UI_ControlKeyPressed+0x170>
    2af6:	25 c0       	rjmp	.+74     	; 0x2b42 <UI_ControlKeyPressed+0x66>
    2af8:	15 30       	cpi	r17, 0x05	; 5
    2afa:	09 f4       	brne	.+2      	; 0x2afe <UI_ControlKeyPressed+0x22>
    2afc:	8e c0       	rjmp	.+284    	; 0x2c1a <UI_ControlKeyPressed+0x13e>
    2afe:	15 30       	cpi	r17, 0x05	; 5
    2b00:	08 f4       	brcc	.+2      	; 0x2b04 <UI_ControlKeyPressed+0x28>
    2b02:	5a c0       	rjmp	.+180    	; 0x2bb8 <UI_ControlKeyPressed+0xdc>
    2b04:	16 30       	cpi	r17, 0x06	; 6
    2b06:	09 f0       	breq	.+2      	; 0x2b0a <UI_ControlKeyPressed+0x2e>
    2b08:	a1 c0       	rjmp	.+322    	; 0x2c4c <UI_ControlKeyPressed+0x170>
    2b0a:	94 c0       	rjmp	.+296    	; 0x2c34 <UI_ControlKeyPressed+0x158>
  {
    case UI_CMD_NONE:
      break;
    case UI_CMD_ENT1: //Enter into a mode
      USART_transmitStringToPCFromFlash(PSTR("Enter 1 pressed"));
    2b0c:	8c e5       	ldi	r24, 0x5C	; 92
    2b0e:	93 e0       	ldi	r25, 0x03	; 3
    2b10:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;  
    2b14:	8d e0       	ldi	r24, 0x0D	; 13
    2b16:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2b1a:	8a e0       	ldi	r24, 0x0A	; 10
    2b1c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      if(!UI_MODE_SELECTED) //Then this command is to select the mode
    2b20:	80 91 95 04 	lds	r24, 0x0495
    2b24:	88 23       	and	r24, r24
    2b26:	51 f4       	brne	.+20     	; 0x2b3c <UI_ControlKeyPressed+0x60>
      {
        if(UI_Selected_Mode>0)
    2b28:	80 91 bd 04 	lds	r24, 0x04BD
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <UI_ControlKeyPressed+0x56>
    2b30:	8d c0       	rjmp	.+282    	; 0x2c4c <UI_ControlKeyPressed+0x170>
        {
          UI_MODE_SELECTED=true;
    2b32:	10 93 95 04 	sts	0x0495, r17
          UI_ResetTheCurrentMode();
    2b36:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <UI_ResetTheCurrentMode>
    2b3a:	88 c0       	rjmp	.+272    	; 0x2c4c <UI_ControlKeyPressed+0x170>
          //RequestToPlayMP3file("ERR1.MP3");
        }
      }
      else //Then this the "YES" command in the mode, so call the function in the mode
      {
        UI_CallModeYesAnswer();
    2b3c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UI_CallModeYesAnswer>
    2b40:	85 c0       	rjmp	.+266    	; 0x2c4c <UI_ControlKeyPressed+0x170>
      }
      break;
    case UI_CMD_ENT2: //Exit from a mode
      USART_transmitStringToPCFromFlash(PSTR("Enter 2 pressed"));
    2b42:	8c e4       	ldi	r24, 0x4C	; 76
    2b44:	93 e0       	ldi	r25, 0x03	; 3
    2b46:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2b4a:	8d e0       	ldi	r24, 0x0D	; 13
    2b4c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2b50:	8a e0       	ldi	r24, 0x0A	; 10
    2b52:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      if(UI_MODE_SELECTED) //This might be an exit from mode command or "NO" command in the mode
    2b56:	80 91 95 04 	lds	r24, 0x0495
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <UI_ControlKeyPressed+0x84>
    2b5e:	76 c0       	rjmp	.+236    	; 0x2c4c <UI_ControlKeyPressed+0x170>
      {
        if(USART_UI_ReceivedPacket[6]==69) //If the next byte is 'E', this is exit command (when the user pressed E2 for more than 5 secs)
    2b60:	80 91 c8 06 	lds	r24, 0x06C8
    2b64:	85 34       	cpi	r24, 0x45	; 69
    2b66:	39 f4       	brne	.+14     	; 0x2b76 <UI_ControlKeyPressed+0x9a>
        {
          UI_MODE_SELECTED=false;
    2b68:	10 92 95 04 	sts	0x0495, r1
          RequestToPlayMP3file("MM.MP3");
    2b6c:	89 ed       	ldi	r24, 0xD9	; 217
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    2b74:	6b c0       	rjmp	.+214    	; 0x2c4c <UI_ControlKeyPressed+0x170>
        }
        else //Then this a "NO" answer, call the mode function for this
        {
          UI_CallModeNoAnswer();
    2b76:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UI_CallModeNoAnswer>
    2b7a:	68 c0       	rjmp	.+208    	; 0x2c4c <UI_ControlKeyPressed+0x170>
        }
      }
      //This has no effect when no mode is selected
      break;
    case UI_CMD_MFOR:
      USART_transmitStringToPCFromFlash(PSTR("Mode 1 pressed"));
    2b7c:	8d e3       	ldi	r24, 0x3D	; 61
    2b7e:	93 e0       	ldi	r25, 0x03	; 3
    2b80:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2b84:	8d e0       	ldi	r24, 0x0D	; 13
    2b86:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2b8a:	8a e0       	ldi	r24, 0x0A	; 10
    2b8c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      if(!UI_MODE_SELECTED)
    2b90:	80 91 95 04 	lds	r24, 0x0495
    2b94:	88 23       	and	r24, r24
    2b96:	09 f0       	breq	.+2      	; 0x2b9a <UI_ControlKeyPressed+0xbe>
    2b98:	59 c0       	rjmp	.+178    	; 0x2c4c <UI_ControlKeyPressed+0x170>
      {
        UI_Selected_Mode++;
    2b9a:	80 91 bd 04 	lds	r24, 0x04BD
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 93 bd 04 	sts	0x04BD, r24
        if(UI_Selected_Mode>Number_of_modes)
    2ba4:	90 91 bd 04 	lds	r25, 0x04BD
    2ba8:	80 91 b8 04 	lds	r24, 0x04B8
    2bac:	89 17       	cp	r24, r25
    2bae:	38 f5       	brcc	.+78     	; 0x2bfe <UI_ControlKeyPressed+0x122>
        {
          UI_Selected_Mode--;
    2bb0:	80 91 bd 04 	lds	r24, 0x04BD
    2bb4:	81 50       	subi	r24, 0x01	; 1
    2bb6:	18 c0       	rjmp	.+48     	; 0x2be8 <UI_ControlKeyPressed+0x10c>
          UI_Play_Intro_Currentmode();
        }
      }
      break;
    case UI_CMD_MREV:
      USART_transmitStringToPCFromFlash(PSTR("Mode 2 pressed"));
    2bb8:	8e e2       	ldi	r24, 0x2E	; 46
    2bba:	93 e0       	ldi	r25, 0x03	; 3
    2bbc:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2bc0:	8d e0       	ldi	r24, 0x0D	; 13
    2bc2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2bc6:	8a e0       	ldi	r24, 0x0A	; 10
    2bc8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      if(!UI_MODE_SELECTED)
    2bcc:	80 91 95 04 	lds	r24, 0x0495
    2bd0:	88 23       	and	r24, r24
    2bd2:	e1 f5       	brne	.+120    	; 0x2c4c <UI_ControlKeyPressed+0x170>
      {
        UI_Selected_Mode--;
    2bd4:	80 91 bd 04 	lds	r24, 0x04BD
    2bd8:	81 50       	subi	r24, 0x01	; 1
    2bda:	80 93 bd 04 	sts	0x04BD, r24
        if(UI_Selected_Mode<1)
    2bde:	80 91 bd 04 	lds	r24, 0x04BD
    2be2:	88 23       	and	r24, r24
    2be4:	61 f4       	brne	.+24     	; 0x2bfe <UI_ControlKeyPressed+0x122>
        {
          UI_Selected_Mode=1;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	80 93 bd 04 	sts	0x04BD, r24
          UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2bec:	e0 91 bd 04 	lds	r30, 0x04BD
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	e7 55       	subi	r30, 0x57	; 87
    2bf4:	fb 4f       	sbci	r31, 0xFB	; 251
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 93 bf 06 	sts	0x06BF, r24
    2bfc:	27 c0       	rjmp	.+78     	; 0x2c4c <UI_ControlKeyPressed+0x170>
        }
        else
        {
          UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2bfe:	e0 91 bd 04 	lds	r30, 0x04BD
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	e7 55       	subi	r30, 0x57	; 87
    2c06:	fb 4f       	sbci	r31, 0xFB	; 251
    2c08:	80 81       	ld	r24, Z
    2c0a:	80 93 bf 06 	sts	0x06BF, r24
          VS1053_SKIP_PLAY=true;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	80 93 e9 06 	sts	0x06E9, r24
          UI_Play_Intro_Currentmode();
    2c14:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <UI_Play_Intro_Currentmode>
    2c18:	19 c0       	rjmp	.+50     	; 0x2c4c <UI_ControlKeyPressed+0x170>
        }  
      }    
      break;
    case UI_CMD_VOLU:
      USART_transmitStringToPCFromFlash(PSTR("Vol UP pressed"));
    2c1a:	8f e1       	ldi	r24, 0x1F	; 31
    2c1c:	93 e0       	ldi	r25, 0x03	; 3
    2c1e:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2c22:	8d e0       	ldi	r24, 0x0D	; 13
    2c24:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2c28:	8a e0       	ldi	r24, 0x0A	; 10
    2c2a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      VS1053_IncreaseVol();
    2c2e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <VS1053_IncreaseVol>
    2c32:	0c c0       	rjmp	.+24     	; 0x2c4c <UI_ControlKeyPressed+0x170>
      break;
    case UI_CMD_VOLD:
      USART_transmitStringToPCFromFlash(PSTR("Vol DOWN pressed"));
    2c34:	8e e0       	ldi	r24, 0x0E	; 14
    2c36:	93 e0       	ldi	r25, 0x03	; 3
    2c38:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2c3c:	8d e0       	ldi	r24, 0x0D	; 13
    2c3e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2c42:	8a e0       	ldi	r24, 0x0A	; 10
    2c44:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
      VS1053_DecreaseVol();
    2c48:	0e 94 f7 04 	call	0x9ee	; 0x9ee <VS1053_DecreaseVol>
      break;
    default:
      break;
  }
}
    2c4c:	1f 91       	pop	r17
    2c4e:	08 95       	ret

00002c50 <UI_parse_message>:
 * msgtypes: 
 * @param  IsPlaying -  bool    determines whether or not an MP3 Files is playing
 * @return  bool - returns true if succesfully parsed, understood, and used message
 */
bool UI_parse_message(bool IsPlaying)
{
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	2a 97       	sbiw	r28, 0x0a	; 10
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	e8 2e       	mov	r14, r24
  //First things first, check the CRC

  unsigned char message_len = USART_UI_ReceivedPacket[2];
    2c6e:	f0 90 c4 06 	lds	r15, 0x06C4

  unsigned char ADCmsg[10];
  //unsigned char message_payload[20];
  //unsigned char i=0;

  uint16_t chksum=UI_calculate_CRC(&USART_UI_ReceivedPacket);
    2c72:	82 ec       	ldi	r24, 0xC2	; 194
    2c74:	96 e0       	ldi	r25, 0x06	; 6
    2c76:	0e 94 b3 14 	call	0x2966	; 0x2966 <UI_calculate_CRC>
    2c7a:	8c 01       	movw	r16, r24
  
  // TODO test this
  PRINTF("[UI_parse_message] Entering function");
    2c7c:	80 ee       	ldi	r24, 0xE0	; 224
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  
  if ( chksum == (USART_UI_ReceivedPacket[message_len-2] << 8 | USART_UI_ReceivedPacket[message_len-1]))
    2c84:	af 2d       	mov	r26, r15
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	fd 01       	movw	r30, r26
    2c8a:	e0 54       	subi	r30, 0x40	; 64
    2c8c:	f9 4f       	sbci	r31, 0xF9	; 249
    2c8e:	40 81       	ld	r20, Z
    2c90:	af 53       	subi	r26, 0x3F	; 63
    2c92:	b9 4f       	sbci	r27, 0xF9	; 249
    2c94:	2c 91       	ld	r18, X
    2c96:	94 2f       	mov	r25, r20
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	82 2b       	or	r24, r18
    2c9e:	93 2b       	or	r25, r19
    2ca0:	08 17       	cp	r16, r24
    2ca2:	19 07       	cpc	r17, r25
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <UI_parse_message+0x58>
    2ca6:	74 c0       	rjmp	.+232    	; 0x2d90 <UI_parse_message+0x140>
  {
    //If correct, store the message elements
    message_number=USART_UI_ReceivedPacket[3];
    2ca8:	80 91 c5 06 	lds	r24, 0x06C5
    message_type=USART_UI_ReceivedPacket[4];
    2cac:	80 91 c6 06 	lds	r24, 0x06C6

    //process the message

    if(IsPlaying) //If a MP3 file is being played, only the commands are processed
    2cb0:	ee 20       	and	r14, r14
    2cb2:	41 f0       	breq	.+16     	; 0x2cc4 <UI_parse_message+0x74>
    {
      if(message_type==68)
    2cb4:	84 34       	cpi	r24, 0x44	; 68
    2cb6:	31 f4       	brne	.+12     	; 0x2cc4 <UI_parse_message+0x74>
      {
        UI_ControlKeyPressed();
    2cb8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <UI_ControlKeyPressed>
        USART_UI_Message_ready=true;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	80 93 be 04 	sts	0x04BE, r24
    2cc2:	6d c0       	rjmp	.+218    	; 0x2d9e <UI_parse_message+0x14e>
        return true;
      }
    }
    
    switch(message_type)
    2cc4:	82 34       	cpi	r24, 0x42	; 66
    2cc6:	89 f0       	breq	.+34     	; 0x2cea <UI_parse_message+0x9a>
    2cc8:	83 34       	cpi	r24, 0x43	; 67
    2cca:	20 f4       	brcc	.+8      	; 0x2cd4 <UI_parse_message+0x84>
    2ccc:	81 34       	cpi	r24, 0x41	; 65
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <UI_parse_message+0x82>
    2cd0:	63 c0       	rjmp	.+198    	; 0x2d98 <UI_parse_message+0x148>
    2cd2:	06 c0       	rjmp	.+12     	; 0x2ce0 <UI_parse_message+0x90>
    2cd4:	84 34       	cpi	r24, 0x44	; 68
    2cd6:	71 f0       	breq	.+28     	; 0x2cf4 <UI_parse_message+0xa4>
    2cd8:	85 34       	cpi	r24, 0x45	; 69
    2cda:	09 f0       	breq	.+2      	; 0x2cde <UI_parse_message+0x8e>
    2cdc:	5d c0       	rjmp	.+186    	; 0x2d98 <UI_parse_message+0x148>
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <UI_parse_message+0xaa>
    {
      case 65:   //Braille dot
        //Only one character is being send to the current mode
        UI_InputDotToCurrentMode(USART_UI_ReceivedPacket[5]);
    2ce0:	80 91 c7 06 	lds	r24, 0x06C7
    2ce4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UI_InputDotToCurrentMode>
    2ce8:	57 c0       	rjmp	.+174    	; 0x2d98 <UI_parse_message+0x148>
      case 66:   //Braille cell
        /*
        Only one character is being send to the current mode. The cell number value is currently not used
        , if needed this information is available on USART_UI_ReceivedPacket[6]
        */
        UI_InputCellToCurrentMode(USART_UI_ReceivedPacket[5]);
    2cea:	80 91 c7 06 	lds	r24, 0x06C7
    2cee:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <UI_InputCellToCurrentMode>
    2cf2:	52 c0       	rjmp	.+164    	; 0x2d98 <UI_parse_message+0x148>
        break;
      case 67:  //Error message
        //When an error occured in the user input a message will be sent here
        break;
      case 68:  //User Command
        UI_ControlKeyPressed();
    2cf4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <UI_ControlKeyPressed>
    2cf8:	4f c0       	rjmp	.+158    	; 0x2d98 <UI_parse_message+0x148>
        break;
      case 69:  //Acknowledgement
        ADCmsg[0]=USART_UI_ReceivedPacket[5];
    2cfa:	80 91 c7 06 	lds	r24, 0x06C7
    2cfe:	89 83       	std	Y+1, r24	; 0x01
        ADCmsg[1]=USART_UI_ReceivedPacket[6];
    2d00:	80 91 c8 06 	lds	r24, 0x06C8
    2d04:	8a 83       	std	Y+2, r24	; 0x02
        ADCmsg[2]=USART_UI_ReceivedPacket[7];
    2d06:	80 91 c9 06 	lds	r24, 0x06C9
    2d0a:	8b 83       	std	Y+3, r24	; 0x03
        USART_transmitStringToPCFromFlash(PSTR("Analog Input channel,MSB,LSB :"));
    2d0c:	8c e6       	ldi	r24, 0x6C	; 108
    2d0e:	93 e0       	ldi	r25, 0x03	; 3
    2d10:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
        sprintf(ADCmsg, "%d,%d,%d", USART_UI_ReceivedPacket[5],USART_UI_ReceivedPacket[6],USART_UI_ReceivedPacket[7]); 
    2d14:	20 91 c7 06 	lds	r18, 0x06C7
    2d18:	30 91 c8 06 	lds	r19, 0x06C8
    2d1c:	40 91 c9 06 	lds	r20, 0x06C9
    2d20:	8d b7       	in	r24, 0x3d	; 61
    2d22:	9e b7       	in	r25, 0x3e	; 62
    2d24:	0a 97       	sbiw	r24, 0x0a	; 10
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	9e bf       	out	0x3e, r25	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	8d bf       	out	0x3d, r24	; 61
    2d30:	ed b7       	in	r30, 0x3d	; 61
    2d32:	fe b7       	in	r31, 0x3e	; 62
    2d34:	31 96       	adiw	r30, 0x01	; 1
    2d36:	8e 01       	movw	r16, r28
    2d38:	0f 5f       	subi	r16, 0xFF	; 255
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	ad b7       	in	r26, 0x3d	; 61
    2d3e:	be b7       	in	r27, 0x3e	; 62
    2d40:	12 96       	adiw	r26, 0x02	; 2
    2d42:	1c 93       	st	X, r17
    2d44:	0e 93       	st	-X, r16
    2d46:	11 97       	sbiw	r26, 0x01	; 1
    2d48:	85 e0       	ldi	r24, 0x05	; 5
    2d4a:	92 e0       	ldi	r25, 0x02	; 2
    2d4c:	93 83       	std	Z+3, r25	; 0x03
    2d4e:	82 83       	std	Z+2, r24	; 0x02
    2d50:	24 83       	std	Z+4, r18	; 0x04
    2d52:	15 82       	std	Z+5, r1	; 0x05
    2d54:	36 83       	std	Z+6, r19	; 0x06
    2d56:	17 82       	std	Z+7, r1	; 0x07
    2d58:	40 87       	std	Z+8, r20	; 0x08
    2d5a:	11 86       	std	Z+9, r1	; 0x09
    2d5c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
        USART_transmitStringToPC(&ADCmsg);
    2d60:	8d b7       	in	r24, 0x3d	; 61
    2d62:	9e b7       	in	r25, 0x3e	; 62
    2d64:	0a 96       	adiw	r24, 0x0a	; 10
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	9e bf       	out	0x3e, r25	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	8d bf       	out	0x3d, r24	; 61
    2d70:	c8 01       	movw	r24, r16
    2d72:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
        TX_NEWLINE_PC;  
    2d76:	8d e0       	ldi	r24, 0x0D	; 13
    2d78:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2d7c:	8a e0       	ldi	r24, 0x0A	; 10
    2d7e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
        TX_NEWLINE_PC;        
    2d82:	8d e0       	ldi	r24, 0x0D	; 13
    2d84:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2d88:	8a e0       	ldi	r24, 0x0A	; 10
    2d8a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2d8e:	04 c0       	rjmp	.+8      	; 0x2d98 <UI_parse_message+0x148>
    }
    //In the end: send the acknowledgement to the sender (with the message number, of course !!!)
  }
  else
  {
    USART_UI_Message_ready=false;
    2d90:	10 92 be 04 	sts	0x04BE, r1
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	03 c0       	rjmp	.+6      	; 0x2d9e <UI_parse_message+0x14e>
    return false;
  }
  USART_UI_Message_ready=false;
    2d98:	10 92 be 04 	sts	0x04BE, r1
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
    2d9e:	2a 96       	adiw	r28, 0x0a	; 10
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ff 90       	pop	r15
    2db4:	ef 90       	pop	r14
    2db6:	08 95       	ret

00002db8 <UI_CheckModes>:
 *         what they are
 * @return bool  - return true on succesful completion of transmission, false on 
 *         failure
 */
bool UI_CheckModes(void)
{
    2db8:	af 92       	push	r10
    2dba:	bf 92       	push	r11
    2dbc:	df 92       	push	r13
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	c9 56       	subi	r28, 0x69	; 105
    2dd0:	d0 40       	sbci	r29, 0x00	; 0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
  int i=0;
  int iMoN;
  bool bBoNFound;
  const char* ModesFile="MODES.DAT";

  Number_of_modes=0;
    2ddc:	10 92 b8 04 	sts	0x04B8, r1
    2de0:	56 e0       	ldi	r21, 0x06	; 6
    2de2:	e5 2e       	mov	r14, r21
    2de4:	f1 2c       	mov	r15, r1
    2de6:	ec 0e       	add	r14, r28
    2de8:	fd 1e       	adc	r15, r29
    2dea:	f7 01       	movw	r30, r14
  for(i=0;i<100;i++)
    2dec:	c7 01       	movw	r24, r14
    2dee:	1e 2d       	mov	r17, r14
    2df0:	09 2f       	mov	r16, r25
    2df2:	ce 01       	movw	r24, r28
    2df4:	86 59       	subi	r24, 0x96	; 150
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    FileContent[i]=0;
    2df8:	11 92       	st	Z+, r1
  int iMoN;
  bool bBoNFound;
  const char* ModesFile="MODES.DAT";

  Number_of_modes=0;
  for(i=0;i<100;i++)
    2dfa:	e8 17       	cp	r30, r24
    2dfc:	f9 07       	cpc	r31, r25
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <UI_CheckModes+0x40>
    FileContent[i]=0;
  if(readAndRetreiveFileContents (ModesFile,FileContent)>0)
    2e00:	8e e0       	ldi	r24, 0x0E	; 14
    2e02:	92 e0       	ldi	r25, 0x02	; 2
    2e04:	61 2f       	mov	r22, r17
    2e06:	70 2f       	mov	r23, r16
    2e08:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <readAndRetreiveFileContents>
    2e0c:	88 23       	and	r24, r24
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <UI_CheckModes+0x5a>
    2e10:	b4 c0       	rjmp	.+360    	; 0x2f7a <UI_CheckModes+0x1c2>
  {
    return false;
  }
  USART_transmitStringToPC(&FileContent);
    2e12:	81 2f       	mov	r24, r17
    2e14:	90 2f       	mov	r25, r16
    2e16:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    2e1a:	8d e0       	ldi	r24, 0x0D	; 13
    2e1c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2e20:	8a e0       	ldi	r24, 0x0A	; 10
    2e22:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    {
      if(iMoN==3)
      {
        return false;
      }
      ModeID[iMoN++]=FileContent[i];
    2e28:	43 e0       	ldi	r20, 0x03	; 3
    2e2a:	a4 2e       	mov	r10, r20
    2e2c:	b1 2c       	mov	r11, r1
    2e2e:	ac 0e       	add	r10, r28
    2e30:	bd 1e       	adc	r11, r29
    2e32:	2e c0       	rjmp	.+92     	; 0x2e90 <UI_CheckModes+0xd8>
  TX_NEWLINE_PC;
  bBoNFound=false;
  i=0;
  while(FileContent[i]!='$')
  {
    if(FileContent[i]=='>')
    2e34:	8e 33       	cpi	r24, 0x3E	; 62
    2e36:	89 f4       	brne	.+34     	; 0x2e5a <UI_CheckModes+0xa2>
    {
      UI_Modes[Number_of_modes]=atoi(ModeID);
    2e38:	80 91 b8 04 	lds	r24, 0x04B8
    2e3c:	08 2f       	mov	r16, r24
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
    2e40:	c5 01       	movw	r24, r10
    2e42:	0e 94 38 1a 	call	0x3470	; 0x3470 <atoi>
    2e46:	06 55       	subi	r16, 0x56	; 86
    2e48:	1b 4f       	sbci	r17, 0xFB	; 251
    2e4a:	d8 01       	movw	r26, r16
    2e4c:	8c 93       	st	X, r24
      Number_of_modes++;
    2e4e:	80 91 b8 04 	lds	r24, 0x04B8
    2e52:	8f 5f       	subi	r24, 0xFF	; 255
    2e54:	80 93 b8 04 	sts	0x04B8, r24
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <UI_CheckModes+0xa6>
      bBoNFound=false;
    }
    if(!bBoNFound)
    2e5a:	99 23       	and	r25, r25
    2e5c:	39 f4       	brne	.+14     	; 0x2e6c <UI_CheckModes+0xb4>
    {
      ModeID[0]=0;
    2e5e:	1b 82       	std	Y+3, r1	; 0x03
      ModeID[1]=0;
    2e60:	1c 82       	std	Y+4, r1	; 0x04
      ModeID[2]=0;
    2e62:	1d 82       	std	Y+5, r1	; 0x05
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0a c0       	rjmp	.+20     	; 0x2e80 <UI_CheckModes+0xc8>
      iMoN=0;
    }
    else
    {
      if(iMoN==3)
    2e6c:	23 30       	cpi	r18, 0x03	; 3
    2e6e:	31 05       	cpc	r19, r1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <UI_CheckModes+0xbc>
    2e72:	83 c0       	rjmp	.+262    	; 0x2f7a <UI_CheckModes+0x1c2>
      {
        return false;
      }
      ModeID[iMoN++]=FileContent[i];
    2e74:	f5 01       	movw	r30, r10
    2e76:	e2 0f       	add	r30, r18
    2e78:	f3 1f       	adc	r31, r19
    2e7a:	80 83       	st	Z, r24
    2e7c:	2f 5f       	subi	r18, 0xFF	; 255
    2e7e:	3f 4f       	sbci	r19, 0xFF	; 255

    }
    if(FileContent[i]=='<')
    2e80:	f7 01       	movw	r30, r14
    2e82:	80 81       	ld	r24, Z
    2e84:	8c 33       	cpi	r24, 0x3C	; 60
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <UI_CheckModes+0xd2>
    2e88:	91 e0       	ldi	r25, 0x01	; 1
    2e8a:	08 94       	sec
    2e8c:	e1 1c       	adc	r14, r1
    2e8e:	f1 1c       	adc	r15, r1
  }
  USART_transmitStringToPC(&FileContent);
  TX_NEWLINE_PC;
  bBoNFound=false;
  i=0;
  while(FileContent[i]!='$')
    2e90:	d7 01       	movw	r26, r14
    2e92:	8c 91       	ld	r24, X
    2e94:	84 32       	cpi	r24, 0x24	; 36
    2e96:	71 f6       	brne	.-100    	; 0x2e34 <UI_CheckModes+0x7c>
    }


    i++;    
  }
  USART_transmitStringToPCFromFlash(PSTR("Number of modes selected: "));
    2e98:	8f e9       	ldi	r24, 0x9F	; 159
    2e9a:	93 e0       	ldi	r25, 0x03	; 3
    2e9c:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
  PCPrintContent[0]=0;
    2ea0:	19 82       	std	Y+1, r1	; 0x01
  PCPrintContent[1]=0;
    2ea2:	1a 82       	std	Y+2, r1	; 0x02
  sprintf(PCPrintContent, "%d", Number_of_modes);
    2ea4:	20 91 b8 04 	lds	r18, 0x04B8
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <UI_CheckModes+0xf2>
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <UI_CheckModes+0xf4>
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <UI_CheckModes+0xf6>
    2eae:	ed b7       	in	r30, 0x3d	; 61
    2eb0:	fe b7       	in	r31, 0x3e	; 62
    2eb2:	31 96       	adiw	r30, 0x01	; 1
    2eb4:	8e 01       	movw	r16, r28
    2eb6:	0f 5f       	subi	r16, 0xFF	; 255
    2eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eba:	ad b7       	in	r26, 0x3d	; 61
    2ebc:	be b7       	in	r27, 0x3e	; 62
    2ebe:	12 96       	adiw	r26, 0x02	; 2
    2ec0:	1c 93       	st	X, r17
    2ec2:	0e 93       	st	-X, r16
    2ec4:	11 97       	sbiw	r26, 0x01	; 1
    2ec6:	88 e1       	ldi	r24, 0x18	; 24
    2ec8:	92 e0       	ldi	r25, 0x02	; 2
    2eca:	93 83       	std	Z+3, r25	; 0x03
    2ecc:	82 83       	std	Z+2, r24	; 0x02
    2ece:	24 83       	std	Z+4, r18	; 0x04
    2ed0:	15 82       	std	Z+5, r1	; 0x05
    2ed2:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
  USART_transmitStringToPC(&PCPrintContent);
    2ed6:	ed b7       	in	r30, 0x3d	; 61
    2ed8:	fe b7       	in	r31, 0x3e	; 62
    2eda:	36 96       	adiw	r30, 0x06	; 6
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	fe bf       	out	0x3e, r31	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	ed bf       	out	0x3d, r30	; 61
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    2eec:	8d e0       	ldi	r24, 0x0D	; 13
    2eee:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2ef2:	8a e0       	ldi	r24, 0x0A	; 10
    2ef4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
  USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
    2ef8:	8b e8       	ldi	r24, 0x8B	; 139
    2efa:	93 e0       	ldi	r25, 0x03	; 3
    2efc:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    2f00:	ee 24       	eor	r14, r14
    2f02:	ff 24       	eor	r15, r15
  for(i=0;i<Number_of_modes;i++)
  {
    sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    2f04:	d0 2e       	mov	r13, r16
    2f06:	01 2f       	mov	r16, r17
    2f08:	2b e1       	ldi	r18, 0x1B	; 27
    2f0a:	a2 2e       	mov	r10, r18
    2f0c:	22 e0       	ldi	r18, 0x02	; 2
    2f0e:	b2 2e       	mov	r11, r18
    2f10:	26 c0       	rjmp	.+76     	; 0x2f5e <UI_CheckModes+0x1a6>
    2f12:	f7 01       	movw	r30, r14
    2f14:	e6 55       	subi	r30, 0x56	; 86
    2f16:	fb 4f       	sbci	r31, 0xFB	; 251
    2f18:	80 81       	ld	r24, Z
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <UI_CheckModes+0x164>
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <UI_CheckModes+0x166>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <UI_CheckModes+0x168>
    2f20:	ed b7       	in	r30, 0x3d	; 61
    2f22:	fe b7       	in	r31, 0x3e	; 62
    2f24:	31 96       	adiw	r30, 0x01	; 1
    2f26:	ad b7       	in	r26, 0x3d	; 61
    2f28:	be b7       	in	r27, 0x3e	; 62
    2f2a:	11 96       	adiw	r26, 0x01	; 1
    2f2c:	dc 92       	st	X, r13
    2f2e:	11 97       	sbiw	r26, 0x01	; 1
    2f30:	12 96       	adiw	r26, 0x02	; 2
    2f32:	0c 93       	st	X, r16
    2f34:	b3 82       	std	Z+3, r11	; 0x03
    2f36:	a2 82       	std	Z+2, r10	; 0x02
    2f38:	84 83       	std	Z+4, r24	; 0x04
    2f3a:	15 82       	std	Z+5, r1	; 0x05
    2f3c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
    USART_transmitStringToPC(&PCPrintContent);
    2f40:	ed b7       	in	r30, 0x3d	; 61
    2f42:	fe b7       	in	r31, 0x3e	; 62
    2f44:	36 96       	adiw	r30, 0x06	; 6
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	fe bf       	out	0x3e, r31	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	ed bf       	out	0x3d, r30	; 61
    2f50:	8d 2d       	mov	r24, r13
    2f52:	90 2f       	mov	r25, r16
    2f54:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
  PCPrintContent[1]=0;
  sprintf(PCPrintContent, "%d", Number_of_modes);
  USART_transmitStringToPC(&PCPrintContent);
  TX_NEWLINE_PC;
  USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
  for(i=0;i<Number_of_modes;i++)
    2f58:	08 94       	sec
    2f5a:	e1 1c       	adc	r14, r1
    2f5c:	f1 1c       	adc	r15, r1
    2f5e:	80 91 b8 04 	lds	r24, 0x04B8
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	e8 16       	cp	r14, r24
    2f66:	f9 06       	cpc	r15, r25
    2f68:	a4 f2       	brlt	.-88     	; 0x2f12 <UI_CheckModes+0x15a>
  {
    sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    USART_transmitStringToPC(&PCPrintContent);
  }  
  TX_NEWLINE_PC;
    2f6a:	8d e0       	ldi	r24, 0x0D	; 13
    2f6c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2f70:	8a e0       	ldi	r24, 0x0A	; 10
    2f72:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <UI_CheckModes+0x1c4>
  return true; 
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f7c:	c7 59       	subi	r28, 0x97	; 151
    2f7e:	df 4f       	sbci	r29, 0xFF	; 255
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	ff 90       	pop	r15
    2f94:	ef 90       	pop	r14
    2f96:	df 90       	pop	r13
    2f98:	bf 90       	pop	r11
    2f9a:	af 90       	pop	r10
    2f9c:	08 95       	ret

00002f9e <MD1_Reset>:
 * Should be useful for error handling
 * @return Void
 */
void MD1_Reset(void)
{
  Current_State = STATE_INITIAL;
    2f9e:	10 92 08 08 	sts	0x0808, r1
    2fa2:	10 92 07 08 	sts	0x0807, r1
}
    2fa6:	08 95       	ret

00002fa8 <MD1_CallModeYesAnswer>:
}

void MD1_CallModeYesAnswer(void)
{

}
    2fa8:	08 95       	ret

00002faa <MD1_CallModeNoAnswer>:

void MD1_CallModeNoAnswer(void)
{

}
    2faa:	08 95       	ret

00002fac <MD1_InputDot>:
 * @param thisDot the dot being input
 * @return Void
 */
void MD1_InputDot(char thisDot)
{
  Last_Dot=thisDot;
    2fac:	80 93 06 08 	sts	0x0806, r24
  Current_State = STATE_PROC_INPUT;
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	90 93 08 08 	sts	0x0808, r25
    2fb8:	80 93 07 08 	sts	0x0807, r24
}
    2fbc:	08 95       	ret

00002fbe <MD1_InputCell>:

void MD1_InputCell(char thisCell)
{

}
    2fbe:	08 95       	ret

00002fc0 <PlayRequestedDot>:
 * @return Void
 */
void PlayRequestedDot(void)
{
  // TODO default case?
  switch(Last_Dot)
    2fc0:	80 91 06 08 	lds	r24, 0x0806
    2fc4:	83 33       	cpi	r24, 0x33	; 51
    2fc6:	a1 f0       	breq	.+40     	; 0x2ff0 <PlayRequestedDot+0x30>
    2fc8:	84 33       	cpi	r24, 0x34	; 52
    2fca:	28 f4       	brcc	.+10     	; 0x2fd6 <PlayRequestedDot+0x16>
    2fcc:	81 33       	cpi	r24, 0x31	; 49
    2fce:	51 f0       	breq	.+20     	; 0x2fe4 <PlayRequestedDot+0x24>
    2fd0:	82 33       	cpi	r24, 0x32	; 50
    2fd2:	e9 f4       	brne	.+58     	; 0x300e <PlayRequestedDot+0x4e>
    2fd4:	0a c0       	rjmp	.+20     	; 0x2fea <PlayRequestedDot+0x2a>
    2fd6:	85 33       	cpi	r24, 0x35	; 53
    2fd8:	89 f0       	breq	.+34     	; 0x2ffc <PlayRequestedDot+0x3c>
    2fda:	85 33       	cpi	r24, 0x35	; 53
    2fdc:	60 f0       	brcs	.+24     	; 0x2ff6 <PlayRequestedDot+0x36>
    2fde:	86 33       	cpi	r24, 0x36	; 54
    2fe0:	b1 f4       	brne	.+44     	; 0x300e <PlayRequestedDot+0x4e>
    2fe2:	11 c0       	rjmp	.+34     	; 0x3006 <PlayRequestedDot+0x46>
  {
    case '1':
      RequestToPlayMP3file("MD1_1.MP3");
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	92 e0       	ldi	r25, 0x02	; 2
    2fe8:	0b c0       	rjmp	.+22     	; 0x3000 <PlayRequestedDot+0x40>
      break;
    case '2':
      RequestToPlayMP3file("MD1_2.MP3");
    2fea:	8a e2       	ldi	r24, 0x2A	; 42
    2fec:	92 e0       	ldi	r25, 0x02	; 2
    2fee:	08 c0       	rjmp	.+16     	; 0x3000 <PlayRequestedDot+0x40>
      break;
    case '3':
      RequestToPlayMP3file("MD1_3.MP3");
    2ff0:	84 e3       	ldi	r24, 0x34	; 52
    2ff2:	92 e0       	ldi	r25, 0x02	; 2
    2ff4:	05 c0       	rjmp	.+10     	; 0x3000 <PlayRequestedDot+0x40>
      break;
    case '4':
      RequestToPlayMP3file("MD1_4.MP3");
    2ff6:	8e e3       	ldi	r24, 0x3E	; 62
    2ff8:	92 e0       	ldi	r25, 0x02	; 2
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <PlayRequestedDot+0x40>
      break;
    case '5':
      RequestToPlayMP3file("MD1_5.MP3");
    2ffc:	88 e4       	ldi	r24, 0x48	; 72
    2ffe:	92 e0       	ldi	r25, 0x02	; 2
    3000:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    3004:	08 95       	ret
      break;
    case '6':
      RequestToPlayMP3file("MD1_6.MP3");
    3006:	82 e5       	ldi	r24, 0x52	; 82
    3008:	92 e0       	ldi	r25, 0x02	; 2
    300a:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    300e:	08 95       	ret

00003010 <MD1_Main>:
 * @brief main code for Mode 1
 * @return Void
 */
void MD1_Main(void)
{
  switch(Current_State)
    3010:	80 91 07 08 	lds	r24, 0x0807
    3014:	90 91 08 08 	lds	r25, 0x0808
    3018:	81 30       	cpi	r24, 0x01	; 1
    301a:	91 05       	cpc	r25, r1
    301c:	d1 f0       	breq	.+52     	; 0x3052 <MD1_Main+0x42>
    301e:	82 30       	cpi	r24, 0x02	; 2
    3020:	91 05       	cpc	r25, r1
    3022:	11 f1       	breq	.+68     	; 0x3068 <MD1_Main+0x58>
    3024:	89 2b       	or	r24, r25
    3026:	91 f5       	brne	.+100    	; 0x308c <MD1_Main+0x7c>
  {
    case STATE_INITIAL:
      DPRINTF("[MD1] Entering MD1\n");
    3028:	8d ee       	ldi	r24, 0xED	; 237
    302a:	96 e0       	ldi	r25, 0x06	; 6
    302c:	6c e5       	ldi	r22, 0x5C	; 92
    302e:	72 e0       	ldi	r23, 0x02	; 2
    3030:	0e 94 56 1a 	call	0x34ac	; 0x34ac <strcpy>
    3034:	8d ee       	ldi	r24, 0xED	; 237
    3036:	96 e0       	ldi	r25, 0x06	; 6
    3038:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
      // Play the introductory message for Mode 1
      RequestToPlayMP3file("MD1INT.MP3");
    303c:	80 e7       	ldi	r24, 0x70	; 112
    303e:	92 e0       	ldi	r25, 0x02	; 2
    3040:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
      Current_State = STATE_WAIT_INPUT;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	90 93 08 08 	sts	0x0808, r25
    304c:	80 93 07 08 	sts	0x0807, r24
    3050:	08 95       	ret
      break;
    case STATE_WAIT_INPUT:
      DPRINTF("[MD1] State 1\n");
    3052:	8d ee       	ldi	r24, 0xED	; 237
    3054:	96 e0       	ldi	r25, 0x06	; 6
    3056:	6b e7       	ldi	r22, 0x7B	; 123
    3058:	72 e0       	ldi	r23, 0x02	; 2
    305a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <strcpy>
    305e:	8d ee       	ldi	r24, 0xED	; 237
    3060:	96 e0       	ldi	r25, 0x06	; 6
    3062:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
    3066:	08 95       	ret
      break;
    case STATE_PROC_INPUT:
      DPRINTF("[MD1] State 2 >> 1: playing dot name\n");
    3068:	8d ee       	ldi	r24, 0xED	; 237
    306a:	96 e0       	ldi	r25, 0x06	; 6
    306c:	6a e8       	ldi	r22, 0x8A	; 138
    306e:	72 e0       	ldi	r23, 0x02	; 2
    3070:	0e 94 56 1a 	call	0x34ac	; 0x34ac <strcpy>
    3074:	8d ee       	ldi	r24, 0xED	; 237
    3076:	96 e0       	ldi	r25, 0x06	; 6
    3078:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>
      PlayRequestedDot();
    307c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <PlayRequestedDot>
      Current_State = STATE_WAIT_INPUT;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	90 93 08 08 	sts	0x0808, r25
    3088:	80 93 07 08 	sts	0x0807, r24
    308c:	08 95       	ret

0000308e <MD2_Reset>:
}


void MD2_Reset(void)
{
  Current_State=0;
    308e:	10 92 08 08 	sts	0x0808, r1
    3092:	10 92 07 08 	sts	0x0807, r1
  MD2_Last_Dot=0;
    3096:	10 92 0a 08 	sts	0x080A, r1
}
    309a:	08 95       	ret

0000309c <MD2_CallModeYesAnswer>:
}

void MD2_CallModeYesAnswer(void)
{

}
    309c:	08 95       	ret

0000309e <MD2_CallModeNoAnswer>:

void MD2_CallModeNoAnswer(void)
{

}
    309e:	08 95       	ret

000030a0 <MD2_InputDot>:

void MD2_InputDot(char thisDot)
{
  MD2_Last_Dot=thisDot;
    30a0:	80 93 0a 08 	sts	0x080A, r24
  Current_State=3;
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	90 93 08 08 	sts	0x0808, r25
    30ac:	80 93 07 08 	sts	0x0807, r24
}
    30b0:	08 95       	ret

000030b2 <MD2_InputCell>:

void MD2_InputCell(char thisCell)
{
    30b2:	98 2f       	mov	r25, r24
  if(MD2_Last_Dot!=0)
    30b4:	80 91 0a 08 	lds	r24, 0x080A
    30b8:	88 23       	and	r24, r24
    30ba:	41 f0       	breq	.+16     	; 0x30cc <MD2_InputCell+0x1a>
  {
    Last_Cell=thisCell;
    30bc:	90 93 09 08 	sts	0x0809, r25
    Current_State=2;
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	90 93 08 08 	sts	0x0808, r25
    30c8:	80 93 07 08 	sts	0x0807, r24
    30cc:	08 95       	ret

000030ce <MD2_PlayRequestedDot>:
}


void MD2_PlayRequestedDot(void)
{
  switch(MD2_Last_Dot)
    30ce:	80 91 0a 08 	lds	r24, 0x080A
    30d2:	83 33       	cpi	r24, 0x33	; 51
    30d4:	a1 f0       	breq	.+40     	; 0x30fe <MD2_PlayRequestedDot+0x30>
    30d6:	84 33       	cpi	r24, 0x34	; 52
    30d8:	28 f4       	brcc	.+10     	; 0x30e4 <MD2_PlayRequestedDot+0x16>
    30da:	81 33       	cpi	r24, 0x31	; 49
    30dc:	51 f0       	breq	.+20     	; 0x30f2 <MD2_PlayRequestedDot+0x24>
    30de:	82 33       	cpi	r24, 0x32	; 50
    30e0:	e9 f4       	brne	.+58     	; 0x311c <MD2_PlayRequestedDot+0x4e>
    30e2:	0a c0       	rjmp	.+20     	; 0x30f8 <MD2_PlayRequestedDot+0x2a>
    30e4:	85 33       	cpi	r24, 0x35	; 53
    30e6:	89 f0       	breq	.+34     	; 0x310a <MD2_PlayRequestedDot+0x3c>
    30e8:	85 33       	cpi	r24, 0x35	; 53
    30ea:	60 f0       	brcs	.+24     	; 0x3104 <MD2_PlayRequestedDot+0x36>
    30ec:	86 33       	cpi	r24, 0x36	; 54
    30ee:	b1 f4       	brne	.+44     	; 0x311c <MD2_PlayRequestedDot+0x4e>
    30f0:	11 c0       	rjmp	.+34     	; 0x3114 <MD2_PlayRequestedDot+0x46>
  {
    case '1':
      RequestToPlayMP3file("MD1_1.MP3");
    30f2:	80 eb       	ldi	r24, 0xB0	; 176
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	0b c0       	rjmp	.+22     	; 0x310e <MD2_PlayRequestedDot+0x40>
      break;
    case '2':
      RequestToPlayMP3file("MD1_2.MP3");
    30f8:	8a eb       	ldi	r24, 0xBA	; 186
    30fa:	92 e0       	ldi	r25, 0x02	; 2
    30fc:	08 c0       	rjmp	.+16     	; 0x310e <MD2_PlayRequestedDot+0x40>
      break;
    case '3':
      RequestToPlayMP3file("MD1_3.MP3");
    30fe:	84 ec       	ldi	r24, 0xC4	; 196
    3100:	92 e0       	ldi	r25, 0x02	; 2
    3102:	05 c0       	rjmp	.+10     	; 0x310e <MD2_PlayRequestedDot+0x40>
      break;
    case '4':
      RequestToPlayMP3file("MD1_4.MP3");
    3104:	8e ec       	ldi	r24, 0xCE	; 206
    3106:	92 e0       	ldi	r25, 0x02	; 2
    3108:	02 c0       	rjmp	.+4      	; 0x310e <MD2_PlayRequestedDot+0x40>
      break;
    case '5':
      RequestToPlayMP3file("MD1_5.MP3");
    310a:	88 ed       	ldi	r24, 0xD8	; 216
    310c:	92 e0       	ldi	r25, 0x02	; 2
    310e:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    3112:	08 95       	ret
      break;
    case '6':
      RequestToPlayMP3file("MD1_6.MP3");
    3114:	82 ee       	ldi	r24, 0xE2	; 226
    3116:	92 e0       	ldi	r25, 0x02	; 2
    3118:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    311c:	08 95       	ret

0000311e <PlayRequestedCell>:

*/

void PlayRequestedCell(void)
{
  switch(Last_Cell)
    311e:	80 91 09 08 	lds	r24, 0x0809
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	fc 01       	movw	r30, r24
    3126:	e1 56       	subi	r30, 0x61	; 97
    3128:	f0 40       	sbci	r31, 0x00	; 0
    312a:	ea 31       	cpi	r30, 0x1A	; 26
    312c:	f1 05       	cpc	r31, r1
    312e:	08 f0       	brcs	.+2      	; 0x3132 <PlayRequestedCell+0x14>
    3130:	56 c0       	rjmp	.+172    	; 0x31de <PlayRequestedCell+0xc0>
    3132:	ea 5b       	subi	r30, 0xBA	; 186
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	05 90       	lpm	r0, Z+
    313c:	f4 91       	lpm	r31, Z+
    313e:	e0 2d       	mov	r30, r0
    3140:	09 94       	ijmp
  {
    case 'a':
      RequestToPlayMP3file("MD2_a.MP3");
    3142:	8c ee       	ldi	r24, 0xEC	; 236
    3144:	92 e0       	ldi	r25, 0x02	; 2
    3146:	4d c0       	rjmp	.+154    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'b':
      RequestToPlayMP3file("MD2_b.MP3");
    3148:	86 ef       	ldi	r24, 0xF6	; 246
    314a:	92 e0       	ldi	r25, 0x02	; 2
    314c:	4a c0       	rjmp	.+148    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'c':
      RequestToPlayMP3file("MD2_c.MP3");
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	93 e0       	ldi	r25, 0x03	; 3
    3152:	47 c0       	rjmp	.+142    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'd':
      RequestToPlayMP3file("MD2_d.MP3");
    3154:	8a e0       	ldi	r24, 0x0A	; 10
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	44 c0       	rjmp	.+136    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'e':
      RequestToPlayMP3file("MD2_e.MP3");
    315a:	84 e1       	ldi	r24, 0x14	; 20
    315c:	93 e0       	ldi	r25, 0x03	; 3
    315e:	41 c0       	rjmp	.+130    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'f':
      RequestToPlayMP3file("MD2_f.MP3");
    3160:	8e e1       	ldi	r24, 0x1E	; 30
    3162:	93 e0       	ldi	r25, 0x03	; 3
    3164:	3e c0       	rjmp	.+124    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'g':
      RequestToPlayMP3file("MD2_g.MP3");
    3166:	88 e2       	ldi	r24, 0x28	; 40
    3168:	93 e0       	ldi	r25, 0x03	; 3
    316a:	3b c0       	rjmp	.+118    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'h':
      RequestToPlayMP3file("MD2_h.MP3");
    316c:	82 e3       	ldi	r24, 0x32	; 50
    316e:	93 e0       	ldi	r25, 0x03	; 3
    3170:	38 c0       	rjmp	.+112    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'i':
      RequestToPlayMP3file("MD2_i.MP3");
    3172:	8c e3       	ldi	r24, 0x3C	; 60
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	35 c0       	rjmp	.+106    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'j':
      RequestToPlayMP3file("MD2_j.MP3");
    3178:	86 e4       	ldi	r24, 0x46	; 70
    317a:	93 e0       	ldi	r25, 0x03	; 3
    317c:	32 c0       	rjmp	.+100    	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'k':
      RequestToPlayMP3file("MD2_k.MP3");
    317e:	80 e5       	ldi	r24, 0x50	; 80
    3180:	93 e0       	ldi	r25, 0x03	; 3
    3182:	2f c0       	rjmp	.+94     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'l':
      RequestToPlayMP3file("MD2_l.MP3");
    3184:	8a e5       	ldi	r24, 0x5A	; 90
    3186:	93 e0       	ldi	r25, 0x03	; 3
    3188:	2c c0       	rjmp	.+88     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'm':
      RequestToPlayMP3file("MD2_m.MP3");
    318a:	84 e6       	ldi	r24, 0x64	; 100
    318c:	93 e0       	ldi	r25, 0x03	; 3
    318e:	29 c0       	rjmp	.+82     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'n':
      RequestToPlayMP3file("MD2_n.MP3");
    3190:	8e e6       	ldi	r24, 0x6E	; 110
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	26 c0       	rjmp	.+76     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'o':
      RequestToPlayMP3file("MD2_o.MP3");
    3196:	88 e7       	ldi	r24, 0x78	; 120
    3198:	93 e0       	ldi	r25, 0x03	; 3
    319a:	23 c0       	rjmp	.+70     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'p':
      RequestToPlayMP3file("MD2_p.MP3");
    319c:	82 e8       	ldi	r24, 0x82	; 130
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	20 c0       	rjmp	.+64     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'q':
      RequestToPlayMP3file("MD2_q.MP3");
    31a2:	8c e8       	ldi	r24, 0x8C	; 140
    31a4:	93 e0       	ldi	r25, 0x03	; 3
    31a6:	1d c0       	rjmp	.+58     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'r':
      RequestToPlayMP3file("MD2_r.MP3");
    31a8:	86 e9       	ldi	r24, 0x96	; 150
    31aa:	93 e0       	ldi	r25, 0x03	; 3
    31ac:	1a c0       	rjmp	.+52     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 's':
      RequestToPlayMP3file("MD2_s.MP3");
    31ae:	80 ea       	ldi	r24, 0xA0	; 160
    31b0:	93 e0       	ldi	r25, 0x03	; 3
    31b2:	17 c0       	rjmp	.+46     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 't':
      RequestToPlayMP3file("MD2_t.MP3");
    31b4:	8a ea       	ldi	r24, 0xAA	; 170
    31b6:	93 e0       	ldi	r25, 0x03	; 3
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'u':
      RequestToPlayMP3file("MD2_u.MP3");
    31ba:	84 eb       	ldi	r24, 0xB4	; 180
    31bc:	93 e0       	ldi	r25, 0x03	; 3
    31be:	11 c0       	rjmp	.+34     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'v':
      RequestToPlayMP3file("MD2_v.MP3");
    31c0:	8e eb       	ldi	r24, 0xBE	; 190
    31c2:	93 e0       	ldi	r25, 0x03	; 3
    31c4:	0e c0       	rjmp	.+28     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'w':
      RequestToPlayMP3file("MD2_w.MP3");
    31c6:	88 ec       	ldi	r24, 0xC8	; 200
    31c8:	93 e0       	ldi	r25, 0x03	; 3
    31ca:	0b c0       	rjmp	.+22     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'x':
      RequestToPlayMP3file("MD2_x.MP3");
    31cc:	82 ed       	ldi	r24, 0xD2	; 210
    31ce:	93 e0       	ldi	r25, 0x03	; 3
    31d0:	08 c0       	rjmp	.+16     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'y':
      RequestToPlayMP3file("MD2_y.MP3");
    31d2:	8c ed       	ldi	r24, 0xDC	; 220
    31d4:	93 e0       	ldi	r25, 0x03	; 3
    31d6:	05 c0       	rjmp	.+10     	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    case 'z':
      RequestToPlayMP3file("MD2_z.MP3");
    31d8:	86 ee       	ldi	r24, 0xE6	; 230
    31da:	93 e0       	ldi	r25, 0x03	; 3
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <PlayRequestedCell+0xc4>
      break;
    default:
      RequestToPlayMP3file("MD2ER1.MP3");
    31de:	80 ef       	ldi	r24, 0xF0	; 240
    31e0:	93 e0       	ldi	r25, 0x03	; 3
    31e2:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    31e6:	08 95       	ret

000031e8 <MD2_Main>:
  MD2_Last_Dot=0;
}

void MD2_Main(void)
{
  switch(Current_State)
    31e8:	80 91 07 08 	lds	r24, 0x0807
    31ec:	90 91 08 08 	lds	r25, 0x0808
    31f0:	82 30       	cpi	r24, 0x02	; 2
    31f2:	91 05       	cpc	r25, r1
    31f4:	51 f0       	breq	.+20     	; 0x320a <MD2_Main+0x22>
    31f6:	83 30       	cpi	r24, 0x03	; 3
    31f8:	91 05       	cpc	r25, r1
    31fa:	81 f0       	breq	.+32     	; 0x321c <MD2_Main+0x34>
    31fc:	89 2b       	or	r24, r25
    31fe:	b1 f4       	brne	.+44     	; 0x322c <MD2_Main+0x44>
  {
    case 0:
      RequestToPlayMP3file("MD2INT.MP3");
    3200:	8b ef       	ldi	r24, 0xFB	; 251
    3202:	93 e0       	ldi	r25, 0x03	; 3
    3204:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    3208:	02 c0       	rjmp	.+4      	; 0x320e <MD2_Main+0x26>
      Current_State=1;
      break;
    case 1:
      break;
    case 2:
      PlayRequestedCell();
    320a:	0e 94 8f 18 	call	0x311e	; 0x311e <PlayRequestedCell>
      Current_State=1;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	90 93 08 08 	sts	0x0808, r25
    3216:	80 93 07 08 	sts	0x0807, r24
    321a:	08 95       	ret
      break;
    case 3:
      MD2_PlayRequestedDot();
    321c:	0e 94 67 18 	call	0x30ce	; 0x30ce <MD2_PlayRequestedDot>
      Current_State=1;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	90 93 08 08 	sts	0x0808, r25
    3228:	80 93 07 08 	sts	0x0807, r24
    322c:	08 95       	ret

0000322e <MD3_Reset>:
  }
}

void MD3_Reset(void)
{
  MD3_Current_State=0;
    322e:	10 92 0d 08 	sts	0x080D, r1
    3232:	10 92 0c 08 	sts	0x080C, r1
}
    3236:	08 95       	ret

00003238 <MD3_CallModeYesAnswer>:
}

void MD3_CallModeYesAnswer(void)
{

}
    3238:	08 95       	ret

0000323a <MD3_CallModeNoAnswer>:

void MD3_CallModeNoAnswer(void)
{

}
    323a:	08 95       	ret

0000323c <MD3_InputDot>:

void MD3_InputDot(char thisDot)
{
  MD3_Last_Dot=thisDot;
    323c:	80 93 0b 08 	sts	0x080B, r24
  MD3_Current_State=2;
    3240:	82 e0       	ldi	r24, 0x02	; 2
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	90 93 0d 08 	sts	0x080D, r25
    3248:	80 93 0c 08 	sts	0x080C, r24
}
    324c:	08 95       	ret

0000324e <MD3_InputCell>:

void MD3_InputCell(char thisCell)
{

}
    324e:	08 95       	ret

00003250 <MD3_PlayRequestedDot>:

*/

void MD3_PlayRequestedDot(void)
{
  switch(MD3_Last_Dot)
    3250:	80 91 0b 08 	lds	r24, 0x080B
    3254:	83 33       	cpi	r24, 0x33	; 51
    3256:	a1 f0       	breq	.+40     	; 0x3280 <MD3_PlayRequestedDot+0x30>
    3258:	84 33       	cpi	r24, 0x34	; 52
    325a:	28 f4       	brcc	.+10     	; 0x3266 <MD3_PlayRequestedDot+0x16>
    325c:	81 33       	cpi	r24, 0x31	; 49
    325e:	51 f0       	breq	.+20     	; 0x3274 <MD3_PlayRequestedDot+0x24>
    3260:	82 33       	cpi	r24, 0x32	; 50
    3262:	e9 f4       	brne	.+58     	; 0x329e <MD3_PlayRequestedDot+0x4e>
    3264:	0a c0       	rjmp	.+20     	; 0x327a <MD3_PlayRequestedDot+0x2a>
    3266:	85 33       	cpi	r24, 0x35	; 53
    3268:	89 f0       	breq	.+34     	; 0x328c <MD3_PlayRequestedDot+0x3c>
    326a:	85 33       	cpi	r24, 0x35	; 53
    326c:	60 f0       	brcs	.+24     	; 0x3286 <MD3_PlayRequestedDot+0x36>
    326e:	86 33       	cpi	r24, 0x36	; 54
    3270:	b1 f4       	brne	.+44     	; 0x329e <MD3_PlayRequestedDot+0x4e>
    3272:	11 c0       	rjmp	.+34     	; 0x3296 <MD3_PlayRequestedDot+0x46>
  {
    case '1':
      RequestToPlayMP3file("MD3_1.MP3");
    3274:	86 e0       	ldi	r24, 0x06	; 6
    3276:	94 e0       	ldi	r25, 0x04	; 4
    3278:	0b c0       	rjmp	.+22     	; 0x3290 <MD3_PlayRequestedDot+0x40>
      break;
    case '2':
      RequestToPlayMP3file("MD3_2.MP3");
    327a:	80 e1       	ldi	r24, 0x10	; 16
    327c:	94 e0       	ldi	r25, 0x04	; 4
    327e:	08 c0       	rjmp	.+16     	; 0x3290 <MD3_PlayRequestedDot+0x40>
      break;
    case '3':
      RequestToPlayMP3file("MD3_3.MP3");
    3280:	8a e1       	ldi	r24, 0x1A	; 26
    3282:	94 e0       	ldi	r25, 0x04	; 4
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <MD3_PlayRequestedDot+0x40>
      break;
    case '4':
      RequestToPlayMP3file("MD3_4.MP3");
    3286:	84 e2       	ldi	r24, 0x24	; 36
    3288:	94 e0       	ldi	r25, 0x04	; 4
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <MD3_PlayRequestedDot+0x40>
      break;
    case '5':
      RequestToPlayMP3file("MD3_5.MP3");
    328c:	8e e2       	ldi	r24, 0x2E	; 46
    328e:	94 e0       	ldi	r25, 0x04	; 4
    3290:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    3294:	08 95       	ret
      break;
    case '6':
      RequestToPlayMP3file("MD3_6.MP3");
    3296:	88 e3       	ldi	r24, 0x38	; 56
    3298:	94 e0       	ldi	r25, 0x04	; 4
    329a:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
    329e:	08 95       	ret

000032a0 <MD3_Main>:
  MD3_Current_State=0;
}

void MD3_Main(void)
{
  switch(MD3_Current_State)
    32a0:	80 91 0c 08 	lds	r24, 0x080C
    32a4:	90 91 0d 08 	lds	r25, 0x080D
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	19 f0       	breq	.+6      	; 0x32b2 <MD3_Main+0x12>
    32ac:	02 97       	sbiw	r24, 0x02	; 2
    32ae:	a1 f4       	brne	.+40     	; 0x32d8 <MD3_Main+0x38>
    32b0:	0b c0       	rjmp	.+22     	; 0x32c8 <MD3_Main+0x28>
  {
    case 0:
      RequestToPlayMP3file("MD3INT.MP3");
    32b2:	82 e4       	ldi	r24, 0x42	; 66
    32b4:	94 e0       	ldi	r25, 0x04	; 4
    32b6:	0e 94 1c 04 	call	0x838	; 0x838 <RequestToPlayMP3file>
      MD3_Current_State=1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	90 93 0d 08 	sts	0x080D, r25
    32c2:	80 93 0c 08 	sts	0x080C, r24
    32c6:	08 95       	ret
      break;
    case 1:
      break;
    case 2:
      MD3_PlayRequestedDot();
    32c8:	0e 94 28 19 	call	0x3250	; 0x3250 <MD3_PlayRequestedDot>
      MD3_Current_State=1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	90 93 0d 08 	sts	0x080D, r25
    32d4:	80 93 0c 08 	sts	0x080C, r24
    32d8:	08 95       	ret

000032da <PC_RequestsToModifyModesFile>:
 * @brief This function will replace the MODES.DAT file with new modes from the 
 *        message variable USART_PC_RecievedPacket
 * @return Void
 */
void PC_RequestsToModifyModesFile(void)
{
    32da:	ef 92       	push	r14
    32dc:	ff 92       	push	r15
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	64 97       	sbiw	r28, 0x14	; 20
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	8e 01       	movw	r16, r28
    32f8:	0f 5f       	subi	r16, 0xFF	; 255
    32fa:	1f 4f       	sbci	r17, 0xFF	; 255
    32fc:	f8 01       	movw	r30, r16
  const char* ModesFile="MODES.DAT";
  unsigned char WritingFileContent[20];
  
  // Clear the buffer
  int iT=0;
  for(iT=0;iT<20;iT++)
    32fe:	ce 01       	movw	r24, r28
    3300:	45 96       	adiw	r24, 0x15	; 21
  {
    WritingFileContent[iT]=0x00;
    3302:	11 92       	st	Z+, r1
  const char* ModesFile="MODES.DAT";
  unsigned char WritingFileContent[20];
  
  // Clear the buffer
  int iT=0;
  for(iT=0;iT<20;iT++)
    3304:	e8 17       	cp	r30, r24
    3306:	f9 07       	cpc	r31, r25
    3308:	e1 f7       	brne	.-8      	; 0x3302 <PC_RequestsToModifyModesFile+0x28>
  {
    WritingFileContent[iT]=0x00;
  }

  InitSDCard(false);
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <InitSDCard>
    3310:	23 e0       	ldi	r18, 0x03	; 3
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	09 c0       	rjmp	.+18     	; 0x3328 <PC_RequestsToModifyModesFile+0x4e>

  // Copy over the modes in the form <1><2>...<n>
  iT=0;
  for(iT=3;iT<USART_PC_received_playload_len;iT++)
  {
    WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
    3316:	f9 01       	movw	r30, r18
    3318:	ea 56       	subi	r30, 0x6A	; 106
    331a:	fb 4f       	sbci	r31, 0xFB	; 251
    331c:	80 81       	ld	r24, Z
    331e:	d8 01       	movw	r26, r16
    3320:	8d 93       	st	X+, r24
    3322:	8d 01       	movw	r16, r26

  InitSDCard(false);

  // Copy over the modes in the form <1><2>...<n>
  iT=0;
  for(iT=3;iT<USART_PC_received_playload_len;iT++)
    3324:	2f 5f       	subi	r18, 0xFF	; 255
    3326:	3f 4f       	sbci	r19, 0xFF	; 255
    3328:	80 91 ec 06 	lds	r24, 0x06EC
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	28 17       	cp	r18, r24
    3330:	39 07       	cpc	r19, r25
    3332:	8c f3       	brlt	.-30     	; 0x3316 <PC_RequestsToModifyModesFile+0x3c>
  {
    WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
  }

  DPRINTF("File content: %s\n", WritingFileContent);
    3334:	00 d0       	rcall	.+0      	; 0x3336 <PC_RequestsToModifyModesFile+0x5c>
    3336:	00 d0       	rcall	.+0      	; 0x3338 <PC_RequestsToModifyModesFile+0x5e>
    3338:	00 d0       	rcall	.+0      	; 0x333a <PC_RequestsToModifyModesFile+0x60>
    333a:	ed b7       	in	r30, 0x3d	; 61
    333c:	fe b7       	in	r31, 0x3e	; 62
    333e:	31 96       	adiw	r30, 0x01	; 1
    3340:	8d ee       	ldi	r24, 0xED	; 237
    3342:	e8 2e       	mov	r14, r24
    3344:	86 e0       	ldi	r24, 0x06	; 6
    3346:	f8 2e       	mov	r15, r24
    3348:	ad b7       	in	r26, 0x3d	; 61
    334a:	be b7       	in	r27, 0x3e	; 62
    334c:	12 96       	adiw	r26, 0x02	; 2
    334e:	fc 92       	st	X, r15
    3350:	ee 92       	st	-X, r14
    3352:	11 97       	sbiw	r26, 0x01	; 1
    3354:	8d e4       	ldi	r24, 0x4D	; 77
    3356:	94 e0       	ldi	r25, 0x04	; 4
    3358:	93 83       	std	Z+3, r25	; 0x03
    335a:	82 83       	std	Z+2, r24	; 0x02
    335c:	8e 01       	movw	r16, r28
    335e:	0f 5f       	subi	r16, 0xFF	; 255
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	15 83       	std	Z+5, r17	; 0x05
    3364:	04 83       	std	Z+4, r16	; 0x04
    3366:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
    336a:	ed b7       	in	r30, 0x3d	; 61
    336c:	fe b7       	in	r31, 0x3e	; 62
    336e:	36 96       	adiw	r30, 0x06	; 6
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	fe bf       	out	0x3e, r31	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	ed bf       	out	0x3d, r30	; 61
    337a:	c7 01       	movw	r24, r14
    337c:	0e 94 0f 04 	call	0x81e	; 0x81e <USART_transmitStringToPC>

  if(ReplaceTheContentOfThisFileWith(ModesFile,WritingFileContent)==0)
    3380:	8f e5       	ldi	r24, 0x5F	; 95
    3382:	94 e0       	ldi	r25, 0x04	; 4
    3384:	b8 01       	movw	r22, r16
    3386:	0e 94 a6 12 	call	0x254c	; 0x254c <ReplaceTheContentOfThisFileWith>
    338a:	89 2b       	or	r24, r25
    338c:	19 f4       	brne	.+6      	; 0x3394 <PC_RequestsToModifyModesFile+0xba>
  {
    USART_transmitStringToPCFromFlash(PSTR("SABT-OK"));
    338e:	84 ec       	ldi	r24, 0xC4	; 196
    3390:	93 e0       	ldi	r25, 0x03	; 3
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <PC_RequestsToModifyModesFile+0xbe>
    TX_NEWLINE_PC;      
  }else{
    USART_transmitStringToPCFromFlash(PSTR("SABT-FAIL"));
    3394:	8a eb       	ldi	r24, 0xBA	; 186
    3396:	93 e0       	ldi	r25, 0x03	; 3
    3398:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
    TX_NEWLINE_PC;  
    339c:	8d e0       	ldi	r24, 0x0D	; 13
    339e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    33a2:	8a e0       	ldi	r24, 0x0A	; 10
    33a4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
  }
}
    33a8:	64 96       	adiw	r28, 0x14	; 20
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	ff 90       	pop	r15
    33be:	ef 90       	pop	r14
    33c0:	08 95       	ret

000033c2 <PC_parse_message>:
 * @return bool    but does not seem to ever return, so it will return false?
 */
bool PC_parse_message()
{
  unsigned char MessageType;
  USART_PC_Message_ready=false;
    33c2:	10 92 70 04 	sts	0x0470, r1
  MessageType=USART_PC_ReceivedPacket[2];
    33c6:	80 91 98 04 	lds	r24, 0x0498
  switch(MessageType)
    33ca:	8d 34       	cpi	r24, 0x4D	; 77
    33cc:	69 f0       	breq	.+26     	; 0x33e8 <PC_parse_message+0x26>
    33ce:	88 37       	cpi	r24, 0x78	; 120
    33d0:	69 f4       	brne	.+26     	; 0x33ec <PC_parse_message+0x2a>
  {
    case PC_CMD_INIT:
      USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
    33d2:	8c ec       	ldi	r24, 0xCC	; 204
    33d4:	93 e0       	ldi	r25, 0x03	; 3
    33d6:	0e 94 02 04 	call	0x804	; 0x804 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;      
    33da:	8d e0       	ldi	r24, 0x0D	; 13
    33dc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    33e0:	8a e0       	ldi	r24, 0x0A	; 10
    33e2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_transmitByteToPC>
    33e6:	08 95       	ret
      break;
    case PC_CMD_NEWMODES:
      PC_RequestsToModifyModesFile();
    33e8:	0e 94 6d 19 	call	0x32da	; 0x32da <PC_RequestsToModifyModesFile>
      break;
  }
}
    33ec:	08 95       	ret

000033ee <__mulsi3>:
    33ee:	62 9f       	mul	r22, r18
    33f0:	d0 01       	movw	r26, r0
    33f2:	73 9f       	mul	r23, r19
    33f4:	f0 01       	movw	r30, r0
    33f6:	82 9f       	mul	r24, r18
    33f8:	e0 0d       	add	r30, r0
    33fa:	f1 1d       	adc	r31, r1
    33fc:	64 9f       	mul	r22, r20
    33fe:	e0 0d       	add	r30, r0
    3400:	f1 1d       	adc	r31, r1
    3402:	92 9f       	mul	r25, r18
    3404:	f0 0d       	add	r31, r0
    3406:	83 9f       	mul	r24, r19
    3408:	f0 0d       	add	r31, r0
    340a:	74 9f       	mul	r23, r20
    340c:	f0 0d       	add	r31, r0
    340e:	65 9f       	mul	r22, r21
    3410:	f0 0d       	add	r31, r0
    3412:	99 27       	eor	r25, r25
    3414:	72 9f       	mul	r23, r18
    3416:	b0 0d       	add	r27, r0
    3418:	e1 1d       	adc	r30, r1
    341a:	f9 1f       	adc	r31, r25
    341c:	63 9f       	mul	r22, r19
    341e:	b0 0d       	add	r27, r0
    3420:	e1 1d       	adc	r30, r1
    3422:	f9 1f       	adc	r31, r25
    3424:	bd 01       	movw	r22, r26
    3426:	cf 01       	movw	r24, r30
    3428:	11 24       	eor	r1, r1
    342a:	08 95       	ret

0000342c <__udivmodsi4>:
    342c:	a1 e2       	ldi	r26, 0x21	; 33
    342e:	1a 2e       	mov	r1, r26
    3430:	aa 1b       	sub	r26, r26
    3432:	bb 1b       	sub	r27, r27
    3434:	fd 01       	movw	r30, r26
    3436:	0d c0       	rjmp	.+26     	; 0x3452 <__udivmodsi4_ep>

00003438 <__udivmodsi4_loop>:
    3438:	aa 1f       	adc	r26, r26
    343a:	bb 1f       	adc	r27, r27
    343c:	ee 1f       	adc	r30, r30
    343e:	ff 1f       	adc	r31, r31
    3440:	a2 17       	cp	r26, r18
    3442:	b3 07       	cpc	r27, r19
    3444:	e4 07       	cpc	r30, r20
    3446:	f5 07       	cpc	r31, r21
    3448:	20 f0       	brcs	.+8      	; 0x3452 <__udivmodsi4_ep>
    344a:	a2 1b       	sub	r26, r18
    344c:	b3 0b       	sbc	r27, r19
    344e:	e4 0b       	sbc	r30, r20
    3450:	f5 0b       	sbc	r31, r21

00003452 <__udivmodsi4_ep>:
    3452:	66 1f       	adc	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	88 1f       	adc	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	1a 94       	dec	r1
    345c:	69 f7       	brne	.-38     	; 0x3438 <__udivmodsi4_loop>
    345e:	60 95       	com	r22
    3460:	70 95       	com	r23
    3462:	80 95       	com	r24
    3464:	90 95       	com	r25
    3466:	9b 01       	movw	r18, r22
    3468:	ac 01       	movw	r20, r24
    346a:	bd 01       	movw	r22, r26
    346c:	cf 01       	movw	r24, r30
    346e:	08 95       	ret

00003470 <atoi>:
    3470:	fc 01       	movw	r30, r24
    3472:	88 27       	eor	r24, r24
    3474:	99 27       	eor	r25, r25
    3476:	e8 94       	clt
    3478:	21 91       	ld	r18, Z+
    347a:	20 32       	cpi	r18, 0x20	; 32
    347c:	e9 f3       	breq	.-6      	; 0x3478 <atoi+0x8>
    347e:	29 30       	cpi	r18, 0x09	; 9
    3480:	10 f0       	brcs	.+4      	; 0x3486 <atoi+0x16>
    3482:	2e 30       	cpi	r18, 0x0E	; 14
    3484:	c8 f3       	brcs	.-14     	; 0x3478 <atoi+0x8>
    3486:	2b 32       	cpi	r18, 0x2B	; 43
    3488:	41 f0       	breq	.+16     	; 0x349a <atoi+0x2a>
    348a:	2d 32       	cpi	r18, 0x2D	; 45
    348c:	39 f4       	brne	.+14     	; 0x349c <atoi+0x2c>
    348e:	68 94       	set
    3490:	04 c0       	rjmp	.+8      	; 0x349a <atoi+0x2a>
    3492:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulhi_const_10>
    3496:	82 0f       	add	r24, r18
    3498:	91 1d       	adc	r25, r1
    349a:	21 91       	ld	r18, Z+
    349c:	20 53       	subi	r18, 0x30	; 48
    349e:	2a 30       	cpi	r18, 0x0A	; 10
    34a0:	c0 f3       	brcs	.-16     	; 0x3492 <atoi+0x22>
    34a2:	1e f4       	brtc	.+6      	; 0x34aa <atoi+0x3a>
    34a4:	90 95       	com	r25
    34a6:	81 95       	neg	r24
    34a8:	9f 4f       	sbci	r25, 0xFF	; 255
    34aa:	08 95       	ret

000034ac <strcpy>:
    34ac:	fb 01       	movw	r30, r22
    34ae:	dc 01       	movw	r26, r24
    34b0:	01 90       	ld	r0, Z+
    34b2:	0d 92       	st	X+, r0
    34b4:	00 20       	and	r0, r0
    34b6:	e1 f7       	brne	.-8      	; 0x34b0 <strcpy+0x4>
    34b8:	08 95       	ret

000034ba <__mulhi_const_10>:
    34ba:	7a e0       	ldi	r23, 0x0A	; 10
    34bc:	97 9f       	mul	r25, r23
    34be:	90 2d       	mov	r25, r0
    34c0:	87 9f       	mul	r24, r23
    34c2:	80 2d       	mov	r24, r0
    34c4:	91 0d       	add	r25, r1
    34c6:	11 24       	eor	r1, r1
    34c8:	08 95       	ret

000034ca <sprintf>:
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	2e 97       	sbiw	r28, 0x0e	; 14
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	0d 89       	ldd	r16, Y+21	; 0x15
    34e4:	1e 89       	ldd	r17, Y+22	; 0x16
    34e6:	86 e0       	ldi	r24, 0x06	; 6
    34e8:	8c 83       	std	Y+4, r24	; 0x04
    34ea:	1a 83       	std	Y+2, r17	; 0x02
    34ec:	09 83       	std	Y+1, r16	; 0x01
    34ee:	8f ef       	ldi	r24, 0xFF	; 255
    34f0:	9f e7       	ldi	r25, 0x7F	; 127
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 83       	std	Y+5, r24	; 0x05
    34f6:	9e 01       	movw	r18, r28
    34f8:	27 5e       	subi	r18, 0xE7	; 231
    34fa:	3f 4f       	sbci	r19, 0xFF	; 255
    34fc:	ce 01       	movw	r24, r28
    34fe:	01 96       	adiw	r24, 0x01	; 1
    3500:	6f 89       	ldd	r22, Y+23	; 0x17
    3502:	78 8d       	ldd	r23, Y+24	; 0x18
    3504:	a9 01       	movw	r20, r18
    3506:	0e 94 96 1a 	call	0x352c	; 0x352c <vfprintf>
    350a:	2f 81       	ldd	r18, Y+7	; 0x07
    350c:	38 85       	ldd	r19, Y+8	; 0x08
    350e:	02 0f       	add	r16, r18
    3510:	13 1f       	adc	r17, r19
    3512:	f8 01       	movw	r30, r16
    3514:	10 82       	st	Z, r1
    3516:	2e 96       	adiw	r28, 0x0e	; 14
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    352a:	08 95       	ret

0000352c <vfprintf>:
    352c:	2f 92       	push	r2
    352e:	3f 92       	push	r3
    3530:	4f 92       	push	r4
    3532:	5f 92       	push	r5
    3534:	6f 92       	push	r6
    3536:	7f 92       	push	r7
    3538:	8f 92       	push	r8
    353a:	9f 92       	push	r9
    353c:	af 92       	push	r10
    353e:	bf 92       	push	r11
    3540:	cf 92       	push	r12
    3542:	df 92       	push	r13
    3544:	ef 92       	push	r14
    3546:	ff 92       	push	r15
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	2b 97       	sbiw	r28, 0x0b	; 11
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	3c 01       	movw	r6, r24
    3562:	2b 01       	movw	r4, r22
    3564:	5a 01       	movw	r10, r20
    3566:	fc 01       	movw	r30, r24
    3568:	17 82       	std	Z+7, r1	; 0x07
    356a:	16 82       	std	Z+6, r1	; 0x06
    356c:	83 81       	ldd	r24, Z+3	; 0x03
    356e:	81 fd       	sbrc	r24, 1
    3570:	03 c0       	rjmp	.+6      	; 0x3578 <vfprintf+0x4c>
    3572:	6f ef       	ldi	r22, 0xFF	; 255
    3574:	7f ef       	ldi	r23, 0xFF	; 255
    3576:	c6 c1       	rjmp	.+908    	; 0x3904 <vfprintf+0x3d8>
    3578:	9a e0       	ldi	r25, 0x0A	; 10
    357a:	89 2e       	mov	r8, r25
    357c:	1e 01       	movw	r2, r28
    357e:	08 94       	sec
    3580:	21 1c       	adc	r2, r1
    3582:	31 1c       	adc	r3, r1
    3584:	f3 01       	movw	r30, r6
    3586:	23 81       	ldd	r18, Z+3	; 0x03
    3588:	f2 01       	movw	r30, r4
    358a:	23 fd       	sbrc	r18, 3
    358c:	85 91       	lpm	r24, Z+
    358e:	23 ff       	sbrs	r18, 3
    3590:	81 91       	ld	r24, Z+
    3592:	2f 01       	movw	r4, r30
    3594:	88 23       	and	r24, r24
    3596:	09 f4       	brne	.+2      	; 0x359a <vfprintf+0x6e>
    3598:	b2 c1       	rjmp	.+868    	; 0x38fe <vfprintf+0x3d2>
    359a:	85 32       	cpi	r24, 0x25	; 37
    359c:	39 f4       	brne	.+14     	; 0x35ac <vfprintf+0x80>
    359e:	23 fd       	sbrc	r18, 3
    35a0:	85 91       	lpm	r24, Z+
    35a2:	23 ff       	sbrs	r18, 3
    35a4:	81 91       	ld	r24, Z+
    35a6:	2f 01       	movw	r4, r30
    35a8:	85 32       	cpi	r24, 0x25	; 37
    35aa:	29 f4       	brne	.+10     	; 0x35b6 <vfprintf+0x8a>
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	b3 01       	movw	r22, r6
    35b0:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    35b4:	e7 cf       	rjmp	.-50     	; 0x3584 <vfprintf+0x58>
    35b6:	98 2f       	mov	r25, r24
    35b8:	ff 24       	eor	r15, r15
    35ba:	ee 24       	eor	r14, r14
    35bc:	99 24       	eor	r9, r9
    35be:	ff e1       	ldi	r31, 0x1F	; 31
    35c0:	ff 15       	cp	r31, r15
    35c2:	d0 f0       	brcs	.+52     	; 0x35f8 <vfprintf+0xcc>
    35c4:	9b 32       	cpi	r25, 0x2B	; 43
    35c6:	69 f0       	breq	.+26     	; 0x35e2 <vfprintf+0xb6>
    35c8:	9c 32       	cpi	r25, 0x2C	; 44
    35ca:	28 f4       	brcc	.+10     	; 0x35d6 <vfprintf+0xaa>
    35cc:	90 32       	cpi	r25, 0x20	; 32
    35ce:	59 f0       	breq	.+22     	; 0x35e6 <vfprintf+0xba>
    35d0:	93 32       	cpi	r25, 0x23	; 35
    35d2:	91 f4       	brne	.+36     	; 0x35f8 <vfprintf+0xcc>
    35d4:	0e c0       	rjmp	.+28     	; 0x35f2 <vfprintf+0xc6>
    35d6:	9d 32       	cpi	r25, 0x2D	; 45
    35d8:	49 f0       	breq	.+18     	; 0x35ec <vfprintf+0xc0>
    35da:	90 33       	cpi	r25, 0x30	; 48
    35dc:	69 f4       	brne	.+26     	; 0x35f8 <vfprintf+0xcc>
    35de:	41 e0       	ldi	r20, 0x01	; 1
    35e0:	24 c0       	rjmp	.+72     	; 0x362a <vfprintf+0xfe>
    35e2:	52 e0       	ldi	r21, 0x02	; 2
    35e4:	f5 2a       	or	r15, r21
    35e6:	84 e0       	ldi	r24, 0x04	; 4
    35e8:	f8 2a       	or	r15, r24
    35ea:	28 c0       	rjmp	.+80     	; 0x363c <vfprintf+0x110>
    35ec:	98 e0       	ldi	r25, 0x08	; 8
    35ee:	f9 2a       	or	r15, r25
    35f0:	25 c0       	rjmp	.+74     	; 0x363c <vfprintf+0x110>
    35f2:	e0 e1       	ldi	r30, 0x10	; 16
    35f4:	fe 2a       	or	r15, r30
    35f6:	22 c0       	rjmp	.+68     	; 0x363c <vfprintf+0x110>
    35f8:	f7 fc       	sbrc	r15, 7
    35fa:	29 c0       	rjmp	.+82     	; 0x364e <vfprintf+0x122>
    35fc:	89 2f       	mov	r24, r25
    35fe:	80 53       	subi	r24, 0x30	; 48
    3600:	8a 30       	cpi	r24, 0x0A	; 10
    3602:	70 f4       	brcc	.+28     	; 0x3620 <vfprintf+0xf4>
    3604:	f6 fe       	sbrs	r15, 6
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <vfprintf+0xe6>
    3608:	98 9c       	mul	r9, r8
    360a:	90 2c       	mov	r9, r0
    360c:	11 24       	eor	r1, r1
    360e:	98 0e       	add	r9, r24
    3610:	15 c0       	rjmp	.+42     	; 0x363c <vfprintf+0x110>
    3612:	e8 9c       	mul	r14, r8
    3614:	e0 2c       	mov	r14, r0
    3616:	11 24       	eor	r1, r1
    3618:	e8 0e       	add	r14, r24
    361a:	f0 e2       	ldi	r31, 0x20	; 32
    361c:	ff 2a       	or	r15, r31
    361e:	0e c0       	rjmp	.+28     	; 0x363c <vfprintf+0x110>
    3620:	9e 32       	cpi	r25, 0x2E	; 46
    3622:	29 f4       	brne	.+10     	; 0x362e <vfprintf+0x102>
    3624:	f6 fc       	sbrc	r15, 6
    3626:	6b c1       	rjmp	.+726    	; 0x38fe <vfprintf+0x3d2>
    3628:	40 e4       	ldi	r20, 0x40	; 64
    362a:	f4 2a       	or	r15, r20
    362c:	07 c0       	rjmp	.+14     	; 0x363c <vfprintf+0x110>
    362e:	9c 36       	cpi	r25, 0x6C	; 108
    3630:	19 f4       	brne	.+6      	; 0x3638 <vfprintf+0x10c>
    3632:	50 e8       	ldi	r21, 0x80	; 128
    3634:	f5 2a       	or	r15, r21
    3636:	02 c0       	rjmp	.+4      	; 0x363c <vfprintf+0x110>
    3638:	98 36       	cpi	r25, 0x68	; 104
    363a:	49 f4       	brne	.+18     	; 0x364e <vfprintf+0x122>
    363c:	f2 01       	movw	r30, r4
    363e:	23 fd       	sbrc	r18, 3
    3640:	95 91       	lpm	r25, Z+
    3642:	23 ff       	sbrs	r18, 3
    3644:	91 91       	ld	r25, Z+
    3646:	2f 01       	movw	r4, r30
    3648:	99 23       	and	r25, r25
    364a:	09 f0       	breq	.+2      	; 0x364e <vfprintf+0x122>
    364c:	b8 cf       	rjmp	.-144    	; 0x35be <vfprintf+0x92>
    364e:	89 2f       	mov	r24, r25
    3650:	85 54       	subi	r24, 0x45	; 69
    3652:	83 30       	cpi	r24, 0x03	; 3
    3654:	18 f0       	brcs	.+6      	; 0x365c <vfprintf+0x130>
    3656:	80 52       	subi	r24, 0x20	; 32
    3658:	83 30       	cpi	r24, 0x03	; 3
    365a:	38 f4       	brcc	.+14     	; 0x366a <vfprintf+0x13e>
    365c:	44 e0       	ldi	r20, 0x04	; 4
    365e:	50 e0       	ldi	r21, 0x00	; 0
    3660:	a4 0e       	add	r10, r20
    3662:	b5 1e       	adc	r11, r21
    3664:	5f e3       	ldi	r21, 0x3F	; 63
    3666:	59 83       	std	Y+1, r21	; 0x01
    3668:	0f c0       	rjmp	.+30     	; 0x3688 <vfprintf+0x15c>
    366a:	93 36       	cpi	r25, 0x63	; 99
    366c:	31 f0       	breq	.+12     	; 0x367a <vfprintf+0x14e>
    366e:	93 37       	cpi	r25, 0x73	; 115
    3670:	79 f0       	breq	.+30     	; 0x3690 <vfprintf+0x164>
    3672:	93 35       	cpi	r25, 0x53	; 83
    3674:	09 f0       	breq	.+2      	; 0x3678 <vfprintf+0x14c>
    3676:	56 c0       	rjmp	.+172    	; 0x3724 <vfprintf+0x1f8>
    3678:	20 c0       	rjmp	.+64     	; 0x36ba <vfprintf+0x18e>
    367a:	f5 01       	movw	r30, r10
    367c:	80 81       	ld	r24, Z
    367e:	89 83       	std	Y+1, r24	; 0x01
    3680:	42 e0       	ldi	r20, 0x02	; 2
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	a4 0e       	add	r10, r20
    3686:	b5 1e       	adc	r11, r21
    3688:	61 01       	movw	r12, r2
    368a:	01 e0       	ldi	r16, 0x01	; 1
    368c:	10 e0       	ldi	r17, 0x00	; 0
    368e:	12 c0       	rjmp	.+36     	; 0x36b4 <vfprintf+0x188>
    3690:	f5 01       	movw	r30, r10
    3692:	c0 80       	ld	r12, Z
    3694:	d1 80       	ldd	r13, Z+1	; 0x01
    3696:	f6 fc       	sbrc	r15, 6
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <vfprintf+0x174>
    369a:	6f ef       	ldi	r22, 0xFF	; 255
    369c:	7f ef       	ldi	r23, 0xFF	; 255
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <vfprintf+0x178>
    36a0:	69 2d       	mov	r22, r9
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	42 e0       	ldi	r20, 0x02	; 2
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	a4 0e       	add	r10, r20
    36aa:	b5 1e       	adc	r11, r21
    36ac:	c6 01       	movw	r24, r12
    36ae:	0e 94 a7 1c 	call	0x394e	; 0x394e <strnlen>
    36b2:	8c 01       	movw	r16, r24
    36b4:	5f e7       	ldi	r21, 0x7F	; 127
    36b6:	f5 22       	and	r15, r21
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <vfprintf+0x1b6>
    36ba:	f5 01       	movw	r30, r10
    36bc:	c0 80       	ld	r12, Z
    36be:	d1 80       	ldd	r13, Z+1	; 0x01
    36c0:	f6 fc       	sbrc	r15, 6
    36c2:	03 c0       	rjmp	.+6      	; 0x36ca <vfprintf+0x19e>
    36c4:	6f ef       	ldi	r22, 0xFF	; 255
    36c6:	7f ef       	ldi	r23, 0xFF	; 255
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <vfprintf+0x1a2>
    36ca:	69 2d       	mov	r22, r9
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	42 e0       	ldi	r20, 0x02	; 2
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	a4 0e       	add	r10, r20
    36d4:	b5 1e       	adc	r11, r21
    36d6:	c6 01       	movw	r24, r12
    36d8:	0e 94 9c 1c 	call	0x3938	; 0x3938 <strnlen_P>
    36dc:	8c 01       	movw	r16, r24
    36de:	50 e8       	ldi	r21, 0x80	; 128
    36e0:	f5 2a       	or	r15, r21
    36e2:	f3 fe       	sbrs	r15, 3
    36e4:	07 c0       	rjmp	.+14     	; 0x36f4 <vfprintf+0x1c8>
    36e6:	1a c0       	rjmp	.+52     	; 0x371c <vfprintf+0x1f0>
    36e8:	80 e2       	ldi	r24, 0x20	; 32
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	b3 01       	movw	r22, r6
    36ee:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    36f2:	ea 94       	dec	r14
    36f4:	8e 2d       	mov	r24, r14
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	08 17       	cp	r16, r24
    36fa:	19 07       	cpc	r17, r25
    36fc:	a8 f3       	brcs	.-22     	; 0x36e8 <vfprintf+0x1bc>
    36fe:	0e c0       	rjmp	.+28     	; 0x371c <vfprintf+0x1f0>
    3700:	f6 01       	movw	r30, r12
    3702:	f7 fc       	sbrc	r15, 7
    3704:	85 91       	lpm	r24, Z+
    3706:	f7 fe       	sbrs	r15, 7
    3708:	81 91       	ld	r24, Z+
    370a:	6f 01       	movw	r12, r30
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	b3 01       	movw	r22, r6
    3710:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    3714:	e1 10       	cpse	r14, r1
    3716:	ea 94       	dec	r14
    3718:	01 50       	subi	r16, 0x01	; 1
    371a:	10 40       	sbci	r17, 0x00	; 0
    371c:	01 15       	cp	r16, r1
    371e:	11 05       	cpc	r17, r1
    3720:	79 f7       	brne	.-34     	; 0x3700 <vfprintf+0x1d4>
    3722:	ea c0       	rjmp	.+468    	; 0x38f8 <vfprintf+0x3cc>
    3724:	94 36       	cpi	r25, 0x64	; 100
    3726:	11 f0       	breq	.+4      	; 0x372c <vfprintf+0x200>
    3728:	99 36       	cpi	r25, 0x69	; 105
    372a:	69 f5       	brne	.+90     	; 0x3786 <vfprintf+0x25a>
    372c:	f7 fe       	sbrs	r15, 7
    372e:	08 c0       	rjmp	.+16     	; 0x3740 <vfprintf+0x214>
    3730:	f5 01       	movw	r30, r10
    3732:	20 81       	ld	r18, Z
    3734:	31 81       	ldd	r19, Z+1	; 0x01
    3736:	42 81       	ldd	r20, Z+2	; 0x02
    3738:	53 81       	ldd	r21, Z+3	; 0x03
    373a:	84 e0       	ldi	r24, 0x04	; 4
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	0a c0       	rjmp	.+20     	; 0x3754 <vfprintf+0x228>
    3740:	f5 01       	movw	r30, r10
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	9c 01       	movw	r18, r24
    3748:	44 27       	eor	r20, r20
    374a:	37 fd       	sbrc	r19, 7
    374c:	40 95       	com	r20
    374e:	54 2f       	mov	r21, r20
    3750:	82 e0       	ldi	r24, 0x02	; 2
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	a8 0e       	add	r10, r24
    3756:	b9 1e       	adc	r11, r25
    3758:	9f e6       	ldi	r25, 0x6F	; 111
    375a:	f9 22       	and	r15, r25
    375c:	57 ff       	sbrs	r21, 7
    375e:	09 c0       	rjmp	.+18     	; 0x3772 <vfprintf+0x246>
    3760:	50 95       	com	r21
    3762:	40 95       	com	r20
    3764:	30 95       	com	r19
    3766:	21 95       	neg	r18
    3768:	3f 4f       	sbci	r19, 0xFF	; 255
    376a:	4f 4f       	sbci	r20, 0xFF	; 255
    376c:	5f 4f       	sbci	r21, 0xFF	; 255
    376e:	e0 e8       	ldi	r30, 0x80	; 128
    3770:	fe 2a       	or	r15, r30
    3772:	ca 01       	movw	r24, r20
    3774:	b9 01       	movw	r22, r18
    3776:	a1 01       	movw	r20, r2
    3778:	2a e0       	ldi	r18, 0x0A	; 10
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__ultoa_invert>
    3780:	d8 2e       	mov	r13, r24
    3782:	d2 18       	sub	r13, r2
    3784:	40 c0       	rjmp	.+128    	; 0x3806 <vfprintf+0x2da>
    3786:	95 37       	cpi	r25, 0x75	; 117
    3788:	29 f4       	brne	.+10     	; 0x3794 <vfprintf+0x268>
    378a:	1f 2d       	mov	r17, r15
    378c:	1f 7e       	andi	r17, 0xEF	; 239
    378e:	2a e0       	ldi	r18, 0x0A	; 10
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	1d c0       	rjmp	.+58     	; 0x37ce <vfprintf+0x2a2>
    3794:	1f 2d       	mov	r17, r15
    3796:	19 7f       	andi	r17, 0xF9	; 249
    3798:	9f 36       	cpi	r25, 0x6F	; 111
    379a:	61 f0       	breq	.+24     	; 0x37b4 <vfprintf+0x288>
    379c:	90 37       	cpi	r25, 0x70	; 112
    379e:	20 f4       	brcc	.+8      	; 0x37a8 <vfprintf+0x27c>
    37a0:	98 35       	cpi	r25, 0x58	; 88
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <vfprintf+0x27a>
    37a4:	ac c0       	rjmp	.+344    	; 0x38fe <vfprintf+0x3d2>
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <vfprintf+0x29a>
    37a8:	90 37       	cpi	r25, 0x70	; 112
    37aa:	39 f0       	breq	.+14     	; 0x37ba <vfprintf+0x28e>
    37ac:	98 37       	cpi	r25, 0x78	; 120
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <vfprintf+0x286>
    37b0:	a6 c0       	rjmp	.+332    	; 0x38fe <vfprintf+0x3d2>
    37b2:	04 c0       	rjmp	.+8      	; 0x37bc <vfprintf+0x290>
    37b4:	28 e0       	ldi	r18, 0x08	; 8
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	0a c0       	rjmp	.+20     	; 0x37ce <vfprintf+0x2a2>
    37ba:	10 61       	ori	r17, 0x10	; 16
    37bc:	14 fd       	sbrc	r17, 4
    37be:	14 60       	ori	r17, 0x04	; 4
    37c0:	20 e1       	ldi	r18, 0x10	; 16
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	04 c0       	rjmp	.+8      	; 0x37ce <vfprintf+0x2a2>
    37c6:	14 fd       	sbrc	r17, 4
    37c8:	16 60       	ori	r17, 0x06	; 6
    37ca:	20 e1       	ldi	r18, 0x10	; 16
    37cc:	32 e0       	ldi	r19, 0x02	; 2
    37ce:	17 ff       	sbrs	r17, 7
    37d0:	08 c0       	rjmp	.+16     	; 0x37e2 <vfprintf+0x2b6>
    37d2:	f5 01       	movw	r30, r10
    37d4:	60 81       	ld	r22, Z
    37d6:	71 81       	ldd	r23, Z+1	; 0x01
    37d8:	82 81       	ldd	r24, Z+2	; 0x02
    37da:	93 81       	ldd	r25, Z+3	; 0x03
    37dc:	44 e0       	ldi	r20, 0x04	; 4
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	08 c0       	rjmp	.+16     	; 0x37f2 <vfprintf+0x2c6>
    37e2:	f5 01       	movw	r30, r10
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	bc 01       	movw	r22, r24
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	42 e0       	ldi	r20, 0x02	; 2
    37f0:	50 e0       	ldi	r21, 0x00	; 0
    37f2:	a4 0e       	add	r10, r20
    37f4:	b5 1e       	adc	r11, r21
    37f6:	a1 01       	movw	r20, r2
    37f8:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__ultoa_invert>
    37fc:	d8 2e       	mov	r13, r24
    37fe:	d2 18       	sub	r13, r2
    3800:	8f e7       	ldi	r24, 0x7F	; 127
    3802:	f8 2e       	mov	r15, r24
    3804:	f1 22       	and	r15, r17
    3806:	f6 fe       	sbrs	r15, 6
    3808:	0b c0       	rjmp	.+22     	; 0x3820 <vfprintf+0x2f4>
    380a:	5e ef       	ldi	r21, 0xFE	; 254
    380c:	f5 22       	and	r15, r21
    380e:	d9 14       	cp	r13, r9
    3810:	38 f4       	brcc	.+14     	; 0x3820 <vfprintf+0x2f4>
    3812:	f4 fe       	sbrs	r15, 4
    3814:	07 c0       	rjmp	.+14     	; 0x3824 <vfprintf+0x2f8>
    3816:	f2 fc       	sbrc	r15, 2
    3818:	05 c0       	rjmp	.+10     	; 0x3824 <vfprintf+0x2f8>
    381a:	8f ee       	ldi	r24, 0xEF	; 239
    381c:	f8 22       	and	r15, r24
    381e:	02 c0       	rjmp	.+4      	; 0x3824 <vfprintf+0x2f8>
    3820:	1d 2d       	mov	r17, r13
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <vfprintf+0x2fa>
    3824:	19 2d       	mov	r17, r9
    3826:	f4 fe       	sbrs	r15, 4
    3828:	0d c0       	rjmp	.+26     	; 0x3844 <vfprintf+0x318>
    382a:	fe 01       	movw	r30, r28
    382c:	ed 0d       	add	r30, r13
    382e:	f1 1d       	adc	r31, r1
    3830:	80 81       	ld	r24, Z
    3832:	80 33       	cpi	r24, 0x30	; 48
    3834:	19 f4       	brne	.+6      	; 0x383c <vfprintf+0x310>
    3836:	99 ee       	ldi	r25, 0xE9	; 233
    3838:	f9 22       	and	r15, r25
    383a:	08 c0       	rjmp	.+16     	; 0x384c <vfprintf+0x320>
    383c:	1f 5f       	subi	r17, 0xFF	; 255
    383e:	f2 fe       	sbrs	r15, 2
    3840:	05 c0       	rjmp	.+10     	; 0x384c <vfprintf+0x320>
    3842:	03 c0       	rjmp	.+6      	; 0x384a <vfprintf+0x31e>
    3844:	8f 2d       	mov	r24, r15
    3846:	86 78       	andi	r24, 0x86	; 134
    3848:	09 f0       	breq	.+2      	; 0x384c <vfprintf+0x320>
    384a:	1f 5f       	subi	r17, 0xFF	; 255
    384c:	0f 2d       	mov	r16, r15
    384e:	f3 fc       	sbrc	r15, 3
    3850:	14 c0       	rjmp	.+40     	; 0x387a <vfprintf+0x34e>
    3852:	f0 fe       	sbrs	r15, 0
    3854:	0f c0       	rjmp	.+30     	; 0x3874 <vfprintf+0x348>
    3856:	1e 15       	cp	r17, r14
    3858:	10 f0       	brcs	.+4      	; 0x385e <vfprintf+0x332>
    385a:	9d 2c       	mov	r9, r13
    385c:	0b c0       	rjmp	.+22     	; 0x3874 <vfprintf+0x348>
    385e:	9d 2c       	mov	r9, r13
    3860:	9e 0c       	add	r9, r14
    3862:	91 1a       	sub	r9, r17
    3864:	1e 2d       	mov	r17, r14
    3866:	06 c0       	rjmp	.+12     	; 0x3874 <vfprintf+0x348>
    3868:	80 e2       	ldi	r24, 0x20	; 32
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	b3 01       	movw	r22, r6
    386e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    3872:	1f 5f       	subi	r17, 0xFF	; 255
    3874:	1e 15       	cp	r17, r14
    3876:	c0 f3       	brcs	.-16     	; 0x3868 <vfprintf+0x33c>
    3878:	04 c0       	rjmp	.+8      	; 0x3882 <vfprintf+0x356>
    387a:	1e 15       	cp	r17, r14
    387c:	10 f4       	brcc	.+4      	; 0x3882 <vfprintf+0x356>
    387e:	e1 1a       	sub	r14, r17
    3880:	01 c0       	rjmp	.+2      	; 0x3884 <vfprintf+0x358>
    3882:	ee 24       	eor	r14, r14
    3884:	04 ff       	sbrs	r16, 4
    3886:	0f c0       	rjmp	.+30     	; 0x38a6 <vfprintf+0x37a>
    3888:	80 e3       	ldi	r24, 0x30	; 48
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	b3 01       	movw	r22, r6
    388e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    3892:	02 ff       	sbrs	r16, 2
    3894:	1d c0       	rjmp	.+58     	; 0x38d0 <vfprintf+0x3a4>
    3896:	01 fd       	sbrc	r16, 1
    3898:	03 c0       	rjmp	.+6      	; 0x38a0 <vfprintf+0x374>
    389a:	88 e7       	ldi	r24, 0x78	; 120
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0e c0       	rjmp	.+28     	; 0x38bc <vfprintf+0x390>
    38a0:	88 e5       	ldi	r24, 0x58	; 88
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	0b c0       	rjmp	.+22     	; 0x38bc <vfprintf+0x390>
    38a6:	80 2f       	mov	r24, r16
    38a8:	86 78       	andi	r24, 0x86	; 134
    38aa:	91 f0       	breq	.+36     	; 0x38d0 <vfprintf+0x3a4>
    38ac:	01 ff       	sbrs	r16, 1
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <vfprintf+0x388>
    38b0:	8b e2       	ldi	r24, 0x2B	; 43
    38b2:	01 c0       	rjmp	.+2      	; 0x38b6 <vfprintf+0x38a>
    38b4:	80 e2       	ldi	r24, 0x20	; 32
    38b6:	f7 fc       	sbrc	r15, 7
    38b8:	8d e2       	ldi	r24, 0x2D	; 45
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	b3 01       	movw	r22, r6
    38be:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    38c2:	06 c0       	rjmp	.+12     	; 0x38d0 <vfprintf+0x3a4>
    38c4:	80 e3       	ldi	r24, 0x30	; 48
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	b3 01       	movw	r22, r6
    38ca:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    38ce:	9a 94       	dec	r9
    38d0:	d9 14       	cp	r13, r9
    38d2:	c0 f3       	brcs	.-16     	; 0x38c4 <vfprintf+0x398>
    38d4:	da 94       	dec	r13
    38d6:	f1 01       	movw	r30, r2
    38d8:	ed 0d       	add	r30, r13
    38da:	f1 1d       	adc	r31, r1
    38dc:	80 81       	ld	r24, Z
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	b3 01       	movw	r22, r6
    38e2:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    38e6:	dd 20       	and	r13, r13
    38e8:	a9 f7       	brne	.-22     	; 0x38d4 <vfprintf+0x3a8>
    38ea:	06 c0       	rjmp	.+12     	; 0x38f8 <vfprintf+0x3cc>
    38ec:	80 e2       	ldi	r24, 0x20	; 32
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	b3 01       	movw	r22, r6
    38f2:	0e 94 b2 1c 	call	0x3964	; 0x3964 <fputc>
    38f6:	ea 94       	dec	r14
    38f8:	ee 20       	and	r14, r14
    38fa:	c1 f7       	brne	.-16     	; 0x38ec <vfprintf+0x3c0>
    38fc:	43 ce       	rjmp	.-890    	; 0x3584 <vfprintf+0x58>
    38fe:	f3 01       	movw	r30, r6
    3900:	66 81       	ldd	r22, Z+6	; 0x06
    3902:	77 81       	ldd	r23, Z+7	; 0x07
    3904:	cb 01       	movw	r24, r22
    3906:	2b 96       	adiw	r28, 0x0b	; 11
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	df 90       	pop	r13
    3920:	cf 90       	pop	r12
    3922:	bf 90       	pop	r11
    3924:	af 90       	pop	r10
    3926:	9f 90       	pop	r9
    3928:	8f 90       	pop	r8
    392a:	7f 90       	pop	r7
    392c:	6f 90       	pop	r6
    392e:	5f 90       	pop	r5
    3930:	4f 90       	pop	r4
    3932:	3f 90       	pop	r3
    3934:	2f 90       	pop	r2
    3936:	08 95       	ret

00003938 <strnlen_P>:
    3938:	fc 01       	movw	r30, r24
    393a:	05 90       	lpm	r0, Z+
    393c:	61 50       	subi	r22, 0x01	; 1
    393e:	70 40       	sbci	r23, 0x00	; 0
    3940:	01 10       	cpse	r0, r1
    3942:	d8 f7       	brcc	.-10     	; 0x393a <strnlen_P+0x2>
    3944:	80 95       	com	r24
    3946:	90 95       	com	r25
    3948:	8e 0f       	add	r24, r30
    394a:	9f 1f       	adc	r25, r31
    394c:	08 95       	ret

0000394e <strnlen>:
    394e:	fc 01       	movw	r30, r24
    3950:	61 50       	subi	r22, 0x01	; 1
    3952:	70 40       	sbci	r23, 0x00	; 0
    3954:	01 90       	ld	r0, Z+
    3956:	01 10       	cpse	r0, r1
    3958:	d8 f7       	brcc	.-10     	; 0x3950 <strnlen+0x2>
    395a:	80 95       	com	r24
    395c:	90 95       	com	r25
    395e:	8e 0f       	add	r24, r30
    3960:	9f 1f       	adc	r25, r31
    3962:	08 95       	ret

00003964 <fputc>:
    3964:	0f 93       	push	r16
    3966:	1f 93       	push	r17
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	8c 01       	movw	r16, r24
    396e:	eb 01       	movw	r28, r22
    3970:	8b 81       	ldd	r24, Y+3	; 0x03
    3972:	81 ff       	sbrs	r24, 1
    3974:	1b c0       	rjmp	.+54     	; 0x39ac <fputc+0x48>
    3976:	82 ff       	sbrs	r24, 2
    3978:	0d c0       	rjmp	.+26     	; 0x3994 <fputc+0x30>
    397a:	2e 81       	ldd	r18, Y+6	; 0x06
    397c:	3f 81       	ldd	r19, Y+7	; 0x07
    397e:	8c 81       	ldd	r24, Y+4	; 0x04
    3980:	9d 81       	ldd	r25, Y+5	; 0x05
    3982:	28 17       	cp	r18, r24
    3984:	39 07       	cpc	r19, r25
    3986:	64 f4       	brge	.+24     	; 0x39a0 <fputc+0x3c>
    3988:	e8 81       	ld	r30, Y
    398a:	f9 81       	ldd	r31, Y+1	; 0x01
    398c:	01 93       	st	Z+, r16
    398e:	f9 83       	std	Y+1, r31	; 0x01
    3990:	e8 83       	st	Y, r30
    3992:	06 c0       	rjmp	.+12     	; 0x39a0 <fputc+0x3c>
    3994:	e8 85       	ldd	r30, Y+8	; 0x08
    3996:	f9 85       	ldd	r31, Y+9	; 0x09
    3998:	80 2f       	mov	r24, r16
    399a:	09 95       	icall
    399c:	89 2b       	or	r24, r25
    399e:	31 f4       	brne	.+12     	; 0x39ac <fputc+0x48>
    39a0:	8e 81       	ldd	r24, Y+6	; 0x06
    39a2:	9f 81       	ldd	r25, Y+7	; 0x07
    39a4:	01 96       	adiw	r24, 0x01	; 1
    39a6:	9f 83       	std	Y+7, r25	; 0x07
    39a8:	8e 83       	std	Y+6, r24	; 0x06
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <fputc+0x4c>
    39ac:	0f ef       	ldi	r16, 0xFF	; 255
    39ae:	1f ef       	ldi	r17, 0xFF	; 255
    39b0:	c8 01       	movw	r24, r16
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	08 95       	ret

000039bc <__ultoa_invert>:
    39bc:	fa 01       	movw	r30, r20
    39be:	aa 27       	eor	r26, r26
    39c0:	28 30       	cpi	r18, 0x08	; 8
    39c2:	51 f1       	breq	.+84     	; 0x3a18 <__ultoa_invert+0x5c>
    39c4:	20 31       	cpi	r18, 0x10	; 16
    39c6:	81 f1       	breq	.+96     	; 0x3a28 <__ultoa_invert+0x6c>
    39c8:	e8 94       	clt
    39ca:	6f 93       	push	r22
    39cc:	6e 7f       	andi	r22, 0xFE	; 254
    39ce:	6e 5f       	subi	r22, 0xFE	; 254
    39d0:	7f 4f       	sbci	r23, 0xFF	; 255
    39d2:	8f 4f       	sbci	r24, 0xFF	; 255
    39d4:	9f 4f       	sbci	r25, 0xFF	; 255
    39d6:	af 4f       	sbci	r26, 0xFF	; 255
    39d8:	b1 e0       	ldi	r27, 0x01	; 1
    39da:	3e d0       	rcall	.+124    	; 0x3a58 <__ultoa_invert+0x9c>
    39dc:	b4 e0       	ldi	r27, 0x04	; 4
    39de:	3c d0       	rcall	.+120    	; 0x3a58 <__ultoa_invert+0x9c>
    39e0:	67 0f       	add	r22, r23
    39e2:	78 1f       	adc	r23, r24
    39e4:	89 1f       	adc	r24, r25
    39e6:	9a 1f       	adc	r25, r26
    39e8:	a1 1d       	adc	r26, r1
    39ea:	68 0f       	add	r22, r24
    39ec:	79 1f       	adc	r23, r25
    39ee:	8a 1f       	adc	r24, r26
    39f0:	91 1d       	adc	r25, r1
    39f2:	a1 1d       	adc	r26, r1
    39f4:	6a 0f       	add	r22, r26
    39f6:	71 1d       	adc	r23, r1
    39f8:	81 1d       	adc	r24, r1
    39fa:	91 1d       	adc	r25, r1
    39fc:	a1 1d       	adc	r26, r1
    39fe:	20 d0       	rcall	.+64     	; 0x3a40 <__ultoa_invert+0x84>
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <__ultoa_invert+0x48>
    3a02:	68 94       	set
    3a04:	3f 91       	pop	r19
    3a06:	2a e0       	ldi	r18, 0x0A	; 10
    3a08:	26 9f       	mul	r18, r22
    3a0a:	11 24       	eor	r1, r1
    3a0c:	30 19       	sub	r19, r0
    3a0e:	30 5d       	subi	r19, 0xD0	; 208
    3a10:	31 93       	st	Z+, r19
    3a12:	de f6       	brtc	.-74     	; 0x39ca <__ultoa_invert+0xe>
    3a14:	cf 01       	movw	r24, r30
    3a16:	08 95       	ret
    3a18:	46 2f       	mov	r20, r22
    3a1a:	47 70       	andi	r20, 0x07	; 7
    3a1c:	40 5d       	subi	r20, 0xD0	; 208
    3a1e:	41 93       	st	Z+, r20
    3a20:	b3 e0       	ldi	r27, 0x03	; 3
    3a22:	0f d0       	rcall	.+30     	; 0x3a42 <__ultoa_invert+0x86>
    3a24:	c9 f7       	brne	.-14     	; 0x3a18 <__ultoa_invert+0x5c>
    3a26:	f6 cf       	rjmp	.-20     	; 0x3a14 <__ultoa_invert+0x58>
    3a28:	46 2f       	mov	r20, r22
    3a2a:	4f 70       	andi	r20, 0x0F	; 15
    3a2c:	40 5d       	subi	r20, 0xD0	; 208
    3a2e:	4a 33       	cpi	r20, 0x3A	; 58
    3a30:	18 f0       	brcs	.+6      	; 0x3a38 <__ultoa_invert+0x7c>
    3a32:	49 5d       	subi	r20, 0xD9	; 217
    3a34:	31 fd       	sbrc	r19, 1
    3a36:	40 52       	subi	r20, 0x20	; 32
    3a38:	41 93       	st	Z+, r20
    3a3a:	02 d0       	rcall	.+4      	; 0x3a40 <__ultoa_invert+0x84>
    3a3c:	a9 f7       	brne	.-22     	; 0x3a28 <__ultoa_invert+0x6c>
    3a3e:	ea cf       	rjmp	.-44     	; 0x3a14 <__ultoa_invert+0x58>
    3a40:	b4 e0       	ldi	r27, 0x04	; 4
    3a42:	a6 95       	lsr	r26
    3a44:	97 95       	ror	r25
    3a46:	87 95       	ror	r24
    3a48:	77 95       	ror	r23
    3a4a:	67 95       	ror	r22
    3a4c:	ba 95       	dec	r27
    3a4e:	c9 f7       	brne	.-14     	; 0x3a42 <__ultoa_invert+0x86>
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	61 05       	cpc	r22, r1
    3a54:	71 05       	cpc	r23, r1
    3a56:	08 95       	ret
    3a58:	9b 01       	movw	r18, r22
    3a5a:	ac 01       	movw	r20, r24
    3a5c:	0a 2e       	mov	r0, r26
    3a5e:	06 94       	lsr	r0
    3a60:	57 95       	ror	r21
    3a62:	47 95       	ror	r20
    3a64:	37 95       	ror	r19
    3a66:	27 95       	ror	r18
    3a68:	ba 95       	dec	r27
    3a6a:	c9 f7       	brne	.-14     	; 0x3a5e <__ultoa_invert+0xa2>
    3a6c:	62 0f       	add	r22, r18
    3a6e:	73 1f       	adc	r23, r19
    3a70:	84 1f       	adc	r24, r20
    3a72:	95 1f       	adc	r25, r21
    3a74:	a0 1d       	adc	r26, r0
    3a76:	08 95       	ret

00003a78 <_exit>:
    3a78:	f8 94       	cli

00003a7a <__stop_program>:
    3a7a:	ff cf       	rjmp	.-2      	; 0x3a7a <__stop_program>
