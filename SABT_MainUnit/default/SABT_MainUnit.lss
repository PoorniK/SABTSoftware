
SABT_MainUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027e  00800100  000039fa  00003a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a5  0080037e  0080037e  00003d0c  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000310d  00000000  00000000  00003e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000050e1  00000000  00000000  00006f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d16  00000000  00000000  0000c07a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b78  00000000  00000000  0000cd90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000f908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000112b  00000000  00000000  0000ff78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c1a  00000000  00000000  000110a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00012cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_13>
      38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      50:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_20>
      54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      64:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      68:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      6c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      70:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_28>
      74:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      78:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      7c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      80:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      84:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      88:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      8c:	88 18       	sub	r8, r8
      8e:	8b 18       	sub	r8, r11
      90:	8e 18       	sub	r8, r14
      92:	91 18       	sub	r9, r1
      94:	94 18       	sub	r9, r4
      96:	97 18       	sub	r9, r7
      98:	9a 18       	sub	r9, r10
      9a:	9d 18       	sub	r9, r13
      9c:	a0 18       	sub	r10, r0
      9e:	a3 18       	sub	r10, r3
      a0:	a6 18       	sub	r10, r6
      a2:	a9 18       	sub	r10, r9
      a4:	ac 18       	sub	r10, r12
      a6:	af 18       	sub	r10, r15
      a8:	b2 18       	sub	r11, r2
      aa:	b5 18       	sub	r11, r5
      ac:	b8 18       	sub	r11, r8
      ae:	bb 18       	sub	r11, r11
      b0:	be 18       	sub	r11, r14
      b2:	c1 18       	sub	r12, r1
      b4:	c4 18       	sub	r12, r4
      b6:	c7 18       	sub	r12, r7
      b8:	ca 18       	sub	r12, r10
      ba:	cd 18       	sub	r12, r13
      bc:	d0 18       	sub	r13, r0
      be:	d3 18       	sub	r13, r3

000000c0 <__c.1824>:
      c0:	4d 6f 64 65 20 66 69 6c 65 20 66 6f 75 6e 64 00     Mode file found.

000000d0 <__c.1822>:
      d0:	4d 6f 64 65 20 66 69 6c 65 20 6e 6f 74 20 66 6f     Mode file not fo
      e0:	75 6e 64 00                                         und.

000000e4 <__c.1820>:
      e4:	53 41 42 54 20 74 65 73 74 69 6e 67 2e 2e 2e 00     SABT testing....

000000f4 <__c.2384>:
      f4:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 7a 69     Error initializi
     104:	6e 67 20 56 53 31 30 35 33 20 2d 20 43 4f 44 45     ng VS1053 - CODE
     114:	20 00                                                .

00000116 <__c.2382>:
     116:	56 53 31 30 35 33 20 4d 50 33 20 63 68 69 70 20     VS1053 MP3 chip 
     126:	73 75 63 65 73 73 66 75 6c 6c 79 20 69 6e 69 74     sucessfully init
     136:	69 61 6c 69 7a 65 64 00                             ialized.

0000013e <__c.2380>:
     13e:	46 41 54 33 32 20 66 69 6c 65 20 73 79 73 74 65     FAT32 file syste
     14e:	6d 20 64 65 74 65 63 74 65 64 2e 2e 2e 00           m detected....

0000015c <__c.2378>:
     15c:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000016d <__c.2376>:
     16d:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     17d:	44 65 74 65 63 74 65 64 00                          Detected.

00000186 <__c.2373>:
     186:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     196:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1a6:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001b0 <__c.2370>:
     1b0:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     1c0:	72 64 20 44 65 74 65 63 74 65 64 00                 rd Detected.

000001cc <__c.2366>:
     1cc:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1dc:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     1ec:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001f6 <__c.2362>:
     1f6:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     206:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000213 <__c.2360>:
     213:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     223:	63 74 65 64 2e 2e 00                                cted...

0000022a <__c.2162>:
     22a:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     23a:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     24a:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000254 <__c.2065>:
     254:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     264:	2e 00                                               ..

00000266 <__c.2027>:
     266:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     276:	20 63 6c 75 73 74 65 72 00                           cluster.

0000027f <__c.1980>:
     27f:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     28f:	20 63 6c 75 73 74 65 72 00                           cluster.

00000298 <__c.1939>:
     298:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2a8:	20 63 6c 75 73 74 65 72 00                           cluster.

000002b1 <__c.1888>:
     2b1:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2c1:	20 63 6c 75 73 74 65 72 00                           cluster.

000002ca <__c.1880>:
     2ca:	52 4f 4f 54 00                                      ROOT.

000002cf <__c.1878>:
     2cf:	44 49 52 00                                         DIR.

000002d3 <__c.1876>:
     2d3:	20 20 20 00                                            .

000002d7 <__c.1874>:
     2d7:	46 49 4c 45 00                                      FILE.

000002dc <__c.1872>:
     2dc:	20 20 20 00                                            .

000002e0 <__c.1866>:
     2e0:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000002ee <__c.1864>:
     2ee:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000002f9 <__c.1859>:
     2f9:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     309:	69 73 74 21 00                                      ist!.

0000030e <__c.1926>:
     30e:	56 6f 6c 20 44 4f 57 4e 20 70 72 65 73 73 65 64     Vol DOWN pressed
	...

0000031f <__c.1923>:
     31f:	56 6f 6c 20 55 50 20 70 72 65 73 73 65 64 00        Vol UP pressed.

0000032e <__c.1920>:
     32e:	4d 6f 64 65 20 32 20 70 72 65 73 73 65 64 00        Mode 2 pressed.

0000033d <__c.1917>:
     33d:	4d 6f 64 65 20 31 20 70 72 65 73 73 65 64 00        Mode 1 pressed.

0000034c <__c.1914>:
     34c:	45 6e 74 65 72 20 32 20 70 72 65 73 73 65 64 00     Enter 2 pressed.

0000035c <__c.1911>:
     35c:	45 6e 74 65 72 20 31 20 70 72 65 73 73 65 64 00     Enter 1 pressed.

0000036c <__c.1878>:
     36c:	41 6e 61 6c 6f 67 20 49 6e 70 75 74 20 63 68 61     Analog Input cha
     37c:	6e 6e 65 6c 2c 4d 53 42 2c 4c 53 42 20 3a 00        nnel,MSB,LSB :.

0000038b <__c.1816>:
     38b:	41 6e 64 20 74 68 65 20 6d 6f 64 65 73 20 61 72     And the modes ar
     39b:	65 3b 20 00                                         e; .

0000039f <__c.1814>:
     39f:	4e 75 6d 62 65 72 20 6f 66 20 6d 6f 64 65 73 20     Number of modes 
     3af:	73 65 6c 65 63 74 65 64 3a 20 00                    selected: .

000003ba <__c.1785>:
     3ba:	53 41 42 54 2d 46 41 49 4c 00                       SABT-FAIL.

000003c4 <__c.1783>:
     3c4:	53 41 42 54 2d 4f 4b 00                             SABT-OK.

000003cc <__c.1765>:
     3cc:	53 41 42 54 2d 76 32 2e 31 00                       SABT-v2.1.

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf ef       	ldi	r28, 0xFF	; 255
     3dc:	d0 e4       	ldi	r29, 0x40	; 64
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b1 e0       	ldi	r27, 0x01	; 1
     3e8:	ea ef       	ldi	r30, 0xFA	; 250
     3ea:	f9 e3       	ldi	r31, 0x39	; 57
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	0b bf       	out	0x3b, r16	; 59
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__do_copy_data+0x14>
     3f2:	07 90       	elpm	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	ae 37       	cpi	r26, 0x7E	; 126
     3f8:	b1 07       	cpc	r27, r17
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__do_copy_data+0x10>

000003fc <__do_clear_bss>:
     3fc:	17 e0       	ldi	r17, 0x07	; 7
     3fe:	ae e7       	ldi	r26, 0x7E	; 126
     400:	b3 e0       	ldi	r27, 0x03	; 3
     402:	01 c0       	rjmp	.+2      	; 0x406 <.do_clear_bss_start>

00000404 <.do_clear_bss_loop>:
     404:	1d 92       	st	X+, r1

00000406 <.do_clear_bss_start>:
     406:	a3 32       	cpi	r26, 0x23	; 35
     408:	b1 07       	cpc	r27, r17
     40a:	e1 f7       	brne	.-8      	; 0x404 <.do_clear_bss_loop>
     40c:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
     410:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <_exit>

00000414 <__bad_interrupt>:
     414:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000418 <TimeRoutine>:
 * @brief NOT SURE WHAT IT IS Doing
 *    IT seems like the PORTD is a data register. @ref AtATmega1284P(Preferred).pdf
 * @return Void
 */
void TimeRoutine(void){
	if(!LED_STAT){
     418:	80 91 f5 05 	lds	r24, 0x05F5
     41c:	88 23       	and	r24, r24
     41e:	39 f4       	brne	.+14     	; 0x42e <TimeRoutine+0x16>
		PORTD &= ~_BV(5);
     420:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~_BV(6);
     422:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~_BV(7);
     424:	5f 98       	cbi	0x0b, 7	; 11
		LED_STAT=true;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 f5 05 	sts	0x05F5, r24
     42c:	08 95       	ret
	}else{
		PORTD |= _BV(5);
     42e:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= _BV(6);
     430:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD |= _BV(7);
     432:	5f 9a       	sbi	0x0b, 7	; 11
		LED_STAT=false;
     434:	10 92 f5 05 	sts	0x05F5, r1
     438:	08 95       	ret

0000043a <__vector_13>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(TIMER1_COMPA_vect){
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	8f 93       	push	r24
	TMR1_INT=true;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 a9 03 	sts	0x03A9, r24
};
     44c:	8f 91       	pop	r24
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_28>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART1_RX_vect){
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	8f 93       	push	r24
	USART_Keypad_Received_Data=UDR1;
     464:	80 91 ce 00 	lds	r24, 0x00CE
     468:	80 93 03 07 	sts	0x0703, r24
	USART_Keypad_DATA_RDY=true; 
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 8d 03 	sts	0x038D, r24
};
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_20>:
 * @param Interrupt vector.  Compared to interrupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART0_RX_vect){
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	8f 93       	push	r24
//Temporarly using the PC as the UI
//	USART_Keypad_Received_Data=UDR0;
//	USART_Keypad_DATA_RDY=true; 
///*	Temporaraly disabled the PC communications since we are simulating the UI with PC
	USART_PC_Received_Data=UDR0;
     48a:	80 91 c6 00 	lds	r24, 0x00C6
     48e:	80 93 f0 05 	sts	0x05F0, r24
	USART_PC_DATA_RDY=true;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 ff 05 	sts	0x05FF, r24
//*/
};
     498:	8f 91       	pop	r24
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <InitializeSystem>:
/**
 * @brief Initialize the system and interrupts
 * @return Void
 */
void InitializeSystem(void){
	TMR1_INT = false;   // clear the timer interrupt flag
     4a4:	10 92 a9 03 	sts	0x03A9, r1
	PORTA = 0x00;
     4a8:	12 b8       	out	0x02, r1	; 2
	DDRA = 0xFF;	
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	
     4ae:	12 b8       	out	0x02, r1	; 2

	DDRD |= _BV(5)|_BV(6)|_BV(7);
     4b0:	8a b1       	in	r24, 0x0a	; 10
     4b2:	80 6e       	ori	r24, 0xE0	; 224
     4b4:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A=0x00;
     4b6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x0D;
     4ba:	8d e0       	ldi	r24, 0x0D	; 13
     4bc:	80 93 81 00 	sts	0x0081, r24
	OCR1A=780; //1s interval
     4c0:	8c e0       	ldi	r24, 0x0C	; 12
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	90 93 89 00 	sts	0x0089, r25
     4c8:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1<<OCIE1A); //Enable interrupt
     4cc:	80 91 6f 00 	lds	r24, 0x006F
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	80 93 6f 00 	sts	0x006F, r24

	init_USART_Keypad();
     4d6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <init_USART_Keypad>
	init_USART_PC();
     4da:	0e 94 70 03 	call	0x6e0	; 0x6e0 <init_USART_PC>
	SPI_Initialize();
     4de:	0e 94 c9 05 	call	0xb92	; 0xb92 <SPI_Initialize>
	sei();  // sets the interrupt flag (enables interrupts)
     4e2:	78 94       	sei

	UI_Current_Mode=0;  //No mode selected
     4e4:	10 92 d4 05 	sts	0x05D4, r1
	TX_NEWLINE_PC;
     4e8:	8d e0       	ldi	r24, 0x0D	; 13
     4ea:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
     4ee:	8a e0       	ldi	r24, 0x0A	; 10
     4f0:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	USART_transmitStringToPCFromFlash (PSTR("SABT testing..."));
     4f4:	84 ee       	ldi	r24, 0xE4	; 228
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
	TX_NEWLINE_PC;
     4fc:	8d e0       	ldi	r24, 0x0D	; 13
     4fe:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>

	InitSDCard(true);
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <InitSDCard>
	
	if(!UI_CheckModes())
     50e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <UI_CheckModes>
     512:	88 23       	and	r24, r24
     514:	19 f4       	brne	.+6      	; 0x51c <InitializeSystem+0x78>
	{
		USART_transmitStringToPCFromFlash (PSTR("Mode file not found"));
     516:	80 ed       	ldi	r24, 0xD0	; 208
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <InitializeSystem+0x7c>
		TX_NEWLINE_PC;
	}
	else
	{
		USART_transmitStringToPCFromFlash (PSTR("Mode file found"));
     51c:	80 ec       	ldi	r24, 0xC0	; 192
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
		TX_NEWLINE_PC;
     524:	8d e0       	ldi	r24, 0x0D	; 13
     526:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
     52a:	8a e0       	ldi	r24, 0x0A	; 10
     52c:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	}
	
	RequestToPlayMP3file("INT.MP3");  // Play the welcome message
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
}
     538:	08 95       	ret

0000053a <main>:
/**
 * @brief the main routine
 * @return Void
 */
int main(void){	
	InitializeSystem();
     53a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <InitializeSystem>

	//Display the files in the SD card
	//TX_NEWLINE_PC;
	//findFiles(GET_LIST,0);
	//TX_NEWLINE_PC;
	TX_NEWLINE_PC;
     53e:	8d e0       	ldi	r24, 0x0D	; 13
     540:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
     544:	8a e0       	ldi	r24, 0x0A	; 10
     546:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	//USART_transmitStringToPCFromFlash (PSTR("Press a key and see it returns."));
	TX_NEWLINE_PC;
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
     550:	8a e0       	ldi	r24, 0x0A	; 10
     552:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	while(1){
		//printf("Small waves crashing against the sand.");
		//DPRINTF("Small waves crashing against the sand%d.", 42);
		//fprintf(stderr, "HELLO HELLO HELLO HELLO");
		if(temp++>100){
     556:	80 91 7e 03 	lds	r24, 0x037E
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	80 93 7e 03 	sts	0x037E, r24
     560:	81 50       	subi	r24, 0x01	; 1
     562:	85 36       	cpi	r24, 0x65	; 101
     564:	10 f0       	brcs	.+4      	; 0x56a <main+0x30>
			temp=0;
     566:	10 92 7e 03 	sts	0x037E, r1
		}

		if(TMR1_INT){
     56a:	80 91 a9 03 	lds	r24, 0x03A9
     56e:	88 23       	and	r24, r24
     570:	11 f0       	breq	.+4      	; 0x576 <main+0x3c>
			TMR1_INT=false;
     572:	10 92 a9 03 	sts	0x03A9, r1
		//	TimeRoutine();
		}
		if(USART_Keypad_DATA_RDY){
     576:	80 91 8d 03 	lds	r24, 0x038D
     57a:	88 23       	and	r24, r24
     57c:	11 f0       	breq	.+4      	; 0x582 <main+0x48>
			USART_Keypad_ReceiveAction();
     57e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <USART_Keypad_ReceiveAction>
		}
		if(USART_PC_DATA_RDY){
     582:	80 91 ff 05 	lds	r24, 0x05FF
     586:	88 23       	and	r24, r24
     588:	11 f0       	breq	.+4      	; 0x58e <main+0x54>
			USART_PC_ReceiveAction();
     58a:	0e 94 80 03 	call	0x700	; 0x700 <USART_PC_ReceiveAction>
				USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
				TX_NEWLINE_PC;
			}
			*/
		}
		if(USART_PC_Message_ready) //If a message ready from the PC, process it
     58e:	80 91 85 03 	lds	r24, 0x0385
     592:	88 23       	and	r24, r24
     594:	11 f0       	breq	.+4      	; 0x59a <main+0x60>
		{
			PC_parse_message();
     596:	0e 94 a0 19 	call	0x3340	; 0x3340 <PC_parse_message>
		}
		if(USART_UI_Message_ready) //If a message ready from the user interface, process it
     59a:	80 91 d3 03 	lds	r24, 0x03D3
     59e:	88 23       	and	r24, r24
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <main+0x6e>
		{
			UI_parse_message(false);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <UI_parse_message>
		}
		if(UI_MP3_file_Pending)	//If the UI handler needs to play new file, play it (the main loop won't be called while playing another file, so don't worry)
     5a8:	80 91 88 03 	lds	r24, 0x0388
     5ac:	88 23       	and	r24, r24
     5ae:	61 f0       	breq	.+24     	; 0x5c8 <main+0x8e>
		{

			PlayMP3file(fileName);  //WHERE IS THIS FUNCTION?
     5b0:	8e e8       	ldi	r24, 0x8E	; 142
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	0e 94 b0 13 	call	0x2760	; 0x2760 <PlayMP3file>
			RequestToPlayMP3file("INT.MP3");
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
			PlayMP3file(fileName);
     5c0:	8e e8       	ldi	r24, 0x8E	; 142
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	0e 94 b0 13 	call	0x2760	; 0x2760 <PlayMP3file>
			
		}
		UI_RunMainOfCurrentMode();
     5c8:	0e 94 12 15 	call	0x2a24	; 0x2a24 <UI_RunMainOfCurrentMode>
     5cc:	c4 cf       	rjmp	.-120    	; 0x556 <main+0x1c>

000005ce <init_USART_Keypad>:
 * @brief Initializes the baud communication over USART.
 * @return Void
 */
void init_USART_Keypad(void)
{
	UCSR1B = 0x00; //disable while setting baud rate
     5ce:	e9 ec       	ldi	r30, 0xC9	; 201
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	10 82       	st	Z, r1
	UCSR1A = 0x00;
     5d4:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
     5d8:	86 e0       	ldi	r24, 0x06	; 6
     5da:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 0x19; //set baud rate lo
     5de:	89 e1       	ldi	r24, 0x19	; 25
     5e0:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0x00; //set baud rate hi 19,200 baud with 8MHz clock
     5e4:	10 92 cd 00 	sts	0x00CD, r1
	UCSR1B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     5e8:	88 e9       	ldi	r24, 0x98	; 152
     5ea:	80 83       	st	Z, r24
 	USART_UI_length_reveived=false;
     5ec:	10 92 0d 07 	sts	0x070D, r1
	USART_UI_header_received=false;
     5f0:	10 92 0e 07 	sts	0x070E, r1
	USART_UI_Message_ready=false;
     5f4:	10 92 d3 03 	sts	0x03D3, r1
}
     5f8:	08 95       	ret

000005fa <USART_Keypad_ReceiveAction>:
 *          messages to be sent
 * @ref  tech_report.pdf
 * @return Void
 */
void USART_Keypad_ReceiveAction(void){
	USART_Keypad_DATA_RDY=false;
     5fa:	10 92 8d 03 	sts	0x038D, r1

	if(!USART_UI_header_received)
     5fe:	80 91 0e 07 	lds	r24, 0x070E
     602:	88 23       	and	r24, r24
     604:	d9 f4       	brne	.+54     	; 0x63c <USART_Keypad_ReceiveAction+0x42>
	{
		USART_UI_prefix[2]=USART_Keypad_Received_Data;
     606:	20 91 03 07 	lds	r18, 0x0703
     60a:	20 93 0c 07 	sts	0x070C, r18
		USART_UI_prefix[0]=USART_UI_prefix[1];
     60e:	90 91 0b 07 	lds	r25, 0x070B
     612:	90 93 0a 07 	sts	0x070A, r25
		USART_UI_prefix[1]=USART_UI_prefix[2];
     616:	20 93 0b 07 	sts	0x070B, r18
		if((USART_UI_prefix[0]=='U')&&(USART_UI_prefix[1]=='I'))
     61a:	95 35       	cpi	r25, 0x55	; 85
     61c:	f1 f5       	brne	.+124    	; 0x69a <USART_Keypad_ReceiveAction+0xa0>
     61e:	29 34       	cpi	r18, 0x49	; 73
     620:	e1 f5       	brne	.+120    	; 0x69a <USART_Keypad_ReceiveAction+0xa0>
		{
			USART_UI_header_received=true;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 0e 07 	sts	0x070E, r24
			USART_UI_ReceivedPacket[0]=USART_UI_prefix[0];
     628:	90 93 d7 05 	sts	0x05D7, r25
			USART_UI_ReceivedPacket[1]=USART_UI_prefix[1];
     62c:	20 93 d8 05 	sts	0x05D8, r18
			USART_UI_receive_msgcnt=2;
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	80 93 09 07 	sts	0x0709, r24
			USART_UI_length_reveived=false;
     636:	10 92 0d 07 	sts	0x070D, r1
     63a:	08 95       	ret
			//USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
			//USART_UI_length_reveived=true;
			//USART_UI_receive_msgcnt++;
		}
	}
	else if(!USART_UI_length_reveived)
     63c:	80 91 0d 07 	lds	r24, 0x070D
     640:	90 91 09 07 	lds	r25, 0x0709
     644:	88 23       	and	r24, r24
     646:	a1 f4       	brne	.+40     	; 0x670 <USART_Keypad_ReceiveAction+0x76>
	{
		if(USART_UI_receive_msgcnt==2)
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	79 f4       	brne	.+30     	; 0x66a <USART_Keypad_ReceiveAction+0x70>
		{
			USART_UI_received_playload_len=USART_Keypad_Received_Data;
     64c:	80 91 03 07 	lds	r24, 0x0703
     650:	80 93 0f 07 	sts	0x070F, r24
			USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
     654:	80 91 03 07 	lds	r24, 0x0703
     658:	80 93 d9 05 	sts	0x05D9, r24
			USART_UI_length_reveived=true;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 0d 07 	sts	0x070D, r24
			USART_UI_receive_msgcnt++;
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	80 93 09 07 	sts	0x0709, r24
     668:	08 95       	ret
		}
		else
		{
			USART_UI_header_received=false;
     66a:	10 92 0e 07 	sts	0x070E, r1
     66e:	08 95       	ret
		}
	}
	else
	{
		USART_UI_ReceivedPacket[USART_UI_receive_msgcnt++]=USART_Keypad_Received_Data;
     670:	e9 2f       	mov	r30, r25
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 91 03 07 	lds	r24, 0x0703
     678:	e9 52       	subi	r30, 0x29	; 41
     67a:	fa 4f       	sbci	r31, 0xFA	; 250
     67c:	80 83       	st	Z, r24
     67e:	9f 5f       	subi	r25, 0xFF	; 255
     680:	90 93 09 07 	sts	0x0709, r25
		if(USART_UI_receive_msgcnt==USART_UI_received_playload_len) //full message has been received
     684:	80 91 0f 07 	lds	r24, 0x070F
     688:	98 17       	cp	r25, r24
     68a:	39 f4       	brne	.+14     	; 0x69a <USART_Keypad_ReceiveAction+0xa0>
		{
			USART_UI_Message_ready=true;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 d3 03 	sts	0x03D3, r24
			USART_UI_header_received=false;
     692:	10 92 0e 07 	sts	0x070E, r1
			USART_UI_length_reveived=false;
     696:	10 92 0d 07 	sts	0x070D, r1
     69a:	08 95       	ret

0000069c <USART_transmitByteToKeypad>:
		}
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
     69c:	98 2f       	mov	r25, r24
	while ( !(UCSR1A & (1<<UDRE1)) )
     69e:	80 91 c8 00 	lds	r24, 0x00C8
     6a2:	85 ff       	sbrs	r24, 5
     6a4:	fc cf       	rjmp	.-8      	; 0x69e <USART_transmitByteToKeypad+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     6a6:	90 93 ce 00 	sts	0x00CE, r25
}
     6aa:	08 95       	ret

000006ac <USART_transmitStringToKeypadFromFlash>:

void USART_transmitStringToKeypadFromFlash(char* string)
{
     6ac:	fc 01       	movw	r30, r24
     6ae:	07 c0       	rjmp	.+14     	; 0x6be <USART_transmitStringToKeypadFromFlash+0x12>
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
     6b0:	80 91 c8 00 	lds	r24, 0x00C8
     6b4:	85 ff       	sbrs	r24, 5
     6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <USART_transmitStringToKeypadFromFlash+0x4>
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
     6b8:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     6ba:	90 93 ce 00 	sts	0x00CE, r25
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
     6be:	94 91       	lpm	r25, Z+
     6c0:	99 23       	and	r25, r25
     6c2:	b1 f7       	brne	.-20     	; 0x6b0 <USART_transmitStringToKeypadFromFlash+0x4>
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
}
     6c4:	08 95       	ret

000006c6 <USART_transmitStringToKeypad>:


void USART_transmitStringToKeypad(unsigned char* string)
{
     6c6:	fc 01       	movw	r30, r24
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <USART_transmitStringToKeypad+0x12>
	}		
}	

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
     6ca:	80 91 c8 00 	lds	r24, 0x00C8
     6ce:	85 ff       	sbrs	r24, 5
     6d0:	fc cf       	rjmp	.-8      	; 0x6ca <USART_transmitStringToKeypad+0x4>


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
   USART_transmitByteToKeypad(*string++);
     6d2:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
	while ( !(UCSR1A & (1<<UDRE1)) )
		; 			                /* Wait for empty transmit buffer */
	UDR1 = data; 			        /* Start transmition */
     6d4:	90 93 ce 00 	sts	0x00CE, r25
}


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
     6d8:	90 81       	ld	r25, Z
     6da:	99 23       	and	r25, r25
     6dc:	b1 f7       	brne	.-20     	; 0x6ca <USART_transmitStringToKeypad+0x4>
   USART_transmitByteToKeypad(*string++);
}
     6de:	08 95       	ret

000006e0 <init_USART_PC>:
 * @brief Initializes the buad communication over USART.
 * @return Void
 */
void init_USART_PC(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     6e0:	e1 ec       	ldi	r30, 0xC1	; 193
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     6e6:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x19;
     6f0:	89 e1       	ldi	r24, 0x19	; 25
     6f2:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate to 19,200 with 8MHz clock
     6f6:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     6fa:	88 e9       	ldi	r24, 0x98	; 152
     6fc:	80 83       	st	Z, r24
}
     6fe:	08 95       	ret

00000700 <USART_PC_ReceiveAction>:
 *          messages to be sent
 * @ref  tech_report.pdf
 * @return Void
 */
unsigned char USART_PC_ReceiveAction(void){
	USART_PC_DATA_RDY=false;
     700:	10 92 ff 05 	sts	0x05FF, r1

	if(!USART_PC_header_received)
     704:	80 91 15 07 	lds	r24, 0x0715
     708:	88 23       	and	r24, r24
     70a:	b9 f4       	brne	.+46     	; 0x73a <USART_PC_ReceiveAction+0x3a>
	{
		USART_PC_prefix[2]=USART_PC_Received_Data;
     70c:	20 91 f0 05 	lds	r18, 0x05F0
     710:	20 93 13 07 	sts	0x0713, r18
		USART_PC_prefix[0]=USART_PC_prefix[1];
     714:	90 91 12 07 	lds	r25, 0x0712
     718:	90 93 11 07 	sts	0x0711, r25
		USART_PC_prefix[1]=USART_PC_prefix[2];
     71c:	20 93 12 07 	sts	0x0712, r18
		if((USART_PC_prefix[0]=='P')&&(USART_PC_prefix[1]=='C'))
     720:	90 35       	cpi	r25, 0x50	; 80
     722:	21 f5       	brne	.+72     	; 0x76c <USART_PC_ReceiveAction+0x6c>
     724:	23 34       	cpi	r18, 0x43	; 67
     726:	11 f5       	brne	.+68     	; 0x76c <USART_PC_ReceiveAction+0x6c>
		{
			USART_PC_header_received=true;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 15 07 	sts	0x0715, r24
			USART_PC_ReceivedPacket[0]=USART_PC_prefix[0];
     72e:	90 93 ab 03 	sts	0x03AB, r25
			USART_PC_ReceivedPacket[1]=USART_PC_prefix[1];
     732:	20 93 ac 03 	sts	0x03AC, r18
			USART_PC_receive_msgcnt=2;
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	17 c0       	rjmp	.+46     	; 0x768 <USART_PC_ReceiveAction+0x68>
			//USART_PC_length_reveived=true;
			//USART_PC_receive_msgcnt++;
		}
	}
	else{
		if(USART_PC_Received_Data==13) //If carraige return found --> end of the command
     73a:	80 91 f0 05 	lds	r24, 0x05F0
     73e:	8d 30       	cpi	r24, 0x0D	; 13
     740:	49 f4       	brne	.+18     	; 0x754 <USART_PC_ReceiveAction+0x54>
		{
			USART_PC_received_playload_len=USART_PC_receive_msgcnt;
     742:	80 91 14 07 	lds	r24, 0x0714
     746:	80 93 01 06 	sts	0x0601, r24
			USART_PC_Message_ready=true;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 85 03 	sts	0x0385, r24
			USART_PC_header_received=false;
     750:	10 92 15 07 	sts	0x0715, r1
			//USART_PC_length_reveived=false;
		}
		USART_PC_ReceivedPacket[USART_PC_receive_msgcnt++]=USART_PC_Received_Data;
     754:	80 91 14 07 	lds	r24, 0x0714
     758:	e8 2f       	mov	r30, r24
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	90 91 f0 05 	lds	r25, 0x05F0
     760:	e5 55       	subi	r30, 0x55	; 85
     762:	fc 4f       	sbci	r31, 0xFC	; 252
     764:	90 83       	st	Z, r25
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 93 14 07 	sts	0x0714, r24
			USART_PC_length_reveived=false;
		}
	}		
*/
	return 0;
}
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret

00000770 <USART_transmitByteToPC>:
 * @brief Waits till available to send message and puts data in Global value
 * @param bData unsigned Char    contains the byte that needs to be sent
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
     770:	98 2f       	mov	r25, r24
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     772:	80 91 c0 00 	lds	r24, 0x00C0
     776:	85 ff       	sbrs	r24, 5
     778:	fc cf       	rjmp	.-8      	; 0x772 <USART_transmitByteToPC+0x2>
	UDR0=bData;
     77a:	90 93 c6 00 	sts	0x00C6, r25
//	*/
}
     77e:	08 95       	ret

00000780 <USART_transmitStringToPCFromFlash>:
 * @brief reads each byte of data and sends it to the Flash individually
 * @param strData   String     Contains message to be sent to PC
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
     780:	fc 01       	movw	r30, r24
     782:	07 c0       	rjmp	.+14     	; 0x792 <USART_transmitStringToPCFromFlash+0x12>
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     784:	80 91 c0 00 	lds	r24, 0x00C0
     788:	85 ff       	sbrs	r24, 5
     78a:	fc cf       	rjmp	.-8      	; 0x784 <USART_transmitStringToPCFromFlash+0x4>
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
     78c:	31 96       	adiw	r30, 0x01	; 1
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0=bData;
     78e:	90 93 c6 00 	sts	0x00C6, r25
 * @param strData   String     Contains message to be sent to PC
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
     792:	94 91       	lpm	r25, Z+
     794:	99 23       	and	r25, r25
     796:	b1 f7       	brne	.-20     	; 0x784 <USART_transmitStringToPCFromFlash+0x4>
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
}
     798:	08 95       	ret

0000079a <USART_transmitStringToPC>:


void USART_transmitStringToPC(unsigned char* strData)
{
     79a:	fc 01       	movw	r30, r24
     79c:	07 c0       	rjmp	.+14     	; 0x7ac <USART_transmitStringToPC+0x12>
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
     79e:	80 91 c0 00 	lds	r24, 0x00C0
     7a2:	85 ff       	sbrs	r24, 5
     7a4:	fc cf       	rjmp	.-8      	; 0x79e <USART_transmitStringToPC+0x4>


void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
   USART_transmitByteToPC(*strData++);
     7a6:	31 96       	adiw	r30, 0x01	; 1
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*	Disabled PC TX temp
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0=bData;
     7a8:	90 93 c6 00 	sts	0x00C6, r25
}


void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
     7ac:	90 81       	ld	r25, Z
     7ae:	99 23       	and	r25, r25
     7b0:	b1 f7       	brne	.-20     	; 0x79e <USART_transmitStringToPC+0x4>
   USART_transmitByteToPC(*strData++);
}
     7b2:	08 95       	ret

000007b4 <RequestToPlayMP3file>:
 * loop)
 * @param thisFile  the name of the MP3 file to be played
 * @return Void
 */
void RequestToPlayMP3file(const char* thisFile)
{
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	7c 01       	movw	r14, r24
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
	int i = 0;
	
	while(i < strlen(fileName))
     7c6:	ae e8       	ldi	r26, 0x8E	; 142
     7c8:	b3 e0       	ldi	r27, 0x03	; 3
	{
		fileName[i++] = "";
     7ca:	28 e0       	ldi	r18, 0x08	; 8
     7cc:	31 e0       	ldi	r19, 0x01	; 1
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <RequestToPlayMP3file+0x26>
     7d0:	fc 01       	movw	r30, r24
     7d2:	e2 57       	subi	r30, 0x72	; 114
     7d4:	fc 4f       	sbci	r31, 0xFC	; 252
     7d6:	20 83       	st	Z, r18
     7d8:	01 96       	adiw	r24, 0x01	; 1
 */
void RequestToPlayMP3file(const char* thisFile)
{
	int i = 0;
	
	while(i < strlen(fileName))
     7da:	fd 01       	movw	r30, r26
     7dc:	01 90       	ld	r0, Z+
     7de:	00 20       	and	r0, r0
     7e0:	e9 f7       	brne	.-6      	; 0x7dc <RequestToPlayMP3file+0x28>
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	ee 58       	subi	r30, 0x8E	; 142
     7e6:	f3 40       	sbci	r31, 0x03	; 3
     7e8:	8e 17       	cp	r24, r30
     7ea:	9f 07       	cpc	r25, r31
     7ec:	88 f3       	brcs	.-30     	; 0x7d0 <RequestToPlayMP3file+0x1c>
	{
		fileName[i++] = "";
	}
	DPRINTF("fileName = %s\n\r", fileName);
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <RequestToPlayMP3file+0x3c>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <RequestToPlayMP3file+0x3e>
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <RequestToPlayMP3file+0x40>
     7f4:	ed b7       	in	r30, 0x3d	; 61
     7f6:	fe b7       	in	r31, 0x3e	; 62
     7f8:	31 96       	adiw	r30, 0x01	; 1
     7fa:	02 e0       	ldi	r16, 0x02	; 2
     7fc:	16 e0       	ldi	r17, 0x06	; 6
     7fe:	ad b7       	in	r26, 0x3d	; 61
     800:	be b7       	in	r27, 0x3e	; 62
     802:	12 96       	adiw	r26, 0x02	; 2
     804:	1c 93       	st	X, r17
     806:	0e 93       	st	-X, r16
     808:	11 97       	sbiw	r26, 0x01	; 1
     80a:	89 e0       	ldi	r24, 0x09	; 9
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	93 83       	std	Z+3, r25	; 0x03
     810:	82 83       	std	Z+2, r24	; 0x02
     812:	8e e8       	ldi	r24, 0x8E	; 142
     814:	93 e0       	ldi	r25, 0x03	; 3
     816:	95 83       	std	Z+5, r25	; 0x05
     818:	84 83       	std	Z+4, r24	; 0x04
     81a:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
     81e:	8d b7       	in	r24, 0x3d	; 61
     820:	9e b7       	in	r25, 0x3e	; 62
     822:	06 96       	adiw	r24, 0x06	; 6
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	9e bf       	out	0x3e, r25	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	8d bf       	out	0x3d, r24	; 61
     82e:	c8 01       	movw	r24, r16
     830:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	03 c0       	rjmp	.+6      	; 0x840 <RequestToPlayMP3file+0x8c>
	i = 0;
	
  	// copy the file name to the global variable
	while(*thisFile != '.')
	{
		fileName[i++] = *(thisFile++);
     83a:	80 83       	st	Z, r24
     83c:	d9 01       	movw	r26, r18
     83e:	7e 01       	movw	r14, r28
	}
	DPRINTF("fileName = %s\n\r", fileName);
	i = 0;
	
  	// copy the file name to the global variable
	while(*thisFile != '.')
     840:	e7 01       	movw	r28, r14
     842:	89 91       	ld	r24, Y+
     844:	fd 01       	movw	r30, r26
     846:	e2 57       	subi	r30, 0x72	; 114
     848:	fc 4f       	sbci	r31, 0xFC	; 252
     84a:	9d 01       	movw	r18, r26
     84c:	2f 5f       	subi	r18, 0xFF	; 255
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	8e 32       	cpi	r24, 0x2E	; 46
     852:	99 f7       	brne	.-26     	; 0x83a <RequestToPlayMP3file+0x86>
	{
		fileName[i++] = *(thisFile++);
	}
	fileName[i++] = *(thisFile++);
     854:	80 83       	st	Z, r24
	fileName[i++] = *(thisFile++);
     856:	d9 01       	movw	r26, r18
     858:	a2 57       	subi	r26, 0x72	; 114
     85a:	bc 4f       	sbci	r27, 0xFC	; 252
     85c:	fe 01       	movw	r30, r28
     85e:	81 91       	ld	r24, Z+
     860:	8c 93       	st	X, r24
	fileName[i++] = *(thisFile++);
     862:	d9 01       	movw	r26, r18
     864:	a1 57       	subi	r26, 0x71	; 113
     866:	bc 4f       	sbci	r27, 0xFC	; 252
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	8c 93       	st	X, r24
	fileName[i++] = *(thisFile++);
     86c:	81 81       	ldd	r24, Z+1	; 0x01
     86e:	11 96       	adiw	r26, 0x01	; 1
     870:	8c 93       	st	X, r24
	DPRINTF("end fileName = %s\n\r", fileName);
     872:	00 d0       	rcall	.+0      	; 0x874 <RequestToPlayMP3file+0xc0>
     874:	00 d0       	rcall	.+0      	; 0x876 <RequestToPlayMP3file+0xc2>
     876:	00 d0       	rcall	.+0      	; 0x878 <RequestToPlayMP3file+0xc4>
     878:	ed b7       	in	r30, 0x3d	; 61
     87a:	fe b7       	in	r31, 0x3e	; 62
     87c:	31 96       	adiw	r30, 0x01	; 1
     87e:	02 e0       	ldi	r16, 0x02	; 2
     880:	16 e0       	ldi	r17, 0x06	; 6
     882:	ad b7       	in	r26, 0x3d	; 61
     884:	be b7       	in	r27, 0x3e	; 62
     886:	12 96       	adiw	r26, 0x02	; 2
     888:	1c 93       	st	X, r17
     88a:	0e 93       	st	-X, r16
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	89 e1       	ldi	r24, 0x19	; 25
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	93 83       	std	Z+3, r25	; 0x03
     894:	82 83       	std	Z+2, r24	; 0x02
     896:	8e e8       	ldi	r24, 0x8E	; 142
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	95 83       	std	Z+5, r25	; 0x05
     89c:	84 83       	std	Z+4, r24	; 0x04
     89e:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
     8a2:	8d b7       	in	r24, 0x3d	; 61
     8a4:	9e b7       	in	r25, 0x3e	; 62
     8a6:	06 96       	adiw	r24, 0x06	; 6
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	9e bf       	out	0x3e, r25	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	8d bf       	out	0x3d, r24	; 61
     8b2:	c8 01       	movw	r24, r16
     8b4:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>

  // Mark that a file is queued to be played by the user interface
	UI_MP3_file_Pending = true;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 88 03 	sts	0x0388, r24
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	08 95       	ret

000008cc <VS1053_ReadCmd>:
	SPI_transmit(temp5);
	SPI_DeselectAll();
}

unsigned int VS1053_ReadCmd(unsigned char addr)
{
     8cc:	1f 93       	push	r17
     8ce:	18 2f       	mov	r17, r24
	tempAddr=addr;
     8d0:	80 93 16 07 	sts	0x0716, r24
	SPI_Select_MP3_Cmd();
     8d4:	0e 94 ba 05 	call	0xb74	; 0xb74 <SPI_Select_MP3_Cmd>
	SPI_transmit(0x03);
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	SPI_transmit(addr);
     8de:	81 2f       	mov	r24, r17
     8e0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	temp1 = SPI_receive();
     8e4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	90 93 80 03 	sts	0x0380, r25
     8ee:	80 93 7f 03 	sts	0x037F, r24
	temp2 = SPI_receive();
     8f2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 82 03 	sts	0x0382, r25
     8fc:	80 93 81 03 	sts	0x0381, r24
	temp3 = temp1*256 + temp2;
     900:	80 91 7f 03 	lds	r24, 0x037F
     904:	90 91 80 03 	lds	r25, 0x0380
     908:	20 91 81 03 	lds	r18, 0x0381
     90c:	30 91 82 03 	lds	r19, 0x0382
     910:	98 2f       	mov	r25, r24
     912:	88 27       	eor	r24, r24
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	90 93 84 03 	sts	0x0384, r25
     91c:	80 93 83 03 	sts	0x0383, r24
	SPI_DeselectAll();
     920:	0e 94 ac 05 	call	0xb58	; 0xb58 <SPI_DeselectAll>
	return temp3;
     924:	20 91 83 03 	lds	r18, 0x0383
     928:	30 91 84 03 	lds	r19, 0x0384
}
     92c:	c9 01       	movw	r24, r18
     92e:	1f 91       	pop	r17
     930:	08 95       	ret

00000932 <VS1053_WriteCmd>:
	SPI_transmit(data);
	SPI_DeselectAll();
}

void VS1053_WriteCmd(unsigned char addr, unsigned int cmd)
{
     932:	1f 93       	push	r17
     934:	18 2f       	mov	r17, r24
    temp4 = (cmd & 0xFF00) >> 8;
     936:	70 93 18 07 	sts	0x0718, r23
    temp5 = (cmd & 0x00FF);
     93a:	60 93 17 07 	sts	0x0717, r22
	tempAddr=addr;
     93e:	80 93 16 07 	sts	0x0716, r24
	SPI_Select_MP3_Cmd();
     942:	0e 94 ba 05 	call	0xb74	; 0xb74 <SPI_Select_MP3_Cmd>
	SPI_transmit(0x02);
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	SPI_transmit(addr);
     94c:	81 2f       	mov	r24, r17
     94e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	SPI_transmit(temp4);
     952:	80 91 18 07 	lds	r24, 0x0718
     956:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	SPI_transmit(temp5);
     95a:	80 91 17 07 	lds	r24, 0x0717
     95e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	SPI_DeselectAll();
     962:	0e 94 ac 05 	call	0xb58	; 0xb58 <SPI_DeselectAll>
}
     966:	1f 91       	pop	r17
     968:	08 95       	ret

0000096a <VS1053_DecreaseVol>:
	}
	return true;
}

bool VS1053_DecreaseVol(void)
{
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
	int retry=0;
	VS1053_Vol=VS1053_Vol-((uint16_t)(1<<8)+1);
     96e:	80 91 19 07 	lds	r24, 0x0719
     972:	90 91 1a 07 	lds	r25, 0x071A
     976:	81 50       	subi	r24, 0x01	; 1
     978:	91 40       	sbci	r25, 0x01	; 1
     97a:	90 93 1a 07 	sts	0x071A, r25
     97e:	80 93 19 07 	sts	0x0719, r24
	if(VS1053_Vol<=0x0101)
     982:	80 91 19 07 	lds	r24, 0x0719
     986:	90 91 1a 07 	lds	r25, 0x071A
     98a:	82 50       	subi	r24, 0x02	; 2
     98c:	91 40       	sbci	r25, 0x01	; 1
     98e:	18 f0       	brcs	.+6      	; 0x996 <VS1053_DecreaseVol+0x2c>
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	14 c0       	rjmp	.+40     	; 0x9be <VS1053_DecreaseVol+0x54>
	{
		VS1053_Vol=0x0101;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	90 93 1a 07 	sts	0x071A, r25
     99e:	80 93 19 07 	sts	0x0719, r24
     9a2:	17 c0       	rjmp	.+46     	; 0x9d2 <VS1053_DecreaseVol+0x68>
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
		{
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
     9a4:	60 91 19 07 	lds	r22, 0x0719
     9a8:	70 91 1a 07 	lds	r23, 0x071A
     9ac:	8b e0       	ldi	r24, 0x0B	; 11
     9ae:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
			if(retry++ >10 )return false;
     9b2:	cb 30       	cpi	r28, 0x0B	; 11
     9b4:	d1 05       	cpc	r29, r1
     9b6:	11 f4       	brne	.+4      	; 0x9bc <VS1053_DecreaseVol+0x52>
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <VS1053_DecreaseVol+0x6a>
     9bc:	21 96       	adiw	r28, 0x01	; 1
	{
		VS1053_Vol=0x0101;
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
     9be:	8b e0       	ldi	r24, 0x0B	; 11
     9c0:	0e 94 66 04 	call	0x8cc	; 0x8cc <VS1053_ReadCmd>
     9c4:	20 91 19 07 	lds	r18, 0x0719
     9c8:	30 91 1a 07 	lds	r19, 0x071A
     9cc:	82 17       	cp	r24, r18
     9ce:	93 07       	cpc	r25, r19
     9d0:	49 f7       	brne	.-46     	; 0x9a4 <VS1053_DecreaseVol+0x3a>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
			if(retry++ >10 )return false;
		}
	}
	return true;
}					
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <VS1053_IncreaseVol>:
	VS1053_WriteCmd(0x00,0x0804);		//Software reset via mode register
	_delay_ms(20);
}

bool VS1053_IncreaseVol(void)
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	int retry=0;
	VS1053_Vol=VS1053_Vol+((uint16_t)(1<<8)+1);
     9de:	80 91 19 07 	lds	r24, 0x0719
     9e2:	90 91 1a 07 	lds	r25, 0x071A
     9e6:	8f 5f       	subi	r24, 0xFF	; 255
     9e8:	9e 4f       	sbci	r25, 0xFE	; 254
     9ea:	90 93 1a 07 	sts	0x071A, r25
     9ee:	80 93 19 07 	sts	0x0719, r24
	if(VS1053_Vol>=0xFEFE)
     9f2:	80 91 19 07 	lds	r24, 0x0719
     9f6:	90 91 1a 07 	lds	r25, 0x071A
     9fa:	8e 5f       	subi	r24, 0xFE	; 254
     9fc:	9e 4f       	sbci	r25, 0xFE	; 254
     9fe:	18 f4       	brcc	.+6      	; 0xa06 <VS1053_IncreaseVol+0x2c>
     a00:	c0 e0       	ldi	r28, 0x00	; 0
     a02:	d0 e0       	ldi	r29, 0x00	; 0
     a04:	14 c0       	rjmp	.+40     	; 0xa2e <VS1053_IncreaseVol+0x54>
	{
		VS1053_Vol=0xFEFE; 
     a06:	8e ef       	ldi	r24, 0xFE	; 254
     a08:	9e ef       	ldi	r25, 0xFE	; 254
     a0a:	90 93 1a 07 	sts	0x071A, r25
     a0e:	80 93 19 07 	sts	0x0719, r24
     a12:	17 c0       	rjmp	.+46     	; 0xa42 <VS1053_IncreaseVol+0x68>
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
		{
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
     a14:	60 91 19 07 	lds	r22, 0x0719
     a18:	70 91 1a 07 	lds	r23, 0x071A
     a1c:	8b e0       	ldi	r24, 0x0B	; 11
     a1e:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
			if(retry++ >10 )return false;
     a22:	cb 30       	cpi	r28, 0x0B	; 11
     a24:	d1 05       	cpc	r29, r1
     a26:	11 f4       	brne	.+4      	; 0xa2c <VS1053_IncreaseVol+0x52>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <VS1053_IncreaseVol+0x6a>
     a2c:	21 96       	adiw	r28, 0x01	; 1
	{
		VS1053_Vol=0xFEFE; 
	}
	else
	{
		while(VS1053_ReadCmd(0x0B) != VS1053_Vol)	//REDO if not written properly
     a2e:	8b e0       	ldi	r24, 0x0B	; 11
     a30:	0e 94 66 04 	call	0x8cc	; 0x8cc <VS1053_ReadCmd>
     a34:	20 91 19 07 	lds	r18, 0x0719
     a38:	30 91 1a 07 	lds	r19, 0x071A
     a3c:	82 17       	cp	r24, r18
     a3e:	93 07       	cpc	r25, r19
     a40:	49 f7       	brne	.-46     	; 0xa14 <VS1053_IncreaseVol+0x3a>
     a42:	81 e0       	ldi	r24, 0x01	; 1
			VS1053_WriteCmd(0x0B,VS1053_Vol);		//Set the requested volume
			if(retry++ >10 )return false;
		}
	}
	return true;
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <VS1053_SoftwareReset>:
	return 0;
}

void VS1053_SoftwareReset(void)
{
	VS1053_WriteCmd(0x00,0x0804);		//Software reset via mode register
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	64 e0       	ldi	r22, 0x04	; 4
     a4e:	78 e0       	ldi	r23, 0x08	; 8
     a50:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	9c e9       	ldi	r25, 0x9C	; 156
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <VS1053_SoftwareReset+0xe>
	_delay_ms(20);
}
     a5c:	08 95       	ret

00000a5e <VS1053_WriteData>:
	}
	return true;
}					

void VS1053_WriteData(unsigned char data)
{
     a5e:	1f 93       	push	r17
     a60:	18 2f       	mov	r17, r24
	SPI_Select_MP3_Data();
     a62:	0e 94 b5 05 	call	0xb6a	; 0xb6a <SPI_Select_MP3_Data>
	SPI_transmit(data);
     a66:	81 2f       	mov	r24, r17
     a68:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
	SPI_DeselectAll();
     a6c:	0e 94 ac 05 	call	0xb58	; 0xb58 <SPI_DeselectAll>
}
     a70:	1f 91       	pop	r17
     a72:	08 95       	ret

00000a74 <VS1053_Initialize>:
/**
 * @brief initialize the audio codec
 * @return ?
 */
unsigned char VS1053_Initialize(void)
{
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
	unsigned char retry;
	SPI_DeselectAll();
     a78:	0e 94 ac 05 	call	0xb58	; 0xb58 <SPI_DeselectAll>
	SPI_PORT &= ~_BV(MP3_RESET);	//De assert RESET line (Chip in the reset state)
     a7c:	2c 98       	cbi	0x05, 4	; 5
     a7e:	00 e4       	ldi	r16, 0x40	; 64
     a80:	1c e9       	ldi	r17, 0x9C	; 156
     a82:	c8 01       	movw	r24, r16
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <VS1053_Initialize+0x10>
	_delay_ms(20);					//Hold for 20ms
	SPI_PORT |= _BV(MP3_RESET);		//Assert RESET line (Chip is powered now)
     a88:	2c 9a       	sbi	0x05, 4	; 5
	SPI_1X();						//Low speed mode
     a8a:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_1X>
     a8e:	c8 01       	movw	r24, r16
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <VS1053_Initialize+0x1c>
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	0a c0       	rjmp	.+20     	; 0xaac <VS1053_Initialize+0x38>
	_delay_ms(20);					//Hold for 20ms
	retry=0;

	while(VS1053_ReadCmd(0x03) != 0x9800)	//REDO if not written properly	
	{
		VS1053_WriteCmd(0x03,0x9800);		//set PLL register to 3.5 (preferred for normal operation)
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	78 e9       	ldi	r23, 0x98	; 152
     a9e:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
		if(retry++ >10 )return 1;			//try this for 10 times
     aa2:	0b 30       	cpi	r16, 0x0B	; 11
     aa4:	11 f4       	brne	.+4      	; 0xaaa <VS1053_Initialize+0x36>
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	54 c0       	rjmp	.+168    	; 0xb52 <VS1053_Initialize+0xde>
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
	SPI_PORT |= _BV(MP3_RESET);		//Assert RESET line (Chip is powered now)
	SPI_1X();						//Low speed mode
	_delay_ms(20);					//Hold for 20ms
	retry=0;

	while(VS1053_ReadCmd(0x03) != 0x9800)	//REDO if not written properly	
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	0e 94 66 04 	call	0x8cc	; 0x8cc <VS1053_ReadCmd>
     ab2:	80 50       	subi	r24, 0x00	; 0
     ab4:	98 49       	sbci	r25, 0x98	; 152
     ab6:	81 f7       	brne	.-32     	; 0xa98 <VS1053_Initialize+0x24>
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	9c e9       	ldi	r25, 0x9C	; 156
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <VS1053_Initialize+0x48>
     ac0:	00 e0       	ldi	r16, 0x00	; 0
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <VS1053_Initialize+0x64>
	//VS1053_WriteCmd(0x05,0x000A);			//Set low sample rate
	
	retry=0;
	while(VS1053_ReadCmd(0x0B) != 0xFEFE)	//REDO if not written properly
	{
		VS1053_WriteCmd(0x0B,0xfefe);		//Total silence
     ac4:	8b e0       	ldi	r24, 0x0B	; 11
     ac6:	6e ef       	ldi	r22, 0xFE	; 254
     ac8:	7e ef       	ldi	r23, 0xFE	; 254
     aca:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
		if(retry++ >10 )return 2;
     ace:	0b 30       	cpi	r16, 0x0B	; 11
     ad0:	11 f4       	brne	.+4      	; 0xad6 <VS1053_Initialize+0x62>
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	3e c0       	rjmp	.+124    	; 0xb52 <VS1053_Initialize+0xde>
     ad6:	0f 5f       	subi	r16, 0xFF	; 255
	_delay_ms(20);
	
	//VS1053_WriteCmd(0x05,0x000A);			//Set low sample rate
	
	retry=0;
	while(VS1053_ReadCmd(0x0B) != 0xFEFE)	//REDO if not written properly
     ad8:	8b e0       	ldi	r24, 0x0B	; 11
     ada:	0e 94 66 04 	call	0x8cc	; 0x8cc <VS1053_ReadCmd>
     ade:	8e 5f       	subi	r24, 0xFE	; 254
     ae0:	9e 4f       	sbci	r25, 0xFE	; 254
     ae2:	81 f7       	brne	.-32     	; 0xac4 <VS1053_Initialize+0x50>
	{
		VS1053_WriteCmd(0x0B,0xfefe);		//Total silence
		if(retry++ >10 )return 2;
	}

	VS1053_WriteCmd(0x05,0xac45);			//Activate sample rate as 44.1kHz stereo
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	65 e4       	ldi	r22, 0x45	; 69
     ae8:	7c ea       	ldi	r23, 0xAC	; 172
     aea:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
     aee:	00 e0       	ldi	r16, 0x00	; 0
     af0:	0a c0       	rjmp	.+20     	; 0xb06 <VS1053_Initialize+0x92>

	retry=0;
	while(VS1053_ReadCmd(0x0b) != 0x2828)	//REDO if not written properly
	{
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
     af2:	8b e0       	ldi	r24, 0x0B	; 11
     af4:	68 e2       	ldi	r22, 0x28	; 40
     af6:	78 e2       	ldi	r23, 0x28	; 40
     af8:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
		if(retry++ >10 )return 3;			//try this for 10 times
     afc:	0b 30       	cpi	r16, 0x0B	; 11
     afe:	11 f4       	brne	.+4      	; 0xb04 <VS1053_Initialize+0x90>
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	27 c0       	rjmp	.+78     	; 0xb52 <VS1053_Initialize+0xde>
     b04:	0f 5f       	subi	r16, 0xFF	; 255
	}

	VS1053_WriteCmd(0x05,0xac45);			//Activate sample rate as 44.1kHz stereo

	retry=0;
	while(VS1053_ReadCmd(0x0b) != 0x2828)	//REDO if not written properly
     b06:	8b e0       	ldi	r24, 0x0B	; 11
     b08:	0e 94 66 04 	call	0x8cc	; 0x8cc <VS1053_ReadCmd>
     b0c:	28 e2       	ldi	r18, 0x28	; 40
     b0e:	88 32       	cpi	r24, 0x28	; 40
     b10:	92 07       	cpc	r25, r18
     b12:	79 f7       	brne	.-34     	; 0xaf2 <VS1053_Initialize+0x7e>
	{
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
		if(retry++ >10 )return 3;			//try this for 10 times
	}
	VS1053_Vol=0x2828;
     b14:	90 93 1a 07 	sts	0x071A, r25
     b18:	80 93 19 07 	sts	0x0719, r24
     b1c:	00 e0       	ldi	r16, 0x00	; 0
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <VS1053_Initialize+0xc0>
	retry=0;
	while(VS1053_ReadCmd(0x00) != 0x0800)			//REDO if not written properly
	{
		VS1053_WriteCmd(0x00,0x0800);				//Set mode register to SDINEW mode and MICIN
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	78 e0       	ldi	r23, 0x08	; 8
     b26:	0e 94 99 04 	call	0x932	; 0x932 <VS1053_WriteCmd>
		if(retry++ >10 )return 4;					//try this for 10 times
     b2a:	0b 30       	cpi	r16, 0x0B	; 11
     b2c:	11 f4       	brne	.+4      	; 0xb32 <VS1053_Initialize+0xbe>
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	10 c0       	rjmp	.+32     	; 0xb52 <VS1053_Initialize+0xde>
     b32:	0f 5f       	subi	r16, 0xFF	; 255
		VS1053_WriteCmd(0x0b,0x2828);		//Set volume to a midrange value
		if(retry++ >10 )return 3;			//try this for 10 times
	}
	VS1053_Vol=0x2828;
	retry=0;
	while(VS1053_ReadCmd(0x00) != 0x0800)			//REDO if not written properly
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 66 04 	call	0x8cc	; 0x8cc <VS1053_ReadCmd>
     b3a:	80 50       	subi	r24, 0x00	; 0
     b3c:	98 40       	sbci	r25, 0x08	; 8
     b3e:	81 f7       	brne	.-32     	; 0xb20 <VS1053_Initialize+0xac>
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	9c e9       	ldi	r25, 0x9C	; 156
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <VS1053_Initialize+0xd0>
	{
		VS1053_WriteCmd(0x00,0x0800);				//Set mode register to SDINEW mode and MICIN
		if(retry++ >10 )return 4;					//try this for 10 times
	}
	_delay_ms(20);
	VS1053_SoftwareReset();
     b48:	0e 94 25 05 	call	0xa4a	; 0xa4a <VS1053_SoftwareReset>
	//_delay_ms(20);
	SPI_2X();
     b4c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_2X>
     b50:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <SPI_DeselectAll>:
	SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
	SPI_2X();
}

void SPI_DeselectAll(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b58:	85 b1       	in	r24, 0x05	; 5
     b5a:	87 60       	ori	r24, 0x07	; 7
     b5c:	85 b9       	out	0x05, r24	; 5
}
     b5e:	08 95       	ret

00000b60 <SPI_Select_SD>:

void SPI_Select_SD(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b60:	85 b1       	in	r24, 0x05	; 5
     b62:	87 60       	ori	r24, 0x07	; 7
     b64:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(SD_SELECT);
     b66:	28 98       	cbi	0x05, 0	; 5
}
     b68:	08 95       	ret

00000b6a <SPI_Select_MP3_Data>:

void SPI_Select_MP3_Data(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b6a:	85 b1       	in	r24, 0x05	; 5
     b6c:	87 60       	ori	r24, 0x07	; 7
     b6e:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(MP3_DATA);
     b70:	2a 98       	cbi	0x05, 2	; 5
}
     b72:	08 95       	ret

00000b74 <SPI_Select_MP3_Cmd>:

void SPI_Select_MP3_Cmd(void){
	SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b74:	85 b1       	in	r24, 0x05	; 5
     b76:	87 60       	ori	r24, 0x07	; 7
     b78:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~_BV(MP3_CMD);
     b7a:	29 98       	cbi	0x05, 1	; 5
}
     b7c:	08 95       	ret

00000b7e <SPI_2X>:

void SPI_2X(void){ //4MHz
	SPCR &= ~_BV(SPR1);
     b7e:	8c b5       	in	r24, 0x2c	; 44
     b80:	8d 7f       	andi	r24, 0xFD	; 253
     b82:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR0);
     b84:	8c b5       	in	r24, 0x2c	; 44
     b86:	8e 7f       	andi	r24, 0xFE	; 254
     b88:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV(SPI2X);
     b8a:	8d b5       	in	r24, 0x2d	; 45
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	8d bd       	out	0x2d, r24	; 45
}
     b90:	08 95       	ret

00000b92 <SPI_Initialize>:
/**
 * @brief Initilizes variables for SPI
 * @return Void
 */
void SPI_Initialize(void){
	DDRB |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD)|_BV(MP3_RESET);
     b92:	84 b1       	in	r24, 0x04	; 4
     b94:	87 61       	ori	r24, 0x17	; 23
     b96:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~_BV(MP3_DREQ);
     b98:	23 98       	cbi	0x04, 3	; 4
	DDRB=0xB7;
     b9a:	87 eb       	ldi	r24, 0xB7	; 183
     b9c:	84 b9       	out	0x04, r24	; 4
	SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
     b9e:	80 e5       	ldi	r24, 0x50	; 80
     ba0:	8c bd       	out	0x2c, r24	; 44
	SPI_2X();
     ba2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_2X>
}
     ba6:	08 95       	ret

00000ba8 <SPI_1X>:
	SPCR &= ~_BV(SPR0);
	SPSR |= _BV(SPI2X);
}

void SPI_1X(void){	//62.5 kHz
	SPCR |= _BV(SPR1)|_BV(SPR0);
     ba8:	8c b5       	in	r24, 0x2c	; 44
     baa:	83 60       	ori	r24, 0x03	; 3
     bac:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
     bae:	8d b5       	in	r24, 0x2d	; 45
     bb0:	8e 7f       	andi	r24, 0xFE	; 254
     bb2:	8d bd       	out	0x2d, r24	; 45
}
     bb4:	08 95       	ret

00000bb6 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data){
	// Start transmission
	SPDR = data;
     bb6:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     bb8:	0d b4       	in	r0, 0x2d	; 45
     bba:	07 fe       	sbrs	r0, 7
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <SPI_transmit+0x2>
	data = SPDR;
     bbe:	8e b5       	in	r24, 0x2e	; 46
	return(data);
}
     bc0:	08 95       	ret

00000bc2 <SPI_receive>:

unsigned char SPI_receive(void){
	unsigned char data;
	// Wait for reception complete

	SPDR = 0xff;
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     bc6:	0d b4       	in	r0, 0x2d	; 45
     bc8:	07 fe       	sbrs	r0, 7
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <SPI_receive+0x4>
	data = SPDR;
     bcc:	8e b5       	in	r24, 0x2e	; 46

	// Return data register
	return data;
}
     bce:	08 95       	ret

00000bd0 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	d8 2e       	mov	r13, r24
     bdc:	7a 01       	movw	r14, r20
     bde:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
     be0:	80 91 ef 05 	lds	r24, 0x05EF
     be4:	88 23       	and	r24, r24
     be6:	b9 f4       	brne	.+46     	; 0xc16 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
     be8:	8d 2d       	mov	r24, r13
     bea:	81 51       	subi	r24, 0x11	; 17
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	60 f0       	brcs	.+24     	; 0xc08 <SD_sendCommand+0x38>
     bf0:	88 e1       	ldi	r24, 0x18	; 24
     bf2:	d8 16       	cp	r13, r24
     bf4:	49 f0       	breq	.+18     	; 0xc08 <SD_sendCommand+0x38>
     bf6:	89 e1       	ldi	r24, 0x19	; 25
     bf8:	d8 16       	cp	r13, r24
     bfa:	31 f0       	breq	.+12     	; 0xc08 <SD_sendCommand+0x38>
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	d8 16       	cp	r13, r24
     c00:	19 f0       	breq	.+6      	; 0xc08 <SD_sendCommand+0x38>
     c02:	81 e2       	ldi	r24, 0x21	; 33
     c04:	d8 16       	cp	r13, r24
     c06:	39 f4       	brne	.+14     	; 0xc16 <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
     c08:	39 e0       	ldi	r19, 0x09	; 9
     c0a:	ee 0c       	add	r14, r14
     c0c:	ff 1c       	adc	r15, r15
     c0e:	00 1f       	adc	r16, r16
     c10:	11 1f       	adc	r17, r17
     c12:	3a 95       	dec	r19
     c14:	d1 f7       	brne	.-12     	; 0xc0a <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
     c16:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
     c18:	8d 2d       	mov	r24, r13
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SPI_transmit(arg>>24);
     c20:	81 2f       	mov	r24, r17
     c22:	99 27       	eor	r25, r25
     c24:	aa 27       	eor	r26, r26
     c26:	bb 27       	eor	r27, r27
     c28:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SPI_transmit(arg>>16);
     c2c:	c8 01       	movw	r24, r16
     c2e:	aa 27       	eor	r26, r26
     c30:	bb 27       	eor	r27, r27
     c32:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SPI_transmit(arg>>8);
     c36:	bb 27       	eor	r27, r27
     c38:	a1 2f       	mov	r26, r17
     c3a:	90 2f       	mov	r25, r16
     c3c:	8f 2d       	mov	r24, r15
     c3e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SPI_transmit(arg);
     c42:	8e 2d       	mov	r24, r14
     c44:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
     c48:	88 e0       	ldi	r24, 0x08	; 8
     c4a:	d8 16       	cp	r13, r24
     c4c:	11 f4       	brne	.+4      	; 0xc52 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
     c4e:	87 e8       	ldi	r24, 0x87	; 135
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
     c52:	85 e9       	ldi	r24, 0x95	; 149
     c54:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
     c5c:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     c5e:	d1 f0       	breq	.+52     	; 0xc94 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
     c60:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     c64:	08 2f       	mov	r16, r24
     c66:	8f 3f       	cpi	r24, 0xFF	; 255
     c68:	c9 f3       	breq	.-14     	; 0xc5c <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
     c6a:	88 23       	and	r24, r24
     c6c:	99 f4       	brne	.+38     	; 0xc94 <SD_sendCommand+0xc4>
     c6e:	8a e3       	ldi	r24, 0x3A	; 58
     c70:	d8 16       	cp	r13, r24
     c72:	81 f4       	brne	.+32     	; 0xc94 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
     c74:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
     c78:	86 ff       	sbrs	r24, 6
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <SD_sendCommand+0xb4>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 ef 05 	sts	0x05EF, r24
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
     c84:	10 92 ef 05 	sts	0x05EF, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
     c88:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
     c8c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
  SPI_receive(); 
     c90:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
     c94:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
SD_CS_DEASSERT;
     c98:	28 9a       	sbi	0x05, 0	; 5

return response; //return state
}
     c9a:	80 2f       	mov	r24, r16
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	08 95       	ret

00000ca8 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	7b 01       	movw	r14, r22
     cba:	8c 01       	movw	r16, r24
     cbc:	59 01       	movw	r10, r18
     cbe:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
     cc0:	80 e2       	ldi	r24, 0x20	; 32
     cc2:	b8 01       	movw	r22, r16
     cc4:	a7 01       	movw	r20, r14
     cc6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     cca:	88 23       	and	r24, r24
     ccc:	b9 f4       	brne	.+46     	; 0xcfc <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
     cce:	08 94       	sec
     cd0:	e1 08       	sbc	r14, r1
     cd2:	f1 08       	sbc	r15, r1
     cd4:	01 09       	sbc	r16, r1
     cd6:	11 09       	sbc	r17, r1
     cd8:	ea 0c       	add	r14, r10
     cda:	fb 1c       	adc	r15, r11
     cdc:	0c 1d       	adc	r16, r12
     cde:	1d 1d       	adc	r17, r13
     ce0:	81 e2       	ldi	r24, 0x21	; 33
     ce2:	b8 01       	movw	r22, r16
     ce4:	a7 01       	movw	r20, r14
     ce6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
if(response != 0x00)
     cea:	88 23       	and	r24, r24
     cec:	39 f4       	brne	.+14     	; 0xcfc <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
     cee:	86 e2       	ldi	r24, 0x26	; 38
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	08 95       	ret

00000d0e <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
     d1c:	1f 5f       	subi	r17, 0xFF	; 255
     d1e:	1a 30       	cpi	r17, 0x0A	; 10
     d20:	d1 f7       	brne	.-12     	; 0xd16 <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
     d22:	28 98       	cbi	0x05, 0	; 5
     d24:	c0 e0       	ldi	r28, 0x00	; 0
     d26:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
   retry++;
     d36:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
     d38:	c1 32       	cpi	r28, 0x21	; 33
     d3a:	d1 05       	cpc	r29, r1
     d3c:	11 f4       	brne	.+4      	; 0xd42 <SD_init+0x34>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	56 c0       	rjmp	.+172    	; 0xdee <SD_init+0xe0>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	89 f7       	brne	.-30     	; 0xd28 <SD_init+0x1a>

SD_CS_DEASSERT;
     d46:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit (0xff);
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SPI_transmit (0xff);
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
     d54:	c0 e0       	ldi	r28, 0x00	; 0
     d56:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
     d58:	88 e0       	ldi	r24, 0x08	; 8
     d5a:	4a ea       	ldi	r20, 0xAA	; 170
     d5c:	51 e0       	ldi	r21, 0x01	; 1
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
retry++;
     d66:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     d68:	cf 3f       	cpi	r28, 0xFF	; 255
     d6a:	d1 05       	cpc	r29, r1
     d6c:	29 f4       	brne	.+10     	; 0xd78 <SD_init+0x6a>
   {
	  //TX_NEWLINE;
	  SD_version = 1;
	  cardType = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 fd 05 	sts	0x05FD, r24
     d74:	11 e0       	ldi	r17, 0x01	; 1
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <SD_init+0x70>
	  break;
   } //time out

}while(response != 0x01);
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	71 f7       	brne	.-36     	; 0xd58 <SD_init+0x4a>
     d7c:	12 e0       	ldi	r17, 0x02	; 2
     d7e:	c0 e0       	ldi	r28, 0x00	; 0
     d80:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
     d82:	87 e3       	ldi	r24, 0x37	; 55
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
     d90:	89 e2       	ldi	r24, 0x29	; 41
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e4       	ldi	r23, 0x40	; 64
     d9a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>

retry++;
     d9e:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     da0:	cf 3f       	cpi	r28, 0xFF	; 255
     da2:	d1 05       	cpc	r29, r1
     da4:	11 f4       	brne	.+4      	; 0xdaa <SD_init+0x9c>
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	22 c0       	rjmp	.+68     	; 0xdee <SD_init+0xe0>
   {
      //TX_NEWLINE;
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
     daa:	88 23       	and	r24, r24
     dac:	51 f7       	brne	.-44     	; 0xd82 <SD_init+0x74>


retry = 0;
SDHC_flag = 0;
     dae:	10 92 ef 05 	sts	0x05EF, r1

if (SD_version == 2)
     db2:	12 30       	cpi	r17, 0x02	; 2
     db4:	e1 f4       	brne	.+56     	; 0xdee <SD_init+0xe0>
     db6:	c0 e0       	ldi	r28, 0x00	; 0
     db8:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
     dba:	8a e3       	ldi	r24, 0x3A	; 58
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
	 retry++;
     dc8:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
     dca:	cf 3f       	cpi	r28, 0xFF	; 255
     dcc:	d1 05       	cpc	r29, r1
     dce:	19 f4       	brne	.+6      	; 0xdd6 <SD_init+0xc8>
     {
       //TX_NEWLINE;
	   cardType = 0;
     dd0:	10 92 fd 05 	sts	0x05FD, r1
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <SD_init+0xcc>
	   break;
     } //time out

   }while(response != 0x00);
     dd6:	88 23       	and	r24, r24
     dd8:	81 f7       	brne	.-32     	; 0xdba <SD_init+0xac>

   if(SDHC_flag == 1) cardType = 2;
     dda:	80 91 ef 05 	lds	r24, 0x05EF
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	11 f4       	brne	.+4      	; 0xde6 <SD_init+0xd8>
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <SD_init+0xda>
   else cardType = 3;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	80 93 fd 05 	sts	0x05FD, r24
     dec:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	08 95       	ret

00000df6 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	ab 01       	movw	r20, r22
     dfc:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
     dfe:	88 e1       	ldi	r24, 0x18	; 24
     e00:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     e04:	88 23       	and	r24, r24
     e06:	11 f0       	breq	.+4      	; 0xe0c <SD_writeSingleBlock+0x16>
     e08:	98 2f       	mov	r25, r24
     e0a:	3f c0       	rjmp	.+126    	; 0xe8a <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
     e0c:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     e0e:	8e ef       	ldi	r24, 0xFE	; 254
     e10:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
     e14:	c0 e0       	ldi	r28, 0x00	; 0
     e16:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
     e18:	fe 01       	movw	r30, r28
     e1a:	ec 52       	subi	r30, 0x2C	; 44
     e1c:	fc 4f       	sbci	r31, 0xFC	; 252
     e1e:	80 81       	ld	r24, Z
     e20:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
     e24:	21 96       	adiw	r28, 0x01	; 1
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	c0 30       	cpi	r28, 0x00	; 0
     e2a:	d8 07       	cpc	r29, r24
     e2c:	a9 f7       	brne	.-22     	; 0xe18 <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SPI_transmit(0xff);
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>

response = SPI_receive();
     e3a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     e3e:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     e40:	8f 71       	andi	r24, 0x1F	; 31
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	41 f0       	breq	.+16     	; 0xe56 <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     e46:	28 9a       	sbi	0x05, 0	; 5
     e48:	20 c0       	rjmp	.+64     	; 0xe8a <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	cf 3f       	cpi	r28, 0xFF	; 255
     e4e:	d8 07       	cpc	r29, r24
     e50:	91 f0       	breq	.+36     	; 0xe76 <SD_writeSingleBlock+0x80>
     e52:	21 96       	adiw	r28, 0x01	; 1
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <SD_writeSingleBlock+0x64>
     e56:	c0 e0       	ldi	r28, 0x00	; 0
     e58:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     e5a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     e5e:	88 23       	and	r24, r24
     e60:	a1 f3       	breq	.-24     	; 0xe4a <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
     e62:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     e6a:	28 98       	cbi	0x05, 0	; 5
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	cf 3f       	cpi	r28, 0xFF	; 255
     e72:	d8 07       	cpc	r29, r24
     e74:	19 f4       	brne	.+6      	; 0xe7c <SD_writeSingleBlock+0x86>
     e76:	28 9a       	sbi	0x05, 0	; 5
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	07 c0       	rjmp	.+14     	; 0xe8a <SD_writeSingleBlock+0x94>
     e7c:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     e7e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     e82:	88 23       	and	r24, r24
     e84:	a1 f3       	breq	.-24     	; 0xe6e <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
     e86:	28 9a       	sbi	0x05, 0	; 5
     e88:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
     e8a:	89 2f       	mov	r24, r25
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ab 01       	movw	r20, r22
     e9a:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
     e9c:	81 e1       	ldi	r24, 0x11	; 17
     e9e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SD_sendCommand>
     ea2:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     ea4:	88 23       	and	r24, r24
     ea6:	09 f5       	brne	.+66     	; 0xeea <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
     ea8:	28 98       	cbi	0x05, 0	; 5
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
     eac:	d0 e0       	ldi	r29, 0x00	; 0
     eae:	05 c0       	rjmp	.+10     	; 0xeba <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     eb0:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
     eb2:	19 f4       	brne	.+6      	; 0xeba <SD_readSingleBlock+0x28>
     eb4:	28 9a       	sbi	0x05, 0	; 5
     eb6:	11 e0       	ldi	r17, 0x01	; 1
     eb8:	18 c0       	rjmp	.+48     	; 0xeea <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     eba:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     ebe:	8e 3f       	cpi	r24, 0xFE	; 254
     ec0:	b9 f7       	brne	.-18     	; 0xeb0 <SD_readSingleBlock+0x1e>
     ec2:	c0 e0       	ldi	r28, 0x00	; 0
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
     ec6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
     eca:	fe 01       	movw	r30, r28
     ecc:	ec 52       	subi	r30, 0x2C	; 44
     ece:	fc 4f       	sbci	r31, 0xFC	; 252
     ed0:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
     ed2:	21 96       	adiw	r28, 0x01	; 1
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	c0 30       	cpi	r28, 0x00	; 0
     ed8:	d8 07       	cpc	r29, r24
     eda:	a9 f7       	brne	.-22     	; 0xec6 <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     edc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
SPI_receive();
     ee0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
     ee4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_receive>
SD_CS_DEASSERT;
     ee8:	28 9a       	sbi	0x05, 0	; 5

return 0;
}
     eea:	81 2f       	mov	r24, r17
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	08 95       	ret

00000ef4 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     efc:	20 91 d5 05 	lds	r18, 0x05D5
     f00:	30 91 d6 05 	lds	r19, 0x05D6
     f04:	e0 90 9b 03 	lds	r14, 0x039B
     f08:	f0 90 9c 03 	lds	r15, 0x039C
     f0c:	00 91 9d 03 	lds	r16, 0x039D
     f10:	10 91 9e 03 	lds	r17, 0x039E
     f14:	62 50       	subi	r22, 0x02	; 2
     f16:	70 40       	sbci	r23, 0x00	; 0
     f18:	80 40       	sbci	r24, 0x00	; 0
     f1a:	90 40       	sbci	r25, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
     f24:	9b 01       	movw	r18, r22
     f26:	ac 01       	movw	r20, r24
     f28:	2e 0d       	add	r18, r14
     f2a:	3f 1d       	adc	r19, r15
     f2c:	40 1f       	adc	r20, r16
     f2e:	51 1f       	adc	r21, r17
}
     f30:	b9 01       	movw	r22, r18
     f32:	ca 01       	movw	r24, r20
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     f3e:	8f 92       	push	r8
     f40:	9f 92       	push	r9
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	64 97       	sbiw	r28, 0x14	; 20
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	98 2e       	mov	r9, r24
     f66:	6a 01       	movw	r12, r20
     f68:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     f6a:	de 01       	movw	r26, r28
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	ed e2       	ldi	r30, 0x2D	; 45
     f70:	f1 e0       	ldi	r31, 0x01	; 1
     f72:	84 e1       	ldi	r24, 0x14	; 20
     f74:	01 90       	ld	r0, Z+
     f76:	0d 92       	st	X+, r0
     f78:	81 50       	subi	r24, 0x01	; 1
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <displayMemory+0x36>
     f7c:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     f7e:	8c e2       	ldi	r24, 0x2C	; 44
     f80:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     f82:	05 30       	cpi	r16, 0x05	; 5
     f84:	11 f0       	breq	.+4      	; 0xf8a <displayMemory+0x4c>
     f86:	09 30       	cpi	r16, 0x09	; 9
     f88:	29 f4       	brne	.+10     	; 0xf94 <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
     f8a:	fe 01       	movw	r30, r28
     f8c:	e0 0f       	add	r30, r16
     f8e:	f1 1d       	adc	r31, r1
     f90:	80 82       	st	Z, r8
	   i--;
     f92:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     f94:	5e 01       	movw	r10, r28
     f96:	a0 0e       	add	r10, r16
     f98:	b1 1c       	adc	r11, r1
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	2a e0       	ldi	r18, 0x0A	; 10
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
     faa:	60 63       	ori	r22, 0x30	; 48
     fac:	f5 01       	movw	r30, r10
     fae:	60 83       	st	Z, r22
    memory /= 10;
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	2a e0       	ldi	r18, 0x0A	; 10
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
     fc0:	c9 01       	movw	r24, r18
     fc2:	da 01       	movw	r26, r20
     fc4:	6c 01       	movw	r12, r24
     fc6:	7d 01       	movw	r14, r26
	if(memory == 0) break;
     fc8:	c1 14       	cp	r12, r1
     fca:	d1 04       	cpc	r13, r1
     fcc:	e1 04       	cpc	r14, r1
     fce:	f1 04       	cpc	r15, r1
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     fd2:	01 50       	subi	r16, 0x01	; 1
     fd4:	b1 f6       	brne	.-84     	; 0xf82 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	9f 16       	cp	r9, r31
     fda:	11 f4       	brne	.+4      	; 0xfe0 <displayMemory+0xa2>
     fdc:	8b e4       	ldi	r24, 0x4B	; 75
     fde:	8e 87       	std	Y+14, r24	; 0x0e
  USART_transmitStringToPC(memoryString);
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
}
     fe8:	64 96       	adiw	r28, 0x14	; 20
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	9f 90       	pop	r9
    1008:	8f 90       	pop	r8
    100a:	08 95       	ret

0000100c <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    100c:	6f 92       	push	r6
    100e:	7f 92       	push	r7
    1010:	8f 92       	push	r8
    1012:	9f 92       	push	r9
    1014:	af 92       	push	r10
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    1024:	60 78       	andi	r22, 0x80	; 128
    1026:	3b 01       	movw	r6, r22
    1028:	4c 01       	movw	r8, r24
    102a:	22 e0       	ldi	r18, 0x02	; 2
    102c:	66 0c       	add	r6, r6
    102e:	77 1c       	adc	r7, r7
    1030:	88 1c       	adc	r8, r8
    1032:	99 1c       	adc	r9, r9
    1034:	2a 95       	dec	r18
    1036:	d1 f7       	brne	.-12     	; 0x102c <searchNextFreeCluster+0x20>
    1038:	5b 01       	movw	r10, r22
    103a:	6c 01       	movw	r12, r24
    103c:	50 c0       	rjmp	.+160    	; 0x10de <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    103e:	e0 90 f6 05 	lds	r14, 0x05F6
    1042:	f0 90 f7 05 	lds	r15, 0x05F7
    1046:	20 91 a3 03 	lds	r18, 0x03A3
    104a:	30 91 a4 03 	lds	r19, 0x03A4
      SD_readSingleBlock(sector);
    104e:	00 e0       	ldi	r16, 0x00	; 0
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	80 91 eb 05 	lds	r24, 0x05EB
    1056:	90 91 ec 05 	lds	r25, 0x05EC
    105a:	a0 91 ed 05 	lds	r26, 0x05ED
    105e:	b0 91 ee 05 	lds	r27, 0x05EE
    1062:	e8 0e       	add	r14, r24
    1064:	f9 1e       	adc	r15, r25
    1066:	0a 1f       	adc	r16, r26
    1068:	1b 1f       	adc	r17, r27
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	c4 01       	movw	r24, r8
    1070:	b3 01       	movw	r22, r6
    1072:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    1076:	e2 0e       	add	r14, r18
    1078:	f3 1e       	adc	r15, r19
    107a:	04 1f       	adc	r16, r20
    107c:	15 1f       	adc	r17, r21
    107e:	c8 01       	movw	r24, r16
    1080:	b7 01       	movw	r22, r14
    1082:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    1086:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    1088:	e6 2f       	mov	r30, r22
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ec 52       	subi	r30, 0x2C	; 44
    1096:	fc 4f       	sbci	r31, 0xFC	; 252
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	a2 81       	ldd	r26, Z+2	; 0x02
    109e:	b3 81       	ldd	r27, Z+3	; 0x03
    10a0:	bf 70       	andi	r27, 0x0F	; 15
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	a1 05       	cpc	r26, r1
    10a6:	b1 05       	cpc	r27, r1
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <searchNextFreeCluster+0xac>
            return(cluster+i);
    10aa:	a6 01       	movw	r20, r12
    10ac:	95 01       	movw	r18, r10
    10ae:	26 0f       	add	r18, r22
    10b0:	31 1d       	adc	r19, r1
    10b2:	41 1d       	adc	r20, r1
    10b4:	51 1d       	adc	r21, r1
    10b6:	25 c0       	rjmp	.+74     	; 0x1102 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	60 38       	cpi	r22, 0x80	; 128
    10bc:	29 f7       	brne	.-54     	; 0x1088 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    10be:	80 e8       	ldi	r24, 0x80	; 128
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	a8 0e       	add	r10, r24
    10c8:	b9 1e       	adc	r11, r25
    10ca:	ca 1e       	adc	r12, r26
    10cc:	db 1e       	adc	r13, r27
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	68 0e       	add	r6, r24
    10d8:	79 1e       	adc	r7, r25
    10da:	8a 1e       	adc	r8, r26
    10dc:	9b 1e       	adc	r9, r27
    10de:	80 91 a5 03 	lds	r24, 0x03A5
    10e2:	90 91 a6 03 	lds	r25, 0x03A6
    10e6:	a0 91 a7 03 	lds	r26, 0x03A7
    10ea:	b0 91 a8 03 	lds	r27, 0x03A8
    10ee:	a8 16       	cp	r10, r24
    10f0:	b9 06       	cpc	r11, r25
    10f2:	ca 06       	cpc	r12, r26
    10f4:	db 06       	cpc	r13, r27
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <searchNextFreeCluster+0xee>
    10f8:	a2 cf       	rjmp	.-188    	; 0x103e <searchNextFreeCluster+0x32>
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    1102:	b9 01       	movw	r22, r18
    1104:	ca 01       	movw	r24, r20
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	7f 90       	pop	r7
    111c:	6f 90       	pop	r6
    111e:	08 95       	ret

00001120 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	d8 2e       	mov	r13, r24
    112e:	c6 2e       	mov	r12, r22
    1130:	79 01       	movw	r14, r18
    1132:	8a 01       	movw	r16, r20
	struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
	unsigned char error;

	SD_readSingleBlock(unusedSectors + 1);
    1134:	60 91 eb 05 	lds	r22, 0x05EB
    1138:	70 91 ec 05 	lds	r23, 0x05EC
    113c:	80 91 ed 05 	lds	r24, 0x05ED
    1140:	90 91 ee 05 	lds	r25, 0x05EE
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	8f 4f       	sbci	r24, 0xFF	; 255
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>

	if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    1150:	80 91 d4 03 	lds	r24, 0x03D4
    1154:	90 91 d5 03 	lds	r25, 0x03D5
    1158:	a0 91 d6 03 	lds	r26, 0x03D6
    115c:	b0 91 d7 03 	lds	r27, 0x03D7
    1160:	82 55       	subi	r24, 0x52	; 82
    1162:	92 45       	sbci	r25, 0x52	; 82
    1164:	a1 46       	sbci	r26, 0x61	; 97
    1166:	b1 44       	sbci	r27, 0x41	; 65
    1168:	09 f0       	breq	.+2      	; 0x116c <getSetFreeCluster+0x4c>
    116a:	54 c0       	rjmp	.+168    	; 0x1214 <getSetFreeCluster+0xf4>
    116c:	80 91 b8 05 	lds	r24, 0x05B8
    1170:	90 91 b9 05 	lds	r25, 0x05B9
    1174:	a0 91 ba 05 	lds	r26, 0x05BA
    1178:	b0 91 bb 05 	lds	r27, 0x05BB
    117c:	82 57       	subi	r24, 0x72	; 114
    117e:	92 47       	sbci	r25, 0x72	; 114
    1180:	a1 44       	sbci	r26, 0x41	; 65
    1182:	b1 46       	sbci	r27, 0x61	; 97
    1184:	09 f0       	breq	.+2      	; 0x1188 <getSetFreeCluster+0x68>
    1186:	46 c0       	rjmp	.+140    	; 0x1214 <getSetFreeCluster+0xf4>
    1188:	80 91 d0 05 	lds	r24, 0x05D0
    118c:	90 91 d1 05 	lds	r25, 0x05D1
    1190:	a0 91 d2 05 	lds	r26, 0x05D2
    1194:	b0 91 d3 05 	lds	r27, 0x05D3
    1198:	80 50       	subi	r24, 0x00	; 0
    119a:	90 40       	sbci	r25, 0x00	; 0
    119c:	a5 45       	sbci	r26, 0x55	; 85
    119e:	ba 4a       	sbci	r27, 0xAA	; 170
    11a0:	c9 f5       	brne	.+114    	; 0x1214 <getSetFreeCluster+0xf4>
	return 0xffffffff;

	if(get_set == GET)
    11a2:	cc 20       	and	r12, r12
    11a4:	a9 f4       	brne	.+42     	; 0x11d0 <getSetFreeCluster+0xb0>
	{
	if(totOrNext == TOTAL_FREE)
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	d8 16       	cp	r13, r24
    11aa:	49 f4       	brne	.+18     	; 0x11be <getSetFreeCluster+0x9e>
	  return(FS->freeClusterCount);
    11ac:	20 91 bc 05 	lds	r18, 0x05BC
    11b0:	30 91 bd 05 	lds	r19, 0x05BD
    11b4:	40 91 be 05 	lds	r20, 0x05BE
    11b8:	50 91 bf 05 	lds	r21, 0x05BF
    11bc:	2f c0       	rjmp	.+94     	; 0x121c <getSetFreeCluster+0xfc>
	else // when totOrNext = NEXT_FREE
	  return(FS->nextFreeCluster);
    11be:	20 91 c0 05 	lds	r18, 0x05C0
    11c2:	30 91 c1 05 	lds	r19, 0x05C1
    11c6:	40 91 c2 05 	lds	r20, 0x05C2
    11ca:	50 91 c3 05 	lds	r21, 0x05C3
    11ce:	26 c0       	rjmp	.+76     	; 0x121c <getSetFreeCluster+0xfc>
	}
	else
	{
	if(totOrNext == TOTAL_FREE)
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	d2 16       	cp	r13, r18
    11d4:	49 f4       	brne	.+18     	; 0x11e8 <getSetFreeCluster+0xc8>
	  FS->freeClusterCount = FSEntry;
    11d6:	e0 92 bc 05 	sts	0x05BC, r14
    11da:	f0 92 bd 05 	sts	0x05BD, r15
    11de:	00 93 be 05 	sts	0x05BE, r16
    11e2:	10 93 bf 05 	sts	0x05BF, r17
    11e6:	08 c0       	rjmp	.+16     	; 0x11f8 <getSetFreeCluster+0xd8>
	else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    11e8:	e0 92 c0 05 	sts	0x05C0, r14
    11ec:	f0 92 c1 05 	sts	0x05C1, r15
    11f0:	00 93 c2 05 	sts	0x05C2, r16
    11f4:	10 93 c3 05 	sts	0x05C3, r17

	error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    11f8:	60 91 eb 05 	lds	r22, 0x05EB
    11fc:	70 91 ec 05 	lds	r23, 0x05EC
    1200:	80 91 ed 05 	lds	r24, 0x05ED
    1204:	90 91 ee 05 	lds	r25, 0x05EE
    1208:	6f 5f       	subi	r22, 0xFF	; 255
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	8f 4f       	sbci	r24, 0xFF	; 255
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
	}
	return 0xffffffff;
    1214:	2f ef       	ldi	r18, 0xFF	; 255
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	4f ef       	ldi	r20, 0xFF	; 255
    121a:	5f ef       	ldi	r21, 0xFF	; 255
}
    121c:	b9 01       	movw	r22, r18
    121e:	ca 01       	movw	r24, r20
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	08 95       	ret

0000122e <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	d8 2e       	mov	r13, r24
    123a:	db 01       	movw	r26, r22
    123c:	ca 01       	movw	r24, r20
    123e:	e9 e0       	ldi	r30, 0x09	; 9
    1240:	b6 95       	lsr	r27
    1242:	a7 95       	ror	r26
    1244:	97 95       	ror	r25
    1246:	87 95       	ror	r24
    1248:	ea 95       	dec	r30
    124a:	d1 f7       	brne	.-12     	; 0x1240 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    124c:	51 70       	andi	r21, 0x01	; 1
    124e:	60 70       	andi	r22, 0x00	; 0
    1250:	70 70       	andi	r23, 0x00	; 0
    1252:	41 15       	cp	r20, r1
    1254:	51 05       	cpc	r21, r1
    1256:	61 05       	cpc	r22, r1
    1258:	71 05       	cpc	r23, r1
    125a:	19 f4       	brne	.+6      	; 0x1262 <freeMemoryUpdate+0x34>
    125c:	ac 01       	movw	r20, r24
    125e:	bd 01       	movw	r22, r26
    1260:	06 c0       	rjmp	.+12     	; 0x126e <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    1262:	ac 01       	movw	r20, r24
    1264:	bd 01       	movw	r22, r26
    1266:	4f 5f       	subi	r20, 0xFF	; 255
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	6f 4f       	sbci	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	db 01       	movw	r26, r22
    1270:	ca 01       	movw	r24, r20
    1272:	33 e0       	ldi	r19, 0x03	; 3
    1274:	b6 95       	lsr	r27
    1276:	a7 95       	ror	r26
    1278:	97 95       	ror	r25
    127a:	87 95       	ror	r24
    127c:	3a 95       	dec	r19
    127e:	d1 f7       	brne	.-12     	; 0x1274 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    1280:	47 70       	andi	r20, 0x07	; 7
    1282:	50 70       	andi	r21, 0x00	; 0
    1284:	60 70       	andi	r22, 0x00	; 0
    1286:	70 70       	andi	r23, 0x00	; 0
    1288:	41 15       	cp	r20, r1
    128a:	51 05       	cpc	r21, r1
    128c:	61 05       	cpc	r22, r1
    128e:	71 05       	cpc	r23, r1
    1290:	19 f4       	brne	.+6      	; 0x1298 <freeMemoryUpdate+0x6a>
    1292:	7c 01       	movw	r14, r24
    1294:	8d 01       	movw	r16, r26
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    1298:	7c 01       	movw	r14, r24
    129a:	8d 01       	movw	r16, r26
    129c:	08 94       	sec
    129e:	e1 1c       	adc	r14, r1
    12a0:	f1 1c       	adc	r15, r1
    12a2:	01 1d       	adc	r16, r1
    12a4:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    12a6:	80 91 02 07 	lds	r24, 0x0702
    12aa:	88 23       	and	r24, r24
    12ac:	d9 f0       	breq	.+54     	; 0x12e4 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
	if(flag == ADD)
    12be:	dd 20       	and	r13, r13
    12c0:	39 f4       	brne	.+14     	; 0x12d0 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
    12c2:	9b 01       	movw	r18, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	2e 0d       	add	r18, r14
    12c8:	3f 1d       	adc	r19, r15
    12ca:	40 1f       	adc	r20, r16
    12cc:	51 1f       	adc	r21, r17
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	2e 19       	sub	r18, r14
    12d6:	3f 09       	sbc	r19, r15
    12d8:	40 0b       	sbc	r20, r16
    12da:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
  }
}
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	08 95       	ret

000012f0 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    12f0:	2f 92       	push	r2
    12f2:	3f 92       	push	r3
    12f4:	4f 92       	push	r4
    12f6:	5f 92       	push	r5
    12f8:	6f 92       	push	r6
    12fa:	7f 92       	push	r7
    12fc:	8f 92       	push	r8
    12fe:	9f 92       	push	r9
    1300:	af 92       	push	r10
    1302:	bf 92       	push	r11
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    1310:	20 91 a5 03 	lds	r18, 0x03A5
    1314:	30 91 a6 03 	lds	r19, 0x03A6
    1318:	40 91 a7 03 	lds	r20, 0x03A7
    131c:	50 91 a8 03 	lds	r21, 0x03A8
    1320:	60 91 d5 05 	lds	r22, 0x05D5
    1324:	70 91 d6 05 	lds	r23, 0x05D6
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    1330:	5b 01       	movw	r10, r22
    1332:	6c 01       	movw	r12, r24
    1334:	1a e0       	ldi	r17, 0x0A	; 10
    1336:	d6 94       	lsr	r13
    1338:	c7 94       	ror	r12
    133a:	b7 94       	ror	r11
    133c:	a7 94       	ror	r10
    133e:	1a 95       	dec	r17
    1340:	d1 f7       	brne	.-12     	; 0x1336 <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
    1342:	e0 90 a3 03 	lds	r14, 0x03A3
    1346:	f0 90 a4 03 	lds	r15, 0x03A4

TX_NEWLINE_PC;
    134a:	8d e0       	ldi	r24, 0x0D	; 13
    134c:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1350:	8a e0       	ldi	r24, 0x0A	; 10
    1352:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
TX_NEWLINE_PC;
    1356:	8d e0       	ldi	r24, 0x0D	; 13
    1358:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    135c:	8a e0       	ldi	r24, 0x0A	; 10
    135e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
//USART_transmitStringToPCFromFlash(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	c6 01       	movw	r24, r12
    1368:	b5 01       	movw	r22, r10
    136a:	a8 01       	movw	r20, r16
    136c:	97 01       	movw	r18, r14
    136e:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    1372:	ab 01       	movw	r20, r22
    1374:	bc 01       	movw	r22, r24
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	0e 94 9f 07 	call	0xf3e	; 0xf3e <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
    138c:	3b 01       	movw	r6, r22
    138e:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    1390:	80 91 a5 03 	lds	r24, 0x03A5
    1394:	90 91 a6 03 	lds	r25, 0x03A6
    1398:	a0 91 a7 03 	lds	r26, 0x03A7
    139c:	b0 91 a8 03 	lds	r27, 0x03A8
    13a0:	86 15       	cp	r24, r6
    13a2:	97 05       	cpc	r25, r7
    13a4:	a8 05       	cpc	r26, r8
    13a6:	b9 05       	cpc	r27, r9
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <memoryStatistics+0xbc>
    13aa:	7c c0       	rjmp	.+248    	; 0x14a4 <memoryStatistics+0x1b4>
{
   freeClusterCountUpdated = 0;
    13ac:	10 92 02 07 	sts	0x0702, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    13b0:	a0 90 c9 03 	lds	r10, 0x03C9
    13b4:	b0 90 ca 03 	lds	r11, 0x03CA
    13b8:	c0 90 cb 03 	lds	r12, 0x03CB
    13bc:	d0 90 cc 03 	lds	r13, 0x03CC
    13c0:	b2 e0       	ldi	r27, 0x02	; 2
    13c2:	aa 0c       	add	r10, r10
    13c4:	bb 1c       	adc	r11, r11
    13c6:	cc 1c       	adc	r12, r12
    13c8:	dd 1c       	adc	r13, r13
    13ca:	ba 95       	dec	r27
    13cc:	d1 f7       	brne	.-12     	; 0x13c2 <memoryStatistics+0xd2>
    13ce:	66 24       	eor	r6, r6
    13d0:	77 24       	eor	r7, r7
    13d2:	43 01       	movw	r8, r6
    13d4:	22 24       	eor	r2, r2
    13d6:	33 24       	eor	r3, r3
    13d8:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    13da:	e0 90 f6 05 	lds	r14, 0x05F6
    13de:	f0 90 f7 05 	lds	r15, 0x05F7
    13e2:	20 91 a3 03 	lds	r18, 0x03A3
    13e6:	30 91 a4 03 	lds	r19, 0x03A4
      SD_readSingleBlock(sector);
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	80 91 eb 05 	lds	r24, 0x05EB
    13f2:	90 91 ec 05 	lds	r25, 0x05EC
    13f6:	a0 91 ed 05 	lds	r26, 0x05ED
    13fa:	b0 91 ee 05 	lds	r27, 0x05EE
    13fe:	e8 0e       	add	r14, r24
    1400:	f9 1e       	adc	r15, r25
    1402:	0a 1f       	adc	r16, r26
    1404:	1b 1f       	adc	r17, r27
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	c6 01       	movw	r24, r12
    140c:	b5 01       	movw	r22, r10
    140e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    1412:	e2 0e       	add	r14, r18
    1414:	f3 1e       	adc	r15, r19
    1416:	04 1f       	adc	r16, r20
    1418:	15 1f       	adc	r17, r21
    141a:	c8 01       	movw	r24, r16
    141c:	b7 01       	movw	r22, r14
    141e:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    1422:	a2 01       	movw	r20, r4
    1424:	91 01       	movw	r18, r2
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    142a:	fb 01       	movw	r30, r22
    142c:	ec 52       	subi	r30, 0x2C	; 44
    142e:	fc 4f       	sbci	r31, 0xFC	; 252
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	a2 81       	ldd	r26, Z+2	; 0x02
    1436:	b3 81       	ldd	r27, Z+3	; 0x03
    1438:	bf 70       	andi	r27, 0x0F	; 15
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	a1 05       	cpc	r26, r1
    143e:	b1 05       	cpc	r27, r1
    1440:	29 f4       	brne	.+10     	; 0x144c <memoryStatistics+0x15c>
            freeClusters++;;
    1442:	08 94       	sec
    1444:	61 1c       	adc	r6, r1
    1446:	71 1c       	adc	r7, r1
    1448:	81 1c       	adc	r8, r1
    144a:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	4f 4f       	sbci	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    1454:	80 91 a5 03 	lds	r24, 0x03A5
    1458:	90 91 a6 03 	lds	r25, 0x03A6
    145c:	a0 91 a7 03 	lds	r26, 0x03A7
    1460:	b0 91 a8 03 	lds	r27, 0x03A8
    1464:	02 96       	adiw	r24, 0x02	; 2
    1466:	a1 1d       	adc	r26, r1
    1468:	b1 1d       	adc	r27, r1
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	4a 07       	cpc	r20, r26
    1470:	5b 07       	cpc	r21, r27
    1472:	c1 f0       	breq	.+48     	; 0x14a4 <memoryStatistics+0x1b4>
    1474:	c9 01       	movw	r24, r18
    1476:	82 19       	sub	r24, r2
    1478:	93 09       	sbc	r25, r3
    147a:	6c 5f       	subi	r22, 0xFC	; 252
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    147e:	02 e0       	ldi	r16, 0x02	; 2
    1480:	60 30       	cpi	r22, 0x00	; 0
    1482:	70 07       	cpc	r23, r16
    1484:	91 f6       	brne	.-92     	; 0x142a <memoryStatistics+0x13a>
    1486:	e1 2c       	mov	r14, r1
    1488:	a2 e0       	ldi	r26, 0x02	; 2
    148a:	fa 2e       	mov	r15, r26
    148c:	01 2d       	mov	r16, r1
    148e:	11 2d       	mov	r17, r1
    1490:	ae 0c       	add	r10, r14
    1492:	bf 1c       	adc	r11, r15
    1494:	c0 1e       	adc	r12, r16
    1496:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    1498:	80 38       	cpi	r24, 0x80	; 128
    149a:	91 05       	cpc	r25, r1
    149c:	18 f0       	brcs	.+6      	; 0x14a4 <memoryStatistics+0x1b4>
    149e:	19 01       	movw	r2, r18
    14a0:	2a 01       	movw	r4, r20
    14a2:	9b cf       	rjmp	.-202    	; 0x13da <memoryStatistics+0xea>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
    14a4:	80 91 02 07 	lds	r24, 0x0702
    14a8:	88 23       	and	r24, r24
    14aa:	31 f4       	brne	.+12     	; 0x14b8 <memoryStatistics+0x1c8>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	a4 01       	movw	r20, r8
    14b2:	93 01       	movw	r18, r6
    14b4:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	80 93 02 07 	sts	0x0702, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
    14be:	20 91 d5 05 	lds	r18, 0x05D5
    14c2:	30 91 d6 05 	lds	r19, 0x05D6
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	c4 01       	movw	r24, r8
    14cc:	b3 01       	movw	r22, r6
    14ce:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    14d2:	fa e0       	ldi	r31, 0x0A	; 10
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	fa 95       	dec	r31
    14de:	d1 f7       	brne	.-12     	; 0x14d4 <memoryStatistics+0x1e4>
freeMemory *= bytesPerSector ;
    14e0:	20 91 a3 03 	lds	r18, 0x03A3
    14e4:	30 91 a4 03 	lds	r19, 0x03A4
//TX_NEWLINE_PC;
//USART_transmitStringToPCFromFlash(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    14f0:	ab 01       	movw	r20, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <displayMemory>
//TX_NEWLINE_PC; 
}
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	9f 90       	pop	r9
    150c:	8f 90       	pop	r8
    150e:	7f 90       	pop	r7
    1510:	6f 90       	pop	r6
    1512:	5f 90       	pop	r5
    1514:	4f 90       	pop	r4
    1516:	3f 90       	pop	r3
    1518:	2f 90       	pop	r2
    151a:	08 95       	ret

0000151c <getBootSectorData>:

#include "Globals.h"


unsigned char getBootSectorData (void)
{
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
	struct BS_Structure *bpb; //mapping the buffer onto the structure
	struct MBRinfo_Structure *mbr;
	struct partitionInfo_Structure *partition;
	unsigned long dataSectors;

	unusedSectors = 0;
    1534:	10 92 eb 05 	sts	0x05EB, r1
    1538:	10 92 ec 05 	sts	0x05EC, r1
    153c:	10 92 ed 05 	sts	0x05ED, r1
    1540:	10 92 ee 05 	sts	0x05EE, r1

	SD_readSingleBlock(0);
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
	bpb = (struct BS_Structure *)buffer;

	if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    1550:	80 91 d4 03 	lds	r24, 0x03D4
    1554:	89 3e       	cpi	r24, 0xE9	; 233
    1556:	19 f1       	breq	.+70     	; 0x159e <getBootSectorData+0x82>
    1558:	8b 3e       	cpi	r24, 0xEB	; 235
    155a:	09 f1       	breq	.+66     	; 0x159e <getBootSectorData+0x82>
	{
		mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR

		if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    155c:	80 91 d2 05 	lds	r24, 0x05D2
    1560:	90 91 d3 05 	lds	r25, 0x05D3
    1564:	85 55       	subi	r24, 0x55	; 85
    1566:	9a 4a       	sbci	r25, 0xAA	; 170
    1568:	09 f0       	breq	.+2      	; 0x156c <getBootSectorData+0x50>
    156a:	b0 c0       	rjmp	.+352    	; 0x16cc <getBootSectorData+0x1b0>

		partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
		unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    156c:	60 91 9a 05 	lds	r22, 0x059A
    1570:	70 91 9b 05 	lds	r23, 0x059B
    1574:	80 91 9c 05 	lds	r24, 0x059C
    1578:	90 91 9d 05 	lds	r25, 0x059D
    157c:	60 93 eb 05 	sts	0x05EB, r22
    1580:	70 93 ec 05 	sts	0x05EC, r23
    1584:	80 93 ed 05 	sts	0x05ED, r24
    1588:	90 93 ee 05 	sts	0x05EE, r25

		SD_readSingleBlock(partition->firstSector);//read the bpb sector
    158c:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
		bpb = (struct BS_Structure *)buffer;
		if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    1590:	80 91 d4 03 	lds	r24, 0x03D4
    1594:	89 3e       	cpi	r24, 0xE9	; 233
    1596:	19 f0       	breq	.+6      	; 0x159e <getBootSectorData+0x82>
    1598:	8b 3e       	cpi	r24, 0xEB	; 235
    159a:	09 f0       	breq	.+2      	; 0x159e <getBootSectorData+0x82>
    159c:	97 c0       	rjmp	.+302    	; 0x16cc <getBootSectorData+0x1b0>
	}

	bytesPerSector = bpb->bytesPerSector;
    159e:	80 91 df 03 	lds	r24, 0x03DF
    15a2:	90 91 e0 03 	lds	r25, 0x03E0
    15a6:	90 93 a4 03 	sts	0x03A4, r25
    15aa:	80 93 a3 03 	sts	0x03A3, r24
	//transmitHex(INT, bytesPerSector); USART_transmitByteToPC(' ');
	sectorPerCluster = bpb->sectorPerCluster;
    15ae:	80 91 e1 03 	lds	r24, 0x03E1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	90 93 d6 05 	sts	0x05D6, r25
    15b8:	80 93 d5 05 	sts	0x05D5, r24
	//transmitHex(INT, sectorPerCluster); USART_transmitByteToPC(' ');
	reservedSectorCount = bpb->reservedSectorCount;
    15bc:	a0 90 e2 03 	lds	r10, 0x03E2
    15c0:	b0 90 e3 03 	lds	r11, 0x03E3
    15c4:	b0 92 f7 05 	sts	0x05F7, r11
    15c8:	a0 92 f6 05 	sts	0x05F6, r10
	rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    15cc:	80 91 00 04 	lds	r24, 0x0400
    15d0:	90 91 01 04 	lds	r25, 0x0401
    15d4:	a0 91 02 04 	lds	r26, 0x0402
    15d8:	b0 91 03 04 	lds	r27, 0x0403
    15dc:	80 93 c9 03 	sts	0x03C9, r24
    15e0:	90 93 ca 03 	sts	0x03CA, r25
    15e4:	a0 93 cb 03 	sts	0x03CB, r26
    15e8:	b0 93 cc 03 	sts	0x03CC, r27
	firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    15ec:	e0 90 f6 05 	lds	r14, 0x05F6
    15f0:	f0 90 f7 05 	lds	r15, 0x05F7
    15f4:	60 91 e4 03 	lds	r22, 0x03E4
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	20 91 f8 03 	lds	r18, 0x03F8
    1602:	30 91 f9 03 	lds	r19, 0x03F9
    1606:	40 91 fa 03 	lds	r20, 0x03FA
    160a:	50 91 fb 03 	lds	r21, 0x03FB
    160e:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    1612:	3b 01       	movw	r6, r22
    1614:	4c 01       	movw	r8, r24
    1616:	00 e0       	ldi	r16, 0x00	; 0
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	80 91 f0 03 	lds	r24, 0x03F0
    161e:	90 91 f1 03 	lds	r25, 0x03F1
    1622:	a0 91 f2 03 	lds	r26, 0x03F2
    1626:	b0 91 f3 03 	lds	r27, 0x03F3
    162a:	e8 0e       	add	r14, r24
    162c:	f9 1e       	adc	r15, r25
    162e:	0a 1f       	adc	r16, r26
    1630:	1b 1f       	adc	r17, r27
    1632:	e6 0c       	add	r14, r6
    1634:	f7 1c       	adc	r15, r7
    1636:	08 1d       	adc	r16, r8
    1638:	19 1d       	adc	r17, r9
    163a:	e0 92 9b 03 	sts	0x039B, r14
    163e:	f0 92 9c 03 	sts	0x039C, r15
    1642:	00 93 9d 03 	sts	0x039D, r16
    1646:	10 93 9e 03 	sts	0x039E, r17

	dataSectors = bpb->totalSectors_F32
	              - bpb->reservedSectorCount
	              - ( bpb->numberofFATs * bpb->FATsize_F32);
	totalClusters = dataSectors / sectorPerCluster;
    164a:	20 91 d5 05 	lds	r18, 0x05D5
    164e:	30 91 d6 05 	lds	r19, 0x05D6
    1652:	cc 24       	eor	r12, r12
    1654:	dd 24       	eor	r13, r13
    1656:	60 91 f4 03 	lds	r22, 0x03F4
    165a:	70 91 f5 03 	lds	r23, 0x03F5
    165e:	80 91 f6 03 	lds	r24, 0x03F6
    1662:	90 91 f7 03 	lds	r25, 0x03F7
    1666:	6a 19       	sub	r22, r10
    1668:	7b 09       	sbc	r23, r11
    166a:	8c 09       	sbc	r24, r12
    166c:	9d 09       	sbc	r25, r13
    166e:	66 19       	sub	r22, r6
    1670:	77 09       	sbc	r23, r7
    1672:	88 09       	sbc	r24, r8
    1674:	99 09       	sbc	r25, r9
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    167e:	c9 01       	movw	r24, r18
    1680:	da 01       	movw	r26, r20
    1682:	80 93 a5 03 	sts	0x03A5, r24
    1686:	90 93 a6 03 	sts	0x03A6, r25
    168a:	a0 93 a7 03 	sts	0x03A7, r26
    168e:	b0 93 a8 03 	sts	0x03A8, r27
	//transmitHex(LONG, totalClusters); USART_transmitByteToPC(' ');

	if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
    16a2:	20 91 a5 03 	lds	r18, 0x03A5
    16a6:	30 91 a6 03 	lds	r19, 0x03A6
    16aa:	40 91 a7 03 	lds	r20, 0x03A7
    16ae:	50 91 a8 03 	lds	r21, 0x03A8
    16b2:	26 17       	cp	r18, r22
    16b4:	37 07       	cpc	r19, r23
    16b6:	48 07       	cpc	r20, r24
    16b8:	59 07       	cpc	r21, r25
    16ba:	18 f4       	brcc	.+6      	; 0x16c2 <getBootSectorData+0x1a6>
	     freeClusterCountUpdated = 0;
    16bc:	10 92 02 07 	sts	0x0702, r1
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <getBootSectorData+0x1ac>
	else
		 freeClusterCountUpdated = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 02 07 	sts	0x0702, r24
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <getBootSectorData+0x1b2>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	bf 90       	pop	r11
    16dc:	af 90       	pop	r10
    16de:	9f 90       	pop	r9
    16e0:	8f 90       	pop	r8
    16e2:	7f 90       	pop	r7
    16e4:	6f 90       	pop	r6
    16e6:	08 95       	ret

000016e8 <InitSDCard>:
 *        to the computer
 * @ref   www.dharmanitech.com
 * @return Void
 */
void InitSDCard(bool bVerb)
{
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	18 2f       	mov	r17, r24
	unsigned char iInit=0;
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	cardType = 0;
    16f0:	10 92 fd 05 	sts	0x05FD, r1
    16f4:	c0 e0       	ldi	r28, 0x00	; 0
    16f6:	d0 e0       	ldi	r29, 0x00	; 0

	for (i=0; i<10; i++)
	{
		error = SD_init();
    16f8:	0e 94 87 06 	call	0xd0e	; 0xd0e <SD_init>
		if(!error) break;
    16fc:	88 23       	and	r24, r24
    16fe:	21 f0       	breq	.+8      	; 0x1708 <InitSDCard+0x20>
	unsigned char iInit=0;
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	cardType = 0;

	for (i=0; i<10; i++)
    1700:	21 96       	adiw	r28, 0x01	; 1
    1702:	ca 30       	cpi	r28, 0x0A	; 10
    1704:	d1 05       	cpc	r29, r1
    1706:	c1 f7       	brne	.-16     	; 0x16f8 <InitSDCard+0x10>
	{
		error = SD_init();
		if(!error) break;
	}

	if(bVerb)
    1708:	11 23       	and	r17, r17
    170a:	09 f4       	brne	.+2      	; 0x170e <InitSDCard+0x26>
    170c:	5f c0       	rjmp	.+190    	; 0x17cc <InitSDCard+0xe4>
	{
		if(error)
    170e:	88 23       	and	r24, r24
    1710:	71 f0       	breq	.+28     	; 0x172e <InitSDCard+0x46>
		{
			if(error == 1) USART_transmitStringToPCFromFlash(PSTR("SD card not detected.."));
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	29 f4       	brne	.+10     	; 0x1720 <InitSDCard+0x38>
    1716:	83 e1       	ldi	r24, 0x13	; 19
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    171e:	06 c0       	rjmp	.+12     	; 0x172c <InitSDCard+0x44>
			if(error == 2) USART_transmitStringToPCFromFlash(PSTR("Card Initialization failed.."));
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	21 f4       	brne	.+8      	; 0x172c <InitSDCard+0x44>
    1724:	86 ef       	ldi	r24, 0xF6	; 246
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    172c:	ff cf       	rjmp	.-2      	; 0x172c <InitSDCard+0x44>
		  	while(1);  //wait here forever if error in SD init 	
		}


		switch (cardType)
    172e:	80 91 fd 05 	lds	r24, 0x05FD
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	39 f0       	breq	.+14     	; 0x1744 <InitSDCard+0x5c>
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	41 f0       	breq	.+16     	; 0x174a <InitSDCard+0x62>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	49 f4       	brne	.+18     	; 0x1750 <InitSDCard+0x68>
		{
		  case 1:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 1.x) Detected"));
    173e:	8c ec       	ldi	r24, 0xCC	; 204
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <InitSDCard+0x6c>
		  		 break;
		  case 2:USART_transmitStringToPCFromFlash(PSTR("High Capacity Card Detected"));
    1744:	80 eb       	ldi	r24, 0xB0	; 176
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <InitSDCard+0x6c>
		  		 break;
		  case 3:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 2.x) Detected"));
    174a:	86 e8       	ldi	r24, 0x86	; 134
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <InitSDCard+0x6c>
		  		 break;
		  default:USART_transmitStringToPCFromFlash(PSTR("Unknown SD Card Detected"));
    1750:	8d e6       	ldi	r24, 0x6D	; 109
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    1758:	80 ed       	ldi	r24, 0xD0	; 208
    175a:	97 e0       	ldi	r25, 0x07	; 7
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <InitSDCard+0x74>
	

		_delay_ms(1);   //some delay

		FAT32_active = 1;
		error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1760:	0e 94 8e 0a 	call	0x151c	; 0x151c <getBootSectorData>
		if(error) 	
    1764:	88 23       	and	r24, r24
    1766:	49 f0       	breq	.+18     	; 0x177a <InitSDCard+0x92>
		{
			TX_NEWLINE_PC;
    1768:	8d e0       	ldi	r24, 0x0D	; 13
    176a:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    176e:	8a e0       	ldi	r24, 0x0A	; 10
    1770:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			USART_transmitStringToPCFromFlash (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1774:	8c e5       	ldi	r24, 0x5C	; 92
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	08 c0       	rjmp	.+16     	; 0x178a <InitSDCard+0xa2>
			FAT32_active = 0;
		}else{
			TX_NEWLINE_PC;
    177a:	8d e0       	ldi	r24, 0x0D	; 13
    177c:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1780:	8a e0       	ldi	r24, 0x0A	; 10
    1782:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			USART_transmitStringToPCFromFlash (PSTR("FAT32 file system detected..."));
    1786:	8e e3       	ldi	r24, 0x3E	; 62
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
		}
		TX_NEWLINE_PC;	
    178e:	8d e0       	ldi	r24, 0x0D	; 13
    1790:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1794:	8a e0       	ldi	r24, 0x0A	; 10
    1796:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
		iInit=VS1053_Initialize();
    179a:	0e 94 3a 05 	call	0xa74	; 0xa74 <VS1053_Initialize>
    179e:	18 2f       	mov	r17, r24
		if(iInit==0){
    17a0:	88 23       	and	r24, r24
    17a2:	29 f4       	brne	.+10     	; 0x17ae <InitSDCard+0xc6>
			USART_transmitStringToPCFromFlash (PSTR("VS1053 MP3 chip sucessfully initialized"));
    17a4:	86 e1       	ldi	r24, 0x16	; 22
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <InitSDCard+0xd6>
			TX_NEWLINE_PC;	
		}else{
			USART_transmitStringToPCFromFlash (PSTR("Error initializing VS1053 - CODE "));
    17ae:	84 ef       	ldi	r24, 0xF4	; 244
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			USART_transmitByteToPC(iInit+64);
    17b6:	81 2f       	mov	r24, r17
    17b8:	80 5c       	subi	r24, 0xC0	; 192
    17ba:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			TX_NEWLINE_PC;
    17be:	8d e0       	ldi	r24, 0x0D	; 13
    17c0:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    17c4:	8a e0       	ldi	r24, 0x0A	; 10
    17c6:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    17ca:	0a c0       	rjmp	.+20     	; 0x17e0 <InitSDCard+0xf8>
		}
	}
	else
	{
		if(error)
    17cc:	81 11       	cpse	r24, r1
    17ce:	ff cf       	rjmp	.-2      	; 0x17ce <InitSDCard+0xe6>
    17d0:	80 ed       	ldi	r24, 0xD0	; 208
    17d2:	97 e0       	ldi	r25, 0x07	; 7
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <InitSDCard+0xec>
		  	while(1);  //wait here forever if error in SD init 	
		}
		_delay_ms(1);   //some delay

		FAT32_active = 1;
		error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    17d8:	0e 94 8e 0a 	call	0x151c	; 0x151c <getBootSectorData>
		{
			FAT32_active = 0;
		}else{

		}
		iInit=VS1053_Initialize();
    17dc:	0e 94 3a 05 	call	0xa74	; 0xa74 <VS1053_Initialize>
	}
}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	08 95       	ret

000017e8 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    17e8:	4f 92       	push	r4
    17ea:	5f 92       	push	r5
    17ec:	6f 92       	push	r6
    17ee:	7f 92       	push	r7
    17f0:	8f 92       	push	r8
    17f2:	9f 92       	push	r9
    17f4:	af 92       	push	r10
    17f6:	bf 92       	push	r11
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	5b 01       	movw	r10, r22
    180a:	6c 01       	movw	r12, r24
    180c:	84 2e       	mov	r8, r20
    180e:	28 01       	movw	r4, r16
    1810:	39 01       	movw	r6, r18
	unsigned long *FATEntryValue;
	unsigned long FATEntrySector;
	unsigned char retry = 0;

	//get sector number of the cluster entry in the FAT
	FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1812:	80 91 f6 05 	lds	r24, 0x05F6
    1816:	90 91 f7 05 	lds	r25, 0x05F7
    181a:	02 e0       	ldi	r16, 0x02	; 2
    181c:	aa 0c       	add	r10, r10
    181e:	bb 1c       	adc	r11, r11
    1820:	cc 1c       	adc	r12, r12
    1822:	dd 1c       	adc	r13, r13
    1824:	0a 95       	dec	r16
    1826:	d1 f7       	brne	.-12     	; 0x181c <getSetNextCluster+0x34>
    1828:	20 91 a3 03 	lds	r18, 0x03A3
    182c:	30 91 a4 03 	lds	r19, 0x03A4
    1830:	7c 01       	movw	r14, r24
    1832:	00 e0       	ldi	r16, 0x00	; 0
    1834:	10 e0       	ldi	r17, 0x00	; 0
    1836:	80 91 eb 05 	lds	r24, 0x05EB
    183a:	90 91 ec 05 	lds	r25, 0x05EC
    183e:	a0 91 ed 05 	lds	r26, 0x05ED
    1842:	b0 91 ee 05 	lds	r27, 0x05EE
    1846:	e8 0e       	add	r14, r24
    1848:	f9 1e       	adc	r15, r25
    184a:	0a 1f       	adc	r16, r26
    184c:	1b 1f       	adc	r17, r27
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	c6 01       	movw	r24, r12
    1854:	b5 01       	movw	r22, r10
    1856:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    185a:	e2 0e       	add	r14, r18
    185c:	f3 1e       	adc	r15, r19
    185e:	04 1f       	adc	r16, r20
    1860:	15 1f       	adc	r17, r21

	//get the offset address in that sector number
	FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    1862:	c0 91 a3 03 	lds	r28, 0x03A3
    1866:	d0 91 a4 03 	lds	r29, 0x03A4
    186a:	99 24       	eor	r9, r9

	//read the sector into a buffer
	while(retry <10)
	{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    186c:	c8 01       	movw	r24, r16
    186e:	b7 01       	movw	r22, r14
    1870:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    1874:	88 23       	and	r24, r24
    1876:	21 f0       	breq	.+8      	; 0x1880 <getSetNextCluster+0x98>
    1878:	93 94       	inc	r9

	//get the offset address in that sector number
	FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

	//read the sector into a buffer
	while(retry <10)
    187a:	8a e0       	ldi	r24, 0x0A	; 10
    187c:	98 16       	cp	r9, r24
    187e:	b1 f7       	brne	.-20     	; 0x186c <getSetNextCluster+0x84>
	{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

	//get the cluster address from the buffer
	FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    1880:	9e 01       	movw	r18, r28
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	c6 01       	movw	r24, r12
    1888:	b5 01       	movw	r22, r10
    188a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    188e:	fb 01       	movw	r30, r22
    1890:	ec 52       	subi	r30, 0x2C	; 44
    1892:	fc 4f       	sbci	r31, 0xFC	; 252

	if(get_set == GET)
    1894:	88 20       	and	r8, r8
    1896:	31 f4       	brne	.+12     	; 0x18a4 <getSetNextCluster+0xbc>
	  return ((*FATEntryValue) & 0x0fffffff);
    1898:	20 81       	ld	r18, Z
    189a:	31 81       	ldd	r19, Z+1	; 0x01
    189c:	42 81       	ldd	r20, Z+2	; 0x02
    189e:	53 81       	ldd	r21, Z+3	; 0x03
    18a0:	5f 70       	andi	r21, 0x0F	; 15
    18a2:	0c c0       	rjmp	.+24     	; 0x18bc <getSetNextCluster+0xd4>


	*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    18a4:	40 82       	st	Z, r4
    18a6:	51 82       	std	Z+1, r5	; 0x01
    18a8:	62 82       	std	Z+2, r6	; 0x02
    18aa:	73 82       	std	Z+3, r7	; 0x03

	SD_writeSingleBlock(FATEntrySector);
    18ac:	c8 01       	movw	r24, r16
    18ae:	b7 01       	movw	r22, r14
    18b0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0

	return (0);
}
    18bc:	b9 01       	movw	r22, r18
    18be:	ca 01       	movw	r24, r20
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	5f 90       	pop	r5
    18de:	4f 90       	pop	r4
    18e0:	08 95       	ret

000018e2 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	2a 97       	sbiw	r28, 0x0a	; 10
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	7f 83       	std	Y+7, r23	; 0x07
    191a:	6e 83       	std	Y+6, r22	; 0x06
	unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
	struct dir_Structure *dir;
	unsigned int i;
	unsigned char j;

	cluster = rootCluster; //root cluster
    191c:	a0 90 c9 03 	lds	r10, 0x03C9
    1920:	b0 90 ca 03 	lds	r11, 0x03CA
    1924:	c0 90 cb 03 	lds	r12, 0x03CB
    1928:	d0 90 cc 03 	lds	r13, 0x03CC
			      USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
			  return 0;   
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
    192c:	81 50       	subi	r24, 0x01	; 1
    192e:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1930:	20 91 d5 05 	lds	r18, 0x05D5
    1934:	30 91 d6 05 	lds	r19, 0x05D6
    1938:	e0 90 9b 03 	lds	r14, 0x039B
    193c:	f0 90 9c 03 	lds	r15, 0x039C
    1940:	00 91 9d 03 	lds	r16, 0x039D
    1944:	10 91 9e 03 	lds	r17, 0x039E
    1948:	c6 01       	movw	r24, r12
    194a:	b5 01       	movw	r22, r10
    194c:	62 50       	subi	r22, 0x02	; 2
    194e:	70 40       	sbci	r23, 0x00	; 0
    1950:	80 40       	sbci	r24, 0x00	; 0
    1952:	90 40       	sbci	r25, 0x00	; 0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    195c:	1b 01       	movw	r2, r22
    195e:	2c 01       	movw	r4, r24
    1960:	2e 0c       	add	r2, r14
    1962:	3f 1c       	adc	r3, r15
    1964:	40 1e       	adc	r4, r16
    1966:	51 1e       	adc	r5, r17
    1968:	66 24       	eor	r6, r6
    196a:	77 24       	eor	r7, r7
    196c:	43 01       	movw	r8, r6
    196e:	60 c1       	rjmp	.+704    	; 0x1c30 <findFiles+0x34e>

	while(1)
	{
	   firstSector = getFirstSector (cluster);

	   for(sector = 0; sector < sectorPerCluster; sector++)
    1970:	d4 01       	movw	r26, r8
    1972:	c3 01       	movw	r24, r6
    1974:	82 0d       	add	r24, r2
    1976:	93 1d       	adc	r25, r3
    1978:	a4 1d       	adc	r26, r4
    197a:	b5 1d       	adc	r27, r5
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	ab 83       	std	Y+3, r26	; 0x03
    1982:	bc 83       	std	Y+4, r27	; 0x04
	   {
	     SD_readSingleBlock (firstSector + sector);
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	e4 2e       	mov	r14, r20
    1990:	f1 2c       	mov	r15, r1
    1992:	3e c1       	rjmp	.+636    	; 0x1c10 <findFiles+0x32e>
	

	     for(i=0; i<bytesPerSector; i+=32)
    1994:	8a 01       	movw	r16, r20
    1996:	0c 52       	subi	r16, 0x2C	; 44
    1998:	1c 4f       	sbci	r17, 0xFC	; 252
	     {
		    dir = (struct dir_Structure *) &buffer[i];

	        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    199a:	f7 01       	movw	r30, r14
    199c:	ec 52       	subi	r30, 0x2C	; 44
    199e:	fc 4f       	sbci	r31, 0xFC	; 252
    19a0:	b0 97       	sbiw	r30, 0x20	; 32
    19a2:	80 81       	ld	r24, Z
    19a4:	b0 96       	adiw	r30, 0x20	; 32
    19a6:	88 23       	and	r24, r24
    19a8:	41 f4       	brne	.+16     	; 0x19ba <findFiles+0xd8>
			{
			  if((flag == GET_FILE) || (flag == DELETE))
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	92 30       	cpi	r25, 0x02	; 2
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <findFiles+0xd2>
    19b2:	68 c1       	rjmp	.+720    	; 0x1c84 <findFiles+0x3a2>
			      USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
    19b4:	89 ef       	ldi	r24, 0xF9	; 249
    19b6:	92 e0       	ldi	r25, 0x02	; 2
    19b8:	63 c1       	rjmp	.+710    	; 0x1c80 <findFiles+0x39e>
			  return 0;   
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    19ba:	85 3e       	cpi	r24, 0xE5	; 229
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <findFiles+0xde>
    19be:	24 c1       	rjmp	.+584    	; 0x1c08 <findFiles+0x326>
    19c0:	75 97       	sbiw	r30, 0x15	; 21
    19c2:	80 81       	ld	r24, Z
    19c4:	8f 30       	cpi	r24, 0x0F	; 15
    19c6:	09 f4       	brne	.+2      	; 0x19ca <findFiles+0xe8>
    19c8:	1f c1       	rjmp	.+574    	; 0x1c08 <findFiles+0x326>
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
    19ca:	a8 85       	ldd	r26, Y+8	; 0x08
    19cc:	a2 30       	cpi	r26, 0x02	; 2
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <findFiles+0xf0>
    19d0:	d2 c0       	rjmp	.+420    	; 0x1b76 <findFiles+0x294>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
	          {
	            for(j=0; j<11; j++)
	            if(dir->name[j] != fileName[j]) break;
    19d6:	c8 01       	movw	r24, r16
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	ae 81       	ldd	r26, Y+6	; 0x06
    19de:	bf 81       	ldd	r27, Y+7	; 0x07
    19e0:	a2 0f       	add	r26, r18
    19e2:	b3 1f       	adc	r27, r19
    19e4:	fc 01       	movw	r30, r24
    19e6:	90 81       	ld	r25, Z
    19e8:	8c 91       	ld	r24, X
    19ea:	98 17       	cp	r25, r24
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <findFiles+0x10e>
    19ee:	0c c1       	rjmp	.+536    	; 0x1c08 <findFiles+0x326>
    19f0:	82 2f       	mov	r24, r18
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	2f 5f       	subi	r18, 0xFF	; 255
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
			}
			if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
	        {
	          if((flag == GET_FILE) || (flag == DELETE))
	          {
	            for(j=0; j<11; j++)
    19f8:	2b 30       	cpi	r18, 0x0B	; 11
    19fa:	31 05       	cpc	r19, r1
    19fc:	61 f7       	brne	.-40     	; 0x19d6 <findFiles+0xf4>
	            if(dir->name[j] != fileName[j]) break;
	            if(j == 11)
    19fe:	8b 30       	cpi	r24, 0x0B	; 11
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <findFiles+0x122>
    1a02:	02 c1       	rjmp	.+516    	; 0x1c08 <findFiles+0x326>
				{
				  if(flag == GET_FILE)
    1a04:	fd 81       	ldd	r31, Y+5	; 0x05
    1a06:	f1 30       	cpi	r31, 0x01	; 1
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <findFiles+0x12a>
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <findFiles+0x1a8>
	              {
				    appendFileSector = firstSector + sector;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	ab 81       	ldd	r26, Y+3	; 0x03
    1a12:	bc 81       	ldd	r27, Y+4	; 0x04
    1a14:	80 93 04 07 	sts	0x0704, r24
    1a18:	90 93 05 07 	sts	0x0705, r25
    1a1c:	a0 93 06 07 	sts	0x0706, r26
    1a20:	b0 93 07 07 	sts	0x0707, r27
					appendFileLocation = i;
    1a24:	ca 01       	movw	r24, r20
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	80 93 89 03 	sts	0x0389, r24
    1a2e:	90 93 8a 03 	sts	0x038A, r25
    1a32:	a0 93 8b 03 	sts	0x038B, r26
    1a36:	b0 93 8c 03 	sts	0x038C, r27
					appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1a3a:	d8 01       	movw	r26, r16
    1a3c:	54 96       	adiw	r26, 0x14	; 20
    1a3e:	8d 91       	ld	r24, X+
    1a40:	9c 91       	ld	r25, X
    1a42:	55 97       	sbiw	r26, 0x15	; 21
    1a44:	a0 e0       	ldi	r26, 0x00	; 0
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	dc 01       	movw	r26, r24
    1a4a:	99 27       	eor	r25, r25
    1a4c:	88 27       	eor	r24, r24
    1a4e:	f8 01       	movw	r30, r16
    1a50:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a52:	33 8d       	ldd	r19, Z+27	; 0x1b
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	82 2b       	or	r24, r18
    1a5a:	93 2b       	or	r25, r19
    1a5c:	a4 2b       	or	r26, r20
    1a5e:	b5 2b       	or	r27, r21
    1a60:	80 93 f8 05 	sts	0x05F8, r24
    1a64:	90 93 f9 05 	sts	0x05F9, r25
    1a68:	a0 93 fa 05 	sts	0x05FA, r26
    1a6c:	b0 93 fb 05 	sts	0x05FB, r27
					fileSize = dir->fileSize;
    1a70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a72:	95 8d       	ldd	r25, Z+29	; 0x1d
    1a74:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1a76:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1a78:	80 93 9f 03 	sts	0x039F, r24
    1a7c:	90 93 a0 03 	sts	0x03A0, r25
    1a80:	a0 93 a1 03 	sts	0x03A1, r26
    1a84:	b0 93 a2 03 	sts	0x03A2, r27
    1a88:	ff c0       	rjmp	.+510    	; 0x1c88 <findFiles+0x3a6>
				    return (dir);
				  }	
				  else    //when flag = DELETE
				  {
				     TX_NEWLINE_PC;
    1a8a:	8d e0       	ldi	r24, 0x0D	; 13
    1a8c:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1a90:	8a e0       	ldi	r24, 0x0A	; 10
    1a92:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
					 USART_transmitStringToPCFromFlash(PSTR("Deleting.."));
    1a96:	8e ee       	ldi	r24, 0xEE	; 238
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
					 TX_NEWLINE_PC;
    1a9e:	8d e0       	ldi	r24, 0x0D	; 13
    1aa0:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1aa4:	8a e0       	ldi	r24, 0x0A	; 10
    1aa6:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
					 TX_NEWLINE_PC;
    1aaa:	8d e0       	ldi	r24, 0x0D	; 13
    1aac:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1ab0:	8a e0       	ldi	r24, 0x0A	; 10
    1ab2:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
					 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	54 96       	adiw	r26, 0x14	; 20
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	55 97       	sbiw	r26, 0x15	; 21
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	5c 01       	movw	r10, r24
    1ac6:	99 24       	eor	r9, r9
    1ac8:	88 24       	eor	r8, r8
    1aca:	f8 01       	movw	r30, r16
    1acc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ace:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	88 2a       	or	r8, r24
    1ad6:	99 2a       	or	r9, r25
    1ad8:	aa 2a       	or	r10, r26
    1ada:	bb 2a       	or	r11, r27
                
					 //mark file as 'deleted' in FAT table
					 dir->name[0] = DELETED;    
    1adc:	85 ee       	ldi	r24, 0xE5	; 229
    1ade:	80 83       	st	Z, r24
					 SD_writeSingleBlock (firstSector+sector);
    1ae0:	69 81       	ldd	r22, Y+1	; 0x01
    1ae2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
				 			 
					 freeMemoryUpdate (ADD, dir->fileSize);
    1aec:	d8 01       	movw	r26, r16
    1aee:	5c 96       	adiw	r26, 0x1c	; 28
    1af0:	4d 91       	ld	r20, X+
    1af2:	5d 91       	ld	r21, X+
    1af4:	6d 91       	ld	r22, X+
    1af6:	7c 91       	ld	r23, X
    1af8:	5f 97       	sbiw	r26, 0x1f	; 31
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	0e 94 17 09 	call	0x122e	; 0x122e <freeMemoryUpdate>

					 //update next free cluster entry in FSinfo sector
					 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
					 if(firstCluster < cluster)
    1b10:	86 16       	cp	r8, r22
    1b12:	97 06       	cpc	r9, r23
    1b14:	a8 06       	cpc	r10, r24
    1b16:	b9 06       	cpc	r11, r25
    1b18:	30 f4       	brcc	.+12     	; 0x1b26 <findFiles+0x244>
					     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	a5 01       	movw	r20, r10
    1b20:	94 01       	movw	r18, r8
    1b22:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>

					 //mark all the clusters allocated to the file as 'free'
				     while(1)  
				     {
				        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1b26:	c5 01       	movw	r24, r10
    1b28:	b4 01       	movw	r22, r8
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	00 e0       	ldi	r16, 0x00	; 0
    1b2e:	10 e0       	ldi	r17, 0x00	; 0
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    1b38:	f6 2e       	mov	r15, r22
    1b3a:	e7 2e       	mov	r14, r23
    1b3c:	d8 2e       	mov	r13, r24
    1b3e:	c9 2e       	mov	r12, r25
						getSetNextCluster (firstCluster, SET, 0);
    1b40:	c5 01       	movw	r24, r10
    1b42:	b4 01       	movw	r22, r8
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    1b52:	8f 2d       	mov	r24, r15
    1b54:	9e 2d       	mov	r25, r14
    1b56:	ad 2d       	mov	r26, r13
    1b58:	bc 2d       	mov	r27, r12
    1b5a:	4c 01       	movw	r8, r24
    1b5c:	5d 01       	movw	r10, r26
						if(nextCluster > 0x0ffffff6) 
    1b5e:	b7 ef       	ldi	r27, 0xF7	; 247
    1b60:	8b 16       	cp	r8, r27
    1b62:	bf ef       	ldi	r27, 0xFF	; 255
    1b64:	9b 06       	cpc	r9, r27
    1b66:	bf ef       	ldi	r27, 0xFF	; 255
    1b68:	ab 06       	cpc	r10, r27
    1b6a:	bf e0       	ldi	r27, 0x0F	; 15
    1b6c:	bb 06       	cpc	r11, r27
    1b6e:	d8 f2       	brcs	.-74     	; 0x1b26 <findFiles+0x244>
						   {USART_transmitStringToPCFromFlash(PSTR("File deleted!"));return 0;}
    1b70:	80 ee       	ldi	r24, 0xE0	; 224
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	85 c0       	rjmp	.+266    	; 0x1c80 <findFiles+0x39e>
				  }
	            }
	          }
	          else  //when flag = GET_LIST
			  {
			     TX_NEWLINE_PC;
    1b76:	8d e0       	ldi	r24, 0x0D	; 13
    1b78:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1b7c:	8a e0       	ldi	r24, 0x0A	; 10
    1b7e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1b82:	1a 86       	std	Y+10, r1	; 0x0a
    1b84:	19 86       	std	Y+9, r1	; 0x09
    1b86:	0b c0       	rjmp	.+22     	; 0x1b9e <findFiles+0x2bc>
				 for(j=0; j<11; j++)
			     {
				   if(j == 8) USART_transmitByteToPC(' ');
    1b88:	e9 85       	ldd	r30, Y+9	; 0x09
    1b8a:	e7 30       	cpi	r30, 0x07	; 7
    1b8c:	19 f4       	brne	.+6      	; 0x1b94 <findFiles+0x2b2>
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	9a 87       	std	Y+10, r25	; 0x0a
    1b9c:	89 87       	std	Y+9, r24	; 0x09
				   USART_transmitByteToPC (dir->name[j]);
    1b9e:	e9 85       	ldd	r30, Y+9	; 0x09
    1ba0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ba2:	e0 0f       	add	r30, r16
    1ba4:	f1 1f       	adc	r31, r17
    1ba6:	80 81       	ld	r24, Z
    1ba8:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	            }
	          }
	          else  //when flag = GET_LIST
			  {
			     TX_NEWLINE_PC;
				 for(j=0; j<11; j++)
    1bac:	a9 85       	ldd	r26, Y+9	; 0x09
    1bae:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bb0:	1a 97       	sbiw	r26, 0x0a	; 10
    1bb2:	51 f7       	brne	.-44     	; 0x1b88 <findFiles+0x2a6>
			     {
				   if(j == 8) USART_transmitByteToPC(' ');
				   USART_transmitByteToPC (dir->name[j]);
				 }
			     USART_transmitStringToPCFromFlash (PSTR("   "));
    1bb4:	8c ed       	ldi	r24, 0xDC	; 220
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1bbc:	87 01       	movw	r16, r14
    1bbe:	0c 52       	subi	r16, 0x2C	; 44
    1bc0:	1c 4f       	sbci	r17, 0xFC	; 252
    1bc2:	05 51       	subi	r16, 0x15	; 21
    1bc4:	10 40       	sbci	r17, 0x00	; 0
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	80 81       	ld	r24, Z
    1bca:	0b 5e       	subi	r16, 0xEB	; 235
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	80 31       	cpi	r24, 0x10	; 16
    1bd0:	b9 f0       	breq	.+46     	; 0x1c00 <findFiles+0x31e>
    1bd2:	88 30       	cpi	r24, 0x08	; 8
    1bd4:	19 f4       	brne	.+6      	; 0x1bdc <findFiles+0x2fa>
				     USART_transmitStringToPCFromFlash (PSTR("FILE" ));
			         USART_transmitStringToPCFromFlash (PSTR("   "));
				     displayMemory (LOW, dir->fileSize);
				 }
				 else
				   USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1bd6:	8a ec       	ldi	r24, 0xCA	; 202
    1bd8:	92 e0       	ldi	r25, 0x02	; 2
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <findFiles+0x322>
				   USART_transmitByteToPC (dir->name[j]);
				 }
			     USART_transmitStringToPCFromFlash (PSTR("   "));
			     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
				 {
				     USART_transmitStringToPCFromFlash (PSTR("FILE" ));
    1bdc:	87 ed       	ldi	r24, 0xD7	; 215
    1bde:	92 e0       	ldi	r25, 0x02	; 2
    1be0:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			         USART_transmitStringToPCFromFlash (PSTR("   "));
    1be4:	83 ed       	ldi	r24, 0xD3	; 211
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
				     displayMemory (LOW, dir->fileSize);
    1bec:	f8 01       	movw	r30, r16
    1bee:	34 97       	sbiw	r30, 0x04	; 4
    1bf0:	40 81       	ld	r20, Z
    1bf2:	51 81       	ldd	r21, Z+1	; 0x01
    1bf4:	62 81       	ldd	r22, Z+2	; 0x02
    1bf6:	73 81       	ldd	r23, Z+3	; 0x03
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <displayMemory>
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <findFiles+0x326>
				 }
				 else
				   USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1c00:	8f ec       	ldi	r24, 0xCF	; 207
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	e8 0e       	add	r14, r24
    1c0e:	f9 1e       	adc	r15, r25
    1c10:	a7 01       	movw	r20, r14
    1c12:	40 52       	subi	r20, 0x20	; 32
    1c14:	50 40       	sbci	r21, 0x00	; 0
	   for(sector = 0; sector < sectorPerCluster; sector++)
	   {
	     SD_readSingleBlock (firstSector + sector);
	

	     for(i=0; i<bytesPerSector; i+=32)
    1c16:	80 91 a3 03 	lds	r24, 0x03A3
    1c1a:	90 91 a4 03 	lds	r25, 0x03A4
    1c1e:	48 17       	cp	r20, r24
    1c20:	59 07       	cpc	r21, r25
    1c22:	08 f4       	brcc	.+2      	; 0x1c26 <findFiles+0x344>
    1c24:	b7 ce       	rjmp	.-658    	; 0x1994 <findFiles+0xb2>

	while(1)
	{
	   firstSector = getFirstSector (cluster);

	   for(sector = 0; sector < sectorPerCluster; sector++)
    1c26:	08 94       	sec
    1c28:	61 1c       	adc	r6, r1
    1c2a:	71 1c       	adc	r7, r1
    1c2c:	81 1c       	adc	r8, r1
    1c2e:	91 1c       	adc	r9, r1
    1c30:	80 91 d5 05 	lds	r24, 0x05D5
    1c34:	90 91 d6 05 	lds	r25, 0x05D6
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	68 16       	cp	r6, r24
    1c3e:	79 06       	cpc	r7, r25
    1c40:	8a 06       	cpc	r8, r26
    1c42:	9b 06       	cpc	r9, r27
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <findFiles+0x366>
    1c46:	94 ce       	rjmp	.-728    	; 0x1970 <findFiles+0x8e>
			  }
	       }
	     }
	   }

	   cluster = (getSetNextCluster (cluster, GET, 0));
    1c48:	c6 01       	movw	r24, r12
    1c4a:	b5 01       	movw	r22, r10
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    1c5a:	5b 01       	movw	r10, r22
    1c5c:	6c 01       	movw	r12, r24

	   if(cluster > 0x0ffffff6)
    1c5e:	97 ef       	ldi	r25, 0xF7	; 247
    1c60:	a9 16       	cp	r10, r25
    1c62:	9f ef       	ldi	r25, 0xFF	; 255
    1c64:	b9 06       	cpc	r11, r25
    1c66:	9f ef       	ldi	r25, 0xFF	; 255
    1c68:	c9 06       	cpc	r12, r25
    1c6a:	9f e0       	ldi	r25, 0x0F	; 15
    1c6c:	d9 06       	cpc	r13, r25
    1c6e:	50 f4       	brcc	.+20     	; 0x1c84 <findFiles+0x3a2>
	   	 return 0;
	   if(cluster == 0) 
    1c70:	a1 14       	cp	r10, r1
    1c72:	b1 04       	cpc	r11, r1
    1c74:	c1 04       	cpc	r12, r1
    1c76:	d1 04       	cpc	r13, r1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <findFiles+0x39a>
    1c7a:	5a ce       	rjmp	.-844    	; 0x1930 <findFiles+0x4e>
	   {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster"));  return 0;}
    1c7c:	81 eb       	ldi	r24, 0xB1	; 177
    1c7e:	92 e0       	ldi	r25, 0x02	; 2
    1c80:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    1c84:	00 e0       	ldi	r16, 0x00	; 0
    1c86:	10 e0       	ldi	r17, 0x00	; 0
	 }
	return 0;
}
    1c88:	c8 01       	movw	r24, r16
    1c8a:	2a 96       	adiw	r28, 0x0a	; 10
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	5f 90       	pop	r5
    1cb4:	4f 90       	pop	r4
    1cb6:	3f 90       	pop	r3
    1cb8:	2f 90       	pop	r2
    1cba:	08 95       	ret

00001cbc <convertFileName>:
 * @TODO Currently overwrites the passed in buffer so if you pass in the same buffer twice, it 
 * will have already converted the fileName (specifically removed the '.' which is what the invalid
 * file check is done off of)
*/ 
unsigned char convertFileName (unsigned char *fileName)
{
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	2b 97       	sbiw	r28, 0x0b	; 11
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	5c 01       	movw	r10, r24
	unsigned char fileNameFAT[11];
	unsigned char j, k;

	DPRINTF("|%s |\n\r", fileName);
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <convertFileName+0x30>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <convertFileName+0x32>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <convertFileName+0x34>
    1cf0:	ed b7       	in	r30, 0x3d	; 61
    1cf2:	fe b7       	in	r31, 0x3e	; 62
    1cf4:	31 96       	adiw	r30, 0x01	; 1
    1cf6:	02 e0       	ldi	r16, 0x02	; 2
    1cf8:	16 e0       	ldi	r17, 0x06	; 6
    1cfa:	ad b7       	in	r26, 0x3d	; 61
    1cfc:	be b7       	in	r27, 0x3e	; 62
    1cfe:	12 96       	adiw	r26, 0x02	; 2
    1d00:	1c 93       	st	X, r17
    1d02:	0e 93       	st	-X, r16
    1d04:	11 97       	sbiw	r26, 0x01	; 1
    1d06:	81 e4       	ldi	r24, 0x41	; 65
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	93 83       	std	Z+3, r25	; 0x03
    1d0c:	82 83       	std	Z+2, r24	; 0x02
    1d0e:	b5 82       	std	Z+5, r11	; 0x05
    1d10:	a4 82       	std	Z+4, r10	; 0x04
    1d12:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
    1d16:	ed b7       	in	r30, 0x3d	; 61
    1d18:	fe b7       	in	r31, 0x3e	; 62
    1d1a:	36 96       	adiw	r30, 0x06	; 6
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	fe bf       	out	0x3e, r31	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	ed bf       	out	0x3d, r30	; 61
    1d26:	c8 01       	movw	r24, r16
    1d28:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
    1d2c:	7a 2c       	mov	r7, r10
    1d2e:	6b 2c       	mov	r6, r11
    1d30:	75 01       	movw	r14, r10
    1d32:	dd 24       	eor	r13, r13

	for(j=0; j<12; j++) {
		DPRINTF("%c", fileName[j]);
    1d34:	c0 2e       	mov	r12, r16
    1d36:	01 2f       	mov	r16, r17
    1d38:	59 e4       	ldi	r21, 0x49	; 73
    1d3a:	85 2e       	mov	r8, r21
    1d3c:	51 e0       	ldi	r21, 0x01	; 1
    1d3e:	95 2e       	mov	r9, r21
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <convertFileName+0x86>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <convertFileName+0x88>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <convertFileName+0x8a>
    1d46:	ed b7       	in	r30, 0x3d	; 61
    1d48:	fe b7       	in	r31, 0x3e	; 62
    1d4a:	31 96       	adiw	r30, 0x01	; 1
    1d4c:	ad b7       	in	r26, 0x3d	; 61
    1d4e:	be b7       	in	r27, 0x3e	; 62
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	cc 92       	st	X, r12
    1d54:	11 97       	sbiw	r26, 0x01	; 1
    1d56:	12 96       	adiw	r26, 0x02	; 2
    1d58:	0c 93       	st	X, r16
    1d5a:	93 82       	std	Z+3, r9	; 0x03
    1d5c:	82 82       	std	Z+2, r8	; 0x02
    1d5e:	d7 01       	movw	r26, r14
    1d60:	8c 91       	ld	r24, X
    1d62:	84 83       	std	Z+4, r24	; 0x04
    1d64:	15 82       	std	Z+5, r1	; 0x05
    1d66:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
    1d6a:	ed b7       	in	r30, 0x3d	; 61
    1d6c:	fe b7       	in	r31, 0x3e	; 62
    1d6e:	36 96       	adiw	r30, 0x06	; 6
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	fe bf       	out	0x3e, r31	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	ed bf       	out	0x3d, r30	; 61
    1d7a:	8c 2d       	mov	r24, r12
    1d7c:	90 2f       	mov	r25, r16
    1d7e:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
		if(fileName[j] == '.') 
    1d82:	d7 01       	movw	r26, r14
    1d84:	8c 91       	ld	r24, X
    1d86:	8e 32       	cpi	r24, 0x2E	; 46
    1d88:	39 f0       	breq	.+14     	; 0x1d98 <convertFileName+0xdc>
	unsigned char fileNameFAT[11];
	unsigned char j, k;

	DPRINTF("|%s |\n\r", fileName);

	for(j=0; j<12; j++) {
    1d8a:	d3 94       	inc	r13
    1d8c:	08 94       	sec
    1d8e:	e1 1c       	adc	r14, r1
    1d90:	f1 1c       	adc	r15, r1
    1d92:	bc e0       	ldi	r27, 0x0C	; 12
    1d94:	db 16       	cp	r13, r27
    1d96:	a1 f6       	brne	.-88     	; 0x1d40 <convertFileName+0x84>
		DPRINTF("%c", fileName[j]);
		if(fileName[j] == '.') 
			break;
	}
	DPRINTF("\n\r");
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	96 e0       	ldi	r25, 0x06	; 6
    1d9c:	6c e4       	ldi	r22, 0x4C	; 76
    1d9e:	71 e0       	ldi	r23, 0x01	; 1
    1da0:	0e 94 15 1a 	call	0x342a	; 0x342a <strcpy>
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	96 e0       	ldi	r25, 0x06	; 6
    1da8:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>

	
	if (j == 12)
    1dac:	ec e0       	ldi	r30, 0x0C	; 12
    1dae:	de 16       	cp	r13, r30
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <convertFileName+0xf8>
    1db2:	84 c0       	rjmp	.+264    	; 0x1ebc <convertFileName+0x200>
		// assume that a string without any dots is already converted
		return 0;

	if(j>8) {
    1db4:	f8 e0       	ldi	r31, 0x08	; 8
    1db6:	fd 15       	cp	r31, r13
    1db8:	48 f0       	brcs	.+18     	; 0x1dcc <convertFileName+0x110>
    1dba:	ae 01       	movw	r20, r28
    1dbc:	4f 5f       	subi	r20, 0xFF	; 255
    1dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc0:	87 2d       	mov	r24, r7
    1dc2:	96 2d       	mov	r25, r6
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	f9 01       	movw	r30, r18
    1dc8:	da 01       	movw	r26, r20
    1dca:	08 c0       	rjmp	.+16     	; 0x1ddc <convertFileName+0x120>
		USART_transmitStringToPCFromFlash(PSTR("Invalid fileName.")); 
    1dcc:	84 e5       	ldi	r24, 0x54	; 84
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	73 c0       	rjmp	.+230    	; 0x1ebe <convertFileName+0x202>
		return 1;
	}

	for(k=0; k<j; k++) //setting file name
	  fileNameFAT[k] = fileName[k];
    1dd8:	81 91       	ld	r24, Z+
    1dda:	8d 93       	st	X+, r24
	if(j>8) {
		USART_transmitStringToPCFromFlash(PSTR("Invalid fileName.")); 
		return 1;
	}

	for(k=0; k<j; k++) //setting file name
    1ddc:	8e 2f       	mov	r24, r30
    1dde:	87 19       	sub	r24, r7
    1de0:	8d 15       	cp	r24, r13
    1de2:	d0 f3       	brcs	.-12     	; 0x1dd8 <convertFileName+0x11c>
    1de4:	8d 2d       	mov	r24, r13
	  fileNameFAT[k] = fileName[k];

	for(k=j; k<=7; k++) //filling file name trail with blanks
	  fileNameFAT[k] = ' ';
    1de6:	9e 01       	movw	r18, r28
    1de8:	2f 5f       	subi	r18, 0xFF	; 255
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	90 e2       	ldi	r25, 0x20	; 32
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <convertFileName+0x13e>
    1df0:	f9 01       	movw	r30, r18
    1df2:	e8 0f       	add	r30, r24
    1df4:	f1 1d       	adc	r31, r1
    1df6:	90 83       	st	Z, r25
	}

	for(k=0; k<j; k++) //setting file name
	  fileNameFAT[k] = fileName[k];

	for(k=j; k<=7; k++) //filling file name trail with blanks
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	88 30       	cpi	r24, 0x08	; 8
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <convertFileName+0x134>
	  fileNameFAT[k] = ' ';

	j++;
    1dfe:	2d 2d       	mov	r18, r13
    1e00:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else //filling extension trail with blanks
		{
			while(k<11)
			{
				fileNameFAT[k++] = ' ';
    1e02:	be 01       	movw	r22, r28
    1e04:	6f 5f       	subi	r22, 0xFF	; 255
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	30 e2       	ldi	r19, 0x20	; 32
	  fileNameFAT[k] = ' ';

	j++;
	for(k=8; k<11; k++) //setting file extention
	{
		if(fileName[j] != 0)
    1e0a:	f5 01       	movw	r30, r10
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f1 1d       	adc	r31, r1
    1e10:	90 81       	ld	r25, Z
    1e12:	99 23       	and	r25, r25
    1e14:	59 f0       	breq	.+22     	; 0x1e2c <convertFileName+0x170>
		{
			fileNameFAT[k] = fileName[j++];
    1e16:	fb 01       	movw	r30, r22
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f1 1d       	adc	r31, r1
    1e1c:	90 83       	st	Z, r25
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	07 c0       	rjmp	.+14     	; 0x1e30 <convertFileName+0x174>
		}
		else //filling extension trail with blanks
		{
			while(k<11)
			{
				fileNameFAT[k++] = ' ';
    1e22:	fb 01       	movw	r30, r22
    1e24:	e8 0f       	add	r30, r24
    1e26:	f1 1d       	adc	r31, r1
    1e28:	30 83       	st	Z, r19
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
		{
			fileNameFAT[k] = fileName[j++];
		}
		else //filling extension trail with blanks
		{
			while(k<11)
    1e2c:	8b 30       	cpi	r24, 0x0B	; 11
    1e2e:	c8 f3       	brcs	.-14     	; 0x1e22 <convertFileName+0x166>

	for(k=j; k<=7; k++) //filling file name trail with blanks
	  fileNameFAT[k] = ' ';

	j++;
	for(k=8; k<11; k++) //setting file extention
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	8b 30       	cpi	r24, 0x0B	; 11
    1e34:	50 f3       	brcs	.-44     	; 0x1e0a <convertFileName+0x14e>
				fileNameFAT[k++] = ' ';
			}
		}
	}

	for(j=0; j<11; j++) //converting small letters to caps
    1e36:	9e 01       	movw	r18, r28
    1e38:	24 5f       	subi	r18, 0xF4	; 244
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    1e3c:	da 01       	movw	r26, r20
    1e3e:	9c 91       	ld	r25, X
    1e40:	89 2f       	mov	r24, r25
    1e42:	81 56       	subi	r24, 0x61	; 97
    1e44:	8a 31       	cpi	r24, 0x1A	; 26
    1e46:	10 f4       	brcc	.+4      	; 0x1e4c <convertFileName+0x190>
		{
	    	fileNameFAT[j] -= 0x20;
    1e48:	90 52       	subi	r25, 0x20	; 32
    1e4a:	9c 93       	st	X, r25
    1e4c:	4f 5f       	subi	r20, 0xFF	; 255
    1e4e:	5f 4f       	sbci	r21, 0xFF	; 255
				fileNameFAT[k++] = ' ';
			}
		}
	}

	for(j=0; j<11; j++) //converting small letters to caps
    1e50:	42 17       	cp	r20, r18
    1e52:	53 07       	cpc	r21, r19
    1e54:	99 f7       	brne	.-26     	; 0x1e3c <convertFileName+0x180>
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
		}
	}


	for(j=0; j<11; j++)
		fileName[j] = fileNameFAT[j];
    1e5a:	ae 01       	movw	r20, r28
    1e5c:	4f 5f       	subi	r20, 0xFF	; 255
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	f5 01       	movw	r30, r10
    1e62:	e2 0f       	add	r30, r18
    1e64:	f3 1f       	adc	r31, r19
    1e66:	da 01       	movw	r26, r20
    1e68:	a2 0f       	add	r26, r18
    1e6a:	b3 1f       	adc	r27, r19
    1e6c:	8c 91       	ld	r24, X
    1e6e:	80 83       	st	Z, r24
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
	    	fileNameFAT[j] -= 0x20;
		}
	}


	for(j=0; j<11; j++)
    1e74:	2b 30       	cpi	r18, 0x0B	; 11
    1e76:	31 05       	cpc	r19, r1
    1e78:	99 f7       	brne	.-26     	; 0x1e60 <convertFileName+0x1a4>
		fileName[j] = fileNameFAT[j];


	DPRINTF("[%s]\n\r", fileName);
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <convertFileName+0x1c0>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <convertFileName+0x1c2>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <convertFileName+0x1c4>
    1e80:	ed b7       	in	r30, 0x3d	; 61
    1e82:	fe b7       	in	r31, 0x3e	; 62
    1e84:	31 96       	adiw	r30, 0x01	; 1
    1e86:	02 e0       	ldi	r16, 0x02	; 2
    1e88:	16 e0       	ldi	r17, 0x06	; 6
    1e8a:	ad b7       	in	r26, 0x3d	; 61
    1e8c:	be b7       	in	r27, 0x3e	; 62
    1e8e:	12 96       	adiw	r26, 0x02	; 2
    1e90:	1c 93       	st	X, r17
    1e92:	0e 93       	st	-X, r16
    1e94:	11 97       	sbiw	r26, 0x01	; 1
    1e96:	8f e4       	ldi	r24, 0x4F	; 79
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	93 83       	std	Z+3, r25	; 0x03
    1e9c:	82 83       	std	Z+2, r24	; 0x02
    1e9e:	b5 82       	std	Z+5, r11	; 0x05
    1ea0:	a4 82       	std	Z+4, r10	; 0x04
    1ea2:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
    1ea6:	ed b7       	in	r30, 0x3d	; 61
    1ea8:	fe b7       	in	r31, 0x3e	; 62
    1eaa:	36 96       	adiw	r30, 0x06	; 6
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	fe bf       	out	0x3e, r31	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	ed bf       	out	0x3d, r30	; 61
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
    1ebe:	2b 96       	adiw	r28, 0x0b	; 11
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	df 90       	pop	r13
    1ed8:	cf 90       	pop	r12
    1eda:	bf 90       	pop	r11
    1edc:	af 90       	pop	r10
    1ede:	9f 90       	pop	r9
    1ee0:	8f 90       	pop	r8
    1ee2:	7f 90       	pop	r7
    1ee4:	6f 90       	pop	r6
    1ee6:	08 95       	ret

00001ee8 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1eee:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <convertFileName>
  if(error) return;
    1ef2:	88 23       	and	r24, r24
    1ef4:	21 f4       	brne	.+8      	; 0x1efe <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	be 01       	movw	r22, r28
    1efa:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <findFiles>
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <readAndRetreiveFileContents>:
 * @param fileName    char *   That contains the file name of what you want to read
          dataString  char *   Where the data is put, can store 100 bytes
 * @return unsigned char - number where zero means success
 */
unsigned char readAndRetreiveFileContents (unsigned char *fileName, unsigned char *dataString)
{
    1f04:	2f 92       	push	r2
    1f06:	3f 92       	push	r3
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	28 97       	sbiw	r28, 0x08	; 8
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	8c 01       	movw	r16, r24
    1f3a:	7e 83       	std	Y+6, r23	; 0x06
    1f3c:	6d 83       	std	Y+5, r22	; 0x05
	unsigned int k;//,iCntForSingleAudioWrite;
	unsigned char j, error;
	unsigned int iReadByteCnt;
	bool bEndOfFile=false;

	error = convertFileName (fileName); //convert fileName into FAT format
    1f3e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <convertFileName>
	if(error) return 1;
    1f42:	88 23       	and	r24, r24
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <readAndRetreiveFileContents+0x46>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	a8 c0       	rjmp	.+336    	; 0x209a <readAndRetreiveFileContents+0x196>

	dir = findFiles (GET_FILE, fileName); //get the file location
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	b8 01       	movw	r22, r16
    1f4e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <findFiles>
    1f52:	9c 01       	movw	r18, r24
	if(dir == 0) 
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	11 f4       	brne	.+4      	; 0x1f5c <readAndRetreiveFileContents+0x58>
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	9f c0       	rjmp	.+318    	; 0x209a <readAndRetreiveFileContents+0x196>
	  return (2);

//	if(flag == VERIFY) return (1);	//specified file name is already existing

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	54 96       	adiw	r26, 0x14	; 20
    1f60:	8d 91       	ld	r24, X+
    1f62:	9c 91       	ld	r25, X
    1f64:	55 97       	sbiw	r26, 0x15	; 21
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	6c 01       	movw	r12, r24
    1f6c:	bb 24       	eor	r11, r11
    1f6e:	aa 24       	eor	r10, r10
    1f70:	f9 01       	movw	r30, r18
    1f72:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f74:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f76:	a0 e0       	ldi	r26, 0x00	; 0
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	a8 2a       	or	r10, r24
    1f7c:	b9 2a       	or	r11, r25
    1f7e:	ca 2a       	or	r12, r26
    1f80:	db 2a       	or	r13, r27

	fileSize = dir->fileSize;
    1f82:	d9 01       	movw	r26, r18
    1f84:	5c 96       	adiw	r26, 0x1c	; 28
    1f86:	2d 90       	ld	r2, X+
    1f88:	3d 90       	ld	r3, X+
    1f8a:	4d 90       	ld	r4, X+
    1f8c:	5c 90       	ld	r5, X
    1f8e:	5f 97       	sbiw	r26, 0x1f	; 31
    1f90:	29 82       	std	Y+1, r2	; 0x01
    1f92:	3a 82       	std	Y+2, r3	; 0x02
    1f94:	4b 82       	std	Y+3, r4	; 0x03
    1f96:	5c 82       	std	Y+4, r5	; 0x04
    1f98:	22 24       	eor	r2, r2
    1f9a:	33 24       	eor	r3, r3
    1f9c:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1f9e:	20 91 d5 05 	lds	r18, 0x05D5
    1fa2:	30 91 d6 05 	lds	r19, 0x05D6
    1fa6:	e0 90 9b 03 	lds	r14, 0x039B
    1faa:	f0 90 9c 03 	lds	r15, 0x039C
    1fae:	00 91 9d 03 	lds	r16, 0x039D
    1fb2:	10 91 9e 03 	lds	r17, 0x039E
    1fb6:	c6 01       	movw	r24, r12
    1fb8:	b5 01       	movw	r22, r10
    1fba:	62 50       	subi	r22, 0x02	; 2
    1fbc:	70 40       	sbci	r23, 0x00	; 0
    1fbe:	80 40       	sbci	r24, 0x00	; 0
    1fc0:	90 40       	sbci	r25, 0x00	; 0
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    1fca:	3b 01       	movw	r6, r22
    1fcc:	4c 01       	movw	r8, r24
    1fce:	6e 0c       	add	r6, r14
    1fd0:	7f 1c       	adc	r7, r15
    1fd2:	80 1e       	adc	r8, r16
    1fd4:	91 1e       	adc	r9, r17
    1fd6:	10 e0       	ldi	r17, 0x00	; 0
    1fd8:	40 c0       	rjmp	.+128    	; 0x205a <readAndRetreiveFileContents+0x156>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    1fda:	c4 01       	movw	r24, r8
    1fdc:	b3 01       	movw	r22, r6
    1fde:	61 0f       	add	r22, r17
    1fe0:	71 1d       	adc	r23, r1
    1fe2:	81 1d       	adc	r24, r1
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    1fea:	a2 01       	movw	r20, r4
    1fec:	91 01       	movw	r18, r2
    1fee:	60 e0       	ldi	r22, 0x00	; 0


			for(k=0; k<512; k++)
    1ff0:	d2 01       	movw	r26, r4
    1ff2:	c1 01       	movw	r24, r2
    1ff4:	80 50       	subi	r24, 0x00	; 0
    1ff6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff8:	af 4f       	sbci	r26, 0xFF	; 255
    1ffa:	bf 4f       	sbci	r27, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    1ffc:	29 80       	ldd	r2, Y+1	; 0x01
    1ffe:	3a 80       	ldd	r3, Y+2	; 0x02
    2000:	4b 80       	ldd	r4, Y+3	; 0x03
    2002:	5c 80       	ldd	r5, Y+4	; 0x04
    2004:	22 15       	cp	r18, r2
    2006:	33 05       	cpc	r19, r3
    2008:	44 05       	cpc	r20, r4
    200a:	55 05       	cpc	r21, r5
    200c:	08 f0       	brcs	.+2      	; 0x2010 <readAndRetreiveFileContents+0x10c>
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	2f 5f       	subi	r18, 0xFF	; 255
    2012:	3f 4f       	sbci	r19, 0xFF	; 255
    2014:	4f 4f       	sbci	r20, 0xFF	; 255
    2016:	5f 4f       	sbci	r21, 0xFF	; 255
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    2018:	28 17       	cp	r18, r24
    201a:	39 07       	cpc	r19, r25
    201c:	4a 07       	cpc	r20, r26
    201e:	5b 07       	cpc	r21, r27
    2020:	69 f7       	brne	.-38     	; 0x1ffc <readAndRetreiveFileContents+0xf8>
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <readAndRetreiveFileContents+0x13e>
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
				
			}
			while(iReadByteCnt<k)
			{
				*dataString++=buffer[iReadByteCnt];
    2024:	ef 81       	ldd	r30, Y+7	; 0x07
    2026:	f8 85       	ldd	r31, Y+8	; 0x08
    2028:	ec 52       	subi	r30, 0x2C	; 44
    202a:	fc 4f       	sbci	r31, 0xFC	; 252
    202c:	80 81       	ld	r24, Z
    202e:	ad 81       	ldd	r26, Y+5	; 0x05
    2030:	be 81       	ldd	r27, Y+6	; 0x06
    2032:	8d 93       	st	X+, r24
    2034:	be 83       	std	Y+6, r27	; 0x06
    2036:	ad 83       	std	Y+5, r26	; 0x05
				if(iReadByteCnt++==k)return 0;	
    2038:	ef 81       	ldd	r30, Y+7	; 0x07
    203a:	f8 85       	ldd	r31, Y+8	; 0x08
    203c:	31 96       	adiw	r30, 0x01	; 1
    203e:	f8 87       	std	Y+8, r31	; 0x08
    2040:	ef 83       	std	Y+7, r30	; 0x07
			for(k=0; k<512; k++)
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
				
			}
			while(iReadByteCnt<k)
    2042:	8f 81       	ldd	r24, Y+7	; 0x07
    2044:	98 85       	ldd	r25, Y+8	; 0x08
    2046:	80 50       	subi	r24, 0x00	; 0
    2048:	92 40       	sbci	r25, 0x02	; 2
    204a:	60 f3       	brcs	.-40     	; 0x2024 <readAndRetreiveFileContents+0x120>
			{
				*dataString++=buffer[iReadByteCnt];
				if(iReadByteCnt++==k)return 0;	
			}
			if(bEndOfFile)
    204c:	66 23       	and	r22, r22
    204e:	11 f0       	breq	.+4      	; 0x2054 <readAndRetreiveFileContents+0x150>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	23 c0       	rjmp	.+70     	; 0x209a <readAndRetreiveFileContents+0x196>

	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    2054:	1f 5f       	subi	r17, 0xFF	; 255
    2056:	19 01       	movw	r2, r18
    2058:	2a 01       	movw	r4, r20
    205a:	20 91 d5 05 	lds	r18, 0x05D5
    205e:	30 91 d6 05 	lds	r19, 0x05D6
    2062:	81 2f       	mov	r24, r17
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	82 17       	cp	r24, r18
    2068:	93 07       	cpc	r25, r19
    206a:	08 f4       	brcc	.+2      	; 0x206e <readAndRetreiveFileContents+0x16a>
    206c:	b6 cf       	rjmp	.-148    	; 0x1fda <readAndRetreiveFileContents+0xd6>
			if(bEndOfFile)
			{
				return 0;
			}
		}
		cluster = getSetNextCluster (cluster, GET, 0);
    206e:	c6 01       	movw	r24, r12
    2070:	b5 01       	movw	r22, r10
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	00 e0       	ldi	r16, 0x00	; 0
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    2080:	5b 01       	movw	r10, r22
    2082:	6c 01       	movw	r12, r24
		if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 3;}
    2084:	61 15       	cp	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	81 05       	cpc	r24, r1
    208a:	91 05       	cpc	r25, r1
    208c:	09 f0       	breq	.+2      	; 0x2090 <readAndRetreiveFileContents+0x18c>
    208e:	87 cf       	rjmp	.-242    	; 0x1f9e <readAndRetreiveFileContents+0x9a>
    2090:	8f e7       	ldi	r24, 0x7F	; 127
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    2098:	83 e0       	ldi	r24, 0x03	; 3
	}
	return 4;
}
    209a:	28 96       	adiw	r28, 0x08	; 8
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	af 90       	pop	r10
    20ba:	9f 90       	pop	r9
    20bc:	8f 90       	pop	r8
    20be:	7f 90       	pop	r7
    20c0:	6f 90       	pop	r6
    20c2:	5f 90       	pop	r5
    20c4:	4f 90       	pop	r4
    20c6:	3f 90       	pop	r3
    20c8:	2f 90       	pop	r2
    20ca:	08 95       	ret

000020cc <readFile>:
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************

unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    20cc:	2f 92       	push	r2
    20ce:	3f 92       	push	r3
    20d0:	4f 92       	push	r4
    20d2:	5f 92       	push	r5
    20d4:	6f 92       	push	r6
    20d6:	7f 92       	push	r7
    20d8:	8f 92       	push	r8
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <readFile+0x26>
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <readFile+0x28>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	e8 2e       	mov	r14, r24
    20fa:	8b 01       	movw	r16, r22
	unsigned int k;//,iCntForSingleAudioWrite;
	unsigned char j, error;
	//unsigned int iAudioByteCnt;
	bool bEndOfFile=false;

	error = convertFileName (fileName); //convert fileName into FAT format
    20fc:	cb 01       	movw	r24, r22
    20fe:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <convertFileName>
	if(error) return 2;
    2102:	88 23       	and	r24, r24
    2104:	11 f0       	breq	.+4      	; 0x210a <readFile+0x3e>
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	94 c0       	rjmp	.+296    	; 0x2232 <readFile+0x166>

	dir = findFiles (GET_FILE, fileName); //get the file location
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	b8 01       	movw	r22, r16
    210e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <findFiles>
    2112:	9c 01       	movw	r18, r24
	if(dir == 0) 
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	09 f4       	brne	.+2      	; 0x211a <readFile+0x4e>
    2118:	8b c0       	rjmp	.+278    	; 0x2230 <readFile+0x164>
	  return (0);

	if(flag == VERIFY) return (1);	//specified file name is already existing
    211a:	22 24       	eor	r2, r2
    211c:	23 94       	inc	r2
    211e:	e2 14       	cp	r14, r2
    2120:	11 f4       	brne	.+4      	; 0x2126 <readFile+0x5a>
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	86 c0       	rjmp	.+268    	; 0x2232 <readFile+0x166>

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2126:	dc 01       	movw	r26, r24
    2128:	54 96       	adiw	r26, 0x14	; 20
    212a:	8d 91       	ld	r24, X+
    212c:	9c 91       	ld	r25, X
    212e:	55 97       	sbiw	r26, 0x15	; 21
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	6c 01       	movw	r12, r24
    2136:	bb 24       	eor	r11, r11
    2138:	aa 24       	eor	r10, r10
    213a:	f9 01       	movw	r30, r18
    213c:	82 8d       	ldd	r24, Z+26	; 0x1a
    213e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	a8 2a       	or	r10, r24
    2146:	b9 2a       	or	r11, r25
    2148:	ca 2a       	or	r12, r26
    214a:	db 2a       	or	r13, r27

	fileSize = dir->fileSize;
    214c:	d9 01       	movw	r26, r18
    214e:	5c 96       	adiw	r26, 0x1c	; 28
    2150:	2d 90       	ld	r2, X+
    2152:	3d 90       	ld	r3, X+
    2154:	4d 90       	ld	r4, X+
    2156:	5c 90       	ld	r5, X
    2158:	5f 97       	sbiw	r26, 0x1f	; 31
    215a:	29 82       	std	Y+1, r2	; 0x01
    215c:	3a 82       	std	Y+2, r3	; 0x02
    215e:	4b 82       	std	Y+3, r4	; 0x03
    2160:	5c 82       	std	Y+4, r5	; 0x04
    2162:	22 24       	eor	r2, r2
    2164:	33 24       	eor	r3, r3
    2166:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2168:	20 91 d5 05 	lds	r18, 0x05D5
    216c:	30 91 d6 05 	lds	r19, 0x05D6
    2170:	e0 90 9b 03 	lds	r14, 0x039B
    2174:	f0 90 9c 03 	lds	r15, 0x039C
    2178:	00 91 9d 03 	lds	r16, 0x039D
    217c:	10 91 9e 03 	lds	r17, 0x039E
    2180:	c6 01       	movw	r24, r12
    2182:	b5 01       	movw	r22, r10
    2184:	62 50       	subi	r22, 0x02	; 2
    2186:	70 40       	sbci	r23, 0x00	; 0
    2188:	80 40       	sbci	r24, 0x00	; 0
    218a:	90 40       	sbci	r25, 0x00	; 0
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    2194:	3b 01       	movw	r6, r22
    2196:	4c 01       	movw	r8, r24
    2198:	6e 0c       	add	r6, r14
    219a:	7f 1c       	adc	r7, r15
    219c:	80 1e       	adc	r8, r16
    219e:	91 1e       	adc	r9, r17
    21a0:	10 e0       	ldi	r17, 0x00	; 0
    21a2:	28 c0       	rjmp	.+80     	; 0x21f4 <readFile+0x128>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    21a4:	c4 01       	movw	r24, r8
    21a6:	b3 01       	movw	r22, r6
    21a8:	61 0f       	add	r22, r17
    21aa:	71 1d       	adc	r23, r1
    21ac:	81 1d       	adc	r24, r1
    21ae:	91 1d       	adc	r25, r1
    21b0:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    21b4:	d2 01       	movw	r26, r4
    21b6:	c1 01       	movw	r24, r2
    21b8:	60 e0       	ldi	r22, 0x00	; 0


			for(k=0; k<512; k++)
    21ba:	a2 01       	movw	r20, r4
    21bc:	91 01       	movw	r18, r2
    21be:	20 50       	subi	r18, 0x00	; 0
    21c0:	3e 4f       	sbci	r19, 0xFE	; 254
    21c2:	4f 4f       	sbci	r20, 0xFF	; 255
    21c4:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    21c6:	29 80       	ldd	r2, Y+1	; 0x01
    21c8:	3a 80       	ldd	r3, Y+2	; 0x02
    21ca:	4b 80       	ldd	r4, Y+3	; 0x03
    21cc:	5c 80       	ldd	r5, Y+4	; 0x04
    21ce:	82 15       	cp	r24, r2
    21d0:	93 05       	cpc	r25, r3
    21d2:	a4 05       	cpc	r26, r4
    21d4:	b5 05       	cpc	r27, r5
    21d6:	08 f0       	brcs	.+2      	; 0x21da <readFile+0x10e>
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	a1 1d       	adc	r26, r1
    21de:	b1 1d       	adc	r27, r1
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    21e0:	82 17       	cp	r24, r18
    21e2:	93 07       	cpc	r25, r19
    21e4:	a4 07       	cpc	r26, r20
    21e6:	b5 07       	cpc	r27, r21
    21e8:	71 f7       	brne	.-36     	; 0x21c6 <readFile+0xfa>
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
			}
			if(bEndOfFile)
    21ea:	66 23       	and	r22, r22
    21ec:	09 f5       	brne	.+66     	; 0x2230 <readFile+0x164>

	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    21ee:	1f 5f       	subi	r17, 0xFF	; 255
    21f0:	1c 01       	movw	r2, r24
    21f2:	2d 01       	movw	r4, r26
    21f4:	20 91 d5 05 	lds	r18, 0x05D5
    21f8:	30 91 d6 05 	lds	r19, 0x05D6
    21fc:	81 2f       	mov	r24, r17
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	82 17       	cp	r24, r18
    2202:	93 07       	cpc	r25, r19
    2204:	78 f2       	brcs	.-98     	; 0x21a4 <readFile+0xd8>
			if(bEndOfFile)
			{
				return 0;
			}
		}
		cluster = getSetNextCluster (cluster, GET, 0);
    2206:	c6 01       	movw	r24, r12
    2208:	b5 01       	movw	r22, r10
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	00 e0       	ldi	r16, 0x00	; 0
    220e:	10 e0       	ldi	r17, 0x00	; 0
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    2218:	5b 01       	movw	r10, r22
    221a:	6c 01       	movw	r12, r24
		if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 0;}
    221c:	61 15       	cp	r22, r1
    221e:	71 05       	cpc	r23, r1
    2220:	81 05       	cpc	r24, r1
    2222:	91 05       	cpc	r25, r1
    2224:	09 f0       	breq	.+2      	; 0x2228 <readFile+0x15c>
    2226:	a0 cf       	rjmp	.-192    	; 0x2168 <readFile+0x9c>
    2228:	88 e9       	ldi	r24, 0x98	; 152
    222a:	92 e0       	ldi	r25, 0x02	; 2
    222c:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    2230:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	bf 90       	pop	r11
    224c:	af 90       	pop	r10
    224e:	9f 90       	pop	r9
    2250:	8f 90       	pop	r8
    2252:	7f 90       	pop	r7
    2254:	6f 90       	pop	r6
    2256:	5f 90       	pop	r5
    2258:	4f 90       	pop	r4
    225a:	3f 90       	pop	r3
    225c:	2f 90       	pop	r2
    225e:	08 95       	ret

00002260 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    2260:	2f 92       	push	r2
    2262:	3f 92       	push	r3
    2264:	4f 92       	push	r4
    2266:	5f 92       	push	r5
    2268:	6f 92       	push	r6
    226a:	7f 92       	push	r7
    226c:	8f 92       	push	r8
    226e:	9f 92       	push	r9
    2270:	af 92       	push	r10
    2272:	bf 92       	push	r11
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	bc 01       	movw	r22, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	0e 94 66 10 	call	0x20cc	; 0x20cc <readFile>

if(j == 1) 
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	09 f0       	breq	.+2      	; 0x228e <writeFile+0x2e>
    228c:	55 c0       	rjmp	.+170    	; 0x2338 <writeFile+0xd8>
{
  USART_transmitStringToPCFromFlash(PSTR("  File already existing, appending data..")); 
    228e:	8a e2       	ldi	r24, 0x2A	; 42
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
  appendFile = 1;
  cluster = appendStartCluster;
    2296:	60 90 f8 05 	lds	r6, 0x05F8
    229a:	70 90 f9 05 	lds	r7, 0x05F9
    229e:	80 90 fa 05 	lds	r8, 0x05FA
    22a2:	90 90 fb 05 	lds	r9, 0x05FB
    22a6:	aa 24       	eor	r10, r10
    22a8:	bb 24       	eor	r11, r11
    22aa:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    22ac:	c4 01       	movw	r24, r8
    22ae:	b3 01       	movw	r22, r6
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	00 e0       	ldi	r16, 0x00	; 0
    22b4:	10 e0       	ldi	r17, 0x00	; 0
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    if(nextCluster == EOF) break;
    22be:	6f 3f       	cpi	r22, 0xFF	; 255
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	72 07       	cpc	r23, r18
    22c4:	2f ef       	ldi	r18, 0xFF	; 255
    22c6:	82 07       	cpc	r24, r18
    22c8:	2f e0       	ldi	r18, 0x0F	; 15
    22ca:	92 07       	cpc	r25, r18
    22cc:	41 f0       	breq	.+16     	; 0x22de <writeFile+0x7e>
	cluster = nextCluster;
	clusterCount++;
    22ce:	08 94       	sec
    22d0:	a1 1c       	adc	r10, r1
    22d2:	b1 1c       	adc	r11, r1
    22d4:	c1 1c       	adc	r12, r1
    22d6:	d1 1c       	adc	r13, r1
    22d8:	3b 01       	movw	r6, r22
    22da:	4c 01       	movw	r8, r24
    22dc:	e7 cf       	rjmp	.-50     	; 0x22ac <writeFile+0x4c>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    22de:	20 91 d5 05 	lds	r18, 0x05D5
    22e2:	30 91 d6 05 	lds	r19, 0x05D6
    22e6:	60 91 a3 03 	lds	r22, 0x03A3
    22ea:	70 91 a4 03 	lds	r23, 0x03A4
    22ee:	e0 90 a3 03 	lds	r14, 0x03A3
    22f2:	f0 90 a4 03 	lds	r15, 0x03A4
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    2302:	a6 01       	movw	r20, r12
    2304:	95 01       	movw	r18, r10
    2306:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	60 91 9f 03 	lds	r22, 0x039F
    2312:	70 91 a0 03 	lds	r23, 0x03A0
    2316:	80 91 a1 03 	lds	r24, 0x03A1
    231a:	90 91 a2 03 	lds	r25, 0x03A2
    231e:	62 1b       	sub	r22, r18
    2320:	73 0b       	sbc	r23, r19
    2322:	84 0b       	sbc	r24, r20
    2324:	95 0b       	sbc	r25, r21
    2326:	00 e0       	ldi	r16, 0x00	; 0
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	a8 01       	movw	r20, r16
    232c:	97 01       	movw	r18, r14
    232e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    2332:	b2 2e       	mov	r11, r18
    2334:	21 e0       	ldi	r18, 0x01	; 1
    2336:	3e c0       	rjmp	.+124    	; 0x23b4 <writeFile+0x154>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    2338:	82 30       	cpi	r24, 0x02	; 2
    233a:	09 f4       	brne	.+2      	; 0x233e <writeFile+0xde>
    233c:	08 c1       	rjmp	.+528    	; 0x254e <writeFile+0x2ee>
else
{
//  TX_NEWLINE_PC;
//  USART_transmitStringToPCFromFlash(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	0e 94 90 08 	call	0x1120	; 0x1120 <getSetFreeCluster>
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    2352:	80 91 a5 03 	lds	r24, 0x03A5
    2356:	90 91 a6 03 	lds	r25, 0x03A6
    235a:	a0 91 a7 03 	lds	r26, 0x03A7
    235e:	b0 91 a8 03 	lds	r27, 0x03A8
    2362:	82 17       	cp	r24, r18
    2364:	93 07       	cpc	r25, r19
    2366:	a4 07       	cpc	r26, r20
    2368:	b5 07       	cpc	r27, r21
    236a:	40 f4       	brcc	.+16     	; 0x237c <writeFile+0x11c>
     cluster = rootCluster;
    236c:	20 91 c9 03 	lds	r18, 0x03C9
    2370:	30 91 ca 03 	lds	r19, 0x03CA
    2374:	40 91 cb 03 	lds	r20, 0x03CB
    2378:	50 91 cc 03 	lds	r21, 0x03CC

  cluster = searchNextFreeCluster(cluster);
    237c:	ca 01       	movw	r24, r20
    237e:	b9 01       	movw	r22, r18
    2380:	0e 94 06 08 	call	0x100c	; 0x100c <searchNextFreeCluster>
    2384:	3b 01       	movw	r6, r22
    2386:	4c 01       	movw	r8, r24
   if(cluster == 0)
    2388:	61 15       	cp	r22, r1
    238a:	71 05       	cpc	r23, r1
    238c:	81 05       	cpc	r24, r1
    238e:	91 05       	cpc	r25, r1
    2390:	09 f4       	brne	.+2      	; 0x2394 <writeFile+0x134>
    2392:	dd c0       	rjmp	.+442    	; 0x254e <writeFile+0x2ee>
   {
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0f ef       	ldi	r16, 0xFF	; 255
    2398:	1f ef       	ldi	r17, 0xFF	; 255
    239a:	2f ef       	ldi	r18, 0xFF	; 255
    239c:	3f e0       	ldi	r19, 0x0F	; 15
    239e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
    23a2:	10 92 9f 03 	sts	0x039F, r1
    23a6:	10 92 a0 03 	sts	0x03A0, r1
    23aa:	10 92 a1 03 	sts	0x03A1, r1
    23ae:	10 92 a2 03 	sts	0x03A2, r1
    23b2:	20 e0       	ldi	r18, 0x00	; 0
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    23b4:	2b 2c       	mov	r2, r11
    23b6:	33 24       	eor	r3, r3
    23b8:	44 24       	eor	r4, r4
    23ba:	55 24       	eor	r5, r5
    23bc:	c4 01       	movw	r24, r8
    23be:	b3 01       	movw	r22, r6
    23c0:	62 50       	subi	r22, 0x02	; 2
    23c2:	70 40       	sbci	r23, 0x00	; 0
    23c4:	80 40       	sbci	r24, 0x00	; 0
    23c6:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    23c8:	22 23       	and	r18, r18
    23ca:	e1 f1       	breq	.+120    	; 0x2444 <writeFile+0x1e4>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    23cc:	20 91 d5 05 	lds	r18, 0x05D5
    23d0:	30 91 d6 05 	lds	r19, 0x05D6
    23d4:	e0 90 9b 03 	lds	r14, 0x039B
    23d8:	f0 90 9c 03 	lds	r15, 0x039C
    23dc:	00 91 9d 03 	lds	r16, 0x039D
    23e0:	10 91 9e 03 	lds	r17, 0x039E
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    23e4:	e2 0c       	add	r14, r2
    23e6:	f3 1c       	adc	r15, r3
    23e8:	04 1d       	adc	r16, r4
    23ea:	15 1d       	adc	r17, r5
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    23f4:	e6 0e       	add	r14, r22
    23f6:	f7 1e       	adc	r15, r23
    23f8:	08 1f       	adc	r16, r24
    23fa:	19 1f       	adc	r17, r25
    23fc:	e0 92 ce 03 	sts	0x03CE, r14
    2400:	f0 92 cf 03 	sts	0x03CF, r15
    2404:	00 93 d0 03 	sts	0x03D0, r16
    2408:	10 93 d1 03 	sts	0x03D1, r17
	  SD_readSingleBlock (startBlock);
    240c:	60 91 ce 03 	lds	r22, 0x03CE
    2410:	70 91 cf 03 	lds	r23, 0x03CF
    2414:	80 91 d0 03 	lds	r24, 0x03D0
    2418:	90 91 d1 03 	lds	r25, 0x03D1
    241c:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    2420:	20 91 a3 03 	lds	r18, 0x03A3
    2424:	30 91 a4 03 	lds	r19, 0x03A4
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	60 91 9f 03 	lds	r22, 0x039F
    2430:	70 91 a0 03 	lds	r23, 0x03A0
    2434:	80 91 a1 03 	lds	r24, 0x03A1
    2438:	90 91 a2 03 	lds	r25, 0x03A2
    243c:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__udivmodsi4>
    2440:	1b 2d       	mov	r17, r11
    2442:	1f c0       	rjmp	.+62     	; 0x2482 <writeFile+0x222>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2444:	20 91 d5 05 	lds	r18, 0x05D5
    2448:	30 91 d6 05 	lds	r19, 0x05D6
    244c:	e0 90 9b 03 	lds	r14, 0x039B
    2450:	f0 90 9c 03 	lds	r15, 0x039C
    2454:	00 91 9d 03 	lds	r16, 0x039D
    2458:	10 91 9e 03 	lds	r17, 0x039E
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    2464:	e6 0e       	add	r14, r22
    2466:	f7 1e       	adc	r15, r23
    2468:	08 1f       	adc	r16, r24
    246a:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    246c:	e0 92 ce 03 	sts	0x03CE, r14
    2470:	f0 92 cf 03 	sts	0x03CF, r15
    2474:	00 93 d0 03 	sts	0x03D0, r16
    2478:	10 93 d1 03 	sts	0x03D1, r17
    247c:	10 e0       	ldi	r17, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	20 91 9f 03 	lds	r18, 0x039F
    2486:	30 91 a0 03 	lds	r19, 0x03A0
    248a:	40 91 a1 03 	lds	r20, 0x03A1
    248e:	50 91 a2 03 	lds	r21, 0x03A2
		 fileSize--;
	   } 
	   continue;     
	 }
//	 USART_transmitByteToPC(data);
     buffer[i++] = data;
    2492:	fb 01       	movw	r30, r22
    2494:	ec 52       	subi	r30, 0x2C	; 44
    2496:	fc 4f       	sbci	r31, 0xFC	; 252
    2498:	10 82       	st	Z, r1
    249a:	6f 5f       	subi	r22, 0xFF	; 255
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	2f 5f       	subi	r18, 0xFF	; 255
    24a0:	3f 4f       	sbci	r19, 0xFF	; 255
    24a2:	4f 4f       	sbci	r20, 0xFF	; 255
    24a4:	5f 4f       	sbci	r21, 0xFF	; 255
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	60 30       	cpi	r22, 0x00	; 0
    24aa:	78 07       	cpc	r23, r24
    24ac:	90 f3       	brcs	.-28     	; 0x2492 <writeFile+0x232>
    24ae:	20 93 9f 03 	sts	0x039F, r18
    24b2:	30 93 a0 03 	sts	0x03A0, r19
    24b6:	40 93 a1 03 	sts	0x03A1, r20
    24ba:	50 93 a2 03 	sts	0x03A2, r21
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    24be:	60 91 ce 03 	lds	r22, 0x03CE
    24c2:	70 91 cf 03 	lds	r23, 0x03CF
    24c6:	80 91 d0 03 	lds	r24, 0x03D0
    24ca:	90 91 d1 03 	lds	r25, 0x03D1
    24ce:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
       j++;
    24d2:	1f 5f       	subi	r17, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    24d4:	20 91 d5 05 	lds	r18, 0x05D5
    24d8:	30 91 d6 05 	lds	r19, 0x05D6
    24dc:	81 2f       	mov	r24, r17
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	82 17       	cp	r24, r18
    24e2:	93 07       	cpc	r25, r19
    24e4:	61 f4       	brne	.+24     	; 0x24fe <writeFile+0x29e>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    24e6:	c4 01       	movw	r24, r8
    24e8:	b3 01       	movw	r22, r6
    24ea:	0e 94 06 08 	call	0x100c	; 0x100c <searchNextFreeCluster>
    24ee:	6b 01       	movw	r12, r22
    24f0:	7c 01       	movw	r14, r24

   if(cluster == 0)
    24f2:	61 15       	cp	r22, r1
    24f4:	71 05       	cpc	r23, r1
    24f6:	81 05       	cpc	r24, r1
    24f8:	91 05       	cpc	r25, r1
    24fa:	a9 f4       	brne	.+42     	; 0x2526 <writeFile+0x2c6>
    24fc:	28 c0       	rjmp	.+80     	; 0x254e <writeFile+0x2ee>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
    24fe:	80 91 ce 03 	lds	r24, 0x03CE
    2502:	90 91 cf 03 	lds	r25, 0x03CF
    2506:	a0 91 d0 03 	lds	r26, 0x03D0
    250a:	b0 91 d1 03 	lds	r27, 0x03D1
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	a1 1d       	adc	r26, r1
    2512:	b1 1d       	adc	r27, r1
    2514:	80 93 ce 03 	sts	0x03CE, r24
    2518:	90 93 cf 03 	sts	0x03CF, r25
    251c:	a0 93 d0 03 	sts	0x03D0, r26
    2520:	b0 93 d1 03 	sts	0x03D1, r27
    2524:	ac cf       	rjmp	.-168    	; 0x247e <writeFile+0x21e>
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    2526:	c4 01       	movw	r24, r8
    2528:	b3 01       	movw	r22, r6
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	97 01       	movw	r18, r14
    252e:	86 01       	movw	r16, r12
    2530:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2534:	c7 01       	movw	r24, r14
    2536:	b6 01       	movw	r22, r12
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0f ef       	ldi	r16, 0xFF	; 255
    253c:	1f ef       	ldi	r17, 0xFF	; 255
    253e:	2f ef       	ldi	r18, 0xFF	; 255
    2540:	3f e0       	ldi	r19, 0x0F	; 15
    2542:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	36 01       	movw	r6, r12
    254a:	47 01       	movw	r8, r14
    254c:	37 cf       	rjmp	.-402    	; 0x23bc <writeFile+0x15c>
   
   prevCluster = cluster;
 }
 
 return;
}
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	ff 90       	pop	r15
    2554:	ef 90       	pop	r14
    2556:	df 90       	pop	r13
    2558:	cf 90       	pop	r12
    255a:	bf 90       	pop	r11
    255c:	af 90       	pop	r10
    255e:	9f 90       	pop	r9
    2560:	8f 90       	pop	r8
    2562:	7f 90       	pop	r7
    2564:	6f 90       	pop	r6
    2566:	5f 90       	pop	r5
    2568:	4f 90       	pop	r4
    256a:	3f 90       	pop	r3
    256c:	2f 90       	pop	r2
    256e:	08 95       	ret

00002570 <ReplaceTheContentOfThisFileWith>:
/*
Modified write file function with replacing all the text with new text given
*/

int ReplaceTheContentOfThisFileWith (unsigned char *fileName, unsigned char *fileContent)
{
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	9c 01       	movw	r18, r24
    258e:	eb 01       	movw	r28, r22
	struct dir_Structure *dir;
	unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

	//j = readFile (VERIFY, fileName);

	if(readFile (VERIFY, fileName) == 1) 
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	b9 01       	movw	r22, r18
    2594:	0e 94 66 10 	call	0x20cc	; 0x20cc <readFile>
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	19 f0       	breq	.+6      	; 0x25a2 <ReplaceTheContentOfThisFileWith+0x32>
    259c:	21 e0       	ldi	r18, 0x01	; 1
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	cf c0       	rjmp	.+414    	; 0x2740 <ReplaceTheContentOfThisFileWith+0x1d0>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    25a2:	a0 90 f8 05 	lds	r10, 0x05F8
    25a6:	b0 90 f9 05 	lds	r11, 0x05F9
    25aa:	c0 90 fa 05 	lds	r12, 0x05FA
    25ae:	d0 90 fb 05 	lds	r13, 0x05FB
    25b2:	8e ef       	ldi	r24, 0xFE	; 254
    25b4:	9f ef       	ldi	r25, 0xFF	; 255
    25b6:	af ef       	ldi	r26, 0xFF	; 255
    25b8:	bf ef       	ldi	r27, 0xFF	; 255
    25ba:	a8 0e       	add	r10, r24
    25bc:	b9 1e       	adc	r11, r25
    25be:	ca 1e       	adc	r12, r26
    25c0:	db 1e       	adc	r13, r27
    25c2:	60 91 d5 05 	lds	r22, 0x05D5
    25c6:	70 91 d6 05 	lds	r23, 0x05D6
    25ca:	e0 90 9b 03 	lds	r14, 0x039B
    25ce:	f0 90 9c 03 	lds	r15, 0x039C
    25d2:	00 91 9d 03 	lds	r16, 0x039D
    25d6:	10 91 9e 03 	lds	r17, 0x039E
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	a6 01       	movw	r20, r12
    25e0:	95 01       	movw	r18, r10
    25e2:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    25e6:	3b 01       	movw	r6, r22
    25e8:	4c 01       	movw	r8, r24
    25ea:	6e 0c       	add	r6, r14
    25ec:	7f 1c       	adc	r7, r15
    25ee:	80 1e       	adc	r8, r16
    25f0:	91 1e       	adc	r9, r17
		//TX_NEWLINE_PC;
		appendFile = 1;
		cluster = appendStartCluster;
		clusterCount=0;
		firstSector = getFirstSector (cluster);
		startBlock = getFirstSector (cluster);
    25f2:	60 91 d5 05 	lds	r22, 0x05D5
    25f6:	70 91 d6 05 	lds	r23, 0x05D6
    25fa:	e0 90 9b 03 	lds	r14, 0x039B
    25fe:	f0 90 9c 03 	lds	r15, 0x039C
    2602:	00 91 9d 03 	lds	r16, 0x039D
    2606:	10 91 9e 03 	lds	r17, 0x039E
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    2612:	e6 0e       	add	r14, r22
    2614:	f7 1e       	adc	r15, r23
    2616:	08 1f       	adc	r16, r24
    2618:	19 1f       	adc	r17, r25
    261a:	e0 92 ce 03 	sts	0x03CE, r14
    261e:	f0 92 cf 03 	sts	0x03CF, r15
    2622:	00 93 d0 03 	sts	0x03D0, r16
    2626:	10 93 d1 03 	sts	0x03D1, r17
    262a:	10 e0       	ldi	r17, 0x00	; 0
    262c:	34 c0       	rjmp	.+104    	; 0x2696 <ReplaceTheContentOfThisFileWith+0x126>
		i=0;
		j=0;
		while(*fileContent!='$')
		{			
			buffer[i++]=*fileContent;
    262e:	fc 01       	movw	r30, r24
    2630:	ec 52       	subi	r30, 0x2C	; 44
    2632:	fc 4f       	sbci	r31, 0xFC	; 252
    2634:	20 83       	st	Z, r18
    2636:	01 96       	adiw	r24, 0x01	; 1
			fileContent++;
    2638:	21 96       	adiw	r28, 0x01	; 1
			if(i >= 512)
    263a:	a2 e0       	ldi	r26, 0x02	; 2
    263c:	80 30       	cpi	r24, 0x00	; 0
    263e:	9a 07       	cpc	r25, r26
    2640:	60 f1       	brcs	.+88     	; 0x269a <ReplaceTheContentOfThisFileWith+0x12a>
			{				
				i=0;
				error = SD_writeSingleBlock (startBlock);
    2642:	60 91 ce 03 	lds	r22, 0x03CE
    2646:	70 91 cf 03 	lds	r23, 0x03CF
    264a:	80 91 d0 03 	lds	r24, 0x03D0
    264e:	90 91 d1 03 	lds	r25, 0x03D1
    2652:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
				j++;
    2656:	1f 5f       	subi	r17, 0xFF	; 255
				if(j == sectorPerCluster) {j = 0; break;}
    2658:	20 91 d5 05 	lds	r18, 0x05D5
    265c:	30 91 d6 05 	lds	r19, 0x05D6
    2660:	81 2f       	mov	r24, r17
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	82 17       	cp	r24, r18
    2666:	93 07       	cpc	r25, r19
    2668:	19 f4       	brne	.+6      	; 0x2670 <ReplaceTheContentOfThisFileWith+0x100>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	18 c0       	rjmp	.+48     	; 0x26a0 <ReplaceTheContentOfThisFileWith+0x130>
				startBlock++; 
    2670:	80 91 ce 03 	lds	r24, 0x03CE
    2674:	90 91 cf 03 	lds	r25, 0x03CF
    2678:	a0 91 d0 03 	lds	r26, 0x03D0
    267c:	b0 91 d1 03 	lds	r27, 0x03D1
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	a1 1d       	adc	r26, r1
    2684:	b1 1d       	adc	r27, r1
    2686:	80 93 ce 03 	sts	0x03CE, r24
    268a:	90 93 cf 03 	sts	0x03CF, r25
    268e:	a0 93 d0 03 	sts	0x03D0, r26
    2692:	b0 93 d1 03 	sts	0x03D1, r27
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
		clusterCount=0;
		firstSector = getFirstSector (cluster);
		startBlock = getFirstSector (cluster);
		i=0;
		j=0;
		while(*fileContent!='$')
    269a:	28 81       	ld	r18, Y
    269c:	24 32       	cpi	r18, 0x24	; 36
    269e:	39 f6       	brne	.-114    	; 0x262e <ReplaceTheContentOfThisFileWith+0xbe>
				if(j == sectorPerCluster) {j = 0; break;}
				startBlock++; 
			}
		}
		//fileContent--;
		if(*fileContent=='$')
    26a0:	68 81       	ld	r22, Y
    26a2:	64 32       	cpi	r22, 0x24	; 36
    26a4:	09 f5       	brne	.+66     	; 0x26e8 <ReplaceTheContentOfThisFileWith+0x178>
		{
			buffer[i++]='$';
    26a6:	fc 01       	movw	r30, r24
    26a8:	ec 52       	subi	r30, 0x2C	; 44
    26aa:	fc 4f       	sbci	r31, 0xFC	; 252
    26ac:	60 83       	st	Z, r22
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <ReplaceTheContentOfThisFileWith+0x148>
			for(;i<512;i++)  //fill the rest of the buffer with 0x00
				buffer[i]= 0x00;
    26b0:	fc 01       	movw	r30, r24
    26b2:	ec 52       	subi	r30, 0x2C	; 44
    26b4:	fc 4f       	sbci	r31, 0xFC	; 252
    26b6:	10 82       	st	Z, r1
		}
		//fileContent--;
		if(*fileContent=='$')
		{
			buffer[i++]='$';
			for(;i<512;i++)  //fill the rest of the buffer with 0x00
    26b8:	01 96       	adiw	r24, 0x01	; 1
    26ba:	b2 e0       	ldi	r27, 0x02	; 2
    26bc:	80 30       	cpi	r24, 0x00	; 0
    26be:	9b 07       	cpc	r25, r27
    26c0:	b8 f3       	brcs	.-18     	; 0x26b0 <ReplaceTheContentOfThisFileWith+0x140>
				buffer[i]= 0x00;
			error = SD_writeSingleBlock (startBlock);
    26c2:	60 91 ce 03 	lds	r22, 0x03CE
    26c6:	70 91 cf 03 	lds	r23, 0x03CF
    26ca:	80 91 d0 03 	lds	r24, 0x03D0
    26ce:	90 91 d1 03 	lds	r25, 0x03D1
    26d2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
    26d6:	88 ee       	ldi	r24, 0xE8	; 232
    26d8:	93 e0       	ldi	r25, 0x03	; 3
    26da:	28 ec       	ldi	r18, 0xC8	; 200
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	f9 01       	movw	r30, r18
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <ReplaceTheContentOfThisFileWith+0x170>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	d9 f7       	brne	.-10     	; 0x26de <ReplaceTheContentOfThisFileWith+0x16e>
			_delay_ms(100);
			//USART_transmitStringToPCFromFlash(PSTR("Successfully replace the file content")); 
			//TX_NEWLINE_PC;
		}
		SD_readSingleBlock (firstSector);    
    26e8:	c4 01       	movw	r24, r8
    26ea:	b3 01       	movw	r22, r6
    26ec:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    26f0:	88 ee       	ldi	r24, 0xE8	; 232
    26f2:	93 e0       	ldi	r25, 0x03	; 3
    26f4:	28 ec       	ldi	r18, 0xC8	; 200
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	f9 01       	movw	r30, r18
    26fa:	31 97       	sbiw	r30, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <ReplaceTheContentOfThisFileWith+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	d9 f7       	brne	.-10     	; 0x26f8 <ReplaceTheContentOfThisFileWith+0x188>
		_delay_ms(100);
		dir = (struct dir_Structure *) &buffer[0]; 
		//extraMemory = fileSize - dir->fileSize;
		dir->fileSize = fileSize;
    2702:	80 91 9f 03 	lds	r24, 0x039F
    2706:	90 91 a0 03 	lds	r25, 0x03A0
    270a:	a0 91 a1 03 	lds	r26, 0x03A1
    270e:	b0 91 a2 03 	lds	r27, 0x03A2
    2712:	80 93 f0 03 	sts	0x03F0, r24
    2716:	90 93 f1 03 	sts	0x03F1, r25
    271a:	a0 93 f2 03 	sts	0x03F2, r26
    271e:	b0 93 f3 03 	sts	0x03F3, r27
		SD_writeSingleBlock (firstSector);
    2722:	c4 01       	movw	r24, r8
    2724:	b3 01       	movw	r22, r6
    2726:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SD_writeSingleBlock>
    272a:	88 ee       	ldi	r24, 0xE8	; 232
    272c:	93 e0       	ldi	r25, 0x03	; 3
    272e:	28 ec       	ldi	r18, 0xC8	; 200
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	f9 01       	movw	r30, r18
    2734:	31 97       	sbiw	r30, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <ReplaceTheContentOfThisFileWith+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	d9 f7       	brne	.-10     	; 0x2732 <ReplaceTheContentOfThisFileWith+0x1c2>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
		//USART_transmitStringToPCFromFlash(PSTR("SABT-ERR001")); 
		//TX_NEWLINE_PC;
	}
	return 2;
}
    2740:	c9 01       	movw	r24, r18
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	bf 90       	pop	r11
    2754:	af 90       	pop	r10
    2756:	9f 90       	pop	r9
    2758:	8f 90       	pop	r8
    275a:	7f 90       	pop	r7
    275c:	6f 90       	pop	r6
    275e:	08 95       	ret

00002760 <PlayMP3file>:
2. Stop playing command issued from the controller

*/

unsigned char PlayMP3file (unsigned char *fileName)
{
    2760:	2f 92       	push	r2
    2762:	3f 92       	push	r3
    2764:	4f 92       	push	r4
    2766:	5f 92       	push	r5
    2768:	6f 92       	push	r6
    276a:	7f 92       	push	r7
    276c:	8f 92       	push	r8
    276e:	9f 92       	push	r9
    2770:	af 92       	push	r10
    2772:	bf 92       	push	r11
    2774:	cf 92       	push	r12
    2776:	df 92       	push	r13
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	2a 97       	sbiw	r28, 0x0a	; 10
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	8c 01       	movw	r16, r24
	unsigned int k,iCntForSingleAudioWrite;
	unsigned char j, error;
	unsigned int iAudioByteCnt;
	bool bEndOfFile=false;

	UI_MP3_file_Pending=false;
    2796:	10 92 88 03 	sts	0x0388, r1

	error = convertFileName (fileName); //convert fileName into FAT format
    279a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <convertFileName>
	if(error) return 2;
    279e:	88 23       	and	r24, r24
    27a0:	11 f0       	breq	.+4      	; 0x27a6 <PlayMP3file+0x46>
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	d9 c0       	rjmp	.+434    	; 0x2958 <PlayMP3file+0x1f8>

	dir = findFiles (GET_FILE, fileName); //get the file location
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	b8 01       	movw	r22, r16
    27aa:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <findFiles>
    27ae:	9c 01       	movw	r18, r24
	if(dir == 0) 
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <PlayMP3file+0x56>
    27b4:	d0 c0       	rjmp	.+416    	; 0x2956 <PlayMP3file+0x1f6>
	  return (0);

	cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    27b6:	dc 01       	movw	r26, r24
    27b8:	54 96       	adiw	r26, 0x14	; 20
    27ba:	8d 91       	ld	r24, X+
    27bc:	9c 91       	ld	r25, X
    27be:	55 97       	sbiw	r26, 0x15	; 21
    27c0:	a0 e0       	ldi	r26, 0x00	; 0
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	5c 01       	movw	r10, r24
    27c6:	99 24       	eor	r9, r9
    27c8:	88 24       	eor	r8, r8
    27ca:	f9 01       	movw	r30, r18
    27cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    27ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    27d0:	a0 e0       	ldi	r26, 0x00	; 0
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	88 2a       	or	r8, r24
    27d6:	99 2a       	or	r9, r25
    27d8:	aa 2a       	or	r10, r26
    27da:	bb 2a       	or	r11, r27

	fileSize = dir->fileSize;
    27dc:	d9 01       	movw	r26, r18
    27de:	5c 96       	adiw	r26, 0x1c	; 28
    27e0:	8d 91       	ld	r24, X+
    27e2:	9d 91       	ld	r25, X+
    27e4:	0d 90       	ld	r0, X+
    27e6:	bc 91       	ld	r27, X
    27e8:	a0 2d       	mov	r26, r0
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	ab 83       	std	Y+3, r26	; 0x03
    27f0:	bc 83       	std	Y+4, r27	; 0x04
	VS1053_SKIP_PLAY=false;
    27f2:	10 92 fe 05 	sts	0x05FE, r1
    27f6:	1d 82       	std	Y+5, r1	; 0x05
    27f8:	1e 82       	std	Y+6, r1	; 0x06
    27fa:	1f 82       	std	Y+7, r1	; 0x07
    27fc:	18 86       	std	Y+8, r1	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
	return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    27fe:	20 91 d5 05 	lds	r18, 0x05D5
    2802:	30 91 d6 05 	lds	r19, 0x05D6
    2806:	e0 90 9b 03 	lds	r14, 0x039B
    280a:	f0 90 9c 03 	lds	r15, 0x039C
    280e:	00 91 9d 03 	lds	r16, 0x039D
    2812:	10 91 9e 03 	lds	r17, 0x039E
    2816:	c5 01       	movw	r24, r10
    2818:	b4 01       	movw	r22, r8
    281a:	62 50       	subi	r22, 0x02	; 2
    281c:	70 40       	sbci	r23, 0x00	; 0
    281e:	80 40       	sbci	r24, 0x00	; 0
    2820:	90 40       	sbci	r25, 0x00	; 0
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	0e 94 b6 19 	call	0x336c	; 0x336c <__mulsi3>
    282a:	2b 01       	movw	r4, r22
    282c:	3c 01       	movw	r6, r24
    282e:	4e 0c       	add	r4, r14
    2830:	5f 1c       	adc	r5, r15
    2832:	60 1e       	adc	r6, r16
    2834:	71 1e       	adc	r7, r17
    2836:	33 24       	eor	r3, r3
    2838:	6f c0       	rjmp	.+222    	; 0x2918 <PlayMP3file+0x1b8>
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);
    283a:	c3 01       	movw	r24, r6
    283c:	b2 01       	movw	r22, r4
    283e:	63 0d       	add	r22, r3
    2840:	71 1d       	adc	r23, r1
    2842:	81 1d       	adc	r24, r1
    2844:	91 1d       	adc	r25, r1
    2846:	0e 94 49 07 	call	0xe92	; 0xe92 <SD_readSingleBlock>
    284a:	cd 80       	ldd	r12, Y+5	; 0x05
    284c:	de 80       	ldd	r13, Y+6	; 0x06
    284e:	ef 80       	ldd	r14, Y+7	; 0x07
    2850:	f8 84       	ldd	r15, Y+8	; 0x08
    2852:	22 24       	eor	r2, r2


			for(k=0; k<512; k++)
    2854:	d7 01       	movw	r26, r14
    2856:	c6 01       	movw	r24, r12
    2858:	80 50       	subi	r24, 0x00	; 0
    285a:	9e 4f       	sbci	r25, 0xFE	; 254
    285c:	af 4f       	sbci	r26, 0xFF	; 255
    285e:	bf 4f       	sbci	r27, 0xFF	; 255
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    2860:	29 81       	ldd	r18, Y+1	; 0x01
    2862:	3a 81       	ldd	r19, Y+2	; 0x02
    2864:	4b 81       	ldd	r20, Y+3	; 0x03
    2866:	5c 81       	ldd	r21, Y+4	; 0x04
    2868:	c2 16       	cp	r12, r18
    286a:	d3 06       	cpc	r13, r19
    286c:	e4 06       	cpc	r14, r20
    286e:	f5 06       	cpc	r15, r21
    2870:	10 f0       	brcs	.+4      	; 0x2876 <PlayMP3file+0x116>
    2872:	22 24       	eor	r2, r2
    2874:	23 94       	inc	r2
    2876:	08 94       	sec
    2878:	c1 1c       	adc	r12, r1
    287a:	d1 1c       	adc	r13, r1
    287c:	e1 1c       	adc	r14, r1
    287e:	f1 1c       	adc	r15, r1
		for(j=0; j<sectorPerCluster; j++)
		{
			SD_readSingleBlock(firstSector + j);


			for(k=0; k<512; k++)
    2880:	c8 16       	cp	r12, r24
    2882:	d9 06       	cpc	r13, r25
    2884:	ea 06       	cpc	r14, r26
    2886:	fb 06       	cpc	r15, r27
    2888:	59 f7       	brne	.-42     	; 0x2860 <PlayMP3file+0x100>
    288a:	e0 e0       	ldi	r30, 0x00	; 0
    288c:	f0 e0       	ldi	r31, 0x00	; 0
			}
			//After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
			iAudioByteCnt=0;
			while(iAudioByteCnt<k)
			{
				if(VS1053_SKIP_PLAY)
    288e:	80 91 fe 05 	lds	r24, 0x05FE
    2892:	88 23       	and	r24, r24
    2894:	29 f0       	breq	.+10     	; 0x28a0 <PlayMP3file+0x140>
				{
					VS1053_SKIP_PLAY=false;
    2896:	10 92 fe 05 	sts	0x05FE, r1
					VS1053_SoftwareReset();
    289a:	0e 94 25 05 	call	0xa4a	; 0xa4a <VS1053_SoftwareReset>
    289e:	5b c0       	rjmp	.+182    	; 0x2956 <PlayMP3file+0x1f6>
					return 0;//playing stopped by user
				}
				if((PINB & (1<<MP3_DREQ)))
    28a0:	1b 99       	sbic	0x03, 3	; 3
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <PlayMP3file+0x148>
    28a4:	8f 01       	movw	r16, r30
    28a6:	18 c0       	rjmp	.+48     	; 0x28d8 <PlayMP3file+0x178>
    28a8:	8f 01       	movw	r16, r30
				{
					for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    28aa:	af 01       	movw	r20, r30
    28ac:	40 5e       	subi	r20, 0xE0	; 224
    28ae:	5f 4f       	sbci	r21, 0xFF	; 255
    28b0:	5a 87       	std	Y+10, r21	; 0x0a
    28b2:	49 87       	std	Y+9, r20	; 0x09
					{
						VS1053_WriteData(buffer[iAudioByteCnt]);
    28b4:	f8 01       	movw	r30, r16
    28b6:	ec 52       	subi	r30, 0x2C	; 44
    28b8:	fc 4f       	sbci	r31, 0xFC	; 252
    28ba:	80 81       	ld	r24, Z
    28bc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <VS1053_WriteData>
						if(iAudioByteCnt++==k)return 0;		
    28c0:	52 e0       	ldi	r21, 0x02	; 2
    28c2:	00 30       	cpi	r16, 0x00	; 0
    28c4:	15 07       	cpc	r17, r21
    28c6:	09 f4       	brne	.+2      	; 0x28ca <PlayMP3file+0x16a>
    28c8:	46 c0       	rjmp	.+140    	; 0x2956 <PlayMP3file+0x1f6>
    28ca:	0f 5f       	subi	r16, 0xFF	; 255
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
					VS1053_SoftwareReset();
					return 0;//playing stopped by user
				}
				if((PINB & (1<<MP3_DREQ)))
				{
					for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	08 17       	cp	r16, r24
    28d4:	19 07       	cpc	r17, r25
    28d6:	71 f7       	brne	.-36     	; 0x28b4 <PlayMP3file+0x154>
						VS1053_WriteData(buffer[iAudioByteCnt]);
						if(iAudioByteCnt++==k)return 0;		
					}	
				}
				//After playing a 32 bytes of data, check the user inputs
				if(USART_Keypad_DATA_RDY)
    28d8:	80 91 8d 03 	lds	r24, 0x038D
    28dc:	88 23       	and	r24, r24
    28de:	11 f0       	breq	.+4      	; 0x28e4 <PlayMP3file+0x184>
				{
					USART_Keypad_ReceiveAction();
    28e0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <USART_Keypad_ReceiveAction>
				}
				if(USART_PC_DATA_RDY)
    28e4:	80 91 ff 05 	lds	r24, 0x05FF
    28e8:	88 23       	and	r24, r24
    28ea:	11 f0       	breq	.+4      	; 0x28f0 <PlayMP3file+0x190>
				{
					USART_PC_ReceiveAction();
    28ec:	0e 94 80 03 	call	0x700	; 0x700 <USART_PC_ReceiveAction>
				}		
				if(USART_UI_Message_ready) //If a message ready from the user interface, process it
    28f0:	80 91 d3 03 	lds	r24, 0x03D3
    28f4:	88 23       	and	r24, r24
    28f6:	19 f0       	breq	.+6      	; 0x28fe <PlayMP3file+0x19e>
				{
					UI_parse_message(true);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <UI_parse_message>
			{
				if ((byteCounter++) >= fileSize ) bEndOfFile=true;
			}
			//After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
			iAudioByteCnt=0;
			while(iAudioByteCnt<k)
    28fe:	92 e0       	ldi	r25, 0x02	; 2
    2900:	00 30       	cpi	r16, 0x00	; 0
    2902:	19 07       	cpc	r17, r25
    2904:	10 f4       	brcc	.+4      	; 0x290a <PlayMP3file+0x1aa>
    2906:	f8 01       	movw	r30, r16
    2908:	c2 cf       	rjmp	.-124    	; 0x288e <PlayMP3file+0x12e>
				if(USART_UI_Message_ready) //If a message ready from the user interface, process it
				{
					UI_parse_message(true);
				}
			}
			if(bEndOfFile)
    290a:	22 20       	and	r2, r2
    290c:	21 f5       	brne	.+72     	; 0x2956 <PlayMP3file+0x1f6>
	VS1053_SKIP_PLAY=false;
	while(1)
	{
		firstSector = getFirstSector (cluster);

		for(j=0; j<sectorPerCluster; j++)
    290e:	33 94       	inc	r3
    2910:	cd 82       	std	Y+5, r12	; 0x05
    2912:	de 82       	std	Y+6, r13	; 0x06
    2914:	ef 82       	std	Y+7, r14	; 0x07
    2916:	f8 86       	std	Y+8, r15	; 0x08
    2918:	20 91 d5 05 	lds	r18, 0x05D5
    291c:	30 91 d6 05 	lds	r19, 0x05D6
    2920:	83 2d       	mov	r24, r3
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	82 17       	cp	r24, r18
    2926:	93 07       	cpc	r25, r19
    2928:	08 f4       	brcc	.+2      	; 0x292c <PlayMP3file+0x1cc>
    292a:	87 cf       	rjmp	.-242    	; 0x283a <PlayMP3file+0xda>
				return 0;
			}

		}

		cluster = getSetNextCluster (cluster, GET, 0);
    292c:	c5 01       	movw	r24, r10
    292e:	b4 01       	movw	r22, r8
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	00 e0       	ldi	r16, 0x00	; 0
    2934:	10 e0       	ldi	r17, 0x00	; 0
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <getSetNextCluster>
    293e:	4b 01       	movw	r8, r22
    2940:	5c 01       	movw	r10, r24
		if(cluster == 0) 
    2942:	61 15       	cp	r22, r1
    2944:	71 05       	cpc	r23, r1
    2946:	81 05       	cpc	r24, r1
    2948:	91 05       	cpc	r25, r1
    294a:	09 f0       	breq	.+2      	; 0x294e <PlayMP3file+0x1ee>
    294c:	58 cf       	rjmp	.-336    	; 0x27fe <PlayMP3file+0x9e>
		{
			USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); 
    294e:	86 e6       	ldi	r24, 0x66	; 102
    2950:	92 e0       	ldi	r25, 0x02	; 2
    2952:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			return 0;
    2956:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
    2958:	2a 96       	adiw	r28, 0x0a	; 10
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	cf 90       	pop	r12
    2974:	bf 90       	pop	r11
    2976:	af 90       	pop	r10
    2978:	9f 90       	pop	r9
    297a:	8f 90       	pop	r8
    297c:	7f 90       	pop	r7
    297e:	6f 90       	pop	r6
    2980:	5f 90       	pop	r5
    2982:	4f 90       	pop	r4
    2984:	3f 90       	pop	r3
    2986:	2f 90       	pop	r2
    2988:	08 95       	ret

0000298a <UI_calculate_CRC>:
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	fc 01       	movw	r30, r24
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
    2994:	b2 81       	ldd	r27, Z+2	; 0x02
	uint16_t chksum=0;
	pstrMsg+=3;
    2996:	8c 01       	movw	r16, r24
    2998:	0d 5f       	subi	r16, 0xFD	; 253
    299a:	1f 4f       	sbci	r17, 0xFF	; 255
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	70 e0       	ldi	r23, 0x00	; 0
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    29a0:	b5 50       	subi	r27, 0x05	; 5
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
	uint16_t chksum=0;
	pstrMsg+=3;
	while(msglen > 1)
    29a2:	ab 2f       	mov	r26, r27
    29a4:	a6 95       	lsr	r26
    29a6:	ca 2f       	mov	r28, r26
    29a8:	d0 e0       	ldi	r29, 0x00	; 0
    29aa:	ae 01       	movw	r20, r28
    29ac:	4f 5f       	subi	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	44 0f       	add	r20, r20
    29b2:	55 1f       	adc	r21, r21
    29b4:	4e 0f       	add	r20, r30
    29b6:	5f 1f       	adc	r21, r31
    29b8:	08 c0       	rjmp	.+16     	; 0x29ca <UI_calculate_CRC+0x40>
	{
		chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    29ba:	31 81       	ldd	r19, Z+1	; 0x01
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	82 2b       	or	r24, r18
    29c4:	93 2b       	or	r25, r19
    29c6:	68 0f       	add	r22, r24
    29c8:	79 1f       	adc	r23, r25
    29ca:	32 96       	adiw	r30, 0x02	; 2
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
	unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
	uint16_t chksum=0;
	pstrMsg+=3;
	while(msglen > 1)
    29cc:	e4 17       	cp	r30, r20
    29ce:	f5 07       	cpc	r31, r21
    29d0:	a1 f7       	brne	.-24     	; 0x29ba <UI_calculate_CRC+0x30>
	TX_NEWLINE_PC;
	return true; 
}

uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    29d2:	aa 0f       	add	r26, r26
    29d4:	fe 01       	movw	r30, r28
    29d6:	ee 0f       	add	r30, r30
    29d8:	ff 1f       	adc	r31, r31
    29da:	e0 0f       	add	r30, r16
    29dc:	f1 1f       	adc	r31, r17
		chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
		chksum = chksum & 0xffff;
		msglen-=2;
		pstrMsg+=2;
	}
	if(msglen>0) //If the packet size is odd numbered
    29de:	ba 17       	cp	r27, r26
    29e0:	21 f0       	breq	.+8      	; 0x29ea <UI_calculate_CRC+0x60>
	{
		chksum = chksum^ (int)*(pstrMsg++);
    29e2:	80 81       	ld	r24, Z
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	68 27       	eor	r22, r24
    29e8:	79 27       	eor	r23, r25
	}
	return(chksum);
}
    29ea:	cb 01       	movw	r24, r22
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <UI_buildMessage>:

bool UI_buildMessage(char MessageType)
{
	
	return true;
}
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	08 95       	ret

000029fa <UI_ResetTheCurrentMode>:
	}
}

void UI_ResetTheCurrentMode(void)
{
	if(UI_MODE_SELECTED){
    29fa:	80 91 aa 03 	lds	r24, 0x03AA
    29fe:	88 23       	and	r24, r24
    2a00:	81 f0       	breq	.+32     	; 0x2a22 <UI_ResetTheCurrentMode+0x28>
		switch(UI_Current_Mode)
    2a02:	80 91 d4 05 	lds	r24, 0x05D4
    2a06:	82 30       	cpi	r24, 0x02	; 2
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <UI_ResetTheCurrentMode+0x1e>
    2a0a:	83 30       	cpi	r24, 0x03	; 3
    2a0c:	41 f0       	breq	.+16     	; 0x2a1e <UI_ResetTheCurrentMode+0x24>
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	41 f4       	brne	.+16     	; 0x2a22 <UI_ResetTheCurrentMode+0x28>
		{
			case 1:
				MD1_Reset();
    2a12:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <MD1_Reset>
    2a16:	08 95       	ret
				break;
			case 2:
				MD2_Reset();
    2a18:	0e 94 2e 18 	call	0x305c	; 0x305c <MD2_Reset>
    2a1c:	08 95       	ret
				break;
			case 3:
				MD3_Reset();
    2a1e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <MD3_Reset>
    2a22:	08 95       	ret

00002a24 <UI_RunMainOfCurrentMode>:
 * @brief   Decides which of the three UI modes to go into based on UI_Current_Mode
 * @return  Void
 */
void UI_RunMainOfCurrentMode(void)
{
	if(UI_MODE_SELECTED){
    2a24:	80 91 aa 03 	lds	r24, 0x03AA
    2a28:	88 23       	and	r24, r24
    2a2a:	81 f0       	breq	.+32     	; 0x2a4c <UI_RunMainOfCurrentMode+0x28>
		switch(UI_Current_Mode)
    2a2c:	80 91 d4 05 	lds	r24, 0x05D4
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	39 f0       	breq	.+14     	; 0x2a42 <UI_RunMainOfCurrentMode+0x1e>
    2a34:	83 30       	cpi	r24, 0x03	; 3
    2a36:	41 f0       	breq	.+16     	; 0x2a48 <UI_RunMainOfCurrentMode+0x24>
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	41 f4       	brne	.+16     	; 0x2a4c <UI_RunMainOfCurrentMode+0x28>
		{
			case 1:
				MD1_Main();
    2a3c:	0e 94 11 18 	call	0x3022	; 0x3022 <MD1_Main>
    2a40:	08 95       	ret
				break;
			case 2:
				MD2_Main();
    2a42:	0e 94 db 18 	call	0x31b6	; 0x31b6 <MD2_Main>
    2a46:	08 95       	ret
				break;
			case 3:
				MD3_Main();
    2a48:	0e 94 37 19 	call	0x326e	; 0x326e <MD3_Main>
    2a4c:	08 95       	ret

00002a4e <UI_InputCellToCurrentMode>:
	}
}

void UI_InputCellToCurrentMode(char thisCell)
{
	switch(UI_Current_Mode)
    2a4e:	90 91 d4 05 	lds	r25, 0x05D4
    2a52:	92 30       	cpi	r25, 0x02	; 2
    2a54:	39 f0       	breq	.+14     	; 0x2a64 <UI_InputCellToCurrentMode+0x16>
    2a56:	93 30       	cpi	r25, 0x03	; 3
    2a58:	41 f0       	breq	.+16     	; 0x2a6a <UI_InputCellToCurrentMode+0x1c>
    2a5a:	91 30       	cpi	r25, 0x01	; 1
    2a5c:	41 f4       	brne	.+16     	; 0x2a6e <UI_InputCellToCurrentMode+0x20>
	{
		case 1:
			MD1_InputCell(thisCell);
    2a5e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <MD1_InputCell>
    2a62:	08 95       	ret
			break;
		case 2:
			MD2_InputCell(thisCell);
    2a64:	0e 94 40 18 	call	0x3080	; 0x3080 <MD2_InputCell>
    2a68:	08 95       	ret
			break;
		case 3:
			MD3_InputCell(thisCell);
    2a6a:	0e 94 0e 19 	call	0x321c	; 0x321c <MD3_InputCell>
    2a6e:	08 95       	ret

00002a70 <UI_InputDotToCurrentMode>:
	}
}

void UI_InputDotToCurrentMode(char thisDot)
{
	switch(UI_Current_Mode)
    2a70:	90 91 d4 05 	lds	r25, 0x05D4
    2a74:	92 30       	cpi	r25, 0x02	; 2
    2a76:	39 f0       	breq	.+14     	; 0x2a86 <UI_InputDotToCurrentMode+0x16>
    2a78:	93 30       	cpi	r25, 0x03	; 3
    2a7a:	41 f0       	breq	.+16     	; 0x2a8c <UI_InputDotToCurrentMode+0x1c>
    2a7c:	91 30       	cpi	r25, 0x01	; 1
    2a7e:	41 f4       	brne	.+16     	; 0x2a90 <UI_InputDotToCurrentMode+0x20>
	{
		case 1:
			MD1_InputDot(thisDot);
    2a80:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <MD1_InputDot>
    2a84:	08 95       	ret
			break;
		case 2:
			MD2_InputDot(thisDot);
    2a86:	0e 94 37 18 	call	0x306e	; 0x306e <MD2_InputDot>
    2a8a:	08 95       	ret
			break;
		case 3:
			MD3_InputDot(thisDot);
    2a8c:	0e 94 05 19 	call	0x320a	; 0x320a <MD3_InputDot>
    2a90:	08 95       	ret

00002a92 <UI_CallModeNoAnswer>:
	}
}

void UI_CallModeNoAnswer(void)
{
	switch(UI_Current_Mode)
    2a92:	80 91 d4 05 	lds	r24, 0x05D4
    2a96:	82 30       	cpi	r24, 0x02	; 2
    2a98:	39 f0       	breq	.+14     	; 0x2aa8 <UI_CallModeNoAnswer+0x16>
    2a9a:	83 30       	cpi	r24, 0x03	; 3
    2a9c:	41 f0       	breq	.+16     	; 0x2aae <UI_CallModeNoAnswer+0x1c>
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	41 f4       	brne	.+16     	; 0x2ab2 <UI_CallModeNoAnswer+0x20>
	{
		case 1:
			MD1_CallModeNoAnswer();
    2aa2:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <MD1_CallModeNoAnswer>
    2aa6:	08 95       	ret
			break;
		case 2:
			MD2_CallModeNoAnswer();
    2aa8:	0e 94 36 18 	call	0x306c	; 0x306c <MD2_CallModeNoAnswer>
    2aac:	08 95       	ret
			break;
		case 3:
			MD3_CallModeNoAnswer();
    2aae:	0e 94 04 19 	call	0x3208	; 0x3208 <MD3_CallModeNoAnswer>
    2ab2:	08 95       	ret

00002ab4 <UI_CallModeYesAnswer>:
	}
}

void UI_CallModeYesAnswer(void)
{
	switch(UI_Current_Mode)
    2ab4:	80 91 d4 05 	lds	r24, 0x05D4
    2ab8:	82 30       	cpi	r24, 0x02	; 2
    2aba:	39 f0       	breq	.+14     	; 0x2aca <UI_CallModeYesAnswer+0x16>
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	41 f0       	breq	.+16     	; 0x2ad0 <UI_CallModeYesAnswer+0x1c>
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	41 f4       	brne	.+16     	; 0x2ad4 <UI_CallModeYesAnswer+0x20>
	{
		case 1:
			MD1_CallModeYesAnswer();
    2ac4:	0e 94 dd 17 	call	0x2fba	; 0x2fba <MD1_CallModeYesAnswer>
    2ac8:	08 95       	ret
			break;
		case 2:
			MD2_CallModeYesAnswer();
    2aca:	0e 94 35 18 	call	0x306a	; 0x306a <MD2_CallModeYesAnswer>
    2ace:	08 95       	ret
			break;
		case 3:
			MD3_CallModeYesAnswer();
    2ad0:	0e 94 03 19 	call	0x3206	; 0x3206 <MD3_CallModeYesAnswer>
    2ad4:	08 95       	ret

00002ad6 <UI_Play_Intro_Currentmode>:
	}
}

void UI_Play_Intro_Currentmode(void)
{
	switch(UI_Current_Mode)
    2ad6:	80 91 d4 05 	lds	r24, 0x05D4
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	39 f0       	breq	.+14     	; 0x2aec <UI_Play_Intro_Currentmode+0x16>
    2ade:	83 30       	cpi	r24, 0x03	; 3
    2ae0:	51 f0       	breq	.+20     	; 0x2af6 <UI_Play_Intro_Currentmode+0x20>
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	61 f4       	brne	.+24     	; 0x2afe <UI_Play_Intro_Currentmode+0x28>
	{
		case 1:
			RequestToPlayMP3file("MD1.MP3");
    2ae6:	86 e5       	ldi	r24, 0x56	; 86
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <UI_Play_Intro_Currentmode+0x1a>
			break;
		case 2:
			RequestToPlayMP3file("MD2.MP3");
    2aec:	8e e5       	ldi	r24, 0x5E	; 94
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    2af4:	08 95       	ret
			break;
		case 3:
			RequestToPlayMP3file("MD3.MP3");
    2af6:	86 e6       	ldi	r24, 0x66	; 102
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    2afe:	08 95       	ret

00002b00 <UI_ControlKeyPressed>:
	USART_UI_Message_ready=false;
	return true;
}

void UI_ControlKeyPressed(void)
{
    2b00:	1f 93       	push	r17
	switch(USART_UI_ReceivedPacket[5])
    2b02:	10 91 dc 05 	lds	r17, 0x05DC
    2b06:	13 30       	cpi	r17, 0x03	; 3
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <UI_ControlKeyPressed+0xc>
    2b0a:	4a c0       	rjmp	.+148    	; 0x2ba0 <UI_ControlKeyPressed+0xa0>
    2b0c:	14 30       	cpi	r17, 0x04	; 4
    2b0e:	30 f4       	brcc	.+12     	; 0x2b1c <UI_ControlKeyPressed+0x1c>
    2b10:	11 30       	cpi	r17, 0x01	; 1
    2b12:	71 f0       	breq	.+28     	; 0x2b30 <UI_ControlKeyPressed+0x30>
    2b14:	12 30       	cpi	r17, 0x02	; 2
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <UI_ControlKeyPressed+0x1a>
    2b18:	ab c0       	rjmp	.+342    	; 0x2c70 <UI_ControlKeyPressed+0x170>
    2b1a:	25 c0       	rjmp	.+74     	; 0x2b66 <UI_ControlKeyPressed+0x66>
    2b1c:	15 30       	cpi	r17, 0x05	; 5
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <UI_ControlKeyPressed+0x22>
    2b20:	8e c0       	rjmp	.+284    	; 0x2c3e <UI_ControlKeyPressed+0x13e>
    2b22:	15 30       	cpi	r17, 0x05	; 5
    2b24:	08 f4       	brcc	.+2      	; 0x2b28 <UI_ControlKeyPressed+0x28>
    2b26:	5a c0       	rjmp	.+180    	; 0x2bdc <UI_ControlKeyPressed+0xdc>
    2b28:	16 30       	cpi	r17, 0x06	; 6
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <UI_ControlKeyPressed+0x2e>
    2b2c:	a1 c0       	rjmp	.+322    	; 0x2c70 <UI_ControlKeyPressed+0x170>
    2b2e:	94 c0       	rjmp	.+296    	; 0x2c58 <UI_ControlKeyPressed+0x158>
	{
		case UI_CMD_NONE:
			
			break;
		case UI_CMD_ENT1: //Enter into a mode
			USART_transmitStringToPCFromFlash(PSTR("Enter 1 pressed"));
    2b30:	8c e5       	ldi	r24, 0x5C	; 92
    2b32:	93 e0       	ldi	r25, 0x03	; 3
    2b34:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;	
    2b38:	8d e0       	ldi	r24, 0x0D	; 13
    2b3a:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2b3e:	8a e0       	ldi	r24, 0x0A	; 10
    2b40:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED) //Then this command is to select the mode
    2b44:	80 91 aa 03 	lds	r24, 0x03AA
    2b48:	88 23       	and	r24, r24
    2b4a:	51 f4       	brne	.+20     	; 0x2b60 <UI_ControlKeyPressed+0x60>
			{
				if(UI_Selected_Mode>0)
    2b4c:	80 91 d2 03 	lds	r24, 0x03D2
    2b50:	88 23       	and	r24, r24
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <UI_ControlKeyPressed+0x56>
    2b54:	8d c0       	rjmp	.+282    	; 0x2c70 <UI_ControlKeyPressed+0x170>
				{
					UI_MODE_SELECTED=true;
    2b56:	10 93 aa 03 	sts	0x03AA, r17
					UI_ResetTheCurrentMode();
    2b5a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UI_ResetTheCurrentMode>
    2b5e:	88 c0       	rjmp	.+272    	; 0x2c70 <UI_ControlKeyPressed+0x170>
					//RequestToPlayMP3file("ERR1.MP3");
				}
			}
			else //Then this the "YES" command in the mode, so call the function in the mode
			{
				UI_CallModeYesAnswer();
    2b60:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <UI_CallModeYesAnswer>
    2b64:	85 c0       	rjmp	.+266    	; 0x2c70 <UI_ControlKeyPressed+0x170>
			}
			break;
		case UI_CMD_ENT2: //Exit from a mode
			USART_transmitStringToPCFromFlash(PSTR("Enter 2 pressed"));
    2b66:	8c e4       	ldi	r24, 0x4C	; 76
    2b68:	93 e0       	ldi	r25, 0x03	; 3
    2b6a:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2b6e:	8d e0       	ldi	r24, 0x0D	; 13
    2b70:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2b74:	8a e0       	ldi	r24, 0x0A	; 10
    2b76:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			if(UI_MODE_SELECTED) //This might be an exit from mode command or "NO" command in the mode
    2b7a:	80 91 aa 03 	lds	r24, 0x03AA
    2b7e:	88 23       	and	r24, r24
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <UI_ControlKeyPressed+0x84>
    2b82:	76 c0       	rjmp	.+236    	; 0x2c70 <UI_ControlKeyPressed+0x170>
			{
				if(USART_UI_ReceivedPacket[6]==69) //If the next byte is 'E', this is exit command (when the user pressed E2 for more than 5 secs)
    2b84:	80 91 dd 05 	lds	r24, 0x05DD
    2b88:	85 34       	cpi	r24, 0x45	; 69
    2b8a:	39 f4       	brne	.+14     	; 0x2b9a <UI_ControlKeyPressed+0x9a>
				{
					UI_MODE_SELECTED=false;
    2b8c:	10 92 aa 03 	sts	0x03AA, r1
					RequestToPlayMP3file("MM.MP3");
    2b90:	8e e6       	ldi	r24, 0x6E	; 110
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    2b98:	6b c0       	rjmp	.+214    	; 0x2c70 <UI_ControlKeyPressed+0x170>
				}
				else //Then this a "NO" answer, call the mode function for this
				{
					UI_CallModeNoAnswer();
    2b9a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <UI_CallModeNoAnswer>
    2b9e:	68 c0       	rjmp	.+208    	; 0x2c70 <UI_ControlKeyPressed+0x170>
				}
			}
			//This has no effect when no mode is selected
			break;
		case UI_CMD_MFOR:
			USART_transmitStringToPCFromFlash(PSTR("Mode 1 pressed"));
    2ba0:	8d e3       	ldi	r24, 0x3D	; 61
    2ba2:	93 e0       	ldi	r25, 0x03	; 3
    2ba4:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2ba8:	8d e0       	ldi	r24, 0x0D	; 13
    2baa:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2bae:	8a e0       	ldi	r24, 0x0A	; 10
    2bb0:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED)
    2bb4:	80 91 aa 03 	lds	r24, 0x03AA
    2bb8:	88 23       	and	r24, r24
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <UI_ControlKeyPressed+0xbe>
    2bbc:	59 c0       	rjmp	.+178    	; 0x2c70 <UI_ControlKeyPressed+0x170>
			{
				UI_Selected_Mode++;
    2bbe:	80 91 d2 03 	lds	r24, 0x03D2
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	80 93 d2 03 	sts	0x03D2, r24
				if(UI_Selected_Mode>Number_of_modes)
    2bc8:	90 91 d2 03 	lds	r25, 0x03D2
    2bcc:	80 91 cd 03 	lds	r24, 0x03CD
    2bd0:	89 17       	cp	r24, r25
    2bd2:	38 f5       	brcc	.+78     	; 0x2c22 <UI_ControlKeyPressed+0x122>
				{
					UI_Selected_Mode--;
    2bd4:	80 91 d2 03 	lds	r24, 0x03D2
    2bd8:	81 50       	subi	r24, 0x01	; 1
    2bda:	18 c0       	rjmp	.+48     	; 0x2c0c <UI_ControlKeyPressed+0x10c>
					UI_Play_Intro_Currentmode();
				}
			}
			break;
		case UI_CMD_MREV:
			USART_transmitStringToPCFromFlash(PSTR("Mode 2 pressed"));
    2bdc:	8e e2       	ldi	r24, 0x2E	; 46
    2bde:	93 e0       	ldi	r25, 0x03	; 3
    2be0:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2be4:	8d e0       	ldi	r24, 0x0D	; 13
    2be6:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2bea:	8a e0       	ldi	r24, 0x0A	; 10
    2bec:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			if(!UI_MODE_SELECTED)
    2bf0:	80 91 aa 03 	lds	r24, 0x03AA
    2bf4:	88 23       	and	r24, r24
    2bf6:	e1 f5       	brne	.+120    	; 0x2c70 <UI_ControlKeyPressed+0x170>
			{
				UI_Selected_Mode--;
    2bf8:	80 91 d2 03 	lds	r24, 0x03D2
    2bfc:	81 50       	subi	r24, 0x01	; 1
    2bfe:	80 93 d2 03 	sts	0x03D2, r24
				if(UI_Selected_Mode<1)
    2c02:	80 91 d2 03 	lds	r24, 0x03D2
    2c06:	88 23       	and	r24, r24
    2c08:	61 f4       	brne	.+24     	; 0x2c22 <UI_ControlKeyPressed+0x122>
				{
					UI_Selected_Mode=1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 93 d2 03 	sts	0x03D2, r24
					UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2c10:	e0 91 d2 03 	lds	r30, 0x03D2
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	e2 54       	subi	r30, 0x42	; 66
    2c18:	fc 4f       	sbci	r31, 0xFC	; 252
    2c1a:	80 81       	ld	r24, Z
    2c1c:	80 93 d4 05 	sts	0x05D4, r24
    2c20:	27 c0       	rjmp	.+78     	; 0x2c70 <UI_ControlKeyPressed+0x170>
				}
				else
				{
					UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2c22:	e0 91 d2 03 	lds	r30, 0x03D2
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	e2 54       	subi	r30, 0x42	; 66
    2c2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 93 d4 05 	sts	0x05D4, r24
					VS1053_SKIP_PLAY=true;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	80 93 fe 05 	sts	0x05FE, r24
					UI_Play_Intro_Currentmode();
    2c38:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <UI_Play_Intro_Currentmode>
    2c3c:	19 c0       	rjmp	.+50     	; 0x2c70 <UI_ControlKeyPressed+0x170>
				}	
			}		
			break;
		case UI_CMD_VOLU:
			USART_transmitStringToPCFromFlash(PSTR("Vol UP pressed"));
    2c3e:	8f e1       	ldi	r24, 0x1F	; 31
    2c40:	93 e0       	ldi	r25, 0x03	; 3
    2c42:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2c46:	8d e0       	ldi	r24, 0x0D	; 13
    2c48:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2c4c:	8a e0       	ldi	r24, 0x0A	; 10
    2c4e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			VS1053_IncreaseVol();
    2c52:	0e 94 ed 04 	call	0x9da	; 0x9da <VS1053_IncreaseVol>
    2c56:	0c c0       	rjmp	.+24     	; 0x2c70 <UI_ControlKeyPressed+0x170>
			break;
		case UI_CMD_VOLD:
			USART_transmitStringToPCFromFlash(PSTR("Vol DOWN pressed"));
    2c58:	8e e0       	ldi	r24, 0x0E	; 14
    2c5a:	93 e0       	ldi	r25, 0x03	; 3
    2c5c:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;
    2c60:	8d e0       	ldi	r24, 0x0D	; 13
    2c62:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2c66:	8a e0       	ldi	r24, 0x0A	; 10
    2c68:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
			VS1053_DecreaseVol();
    2c6c:	0e 94 b5 04 	call	0x96a	; 0x96a <VS1053_DecreaseVol>
			break;
		default:
			
			break;
	}
}
    2c70:	1f 91       	pop	r17
    2c72:	08 95       	ret

00002c74 <UI_parse_message>:
 *         sends a message of recieval at the end. 
 * @param  IsPlaying -  bool    determines whether or not an MP3 Files is playing
 * @return  bool - returns true if succesfully parsed, understood, and used message
 */
bool UI_parse_message(bool IsPlaying)
{
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	2a 97       	sbiw	r28, 0x0a	; 10
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	18 2f       	mov	r17, r24
		UI string 	: [U][I][msglen][msg_number][msgtype][payload][CRC1][CRC2]
		msgtypes	: 
	*/
	//First things first, check the CRC

	unsigned char message_len=USART_UI_ReceivedPacket[2];
    2c8e:	00 91 d9 05 	lds	r16, 0x05D9

	unsigned char ADCmsg[10];
	//unsigned char message_payload[20];
//	unsigned char i=0;

	uint16_t chksum=UI_calculate_CRC(&USART_UI_ReceivedPacket);
    2c92:	87 ed       	ldi	r24, 0xD7	; 215
    2c94:	95 e0       	ldi	r25, 0x05	; 5
    2c96:	0e 94 c5 14 	call	0x298a	; 0x298a <UI_calculate_CRC>
	if ( chksum == (USART_UI_ReceivedPacket[message_len-2] << 8 | USART_UI_ReceivedPacket[message_len-1]))
    2c9a:	a0 2f       	mov	r26, r16
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	fd 01       	movw	r30, r26
    2ca0:	eb 52       	subi	r30, 0x2B	; 43
    2ca2:	fa 4f       	sbci	r31, 0xFA	; 250
    2ca4:	60 81       	ld	r22, Z
    2ca6:	aa 52       	subi	r26, 0x2A	; 42
    2ca8:	ba 4f       	sbci	r27, 0xFA	; 250
    2caa:	4c 91       	ld	r20, X
    2cac:	36 2f       	mov	r19, r22
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	24 2b       	or	r18, r20
    2cb4:	35 2b       	or	r19, r21
    2cb6:	82 17       	cp	r24, r18
    2cb8:	93 07       	cpc	r25, r19
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <UI_parse_message+0x4a>
    2cbc:	74 c0       	rjmp	.+232    	; 0x2da6 <UI_parse_message+0x132>
	{
		//If correct, store the message elements
		message_number=USART_UI_ReceivedPacket[3];
    2cbe:	80 91 da 05 	lds	r24, 0x05DA
		message_type=USART_UI_ReceivedPacket[4];
    2cc2:	80 91 db 05 	lds	r24, 0x05DB

		//process the message

		if(IsPlaying) //If a MP3 file is being played, only the commands are processed
    2cc6:	11 23       	and	r17, r17
    2cc8:	41 f0       	breq	.+16     	; 0x2cda <UI_parse_message+0x66>
		{
			if(message_type==68)
    2cca:	84 34       	cpi	r24, 0x44	; 68
    2ccc:	31 f4       	brne	.+12     	; 0x2cda <UI_parse_message+0x66>
			{
				UI_ControlKeyPressed();
    2cce:	0e 94 80 15 	call	0x2b00	; 0x2b00 <UI_ControlKeyPressed>
				USART_UI_Message_ready=true;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	80 93 d3 03 	sts	0x03D3, r24
    2cd8:	6d c0       	rjmp	.+218    	; 0x2db4 <UI_parse_message+0x140>
				return true;
			}
		}
		
		switch(message_type)
    2cda:	82 34       	cpi	r24, 0x42	; 66
    2cdc:	89 f0       	breq	.+34     	; 0x2d00 <UI_parse_message+0x8c>
    2cde:	83 34       	cpi	r24, 0x43	; 67
    2ce0:	20 f4       	brcc	.+8      	; 0x2cea <UI_parse_message+0x76>
    2ce2:	81 34       	cpi	r24, 0x41	; 65
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <UI_parse_message+0x74>
    2ce6:	63 c0       	rjmp	.+198    	; 0x2dae <UI_parse_message+0x13a>
    2ce8:	06 c0       	rjmp	.+12     	; 0x2cf6 <UI_parse_message+0x82>
    2cea:	84 34       	cpi	r24, 0x44	; 68
    2cec:	71 f0       	breq	.+28     	; 0x2d0a <UI_parse_message+0x96>
    2cee:	85 34       	cpi	r24, 0x45	; 69
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <UI_parse_message+0x80>
    2cf2:	5d c0       	rjmp	.+186    	; 0x2dae <UI_parse_message+0x13a>
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <UI_parse_message+0x9c>
		{
			case 65: 	//Braille dot
				//Only one character is being send to the current mode
				UI_InputDotToCurrentMode(USART_UI_ReceivedPacket[5]);
    2cf6:	80 91 dc 05 	lds	r24, 0x05DC
    2cfa:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UI_InputDotToCurrentMode>
    2cfe:	57 c0       	rjmp	.+174    	; 0x2dae <UI_parse_message+0x13a>
			case 66: 	//Braille cell
				/*
				Only one character is being send to the current mode. The cell number value is currently not used
				, if needed this information is available on USART_UI_ReceivedPacket[6]
				*/
				UI_InputCellToCurrentMode(USART_UI_ReceivedPacket[5]);
    2d00:	80 91 dc 05 	lds	r24, 0x05DC
    2d04:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <UI_InputCellToCurrentMode>
    2d08:	52 c0       	rjmp	.+164    	; 0x2dae <UI_parse_message+0x13a>
				break;
			case 67:	//Error message
				//When an error occured in the user input a message will be sent here
				break;
			case 68:	//User Command
				UI_ControlKeyPressed();
    2d0a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <UI_ControlKeyPressed>
    2d0e:	4f c0       	rjmp	.+158    	; 0x2dae <UI_parse_message+0x13a>
				break;
			case 69:	//Acknowledgement
				ADCmsg[0]=USART_UI_ReceivedPacket[5];
    2d10:	80 91 dc 05 	lds	r24, 0x05DC
    2d14:	89 83       	std	Y+1, r24	; 0x01
				ADCmsg[1]=USART_UI_ReceivedPacket[6];
    2d16:	80 91 dd 05 	lds	r24, 0x05DD
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
				ADCmsg[2]=USART_UI_ReceivedPacket[7];
    2d1c:	80 91 de 05 	lds	r24, 0x05DE
    2d20:	8b 83       	std	Y+3, r24	; 0x03
				USART_transmitStringToPCFromFlash(PSTR("Analog Input channel,MSB,LSB :"));
    2d22:	8c e6       	ldi	r24, 0x6C	; 108
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
				sprintf(ADCmsg, "%d,%d,%d", USART_UI_ReceivedPacket[5],USART_UI_ReceivedPacket[6],USART_UI_ReceivedPacket[7]); 
    2d2a:	20 91 dc 05 	lds	r18, 0x05DC
    2d2e:	30 91 dd 05 	lds	r19, 0x05DD
    2d32:	40 91 de 05 	lds	r20, 0x05DE
    2d36:	8d b7       	in	r24, 0x3d	; 61
    2d38:	9e b7       	in	r25, 0x3e	; 62
    2d3a:	0a 97       	sbiw	r24, 0x0a	; 10
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	9e bf       	out	0x3e, r25	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	8d bf       	out	0x3d, r24	; 61
    2d46:	ed b7       	in	r30, 0x3d	; 61
    2d48:	fe b7       	in	r31, 0x3e	; 62
    2d4a:	31 96       	adiw	r30, 0x01	; 1
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	0f 5f       	subi	r16, 0xFF	; 255
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	ad b7       	in	r26, 0x3d	; 61
    2d54:	be b7       	in	r27, 0x3e	; 62
    2d56:	12 96       	adiw	r26, 0x02	; 2
    2d58:	1c 93       	st	X, r17
    2d5a:	0e 93       	st	-X, r16
    2d5c:	11 97       	sbiw	r26, 0x01	; 1
    2d5e:	85 e7       	ldi	r24, 0x75	; 117
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	93 83       	std	Z+3, r25	; 0x03
    2d64:	82 83       	std	Z+2, r24	; 0x02
    2d66:	24 83       	std	Z+4, r18	; 0x04
    2d68:	15 82       	std	Z+5, r1	; 0x05
    2d6a:	36 83       	std	Z+6, r19	; 0x06
    2d6c:	17 82       	std	Z+7, r1	; 0x07
    2d6e:	40 87       	std	Z+8, r20	; 0x08
    2d70:	11 86       	std	Z+9, r1	; 0x09
    2d72:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
				USART_transmitStringToPC(&ADCmsg);
    2d76:	8d b7       	in	r24, 0x3d	; 61
    2d78:	9e b7       	in	r25, 0x3e	; 62
    2d7a:	0a 96       	adiw	r24, 0x0a	; 10
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	9e bf       	out	0x3e, r25	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	8d bf       	out	0x3d, r24	; 61
    2d86:	c8 01       	movw	r24, r16
    2d88:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
				TX_NEWLINE_PC;	
    2d8c:	8d e0       	ldi	r24, 0x0D	; 13
    2d8e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2d92:	8a e0       	ldi	r24, 0x0A	; 10
    2d94:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
				TX_NEWLINE_PC;				
    2d98:	8d e0       	ldi	r24, 0x0D	; 13
    2d9a:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2d9e:	8a e0       	ldi	r24, 0x0A	; 10
    2da0:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <UI_parse_message+0x13a>
		}
		//In the end: send the acknowledgement to the sender (with the message number, of course !!!)
	}
	else
	{
		USART_UI_Message_ready=false;
    2da6:	10 92 d3 03 	sts	0x03D3, r1
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	03 c0       	rjmp	.+6      	; 0x2db4 <UI_parse_message+0x140>
		return false;
	}
	USART_UI_Message_ready=false;
    2dae:	10 92 d3 03 	sts	0x03D3, r1
    2db2:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
    2db4:	2a 96       	adiw	r28, 0x0a	; 10
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	1f 91       	pop	r17
    2dc6:	0f 91       	pop	r16
    2dc8:	08 95       	ret

00002dca <UI_CheckModes>:
 *         what they are
 * @return bool  - return true on succesful completion of transmission, false on 
 *         failure
 */
bool UI_CheckModes(void)
{
    2dca:	af 92       	push	r10
    2dcc:	bf 92       	push	r11
    2dce:	df 92       	push	r13
    2dd0:	ef 92       	push	r14
    2dd2:	ff 92       	push	r15
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	c9 56       	subi	r28, 0x69	; 105
    2de2:	d0 40       	sbci	r29, 0x00	; 0
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
	unsigned char PCPrintContent[2];
	int i=0;
	int iMoN;
	bool bBoNFound;
	const char* ModesFile="MODES.DAT";
	Number_of_modes=0;
    2dee:	10 92 cd 03 	sts	0x03CD, r1
    2df2:	56 e0       	ldi	r21, 0x06	; 6
    2df4:	e5 2e       	mov	r14, r21
    2df6:	f1 2c       	mov	r15, r1
    2df8:	ec 0e       	add	r14, r28
    2dfa:	fd 1e       	adc	r15, r29
    2dfc:	f7 01       	movw	r30, r14
	for(i=0;i<100;i++)
    2dfe:	c7 01       	movw	r24, r14
    2e00:	1e 2d       	mov	r17, r14
    2e02:	09 2f       	mov	r16, r25
    2e04:	ce 01       	movw	r24, r28
    2e06:	86 59       	subi	r24, 0x96	; 150
    2e08:	9f 4f       	sbci	r25, 0xFF	; 255
		FileContent[i]=0;
    2e0a:	11 92       	st	Z+, r1
	int i=0;
	int iMoN;
	bool bBoNFound;
	const char* ModesFile="MODES.DAT";
	Number_of_modes=0;
	for(i=0;i<100;i++)
    2e0c:	e8 17       	cp	r30, r24
    2e0e:	f9 07       	cpc	r31, r25
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <UI_CheckModes+0x40>
		FileContent[i]=0;
	if(readAndRetreiveFileContents (ModesFile,FileContent)>0)
    2e12:	8e e7       	ldi	r24, 0x7E	; 126
    2e14:	91 e0       	ldi	r25, 0x01	; 1
    2e16:	61 2f       	mov	r22, r17
    2e18:	70 2f       	mov	r23, r16
    2e1a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <readAndRetreiveFileContents>
    2e1e:	88 23       	and	r24, r24
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <UI_CheckModes+0x5a>
    2e22:	b4 c0       	rjmp	.+360    	; 0x2f8c <UI_CheckModes+0x1c2>
	{
		return false;
	}
	USART_transmitStringToPC(&FileContent);
    2e24:	81 2f       	mov	r24, r17
    2e26:	90 2f       	mov	r25, r16
    2e28:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
	TX_NEWLINE_PC;
    2e2c:	8d e0       	ldi	r24, 0x0D	; 13
    2e2e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2e32:	8a e0       	ldi	r24, 0x0A	; 10
    2e34:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2e38:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(iMoN==3)
			{
				return false;
			}
			ModeID[iMoN++]=FileContent[i];
    2e3a:	43 e0       	ldi	r20, 0x03	; 3
    2e3c:	a4 2e       	mov	r10, r20
    2e3e:	b1 2c       	mov	r11, r1
    2e40:	ac 0e       	add	r10, r28
    2e42:	bd 1e       	adc	r11, r29
    2e44:	2e c0       	rjmp	.+92     	; 0x2ea2 <UI_CheckModes+0xd8>
	TX_NEWLINE_PC;
	bBoNFound=false;
	i=0;
	while(FileContent[i]!='$')
	{
		if(FileContent[i]=='>')
    2e46:	8e 33       	cpi	r24, 0x3E	; 62
    2e48:	89 f4       	brne	.+34     	; 0x2e6c <UI_CheckModes+0xa2>
		{
			UI_Modes[Number_of_modes]=atoi(ModeID);
    2e4a:	80 91 cd 03 	lds	r24, 0x03CD
    2e4e:	08 2f       	mov	r16, r24
    2e50:	10 e0       	ldi	r17, 0x00	; 0
    2e52:	c5 01       	movw	r24, r10
    2e54:	0e 94 f7 19 	call	0x33ee	; 0x33ee <atoi>
    2e58:	01 54       	subi	r16, 0x41	; 65
    2e5a:	1c 4f       	sbci	r17, 0xFC	; 252
    2e5c:	d8 01       	movw	r26, r16
    2e5e:	8c 93       	st	X, r24
			Number_of_modes++;
    2e60:	80 91 cd 03 	lds	r24, 0x03CD
    2e64:	8f 5f       	subi	r24, 0xFF	; 255
    2e66:	80 93 cd 03 	sts	0x03CD, r24
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <UI_CheckModes+0xa6>
			bBoNFound=false;
		}
		if(!bBoNFound)
    2e6c:	99 23       	and	r25, r25
    2e6e:	39 f4       	brne	.+14     	; 0x2e7e <UI_CheckModes+0xb4>
		{
			ModeID[0]=0;
    2e70:	1b 82       	std	Y+3, r1	; 0x03
			ModeID[1]=0;
    2e72:	1c 82       	std	Y+4, r1	; 0x04
			ModeID[2]=0;
    2e74:	1d 82       	std	Y+5, r1	; 0x05
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0a c0       	rjmp	.+20     	; 0x2e92 <UI_CheckModes+0xc8>
			iMoN=0;
		}
		else
		{
			if(iMoN==3)
    2e7e:	23 30       	cpi	r18, 0x03	; 3
    2e80:	31 05       	cpc	r19, r1
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <UI_CheckModes+0xbc>
    2e84:	83 c0       	rjmp	.+262    	; 0x2f8c <UI_CheckModes+0x1c2>
			{
				return false;
			}
			ModeID[iMoN++]=FileContent[i];
    2e86:	f5 01       	movw	r30, r10
    2e88:	e2 0f       	add	r30, r18
    2e8a:	f3 1f       	adc	r31, r19
    2e8c:	80 83       	st	Z, r24
    2e8e:	2f 5f       	subi	r18, 0xFF	; 255
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255

		}
		if(FileContent[i]=='<')
    2e92:	f7 01       	movw	r30, r14
    2e94:	80 81       	ld	r24, Z
    2e96:	8c 33       	cpi	r24, 0x3C	; 60
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <UI_CheckModes+0xd2>
    2e9a:	91 e0       	ldi	r25, 0x01	; 1
    2e9c:	08 94       	sec
    2e9e:	e1 1c       	adc	r14, r1
    2ea0:	f1 1c       	adc	r15, r1
	}
	USART_transmitStringToPC(&FileContent);
	TX_NEWLINE_PC;
	bBoNFound=false;
	i=0;
	while(FileContent[i]!='$')
    2ea2:	d7 01       	movw	r26, r14
    2ea4:	8c 91       	ld	r24, X
    2ea6:	84 32       	cpi	r24, 0x24	; 36
    2ea8:	71 f6       	brne	.-100    	; 0x2e46 <UI_CheckModes+0x7c>
			bBoNFound=true;
		}

		i++;		
	}
	USART_transmitStringToPCFromFlash(PSTR("Number of modes selected: "));
    2eaa:	8f e9       	ldi	r24, 0x9F	; 159
    2eac:	93 e0       	ldi	r25, 0x03	; 3
    2eae:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
	PCPrintContent[0]=0;
    2eb2:	19 82       	std	Y+1, r1	; 0x01
	PCPrintContent[1]=0;
    2eb4:	1a 82       	std	Y+2, r1	; 0x02
	sprintf(PCPrintContent, "%d", Number_of_modes);
    2eb6:	20 91 cd 03 	lds	r18, 0x03CD
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <UI_CheckModes+0xf2>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <UI_CheckModes+0xf4>
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <UI_CheckModes+0xf6>
    2ec0:	ed b7       	in	r30, 0x3d	; 61
    2ec2:	fe b7       	in	r31, 0x3e	; 62
    2ec4:	31 96       	adiw	r30, 0x01	; 1
    2ec6:	8e 01       	movw	r16, r28
    2ec8:	0f 5f       	subi	r16, 0xFF	; 255
    2eca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ecc:	ad b7       	in	r26, 0x3d	; 61
    2ece:	be b7       	in	r27, 0x3e	; 62
    2ed0:	12 96       	adiw	r26, 0x02	; 2
    2ed2:	1c 93       	st	X, r17
    2ed4:	0e 93       	st	-X, r16
    2ed6:	11 97       	sbiw	r26, 0x01	; 1
    2ed8:	88 e8       	ldi	r24, 0x88	; 136
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	93 83       	std	Z+3, r25	; 0x03
    2ede:	82 83       	std	Z+2, r24	; 0x02
    2ee0:	24 83       	std	Z+4, r18	; 0x04
    2ee2:	15 82       	std	Z+5, r1	; 0x05
    2ee4:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
	USART_transmitStringToPC(&PCPrintContent);
    2ee8:	ed b7       	in	r30, 0x3d	; 61
    2eea:	fe b7       	in	r31, 0x3e	; 62
    2eec:	36 96       	adiw	r30, 0x06	; 6
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	fe bf       	out	0x3e, r31	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	ed bf       	out	0x3d, r30	; 61
    2ef8:	c8 01       	movw	r24, r16
    2efa:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
	TX_NEWLINE_PC;
    2efe:	8d e0       	ldi	r24, 0x0D	; 13
    2f00:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2f04:	8a e0       	ldi	r24, 0x0A	; 10
    2f06:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
    2f0a:	8b e8       	ldi	r24, 0x8B	; 139
    2f0c:	93 e0       	ldi	r25, 0x03	; 3
    2f0e:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
    2f12:	ee 24       	eor	r14, r14
    2f14:	ff 24       	eor	r15, r15
	for(i=0;i<Number_of_modes;i++)
	{
		sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    2f16:	d0 2e       	mov	r13, r16
    2f18:	01 2f       	mov	r16, r17
    2f1a:	2b e8       	ldi	r18, 0x8B	; 139
    2f1c:	a2 2e       	mov	r10, r18
    2f1e:	21 e0       	ldi	r18, 0x01	; 1
    2f20:	b2 2e       	mov	r11, r18
    2f22:	26 c0       	rjmp	.+76     	; 0x2f70 <UI_CheckModes+0x1a6>
    2f24:	f7 01       	movw	r30, r14
    2f26:	e1 54       	subi	r30, 0x41	; 65
    2f28:	fc 4f       	sbci	r31, 0xFC	; 252
    2f2a:	80 81       	ld	r24, Z
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <UI_CheckModes+0x164>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <UI_CheckModes+0x166>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <UI_CheckModes+0x168>
    2f32:	ed b7       	in	r30, 0x3d	; 61
    2f34:	fe b7       	in	r31, 0x3e	; 62
    2f36:	31 96       	adiw	r30, 0x01	; 1
    2f38:	ad b7       	in	r26, 0x3d	; 61
    2f3a:	be b7       	in	r27, 0x3e	; 62
    2f3c:	11 96       	adiw	r26, 0x01	; 1
    2f3e:	dc 92       	st	X, r13
    2f40:	11 97       	sbiw	r26, 0x01	; 1
    2f42:	12 96       	adiw	r26, 0x02	; 2
    2f44:	0c 93       	st	X, r16
    2f46:	b3 82       	std	Z+3, r11	; 0x03
    2f48:	a2 82       	std	Z+2, r10	; 0x02
    2f4a:	84 83       	std	Z+4, r24	; 0x04
    2f4c:	15 82       	std	Z+5, r1	; 0x05
    2f4e:	0e 94 24 1a 	call	0x3448	; 0x3448 <sprintf>
		USART_transmitStringToPC(&PCPrintContent);
    2f52:	ed b7       	in	r30, 0x3d	; 61
    2f54:	fe b7       	in	r31, 0x3e	; 62
    2f56:	36 96       	adiw	r30, 0x06	; 6
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	fe bf       	out	0x3e, r31	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	ed bf       	out	0x3d, r30	; 61
    2f62:	8d 2d       	mov	r24, r13
    2f64:	90 2f       	mov	r25, r16
    2f66:	0e 94 cd 03 	call	0x79a	; 0x79a <USART_transmitStringToPC>
	PCPrintContent[1]=0;
	sprintf(PCPrintContent, "%d", Number_of_modes);
	USART_transmitStringToPC(&PCPrintContent);
	TX_NEWLINE_PC;
	USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
	for(i=0;i<Number_of_modes;i++)
    2f6a:	08 94       	sec
    2f6c:	e1 1c       	adc	r14, r1
    2f6e:	f1 1c       	adc	r15, r1
    2f70:	80 91 cd 03 	lds	r24, 0x03CD
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	e8 16       	cp	r14, r24
    2f78:	f9 06       	cpc	r15, r25
    2f7a:	a4 f2       	brlt	.-88     	; 0x2f24 <UI_CheckModes+0x15a>
	{
		sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
		USART_transmitStringToPC(&PCPrintContent);
	}	
	TX_NEWLINE_PC;
    2f7c:	8d e0       	ldi	r24, 0x0D	; 13
    2f7e:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2f82:	8a e0       	ldi	r24, 0x0A	; 10
    2f84:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <UI_CheckModes+0x1c4>
	return true; 
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
}
    2f8e:	c7 59       	subi	r28, 0x97	; 151
    2f90:	df 4f       	sbci	r29, 0xFF	; 255
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	bf 90       	pop	r11
    2fac:	af 90       	pop	r10
    2fae:	08 95       	ret

00002fb0 <MD1_Reset>:
	}
}

void MD1_Reset(void)
{
	Current_State=0;
    2fb0:	10 92 1d 07 	sts	0x071D, r1
    2fb4:	10 92 1c 07 	sts	0x071C, r1
}
    2fb8:	08 95       	ret

00002fba <MD1_CallModeYesAnswer>:
}

void MD1_CallModeYesAnswer(void)
{

}
    2fba:	08 95       	ret

00002fbc <MD1_CallModeNoAnswer>:

void MD1_CallModeNoAnswer(void)
{

}
    2fbc:	08 95       	ret

00002fbe <MD1_InputDot>:

void MD1_InputDot(char thisDot)
{
	Last_Dot=thisDot;
    2fbe:	80 93 1b 07 	sts	0x071B, r24
	Current_State=2;
    2fc2:	82 e0       	ldi	r24, 0x02	; 2
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	90 93 1d 07 	sts	0x071D, r25
    2fca:	80 93 1c 07 	sts	0x071C, r24
}
    2fce:	08 95       	ret

00002fd0 <MD1_InputCell>:

void MD1_InputCell(char thisCell)
{

}
    2fd0:	08 95       	ret

00002fd2 <PlayRequestedDot>:

*/

void PlayRequestedDot(void)
{
	switch(Last_Dot)
    2fd2:	80 91 1b 07 	lds	r24, 0x071B
    2fd6:	83 33       	cpi	r24, 0x33	; 51
    2fd8:	a1 f0       	breq	.+40     	; 0x3002 <PlayRequestedDot+0x30>
    2fda:	84 33       	cpi	r24, 0x34	; 52
    2fdc:	28 f4       	brcc	.+10     	; 0x2fe8 <PlayRequestedDot+0x16>
    2fde:	81 33       	cpi	r24, 0x31	; 49
    2fe0:	51 f0       	breq	.+20     	; 0x2ff6 <PlayRequestedDot+0x24>
    2fe2:	82 33       	cpi	r24, 0x32	; 50
    2fe4:	e9 f4       	brne	.+58     	; 0x3020 <PlayRequestedDot+0x4e>
    2fe6:	0a c0       	rjmp	.+20     	; 0x2ffc <PlayRequestedDot+0x2a>
    2fe8:	85 33       	cpi	r24, 0x35	; 53
    2fea:	89 f0       	breq	.+34     	; 0x300e <PlayRequestedDot+0x3c>
    2fec:	85 33       	cpi	r24, 0x35	; 53
    2fee:	60 f0       	brcs	.+24     	; 0x3008 <PlayRequestedDot+0x36>
    2ff0:	86 33       	cpi	r24, 0x36	; 54
    2ff2:	b1 f4       	brne	.+44     	; 0x3020 <PlayRequestedDot+0x4e>
    2ff4:	11 c0       	rjmp	.+34     	; 0x3018 <PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD1_1.MP3");
    2ff6:	80 e9       	ldi	r24, 0x90	; 144
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	0b c0       	rjmp	.+22     	; 0x3012 <PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD1_2.MP3");
    2ffc:	8a e9       	ldi	r24, 0x9A	; 154
    2ffe:	91 e0       	ldi	r25, 0x01	; 1
    3000:	08 c0       	rjmp	.+16     	; 0x3012 <PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD1_3.MP3");
    3002:	84 ea       	ldi	r24, 0xA4	; 164
    3004:	91 e0       	ldi	r25, 0x01	; 1
    3006:	05 c0       	rjmp	.+10     	; 0x3012 <PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD1_4.MP3");
    3008:	8e ea       	ldi	r24, 0xAE	; 174
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD1_5.MP3");
    300e:	88 eb       	ldi	r24, 0xB8	; 184
    3010:	91 e0       	ldi	r25, 0x01	; 1
    3012:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    3016:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD1_6.MP3");
    3018:	82 ec       	ldi	r24, 0xC2	; 194
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    3020:	08 95       	ret

00003022 <MD1_Main>:
	Current_State=0;
}

void MD1_Main(void)
{
	switch(Current_State)
    3022:	80 91 1c 07 	lds	r24, 0x071C
    3026:	90 91 1d 07 	lds	r25, 0x071D
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	19 f0       	breq	.+6      	; 0x3034 <MD1_Main+0x12>
    302e:	02 97       	sbiw	r24, 0x02	; 2
    3030:	a1 f4       	brne	.+40     	; 0x305a <MD1_Main+0x38>
    3032:	0b c0       	rjmp	.+22     	; 0x304a <MD1_Main+0x28>
	{
		case 0:
      // Play the inrtoductory message for Mode 1
			RequestToPlayMP3file("MD1INT.MP3");
    3034:	8c ec       	ldi	r24, 0xCC	; 204
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
			Current_State = 1;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	90 93 1d 07 	sts	0x071D, r25
    3044:	80 93 1c 07 	sts	0x071C, r24
    3048:	08 95       	ret
			break;
		case 1:
			break;
		case 2:
			PlayRequestedDot();
    304a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <PlayRequestedDot>
			Current_State = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	90 93 1d 07 	sts	0x071D, r25
    3056:	80 93 1c 07 	sts	0x071C, r24
    305a:	08 95       	ret

0000305c <MD2_Reset>:
}


void MD2_Reset(void)
{
	Current_State=0;
    305c:	10 92 1d 07 	sts	0x071D, r1
    3060:	10 92 1c 07 	sts	0x071C, r1
	MD2_Last_Dot=0;
    3064:	10 92 1f 07 	sts	0x071F, r1
}
    3068:	08 95       	ret

0000306a <MD2_CallModeYesAnswer>:
}

void MD2_CallModeYesAnswer(void)
{

}
    306a:	08 95       	ret

0000306c <MD2_CallModeNoAnswer>:

void MD2_CallModeNoAnswer(void)
{

}
    306c:	08 95       	ret

0000306e <MD2_InputDot>:

void MD2_InputDot(char thisDot)
{
	MD2_Last_Dot=thisDot;
    306e:	80 93 1f 07 	sts	0x071F, r24
	Current_State=3;
    3072:	83 e0       	ldi	r24, 0x03	; 3
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	90 93 1d 07 	sts	0x071D, r25
    307a:	80 93 1c 07 	sts	0x071C, r24
}
    307e:	08 95       	ret

00003080 <MD2_InputCell>:

void MD2_InputCell(char thisCell)
{
    3080:	98 2f       	mov	r25, r24
	if(MD2_Last_Dot!=0)
    3082:	80 91 1f 07 	lds	r24, 0x071F
    3086:	88 23       	and	r24, r24
    3088:	41 f0       	breq	.+16     	; 0x309a <MD2_InputCell+0x1a>
	{
		Last_Cell=thisCell;
    308a:	90 93 1e 07 	sts	0x071E, r25
		Current_State=2;
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	90 93 1d 07 	sts	0x071D, r25
    3096:	80 93 1c 07 	sts	0x071C, r24
    309a:	08 95       	ret

0000309c <MD2_PlayRequestedDot>:
}


void MD2_PlayRequestedDot(void)
{
	switch(MD2_Last_Dot)
    309c:	80 91 1f 07 	lds	r24, 0x071F
    30a0:	83 33       	cpi	r24, 0x33	; 51
    30a2:	a1 f0       	breq	.+40     	; 0x30cc <MD2_PlayRequestedDot+0x30>
    30a4:	84 33       	cpi	r24, 0x34	; 52
    30a6:	28 f4       	brcc	.+10     	; 0x30b2 <MD2_PlayRequestedDot+0x16>
    30a8:	81 33       	cpi	r24, 0x31	; 49
    30aa:	51 f0       	breq	.+20     	; 0x30c0 <MD2_PlayRequestedDot+0x24>
    30ac:	82 33       	cpi	r24, 0x32	; 50
    30ae:	e9 f4       	brne	.+58     	; 0x30ea <MD2_PlayRequestedDot+0x4e>
    30b0:	0a c0       	rjmp	.+20     	; 0x30c6 <MD2_PlayRequestedDot+0x2a>
    30b2:	85 33       	cpi	r24, 0x35	; 53
    30b4:	89 f0       	breq	.+34     	; 0x30d8 <MD2_PlayRequestedDot+0x3c>
    30b6:	85 33       	cpi	r24, 0x35	; 53
    30b8:	60 f0       	brcs	.+24     	; 0x30d2 <MD2_PlayRequestedDot+0x36>
    30ba:	86 33       	cpi	r24, 0x36	; 54
    30bc:	b1 f4       	brne	.+44     	; 0x30ea <MD2_PlayRequestedDot+0x4e>
    30be:	11 c0       	rjmp	.+34     	; 0x30e2 <MD2_PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD1_1.MP3");
    30c0:	87 ed       	ldi	r24, 0xD7	; 215
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	0b c0       	rjmp	.+22     	; 0x30dc <MD2_PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD1_2.MP3");
    30c6:	81 ee       	ldi	r24, 0xE1	; 225
    30c8:	91 e0       	ldi	r25, 0x01	; 1
    30ca:	08 c0       	rjmp	.+16     	; 0x30dc <MD2_PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD1_3.MP3");
    30cc:	8b ee       	ldi	r24, 0xEB	; 235
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	05 c0       	rjmp	.+10     	; 0x30dc <MD2_PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD1_4.MP3");
    30d2:	85 ef       	ldi	r24, 0xF5	; 245
    30d4:	91 e0       	ldi	r25, 0x01	; 1
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <MD2_PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD1_5.MP3");
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    30e0:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD1_6.MP3");
    30e2:	89 e0       	ldi	r24, 0x09	; 9
    30e4:	92 e0       	ldi	r25, 0x02	; 2
    30e6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    30ea:	08 95       	ret

000030ec <PlayRequestedCell>:

*/

void PlayRequestedCell(void)
{
	switch(Last_Cell)
    30ec:	80 91 1e 07 	lds	r24, 0x071E
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	fc 01       	movw	r30, r24
    30f4:	e1 56       	subi	r30, 0x61	; 97
    30f6:	f0 40       	sbci	r31, 0x00	; 0
    30f8:	ea 31       	cpi	r30, 0x1A	; 26
    30fa:	f1 05       	cpc	r31, r1
    30fc:	08 f0       	brcs	.+2      	; 0x3100 <PlayRequestedCell+0x14>
    30fe:	56 c0       	rjmp	.+172    	; 0x31ac <PlayRequestedCell+0xc0>
    3100:	ea 5b       	subi	r30, 0xBA	; 186
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	ee 0f       	add	r30, r30
    3106:	ff 1f       	adc	r31, r31
    3108:	05 90       	lpm	r0, Z+
    310a:	f4 91       	lpm	r31, Z+
    310c:	e0 2d       	mov	r30, r0
    310e:	09 94       	ijmp
	{
		case 'a':
			RequestToPlayMP3file("MD2_a.MP3");
    3110:	83 e1       	ldi	r24, 0x13	; 19
    3112:	92 e0       	ldi	r25, 0x02	; 2
    3114:	4d c0       	rjmp	.+154    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'b':
			RequestToPlayMP3file("MD2_b.MP3");
    3116:	8d e1       	ldi	r24, 0x1D	; 29
    3118:	92 e0       	ldi	r25, 0x02	; 2
    311a:	4a c0       	rjmp	.+148    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'c':
			RequestToPlayMP3file("MD2_c.MP3");
    311c:	87 e2       	ldi	r24, 0x27	; 39
    311e:	92 e0       	ldi	r25, 0x02	; 2
    3120:	47 c0       	rjmp	.+142    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'd':
			RequestToPlayMP3file("MD2_d.MP3");
    3122:	81 e3       	ldi	r24, 0x31	; 49
    3124:	92 e0       	ldi	r25, 0x02	; 2
    3126:	44 c0       	rjmp	.+136    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'e':
			RequestToPlayMP3file("MD2_e.MP3");
    3128:	8b e3       	ldi	r24, 0x3B	; 59
    312a:	92 e0       	ldi	r25, 0x02	; 2
    312c:	41 c0       	rjmp	.+130    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'f':
			RequestToPlayMP3file("MD2_f.MP3");
    312e:	85 e4       	ldi	r24, 0x45	; 69
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	3e c0       	rjmp	.+124    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'g':
			RequestToPlayMP3file("MD2_g.MP3");
    3134:	8f e4       	ldi	r24, 0x4F	; 79
    3136:	92 e0       	ldi	r25, 0x02	; 2
    3138:	3b c0       	rjmp	.+118    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'h':
			RequestToPlayMP3file("MD2_h.MP3");
    313a:	89 e5       	ldi	r24, 0x59	; 89
    313c:	92 e0       	ldi	r25, 0x02	; 2
    313e:	38 c0       	rjmp	.+112    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'i':
			RequestToPlayMP3file("MD2_i.MP3");
    3140:	83 e6       	ldi	r24, 0x63	; 99
    3142:	92 e0       	ldi	r25, 0x02	; 2
    3144:	35 c0       	rjmp	.+106    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'j':
			RequestToPlayMP3file("MD2_j.MP3");
    3146:	8d e6       	ldi	r24, 0x6D	; 109
    3148:	92 e0       	ldi	r25, 0x02	; 2
    314a:	32 c0       	rjmp	.+100    	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'k':
			RequestToPlayMP3file("MD2_k.MP3");
    314c:	87 e7       	ldi	r24, 0x77	; 119
    314e:	92 e0       	ldi	r25, 0x02	; 2
    3150:	2f c0       	rjmp	.+94     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'l':
			RequestToPlayMP3file("MD2_l.MP3");
    3152:	81 e8       	ldi	r24, 0x81	; 129
    3154:	92 e0       	ldi	r25, 0x02	; 2
    3156:	2c c0       	rjmp	.+88     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'm':
			RequestToPlayMP3file("MD2_m.MP3");
    3158:	8b e8       	ldi	r24, 0x8B	; 139
    315a:	92 e0       	ldi	r25, 0x02	; 2
    315c:	29 c0       	rjmp	.+82     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'n':
			RequestToPlayMP3file("MD2_n.MP3");
    315e:	85 e9       	ldi	r24, 0x95	; 149
    3160:	92 e0       	ldi	r25, 0x02	; 2
    3162:	26 c0       	rjmp	.+76     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'o':
			RequestToPlayMP3file("MD2_o.MP3");
    3164:	8f e9       	ldi	r24, 0x9F	; 159
    3166:	92 e0       	ldi	r25, 0x02	; 2
    3168:	23 c0       	rjmp	.+70     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'p':
			RequestToPlayMP3file("MD2_p.MP3");
    316a:	89 ea       	ldi	r24, 0xA9	; 169
    316c:	92 e0       	ldi	r25, 0x02	; 2
    316e:	20 c0       	rjmp	.+64     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'q':
			RequestToPlayMP3file("MD2_q.MP3");
    3170:	83 eb       	ldi	r24, 0xB3	; 179
    3172:	92 e0       	ldi	r25, 0x02	; 2
    3174:	1d c0       	rjmp	.+58     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'r':
			RequestToPlayMP3file("MD2_r.MP3");
    3176:	8d eb       	ldi	r24, 0xBD	; 189
    3178:	92 e0       	ldi	r25, 0x02	; 2
    317a:	1a c0       	rjmp	.+52     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 's':
			RequestToPlayMP3file("MD2_s.MP3");
    317c:	87 ec       	ldi	r24, 0xC7	; 199
    317e:	92 e0       	ldi	r25, 0x02	; 2
    3180:	17 c0       	rjmp	.+46     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 't':
			RequestToPlayMP3file("MD2_t.MP3");
    3182:	81 ed       	ldi	r24, 0xD1	; 209
    3184:	92 e0       	ldi	r25, 0x02	; 2
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'u':
			RequestToPlayMP3file("MD2_u.MP3");
    3188:	8b ed       	ldi	r24, 0xDB	; 219
    318a:	92 e0       	ldi	r25, 0x02	; 2
    318c:	11 c0       	rjmp	.+34     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'v':
			RequestToPlayMP3file("MD2_v.MP3");
    318e:	85 ee       	ldi	r24, 0xE5	; 229
    3190:	92 e0       	ldi	r25, 0x02	; 2
    3192:	0e c0       	rjmp	.+28     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'w':
			RequestToPlayMP3file("MD2_w.MP3");
    3194:	8f ee       	ldi	r24, 0xEF	; 239
    3196:	92 e0       	ldi	r25, 0x02	; 2
    3198:	0b c0       	rjmp	.+22     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'x':
			RequestToPlayMP3file("MD2_x.MP3");
    319a:	89 ef       	ldi	r24, 0xF9	; 249
    319c:	92 e0       	ldi	r25, 0x02	; 2
    319e:	08 c0       	rjmp	.+16     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'y':
			RequestToPlayMP3file("MD2_y.MP3");
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	93 e0       	ldi	r25, 0x03	; 3
    31a4:	05 c0       	rjmp	.+10     	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		case 'z':
			RequestToPlayMP3file("MD2_z.MP3");
    31a6:	8d e0       	ldi	r24, 0x0D	; 13
    31a8:	93 e0       	ldi	r25, 0x03	; 3
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <PlayRequestedCell+0xc4>
			break;
		default:
			RequestToPlayMP3file("MD2ER1.MP3");
    31ac:	87 e1       	ldi	r24, 0x17	; 23
    31ae:	93 e0       	ldi	r25, 0x03	; 3
    31b0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    31b4:	08 95       	ret

000031b6 <MD2_Main>:
	MD2_Last_Dot=0;
}

void MD2_Main(void)
{
	switch(Current_State)
    31b6:	80 91 1c 07 	lds	r24, 0x071C
    31ba:	90 91 1d 07 	lds	r25, 0x071D
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	91 05       	cpc	r25, r1
    31c2:	51 f0       	breq	.+20     	; 0x31d8 <MD2_Main+0x22>
    31c4:	83 30       	cpi	r24, 0x03	; 3
    31c6:	91 05       	cpc	r25, r1
    31c8:	81 f0       	breq	.+32     	; 0x31ea <MD2_Main+0x34>
    31ca:	89 2b       	or	r24, r25
    31cc:	b1 f4       	brne	.+44     	; 0x31fa <MD2_Main+0x44>
	{
		case 0:
			RequestToPlayMP3file("MD2INT.MP3");
    31ce:	82 e2       	ldi	r24, 0x22	; 34
    31d0:	93 e0       	ldi	r25, 0x03	; 3
    31d2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <MD2_Main+0x26>
			Current_State=1;
			break;
		case 1:
			break;
		case 2:
			PlayRequestedCell();
    31d8:	0e 94 76 18 	call	0x30ec	; 0x30ec <PlayRequestedCell>
			Current_State=1;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	90 93 1d 07 	sts	0x071D, r25
    31e4:	80 93 1c 07 	sts	0x071C, r24
    31e8:	08 95       	ret
			break;
		case 3:
			MD2_PlayRequestedDot();
    31ea:	0e 94 4e 18 	call	0x309c	; 0x309c <MD2_PlayRequestedDot>
			Current_State=1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	90 93 1d 07 	sts	0x071D, r25
    31f6:	80 93 1c 07 	sts	0x071C, r24
    31fa:	08 95       	ret

000031fc <MD3_Reset>:
	}
}

void MD3_Reset(void)
{
	MD3_Current_State=0;
    31fc:	10 92 22 07 	sts	0x0722, r1
    3200:	10 92 21 07 	sts	0x0721, r1
}
    3204:	08 95       	ret

00003206 <MD3_CallModeYesAnswer>:
}

void MD3_CallModeYesAnswer(void)
{

}
    3206:	08 95       	ret

00003208 <MD3_CallModeNoAnswer>:

void MD3_CallModeNoAnswer(void)
{

}
    3208:	08 95       	ret

0000320a <MD3_InputDot>:

void MD3_InputDot(char thisDot)
{
	MD3_Last_Dot=thisDot;
    320a:	80 93 20 07 	sts	0x0720, r24
	MD3_Current_State=2;
    320e:	82 e0       	ldi	r24, 0x02	; 2
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	90 93 22 07 	sts	0x0722, r25
    3216:	80 93 21 07 	sts	0x0721, r24
}
    321a:	08 95       	ret

0000321c <MD3_InputCell>:

void MD3_InputCell(char thisCell)
{

}
    321c:	08 95       	ret

0000321e <MD3_PlayRequestedDot>:

*/

void MD3_PlayRequestedDot(void)
{
	switch(MD3_Last_Dot)
    321e:	80 91 20 07 	lds	r24, 0x0720
    3222:	83 33       	cpi	r24, 0x33	; 51
    3224:	a1 f0       	breq	.+40     	; 0x324e <MD3_PlayRequestedDot+0x30>
    3226:	84 33       	cpi	r24, 0x34	; 52
    3228:	28 f4       	brcc	.+10     	; 0x3234 <MD3_PlayRequestedDot+0x16>
    322a:	81 33       	cpi	r24, 0x31	; 49
    322c:	51 f0       	breq	.+20     	; 0x3242 <MD3_PlayRequestedDot+0x24>
    322e:	82 33       	cpi	r24, 0x32	; 50
    3230:	e9 f4       	brne	.+58     	; 0x326c <MD3_PlayRequestedDot+0x4e>
    3232:	0a c0       	rjmp	.+20     	; 0x3248 <MD3_PlayRequestedDot+0x2a>
    3234:	85 33       	cpi	r24, 0x35	; 53
    3236:	89 f0       	breq	.+34     	; 0x325a <MD3_PlayRequestedDot+0x3c>
    3238:	85 33       	cpi	r24, 0x35	; 53
    323a:	60 f0       	brcs	.+24     	; 0x3254 <MD3_PlayRequestedDot+0x36>
    323c:	86 33       	cpi	r24, 0x36	; 54
    323e:	b1 f4       	brne	.+44     	; 0x326c <MD3_PlayRequestedDot+0x4e>
    3240:	11 c0       	rjmp	.+34     	; 0x3264 <MD3_PlayRequestedDot+0x46>
	{
		case '1':
			RequestToPlayMP3file("MD3_1.MP3");
    3242:	8d e2       	ldi	r24, 0x2D	; 45
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	0b c0       	rjmp	.+22     	; 0x325e <MD3_PlayRequestedDot+0x40>
			break;
		case '2':
			RequestToPlayMP3file("MD3_2.MP3");
    3248:	87 e3       	ldi	r24, 0x37	; 55
    324a:	93 e0       	ldi	r25, 0x03	; 3
    324c:	08 c0       	rjmp	.+16     	; 0x325e <MD3_PlayRequestedDot+0x40>
			break;
		case '3':
			RequestToPlayMP3file("MD3_3.MP3");
    324e:	81 e4       	ldi	r24, 0x41	; 65
    3250:	93 e0       	ldi	r25, 0x03	; 3
    3252:	05 c0       	rjmp	.+10     	; 0x325e <MD3_PlayRequestedDot+0x40>
			break;
		case '4':
			RequestToPlayMP3file("MD3_4.MP3");
    3254:	8b e4       	ldi	r24, 0x4B	; 75
    3256:	93 e0       	ldi	r25, 0x03	; 3
    3258:	02 c0       	rjmp	.+4      	; 0x325e <MD3_PlayRequestedDot+0x40>
			break;
		case '5':
			RequestToPlayMP3file("MD3_5.MP3");
    325a:	85 e5       	ldi	r24, 0x55	; 85
    325c:	93 e0       	ldi	r25, 0x03	; 3
    325e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    3262:	08 95       	ret
			break;
		case '6':
			RequestToPlayMP3file("MD3_6.MP3");
    3264:	8f e5       	ldi	r24, 0x5F	; 95
    3266:	93 e0       	ldi	r25, 0x03	; 3
    3268:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
    326c:	08 95       	ret

0000326e <MD3_Main>:
	MD3_Current_State=0;
}

void MD3_Main(void)
{
	switch(MD3_Current_State)
    326e:	80 91 21 07 	lds	r24, 0x0721
    3272:	90 91 22 07 	lds	r25, 0x0722
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	19 f0       	breq	.+6      	; 0x3280 <MD3_Main+0x12>
    327a:	02 97       	sbiw	r24, 0x02	; 2
    327c:	a1 f4       	brne	.+40     	; 0x32a6 <MD3_Main+0x38>
    327e:	0b c0       	rjmp	.+22     	; 0x3296 <MD3_Main+0x28>
	{
		case 0:
			RequestToPlayMP3file("MD3INT.MP3");
    3280:	89 e6       	ldi	r24, 0x69	; 105
    3282:	93 e0       	ldi	r25, 0x03	; 3
    3284:	0e 94 da 03 	call	0x7b4	; 0x7b4 <RequestToPlayMP3file>
			MD3_Current_State=1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	90 93 22 07 	sts	0x0722, r25
    3290:	80 93 21 07 	sts	0x0721, r24
    3294:	08 95       	ret
			break;
		case 1:
			break;
		case 2:
			MD3_PlayRequestedDot();
    3296:	0e 94 0f 19 	call	0x321e	; 0x321e <MD3_PlayRequestedDot>
			MD3_Current_State=1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	90 93 22 07 	sts	0x0722, r25
    32a2:	80 93 21 07 	sts	0x0721, r24
    32a6:	08 95       	ret

000032a8 <PC_RequestsToModifyModesFile>:
 * @brief This function will replace the MODES.DAT file with new modes from the 
 *        message variable USART_PC_RecievedPacket
 * @return Void
 */
void PC_RequestsToModifyModesFile(void)
{
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	64 97       	sbiw	r28, 0x14	; 20
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	8e 01       	movw	r16, r28
    32c2:	0f 5f       	subi	r16, 0xFF	; 255
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
    32c6:	f8 01       	movw	r30, r16
	const char* ModesFile="MODES.DAT";
	unsigned char WritingFileContent[20];
	int iT=0;
	for(iT=0;iT<20;iT++)
    32c8:	ce 01       	movw	r24, r28
    32ca:	45 96       	adiw	r24, 0x15	; 21
	{
		WritingFileContent[iT]=0x00;
    32cc:	11 92       	st	Z+, r1
void PC_RequestsToModifyModesFile(void)
{
	const char* ModesFile="MODES.DAT";
	unsigned char WritingFileContent[20];
	int iT=0;
	for(iT=0;iT<20;iT++)
    32ce:	e8 17       	cp	r30, r24
    32d0:	f9 07       	cpc	r31, r25
    32d2:	e1 f7       	brne	.-8      	; 0x32cc <PC_RequestsToModifyModesFile+0x24>
	{
		WritingFileContent[iT]=0x00;
	}
	InitSDCard(false);
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <InitSDCard>
    32da:	23 e0       	ldi	r18, 0x03	; 3
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	09 c0       	rjmp	.+18     	; 0x32f2 <PC_RequestsToModifyModesFile+0x4a>
	iT=0;
	for(iT=3;iT<USART_PC_received_playload_len;iT++)
	{
		WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
    32e0:	f9 01       	movw	r30, r18
    32e2:	e5 55       	subi	r30, 0x55	; 85
    32e4:	fc 4f       	sbci	r31, 0xFC	; 252
    32e6:	80 81       	ld	r24, Z
    32e8:	f8 01       	movw	r30, r16
    32ea:	81 93       	st	Z+, r24
    32ec:	8f 01       	movw	r16, r30
	{
		WritingFileContent[iT]=0x00;
	}
	InitSDCard(false);
	iT=0;
	for(iT=3;iT<USART_PC_received_playload_len;iT++)
    32ee:	2f 5f       	subi	r18, 0xFF	; 255
    32f0:	3f 4f       	sbci	r19, 0xFF	; 255
    32f2:	80 91 01 06 	lds	r24, 0x0601
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	28 17       	cp	r18, r24
    32fa:	39 07       	cpc	r19, r25
    32fc:	8c f3       	brlt	.-30     	; 0x32e0 <PC_RequestsToModifyModesFile+0x38>
	{
		WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
	}
	if(ReplaceTheContentOfThisFileWith(ModesFile,WritingFileContent)==0)
    32fe:	84 e7       	ldi	r24, 0x74	; 116
    3300:	93 e0       	ldi	r25, 0x03	; 3
    3302:	be 01       	movw	r22, r28
    3304:	6f 5f       	subi	r22, 0xFF	; 255
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	0e 94 b8 12 	call	0x2570	; 0x2570 <ReplaceTheContentOfThisFileWith>
    330c:	89 2b       	or	r24, r25
    330e:	19 f4       	brne	.+6      	; 0x3316 <PC_RequestsToModifyModesFile+0x6e>
	{
		USART_transmitStringToPCFromFlash(PSTR("SABT-OK"));
    3310:	84 ec       	ldi	r24, 0xC4	; 196
    3312:	93 e0       	ldi	r25, 0x03	; 3
    3314:	02 c0       	rjmp	.+4      	; 0x331a <PC_RequestsToModifyModesFile+0x72>
		TX_NEWLINE_PC;			
	}else{
		USART_transmitStringToPCFromFlash(PSTR("SABT-FAIL"));
    3316:	8a eb       	ldi	r24, 0xBA	; 186
    3318:	93 e0       	ldi	r25, 0x03	; 3
    331a:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
		TX_NEWLINE_PC;	
    331e:	8d e0       	ldi	r24, 0x0D	; 13
    3320:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    3324:	8a e0       	ldi	r24, 0x0A	; 10
    3326:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
	}
}
    332a:	64 96       	adiw	r28, 0x14	; 20
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	08 95       	ret

00003340 <PC_parse_message>:
 * @return bool    but does not seem to ever return, so it will return false?
 */
bool PC_parse_message()
{
	unsigned char MessageType;
	USART_PC_Message_ready=false;
    3340:	10 92 85 03 	sts	0x0385, r1
	MessageType=USART_PC_ReceivedPacket[2];
    3344:	80 91 ad 03 	lds	r24, 0x03AD
	switch(MessageType)
    3348:	8d 34       	cpi	r24, 0x4D	; 77
    334a:	69 f0       	breq	.+26     	; 0x3366 <PC_parse_message+0x26>
    334c:	88 37       	cpi	r24, 0x78	; 120
    334e:	69 f4       	brne	.+26     	; 0x336a <PC_parse_message+0x2a>
	{
		case PC_CMD_INIT:
			USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
    3350:	8c ec       	ldi	r24, 0xCC	; 204
    3352:	93 e0       	ldi	r25, 0x03	; 3
    3354:	0e 94 c0 03 	call	0x780	; 0x780 <USART_transmitStringToPCFromFlash>
			TX_NEWLINE_PC;			
    3358:	8d e0       	ldi	r24, 0x0D	; 13
    335a:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    335e:	8a e0       	ldi	r24, 0x0A	; 10
    3360:	0e 94 b8 03 	call	0x770	; 0x770 <USART_transmitByteToPC>
    3364:	08 95       	ret
			break;
		case PC_CMD_NEWMODES:
			PC_RequestsToModifyModesFile();
    3366:	0e 94 54 19 	call	0x32a8	; 0x32a8 <PC_RequestsToModifyModesFile>
			break;
	}
}
    336a:	08 95       	ret

0000336c <__mulsi3>:
    336c:	62 9f       	mul	r22, r18
    336e:	d0 01       	movw	r26, r0
    3370:	73 9f       	mul	r23, r19
    3372:	f0 01       	movw	r30, r0
    3374:	82 9f       	mul	r24, r18
    3376:	e0 0d       	add	r30, r0
    3378:	f1 1d       	adc	r31, r1
    337a:	64 9f       	mul	r22, r20
    337c:	e0 0d       	add	r30, r0
    337e:	f1 1d       	adc	r31, r1
    3380:	92 9f       	mul	r25, r18
    3382:	f0 0d       	add	r31, r0
    3384:	83 9f       	mul	r24, r19
    3386:	f0 0d       	add	r31, r0
    3388:	74 9f       	mul	r23, r20
    338a:	f0 0d       	add	r31, r0
    338c:	65 9f       	mul	r22, r21
    338e:	f0 0d       	add	r31, r0
    3390:	99 27       	eor	r25, r25
    3392:	72 9f       	mul	r23, r18
    3394:	b0 0d       	add	r27, r0
    3396:	e1 1d       	adc	r30, r1
    3398:	f9 1f       	adc	r31, r25
    339a:	63 9f       	mul	r22, r19
    339c:	b0 0d       	add	r27, r0
    339e:	e1 1d       	adc	r30, r1
    33a0:	f9 1f       	adc	r31, r25
    33a2:	bd 01       	movw	r22, r26
    33a4:	cf 01       	movw	r24, r30
    33a6:	11 24       	eor	r1, r1
    33a8:	08 95       	ret

000033aa <__udivmodsi4>:
    33aa:	a1 e2       	ldi	r26, 0x21	; 33
    33ac:	1a 2e       	mov	r1, r26
    33ae:	aa 1b       	sub	r26, r26
    33b0:	bb 1b       	sub	r27, r27
    33b2:	fd 01       	movw	r30, r26
    33b4:	0d c0       	rjmp	.+26     	; 0x33d0 <__udivmodsi4_ep>

000033b6 <__udivmodsi4_loop>:
    33b6:	aa 1f       	adc	r26, r26
    33b8:	bb 1f       	adc	r27, r27
    33ba:	ee 1f       	adc	r30, r30
    33bc:	ff 1f       	adc	r31, r31
    33be:	a2 17       	cp	r26, r18
    33c0:	b3 07       	cpc	r27, r19
    33c2:	e4 07       	cpc	r30, r20
    33c4:	f5 07       	cpc	r31, r21
    33c6:	20 f0       	brcs	.+8      	; 0x33d0 <__udivmodsi4_ep>
    33c8:	a2 1b       	sub	r26, r18
    33ca:	b3 0b       	sbc	r27, r19
    33cc:	e4 0b       	sbc	r30, r20
    33ce:	f5 0b       	sbc	r31, r21

000033d0 <__udivmodsi4_ep>:
    33d0:	66 1f       	adc	r22, r22
    33d2:	77 1f       	adc	r23, r23
    33d4:	88 1f       	adc	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	1a 94       	dec	r1
    33da:	69 f7       	brne	.-38     	; 0x33b6 <__udivmodsi4_loop>
    33dc:	60 95       	com	r22
    33de:	70 95       	com	r23
    33e0:	80 95       	com	r24
    33e2:	90 95       	com	r25
    33e4:	9b 01       	movw	r18, r22
    33e6:	ac 01       	movw	r20, r24
    33e8:	bd 01       	movw	r22, r26
    33ea:	cf 01       	movw	r24, r30
    33ec:	08 95       	ret

000033ee <atoi>:
    33ee:	fc 01       	movw	r30, r24
    33f0:	88 27       	eor	r24, r24
    33f2:	99 27       	eor	r25, r25
    33f4:	e8 94       	clt
    33f6:	21 91       	ld	r18, Z+
    33f8:	20 32       	cpi	r18, 0x20	; 32
    33fa:	e9 f3       	breq	.-6      	; 0x33f6 <atoi+0x8>
    33fc:	29 30       	cpi	r18, 0x09	; 9
    33fe:	10 f0       	brcs	.+4      	; 0x3404 <atoi+0x16>
    3400:	2e 30       	cpi	r18, 0x0E	; 14
    3402:	c8 f3       	brcs	.-14     	; 0x33f6 <atoi+0x8>
    3404:	2b 32       	cpi	r18, 0x2B	; 43
    3406:	41 f0       	breq	.+16     	; 0x3418 <atoi+0x2a>
    3408:	2d 32       	cpi	r18, 0x2D	; 45
    340a:	39 f4       	brne	.+14     	; 0x341a <atoi+0x2c>
    340c:	68 94       	set
    340e:	04 c0       	rjmp	.+8      	; 0x3418 <atoi+0x2a>
    3410:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__mulhi_const_10>
    3414:	82 0f       	add	r24, r18
    3416:	91 1d       	adc	r25, r1
    3418:	21 91       	ld	r18, Z+
    341a:	20 53       	subi	r18, 0x30	; 48
    341c:	2a 30       	cpi	r18, 0x0A	; 10
    341e:	c0 f3       	brcs	.-16     	; 0x3410 <atoi+0x22>
    3420:	1e f4       	brtc	.+6      	; 0x3428 <atoi+0x3a>
    3422:	90 95       	com	r25
    3424:	81 95       	neg	r24
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
    3428:	08 95       	ret

0000342a <strcpy>:
    342a:	fb 01       	movw	r30, r22
    342c:	dc 01       	movw	r26, r24
    342e:	01 90       	ld	r0, Z+
    3430:	0d 92       	st	X+, r0
    3432:	00 20       	and	r0, r0
    3434:	e1 f7       	brne	.-8      	; 0x342e <strcpy+0x4>
    3436:	08 95       	ret

00003438 <__mulhi_const_10>:
    3438:	7a e0       	ldi	r23, 0x0A	; 10
    343a:	97 9f       	mul	r25, r23
    343c:	90 2d       	mov	r25, r0
    343e:	87 9f       	mul	r24, r23
    3440:	80 2d       	mov	r24, r0
    3442:	91 0d       	add	r25, r1
    3444:	11 24       	eor	r1, r1
    3446:	08 95       	ret

00003448 <sprintf>:
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	2e 97       	sbiw	r28, 0x0e	; 14
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	0d 89       	ldd	r16, Y+21	; 0x15
    3462:	1e 89       	ldd	r17, Y+22	; 0x16
    3464:	86 e0       	ldi	r24, 0x06	; 6
    3466:	8c 83       	std	Y+4, r24	; 0x04
    3468:	1a 83       	std	Y+2, r17	; 0x02
    346a:	09 83       	std	Y+1, r16	; 0x01
    346c:	8f ef       	ldi	r24, 0xFF	; 255
    346e:	9f e7       	ldi	r25, 0x7F	; 127
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	9e 01       	movw	r18, r28
    3476:	27 5e       	subi	r18, 0xE7	; 231
    3478:	3f 4f       	sbci	r19, 0xFF	; 255
    347a:	ce 01       	movw	r24, r28
    347c:	01 96       	adiw	r24, 0x01	; 1
    347e:	6f 89       	ldd	r22, Y+23	; 0x17
    3480:	78 8d       	ldd	r23, Y+24	; 0x18
    3482:	a9 01       	movw	r20, r18
    3484:	0e 94 55 1a 	call	0x34aa	; 0x34aa <vfprintf>
    3488:	2f 81       	ldd	r18, Y+7	; 0x07
    348a:	38 85       	ldd	r19, Y+8	; 0x08
    348c:	02 0f       	add	r16, r18
    348e:	13 1f       	adc	r17, r19
    3490:	f8 01       	movw	r30, r16
    3492:	10 82       	st	Z, r1
    3494:	2e 96       	adiw	r28, 0x0e	; 14
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	1f 91       	pop	r17
    34a6:	0f 91       	pop	r16
    34a8:	08 95       	ret

000034aa <vfprintf>:
    34aa:	2f 92       	push	r2
    34ac:	3f 92       	push	r3
    34ae:	4f 92       	push	r4
    34b0:	5f 92       	push	r5
    34b2:	6f 92       	push	r6
    34b4:	7f 92       	push	r7
    34b6:	8f 92       	push	r8
    34b8:	9f 92       	push	r9
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	2b 97       	sbiw	r28, 0x0b	; 11
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	3c 01       	movw	r6, r24
    34e0:	2b 01       	movw	r4, r22
    34e2:	5a 01       	movw	r10, r20
    34e4:	fc 01       	movw	r30, r24
    34e6:	17 82       	std	Z+7, r1	; 0x07
    34e8:	16 82       	std	Z+6, r1	; 0x06
    34ea:	83 81       	ldd	r24, Z+3	; 0x03
    34ec:	81 fd       	sbrc	r24, 1
    34ee:	03 c0       	rjmp	.+6      	; 0x34f6 <vfprintf+0x4c>
    34f0:	6f ef       	ldi	r22, 0xFF	; 255
    34f2:	7f ef       	ldi	r23, 0xFF	; 255
    34f4:	c6 c1       	rjmp	.+908    	; 0x3882 <vfprintf+0x3d8>
    34f6:	9a e0       	ldi	r25, 0x0A	; 10
    34f8:	89 2e       	mov	r8, r25
    34fa:	1e 01       	movw	r2, r28
    34fc:	08 94       	sec
    34fe:	21 1c       	adc	r2, r1
    3500:	31 1c       	adc	r3, r1
    3502:	f3 01       	movw	r30, r6
    3504:	23 81       	ldd	r18, Z+3	; 0x03
    3506:	f2 01       	movw	r30, r4
    3508:	23 fd       	sbrc	r18, 3
    350a:	85 91       	lpm	r24, Z+
    350c:	23 ff       	sbrs	r18, 3
    350e:	81 91       	ld	r24, Z+
    3510:	2f 01       	movw	r4, r30
    3512:	88 23       	and	r24, r24
    3514:	09 f4       	brne	.+2      	; 0x3518 <vfprintf+0x6e>
    3516:	b2 c1       	rjmp	.+868    	; 0x387c <vfprintf+0x3d2>
    3518:	85 32       	cpi	r24, 0x25	; 37
    351a:	39 f4       	brne	.+14     	; 0x352a <vfprintf+0x80>
    351c:	23 fd       	sbrc	r18, 3
    351e:	85 91       	lpm	r24, Z+
    3520:	23 ff       	sbrs	r18, 3
    3522:	81 91       	ld	r24, Z+
    3524:	2f 01       	movw	r4, r30
    3526:	85 32       	cpi	r24, 0x25	; 37
    3528:	29 f4       	brne	.+10     	; 0x3534 <vfprintf+0x8a>
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	b3 01       	movw	r22, r6
    352e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3532:	e7 cf       	rjmp	.-50     	; 0x3502 <vfprintf+0x58>
    3534:	98 2f       	mov	r25, r24
    3536:	ff 24       	eor	r15, r15
    3538:	ee 24       	eor	r14, r14
    353a:	99 24       	eor	r9, r9
    353c:	ff e1       	ldi	r31, 0x1F	; 31
    353e:	ff 15       	cp	r31, r15
    3540:	d0 f0       	brcs	.+52     	; 0x3576 <vfprintf+0xcc>
    3542:	9b 32       	cpi	r25, 0x2B	; 43
    3544:	69 f0       	breq	.+26     	; 0x3560 <vfprintf+0xb6>
    3546:	9c 32       	cpi	r25, 0x2C	; 44
    3548:	28 f4       	brcc	.+10     	; 0x3554 <vfprintf+0xaa>
    354a:	90 32       	cpi	r25, 0x20	; 32
    354c:	59 f0       	breq	.+22     	; 0x3564 <vfprintf+0xba>
    354e:	93 32       	cpi	r25, 0x23	; 35
    3550:	91 f4       	brne	.+36     	; 0x3576 <vfprintf+0xcc>
    3552:	0e c0       	rjmp	.+28     	; 0x3570 <vfprintf+0xc6>
    3554:	9d 32       	cpi	r25, 0x2D	; 45
    3556:	49 f0       	breq	.+18     	; 0x356a <vfprintf+0xc0>
    3558:	90 33       	cpi	r25, 0x30	; 48
    355a:	69 f4       	brne	.+26     	; 0x3576 <vfprintf+0xcc>
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	24 c0       	rjmp	.+72     	; 0x35a8 <vfprintf+0xfe>
    3560:	52 e0       	ldi	r21, 0x02	; 2
    3562:	f5 2a       	or	r15, r21
    3564:	84 e0       	ldi	r24, 0x04	; 4
    3566:	f8 2a       	or	r15, r24
    3568:	28 c0       	rjmp	.+80     	; 0x35ba <vfprintf+0x110>
    356a:	98 e0       	ldi	r25, 0x08	; 8
    356c:	f9 2a       	or	r15, r25
    356e:	25 c0       	rjmp	.+74     	; 0x35ba <vfprintf+0x110>
    3570:	e0 e1       	ldi	r30, 0x10	; 16
    3572:	fe 2a       	or	r15, r30
    3574:	22 c0       	rjmp	.+68     	; 0x35ba <vfprintf+0x110>
    3576:	f7 fc       	sbrc	r15, 7
    3578:	29 c0       	rjmp	.+82     	; 0x35cc <vfprintf+0x122>
    357a:	89 2f       	mov	r24, r25
    357c:	80 53       	subi	r24, 0x30	; 48
    357e:	8a 30       	cpi	r24, 0x0A	; 10
    3580:	70 f4       	brcc	.+28     	; 0x359e <vfprintf+0xf4>
    3582:	f6 fe       	sbrs	r15, 6
    3584:	05 c0       	rjmp	.+10     	; 0x3590 <vfprintf+0xe6>
    3586:	98 9c       	mul	r9, r8
    3588:	90 2c       	mov	r9, r0
    358a:	11 24       	eor	r1, r1
    358c:	98 0e       	add	r9, r24
    358e:	15 c0       	rjmp	.+42     	; 0x35ba <vfprintf+0x110>
    3590:	e8 9c       	mul	r14, r8
    3592:	e0 2c       	mov	r14, r0
    3594:	11 24       	eor	r1, r1
    3596:	e8 0e       	add	r14, r24
    3598:	f0 e2       	ldi	r31, 0x20	; 32
    359a:	ff 2a       	or	r15, r31
    359c:	0e c0       	rjmp	.+28     	; 0x35ba <vfprintf+0x110>
    359e:	9e 32       	cpi	r25, 0x2E	; 46
    35a0:	29 f4       	brne	.+10     	; 0x35ac <vfprintf+0x102>
    35a2:	f6 fc       	sbrc	r15, 6
    35a4:	6b c1       	rjmp	.+726    	; 0x387c <vfprintf+0x3d2>
    35a6:	40 e4       	ldi	r20, 0x40	; 64
    35a8:	f4 2a       	or	r15, r20
    35aa:	07 c0       	rjmp	.+14     	; 0x35ba <vfprintf+0x110>
    35ac:	9c 36       	cpi	r25, 0x6C	; 108
    35ae:	19 f4       	brne	.+6      	; 0x35b6 <vfprintf+0x10c>
    35b0:	50 e8       	ldi	r21, 0x80	; 128
    35b2:	f5 2a       	or	r15, r21
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <vfprintf+0x110>
    35b6:	98 36       	cpi	r25, 0x68	; 104
    35b8:	49 f4       	brne	.+18     	; 0x35cc <vfprintf+0x122>
    35ba:	f2 01       	movw	r30, r4
    35bc:	23 fd       	sbrc	r18, 3
    35be:	95 91       	lpm	r25, Z+
    35c0:	23 ff       	sbrs	r18, 3
    35c2:	91 91       	ld	r25, Z+
    35c4:	2f 01       	movw	r4, r30
    35c6:	99 23       	and	r25, r25
    35c8:	09 f0       	breq	.+2      	; 0x35cc <vfprintf+0x122>
    35ca:	b8 cf       	rjmp	.-144    	; 0x353c <vfprintf+0x92>
    35cc:	89 2f       	mov	r24, r25
    35ce:	85 54       	subi	r24, 0x45	; 69
    35d0:	83 30       	cpi	r24, 0x03	; 3
    35d2:	18 f0       	brcs	.+6      	; 0x35da <vfprintf+0x130>
    35d4:	80 52       	subi	r24, 0x20	; 32
    35d6:	83 30       	cpi	r24, 0x03	; 3
    35d8:	38 f4       	brcc	.+14     	; 0x35e8 <vfprintf+0x13e>
    35da:	44 e0       	ldi	r20, 0x04	; 4
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	a4 0e       	add	r10, r20
    35e0:	b5 1e       	adc	r11, r21
    35e2:	5f e3       	ldi	r21, 0x3F	; 63
    35e4:	59 83       	std	Y+1, r21	; 0x01
    35e6:	0f c0       	rjmp	.+30     	; 0x3606 <vfprintf+0x15c>
    35e8:	93 36       	cpi	r25, 0x63	; 99
    35ea:	31 f0       	breq	.+12     	; 0x35f8 <vfprintf+0x14e>
    35ec:	93 37       	cpi	r25, 0x73	; 115
    35ee:	79 f0       	breq	.+30     	; 0x360e <vfprintf+0x164>
    35f0:	93 35       	cpi	r25, 0x53	; 83
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <vfprintf+0x14c>
    35f4:	56 c0       	rjmp	.+172    	; 0x36a2 <vfprintf+0x1f8>
    35f6:	20 c0       	rjmp	.+64     	; 0x3638 <vfprintf+0x18e>
    35f8:	f5 01       	movw	r30, r10
    35fa:	80 81       	ld	r24, Z
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	42 e0       	ldi	r20, 0x02	; 2
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	a4 0e       	add	r10, r20
    3604:	b5 1e       	adc	r11, r21
    3606:	61 01       	movw	r12, r2
    3608:	01 e0       	ldi	r16, 0x01	; 1
    360a:	10 e0       	ldi	r17, 0x00	; 0
    360c:	12 c0       	rjmp	.+36     	; 0x3632 <vfprintf+0x188>
    360e:	f5 01       	movw	r30, r10
    3610:	c0 80       	ld	r12, Z
    3612:	d1 80       	ldd	r13, Z+1	; 0x01
    3614:	f6 fc       	sbrc	r15, 6
    3616:	03 c0       	rjmp	.+6      	; 0x361e <vfprintf+0x174>
    3618:	6f ef       	ldi	r22, 0xFF	; 255
    361a:	7f ef       	ldi	r23, 0xFF	; 255
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <vfprintf+0x178>
    361e:	69 2d       	mov	r22, r9
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	42 e0       	ldi	r20, 0x02	; 2
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	a4 0e       	add	r10, r20
    3628:	b5 1e       	adc	r11, r21
    362a:	c6 01       	movw	r24, r12
    362c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <strnlen>
    3630:	8c 01       	movw	r16, r24
    3632:	5f e7       	ldi	r21, 0x7F	; 127
    3634:	f5 22       	and	r15, r21
    3636:	14 c0       	rjmp	.+40     	; 0x3660 <vfprintf+0x1b6>
    3638:	f5 01       	movw	r30, r10
    363a:	c0 80       	ld	r12, Z
    363c:	d1 80       	ldd	r13, Z+1	; 0x01
    363e:	f6 fc       	sbrc	r15, 6
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <vfprintf+0x19e>
    3642:	6f ef       	ldi	r22, 0xFF	; 255
    3644:	7f ef       	ldi	r23, 0xFF	; 255
    3646:	02 c0       	rjmp	.+4      	; 0x364c <vfprintf+0x1a2>
    3648:	69 2d       	mov	r22, r9
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	42 e0       	ldi	r20, 0x02	; 2
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	a4 0e       	add	r10, r20
    3652:	b5 1e       	adc	r11, r21
    3654:	c6 01       	movw	r24, r12
    3656:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <strnlen_P>
    365a:	8c 01       	movw	r16, r24
    365c:	50 e8       	ldi	r21, 0x80	; 128
    365e:	f5 2a       	or	r15, r21
    3660:	f3 fe       	sbrs	r15, 3
    3662:	07 c0       	rjmp	.+14     	; 0x3672 <vfprintf+0x1c8>
    3664:	1a c0       	rjmp	.+52     	; 0x369a <vfprintf+0x1f0>
    3666:	80 e2       	ldi	r24, 0x20	; 32
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	b3 01       	movw	r22, r6
    366c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3670:	ea 94       	dec	r14
    3672:	8e 2d       	mov	r24, r14
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	08 17       	cp	r16, r24
    3678:	19 07       	cpc	r17, r25
    367a:	a8 f3       	brcs	.-22     	; 0x3666 <vfprintf+0x1bc>
    367c:	0e c0       	rjmp	.+28     	; 0x369a <vfprintf+0x1f0>
    367e:	f6 01       	movw	r30, r12
    3680:	f7 fc       	sbrc	r15, 7
    3682:	85 91       	lpm	r24, Z+
    3684:	f7 fe       	sbrs	r15, 7
    3686:	81 91       	ld	r24, Z+
    3688:	6f 01       	movw	r12, r30
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	b3 01       	movw	r22, r6
    368e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3692:	e1 10       	cpse	r14, r1
    3694:	ea 94       	dec	r14
    3696:	01 50       	subi	r16, 0x01	; 1
    3698:	10 40       	sbci	r17, 0x00	; 0
    369a:	01 15       	cp	r16, r1
    369c:	11 05       	cpc	r17, r1
    369e:	79 f7       	brne	.-34     	; 0x367e <vfprintf+0x1d4>
    36a0:	ea c0       	rjmp	.+468    	; 0x3876 <vfprintf+0x3cc>
    36a2:	94 36       	cpi	r25, 0x64	; 100
    36a4:	11 f0       	breq	.+4      	; 0x36aa <vfprintf+0x200>
    36a6:	99 36       	cpi	r25, 0x69	; 105
    36a8:	69 f5       	brne	.+90     	; 0x3704 <vfprintf+0x25a>
    36aa:	f7 fe       	sbrs	r15, 7
    36ac:	08 c0       	rjmp	.+16     	; 0x36be <vfprintf+0x214>
    36ae:	f5 01       	movw	r30, r10
    36b0:	20 81       	ld	r18, Z
    36b2:	31 81       	ldd	r19, Z+1	; 0x01
    36b4:	42 81       	ldd	r20, Z+2	; 0x02
    36b6:	53 81       	ldd	r21, Z+3	; 0x03
    36b8:	84 e0       	ldi	r24, 0x04	; 4
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0a c0       	rjmp	.+20     	; 0x36d2 <vfprintf+0x228>
    36be:	f5 01       	movw	r30, r10
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	9c 01       	movw	r18, r24
    36c6:	44 27       	eor	r20, r20
    36c8:	37 fd       	sbrc	r19, 7
    36ca:	40 95       	com	r20
    36cc:	54 2f       	mov	r21, r20
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	a8 0e       	add	r10, r24
    36d4:	b9 1e       	adc	r11, r25
    36d6:	9f e6       	ldi	r25, 0x6F	; 111
    36d8:	f9 22       	and	r15, r25
    36da:	57 ff       	sbrs	r21, 7
    36dc:	09 c0       	rjmp	.+18     	; 0x36f0 <vfprintf+0x246>
    36de:	50 95       	com	r21
    36e0:	40 95       	com	r20
    36e2:	30 95       	com	r19
    36e4:	21 95       	neg	r18
    36e6:	3f 4f       	sbci	r19, 0xFF	; 255
    36e8:	4f 4f       	sbci	r20, 0xFF	; 255
    36ea:	5f 4f       	sbci	r21, 0xFF	; 255
    36ec:	e0 e8       	ldi	r30, 0x80	; 128
    36ee:	fe 2a       	or	r15, r30
    36f0:	ca 01       	movw	r24, r20
    36f2:	b9 01       	movw	r22, r18
    36f4:	a1 01       	movw	r20, r2
    36f6:	2a e0       	ldi	r18, 0x0A	; 10
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	0e 94 9d 1c 	call	0x393a	; 0x393a <__ultoa_invert>
    36fe:	d8 2e       	mov	r13, r24
    3700:	d2 18       	sub	r13, r2
    3702:	40 c0       	rjmp	.+128    	; 0x3784 <vfprintf+0x2da>
    3704:	95 37       	cpi	r25, 0x75	; 117
    3706:	29 f4       	brne	.+10     	; 0x3712 <vfprintf+0x268>
    3708:	1f 2d       	mov	r17, r15
    370a:	1f 7e       	andi	r17, 0xEF	; 239
    370c:	2a e0       	ldi	r18, 0x0A	; 10
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	1d c0       	rjmp	.+58     	; 0x374c <vfprintf+0x2a2>
    3712:	1f 2d       	mov	r17, r15
    3714:	19 7f       	andi	r17, 0xF9	; 249
    3716:	9f 36       	cpi	r25, 0x6F	; 111
    3718:	61 f0       	breq	.+24     	; 0x3732 <vfprintf+0x288>
    371a:	90 37       	cpi	r25, 0x70	; 112
    371c:	20 f4       	brcc	.+8      	; 0x3726 <vfprintf+0x27c>
    371e:	98 35       	cpi	r25, 0x58	; 88
    3720:	09 f0       	breq	.+2      	; 0x3724 <vfprintf+0x27a>
    3722:	ac c0       	rjmp	.+344    	; 0x387c <vfprintf+0x3d2>
    3724:	0f c0       	rjmp	.+30     	; 0x3744 <vfprintf+0x29a>
    3726:	90 37       	cpi	r25, 0x70	; 112
    3728:	39 f0       	breq	.+14     	; 0x3738 <vfprintf+0x28e>
    372a:	98 37       	cpi	r25, 0x78	; 120
    372c:	09 f0       	breq	.+2      	; 0x3730 <vfprintf+0x286>
    372e:	a6 c0       	rjmp	.+332    	; 0x387c <vfprintf+0x3d2>
    3730:	04 c0       	rjmp	.+8      	; 0x373a <vfprintf+0x290>
    3732:	28 e0       	ldi	r18, 0x08	; 8
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	0a c0       	rjmp	.+20     	; 0x374c <vfprintf+0x2a2>
    3738:	10 61       	ori	r17, 0x10	; 16
    373a:	14 fd       	sbrc	r17, 4
    373c:	14 60       	ori	r17, 0x04	; 4
    373e:	20 e1       	ldi	r18, 0x10	; 16
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	04 c0       	rjmp	.+8      	; 0x374c <vfprintf+0x2a2>
    3744:	14 fd       	sbrc	r17, 4
    3746:	16 60       	ori	r17, 0x06	; 6
    3748:	20 e1       	ldi	r18, 0x10	; 16
    374a:	32 e0       	ldi	r19, 0x02	; 2
    374c:	17 ff       	sbrs	r17, 7
    374e:	08 c0       	rjmp	.+16     	; 0x3760 <vfprintf+0x2b6>
    3750:	f5 01       	movw	r30, r10
    3752:	60 81       	ld	r22, Z
    3754:	71 81       	ldd	r23, Z+1	; 0x01
    3756:	82 81       	ldd	r24, Z+2	; 0x02
    3758:	93 81       	ldd	r25, Z+3	; 0x03
    375a:	44 e0       	ldi	r20, 0x04	; 4
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	08 c0       	rjmp	.+16     	; 0x3770 <vfprintf+0x2c6>
    3760:	f5 01       	movw	r30, r10
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	bc 01       	movw	r22, r24
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	42 e0       	ldi	r20, 0x02	; 2
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	a4 0e       	add	r10, r20
    3772:	b5 1e       	adc	r11, r21
    3774:	a1 01       	movw	r20, r2
    3776:	0e 94 9d 1c 	call	0x393a	; 0x393a <__ultoa_invert>
    377a:	d8 2e       	mov	r13, r24
    377c:	d2 18       	sub	r13, r2
    377e:	8f e7       	ldi	r24, 0x7F	; 127
    3780:	f8 2e       	mov	r15, r24
    3782:	f1 22       	and	r15, r17
    3784:	f6 fe       	sbrs	r15, 6
    3786:	0b c0       	rjmp	.+22     	; 0x379e <vfprintf+0x2f4>
    3788:	5e ef       	ldi	r21, 0xFE	; 254
    378a:	f5 22       	and	r15, r21
    378c:	d9 14       	cp	r13, r9
    378e:	38 f4       	brcc	.+14     	; 0x379e <vfprintf+0x2f4>
    3790:	f4 fe       	sbrs	r15, 4
    3792:	07 c0       	rjmp	.+14     	; 0x37a2 <vfprintf+0x2f8>
    3794:	f2 fc       	sbrc	r15, 2
    3796:	05 c0       	rjmp	.+10     	; 0x37a2 <vfprintf+0x2f8>
    3798:	8f ee       	ldi	r24, 0xEF	; 239
    379a:	f8 22       	and	r15, r24
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <vfprintf+0x2f8>
    379e:	1d 2d       	mov	r17, r13
    37a0:	01 c0       	rjmp	.+2      	; 0x37a4 <vfprintf+0x2fa>
    37a2:	19 2d       	mov	r17, r9
    37a4:	f4 fe       	sbrs	r15, 4
    37a6:	0d c0       	rjmp	.+26     	; 0x37c2 <vfprintf+0x318>
    37a8:	fe 01       	movw	r30, r28
    37aa:	ed 0d       	add	r30, r13
    37ac:	f1 1d       	adc	r31, r1
    37ae:	80 81       	ld	r24, Z
    37b0:	80 33       	cpi	r24, 0x30	; 48
    37b2:	19 f4       	brne	.+6      	; 0x37ba <vfprintf+0x310>
    37b4:	99 ee       	ldi	r25, 0xE9	; 233
    37b6:	f9 22       	and	r15, r25
    37b8:	08 c0       	rjmp	.+16     	; 0x37ca <vfprintf+0x320>
    37ba:	1f 5f       	subi	r17, 0xFF	; 255
    37bc:	f2 fe       	sbrs	r15, 2
    37be:	05 c0       	rjmp	.+10     	; 0x37ca <vfprintf+0x320>
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <vfprintf+0x31e>
    37c2:	8f 2d       	mov	r24, r15
    37c4:	86 78       	andi	r24, 0x86	; 134
    37c6:	09 f0       	breq	.+2      	; 0x37ca <vfprintf+0x320>
    37c8:	1f 5f       	subi	r17, 0xFF	; 255
    37ca:	0f 2d       	mov	r16, r15
    37cc:	f3 fc       	sbrc	r15, 3
    37ce:	14 c0       	rjmp	.+40     	; 0x37f8 <vfprintf+0x34e>
    37d0:	f0 fe       	sbrs	r15, 0
    37d2:	0f c0       	rjmp	.+30     	; 0x37f2 <vfprintf+0x348>
    37d4:	1e 15       	cp	r17, r14
    37d6:	10 f0       	brcs	.+4      	; 0x37dc <vfprintf+0x332>
    37d8:	9d 2c       	mov	r9, r13
    37da:	0b c0       	rjmp	.+22     	; 0x37f2 <vfprintf+0x348>
    37dc:	9d 2c       	mov	r9, r13
    37de:	9e 0c       	add	r9, r14
    37e0:	91 1a       	sub	r9, r17
    37e2:	1e 2d       	mov	r17, r14
    37e4:	06 c0       	rjmp	.+12     	; 0x37f2 <vfprintf+0x348>
    37e6:	80 e2       	ldi	r24, 0x20	; 32
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	b3 01       	movw	r22, r6
    37ec:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    37f0:	1f 5f       	subi	r17, 0xFF	; 255
    37f2:	1e 15       	cp	r17, r14
    37f4:	c0 f3       	brcs	.-16     	; 0x37e6 <vfprintf+0x33c>
    37f6:	04 c0       	rjmp	.+8      	; 0x3800 <vfprintf+0x356>
    37f8:	1e 15       	cp	r17, r14
    37fa:	10 f4       	brcc	.+4      	; 0x3800 <vfprintf+0x356>
    37fc:	e1 1a       	sub	r14, r17
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <vfprintf+0x358>
    3800:	ee 24       	eor	r14, r14
    3802:	04 ff       	sbrs	r16, 4
    3804:	0f c0       	rjmp	.+30     	; 0x3824 <vfprintf+0x37a>
    3806:	80 e3       	ldi	r24, 0x30	; 48
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	b3 01       	movw	r22, r6
    380c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3810:	02 ff       	sbrs	r16, 2
    3812:	1d c0       	rjmp	.+58     	; 0x384e <vfprintf+0x3a4>
    3814:	01 fd       	sbrc	r16, 1
    3816:	03 c0       	rjmp	.+6      	; 0x381e <vfprintf+0x374>
    3818:	88 e7       	ldi	r24, 0x78	; 120
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	0e c0       	rjmp	.+28     	; 0x383a <vfprintf+0x390>
    381e:	88 e5       	ldi	r24, 0x58	; 88
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	0b c0       	rjmp	.+22     	; 0x383a <vfprintf+0x390>
    3824:	80 2f       	mov	r24, r16
    3826:	86 78       	andi	r24, 0x86	; 134
    3828:	91 f0       	breq	.+36     	; 0x384e <vfprintf+0x3a4>
    382a:	01 ff       	sbrs	r16, 1
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <vfprintf+0x388>
    382e:	8b e2       	ldi	r24, 0x2B	; 43
    3830:	01 c0       	rjmp	.+2      	; 0x3834 <vfprintf+0x38a>
    3832:	80 e2       	ldi	r24, 0x20	; 32
    3834:	f7 fc       	sbrc	r15, 7
    3836:	8d e2       	ldi	r24, 0x2D	; 45
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	b3 01       	movw	r22, r6
    383c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3840:	06 c0       	rjmp	.+12     	; 0x384e <vfprintf+0x3a4>
    3842:	80 e3       	ldi	r24, 0x30	; 48
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	b3 01       	movw	r22, r6
    3848:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    384c:	9a 94       	dec	r9
    384e:	d9 14       	cp	r13, r9
    3850:	c0 f3       	brcs	.-16     	; 0x3842 <vfprintf+0x398>
    3852:	da 94       	dec	r13
    3854:	f1 01       	movw	r30, r2
    3856:	ed 0d       	add	r30, r13
    3858:	f1 1d       	adc	r31, r1
    385a:	80 81       	ld	r24, Z
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	b3 01       	movw	r22, r6
    3860:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3864:	dd 20       	and	r13, r13
    3866:	a9 f7       	brne	.-22     	; 0x3852 <vfprintf+0x3a8>
    3868:	06 c0       	rjmp	.+12     	; 0x3876 <vfprintf+0x3cc>
    386a:	80 e2       	ldi	r24, 0x20	; 32
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	b3 01       	movw	r22, r6
    3870:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <fputc>
    3874:	ea 94       	dec	r14
    3876:	ee 20       	and	r14, r14
    3878:	c1 f7       	brne	.-16     	; 0x386a <vfprintf+0x3c0>
    387a:	43 ce       	rjmp	.-890    	; 0x3502 <vfprintf+0x58>
    387c:	f3 01       	movw	r30, r6
    387e:	66 81       	ldd	r22, Z+6	; 0x06
    3880:	77 81       	ldd	r23, Z+7	; 0x07
    3882:	cb 01       	movw	r24, r22
    3884:	2b 96       	adiw	r28, 0x0b	; 11
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	ff 90       	pop	r15
    389a:	ef 90       	pop	r14
    389c:	df 90       	pop	r13
    389e:	cf 90       	pop	r12
    38a0:	bf 90       	pop	r11
    38a2:	af 90       	pop	r10
    38a4:	9f 90       	pop	r9
    38a6:	8f 90       	pop	r8
    38a8:	7f 90       	pop	r7
    38aa:	6f 90       	pop	r6
    38ac:	5f 90       	pop	r5
    38ae:	4f 90       	pop	r4
    38b0:	3f 90       	pop	r3
    38b2:	2f 90       	pop	r2
    38b4:	08 95       	ret

000038b6 <strnlen_P>:
    38b6:	fc 01       	movw	r30, r24
    38b8:	05 90       	lpm	r0, Z+
    38ba:	61 50       	subi	r22, 0x01	; 1
    38bc:	70 40       	sbci	r23, 0x00	; 0
    38be:	01 10       	cpse	r0, r1
    38c0:	d8 f7       	brcc	.-10     	; 0x38b8 <strnlen_P+0x2>
    38c2:	80 95       	com	r24
    38c4:	90 95       	com	r25
    38c6:	8e 0f       	add	r24, r30
    38c8:	9f 1f       	adc	r25, r31
    38ca:	08 95       	ret

000038cc <strnlen>:
    38cc:	fc 01       	movw	r30, r24
    38ce:	61 50       	subi	r22, 0x01	; 1
    38d0:	70 40       	sbci	r23, 0x00	; 0
    38d2:	01 90       	ld	r0, Z+
    38d4:	01 10       	cpse	r0, r1
    38d6:	d8 f7       	brcc	.-10     	; 0x38ce <strnlen+0x2>
    38d8:	80 95       	com	r24
    38da:	90 95       	com	r25
    38dc:	8e 0f       	add	r24, r30
    38de:	9f 1f       	adc	r25, r31
    38e0:	08 95       	ret

000038e2 <fputc>:
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	8c 01       	movw	r16, r24
    38ec:	eb 01       	movw	r28, r22
    38ee:	8b 81       	ldd	r24, Y+3	; 0x03
    38f0:	81 ff       	sbrs	r24, 1
    38f2:	1b c0       	rjmp	.+54     	; 0x392a <fputc+0x48>
    38f4:	82 ff       	sbrs	r24, 2
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <fputc+0x30>
    38f8:	2e 81       	ldd	r18, Y+6	; 0x06
    38fa:	3f 81       	ldd	r19, Y+7	; 0x07
    38fc:	8c 81       	ldd	r24, Y+4	; 0x04
    38fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3900:	28 17       	cp	r18, r24
    3902:	39 07       	cpc	r19, r25
    3904:	64 f4       	brge	.+24     	; 0x391e <fputc+0x3c>
    3906:	e8 81       	ld	r30, Y
    3908:	f9 81       	ldd	r31, Y+1	; 0x01
    390a:	01 93       	st	Z+, r16
    390c:	f9 83       	std	Y+1, r31	; 0x01
    390e:	e8 83       	st	Y, r30
    3910:	06 c0       	rjmp	.+12     	; 0x391e <fputc+0x3c>
    3912:	e8 85       	ldd	r30, Y+8	; 0x08
    3914:	f9 85       	ldd	r31, Y+9	; 0x09
    3916:	80 2f       	mov	r24, r16
    3918:	09 95       	icall
    391a:	89 2b       	or	r24, r25
    391c:	31 f4       	brne	.+12     	; 0x392a <fputc+0x48>
    391e:	8e 81       	ldd	r24, Y+6	; 0x06
    3920:	9f 81       	ldd	r25, Y+7	; 0x07
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	9f 83       	std	Y+7, r25	; 0x07
    3926:	8e 83       	std	Y+6, r24	; 0x06
    3928:	02 c0       	rjmp	.+4      	; 0x392e <fputc+0x4c>
    392a:	0f ef       	ldi	r16, 0xFF	; 255
    392c:	1f ef       	ldi	r17, 0xFF	; 255
    392e:	c8 01       	movw	r24, r16
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	08 95       	ret

0000393a <__ultoa_invert>:
    393a:	fa 01       	movw	r30, r20
    393c:	aa 27       	eor	r26, r26
    393e:	28 30       	cpi	r18, 0x08	; 8
    3940:	51 f1       	breq	.+84     	; 0x3996 <__ultoa_invert+0x5c>
    3942:	20 31       	cpi	r18, 0x10	; 16
    3944:	81 f1       	breq	.+96     	; 0x39a6 <__ultoa_invert+0x6c>
    3946:	e8 94       	clt
    3948:	6f 93       	push	r22
    394a:	6e 7f       	andi	r22, 0xFE	; 254
    394c:	6e 5f       	subi	r22, 0xFE	; 254
    394e:	7f 4f       	sbci	r23, 0xFF	; 255
    3950:	8f 4f       	sbci	r24, 0xFF	; 255
    3952:	9f 4f       	sbci	r25, 0xFF	; 255
    3954:	af 4f       	sbci	r26, 0xFF	; 255
    3956:	b1 e0       	ldi	r27, 0x01	; 1
    3958:	3e d0       	rcall	.+124    	; 0x39d6 <__ultoa_invert+0x9c>
    395a:	b4 e0       	ldi	r27, 0x04	; 4
    395c:	3c d0       	rcall	.+120    	; 0x39d6 <__ultoa_invert+0x9c>
    395e:	67 0f       	add	r22, r23
    3960:	78 1f       	adc	r23, r24
    3962:	89 1f       	adc	r24, r25
    3964:	9a 1f       	adc	r25, r26
    3966:	a1 1d       	adc	r26, r1
    3968:	68 0f       	add	r22, r24
    396a:	79 1f       	adc	r23, r25
    396c:	8a 1f       	adc	r24, r26
    396e:	91 1d       	adc	r25, r1
    3970:	a1 1d       	adc	r26, r1
    3972:	6a 0f       	add	r22, r26
    3974:	71 1d       	adc	r23, r1
    3976:	81 1d       	adc	r24, r1
    3978:	91 1d       	adc	r25, r1
    397a:	a1 1d       	adc	r26, r1
    397c:	20 d0       	rcall	.+64     	; 0x39be <__ultoa_invert+0x84>
    397e:	09 f4       	brne	.+2      	; 0x3982 <__ultoa_invert+0x48>
    3980:	68 94       	set
    3982:	3f 91       	pop	r19
    3984:	2a e0       	ldi	r18, 0x0A	; 10
    3986:	26 9f       	mul	r18, r22
    3988:	11 24       	eor	r1, r1
    398a:	30 19       	sub	r19, r0
    398c:	30 5d       	subi	r19, 0xD0	; 208
    398e:	31 93       	st	Z+, r19
    3990:	de f6       	brtc	.-74     	; 0x3948 <__ultoa_invert+0xe>
    3992:	cf 01       	movw	r24, r30
    3994:	08 95       	ret
    3996:	46 2f       	mov	r20, r22
    3998:	47 70       	andi	r20, 0x07	; 7
    399a:	40 5d       	subi	r20, 0xD0	; 208
    399c:	41 93       	st	Z+, r20
    399e:	b3 e0       	ldi	r27, 0x03	; 3
    39a0:	0f d0       	rcall	.+30     	; 0x39c0 <__ultoa_invert+0x86>
    39a2:	c9 f7       	brne	.-14     	; 0x3996 <__ultoa_invert+0x5c>
    39a4:	f6 cf       	rjmp	.-20     	; 0x3992 <__ultoa_invert+0x58>
    39a6:	46 2f       	mov	r20, r22
    39a8:	4f 70       	andi	r20, 0x0F	; 15
    39aa:	40 5d       	subi	r20, 0xD0	; 208
    39ac:	4a 33       	cpi	r20, 0x3A	; 58
    39ae:	18 f0       	brcs	.+6      	; 0x39b6 <__ultoa_invert+0x7c>
    39b0:	49 5d       	subi	r20, 0xD9	; 217
    39b2:	31 fd       	sbrc	r19, 1
    39b4:	40 52       	subi	r20, 0x20	; 32
    39b6:	41 93       	st	Z+, r20
    39b8:	02 d0       	rcall	.+4      	; 0x39be <__ultoa_invert+0x84>
    39ba:	a9 f7       	brne	.-22     	; 0x39a6 <__ultoa_invert+0x6c>
    39bc:	ea cf       	rjmp	.-44     	; 0x3992 <__ultoa_invert+0x58>
    39be:	b4 e0       	ldi	r27, 0x04	; 4
    39c0:	a6 95       	lsr	r26
    39c2:	97 95       	ror	r25
    39c4:	87 95       	ror	r24
    39c6:	77 95       	ror	r23
    39c8:	67 95       	ror	r22
    39ca:	ba 95       	dec	r27
    39cc:	c9 f7       	brne	.-14     	; 0x39c0 <__ultoa_invert+0x86>
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	61 05       	cpc	r22, r1
    39d2:	71 05       	cpc	r23, r1
    39d4:	08 95       	ret
    39d6:	9b 01       	movw	r18, r22
    39d8:	ac 01       	movw	r20, r24
    39da:	0a 2e       	mov	r0, r26
    39dc:	06 94       	lsr	r0
    39de:	57 95       	ror	r21
    39e0:	47 95       	ror	r20
    39e2:	37 95       	ror	r19
    39e4:	27 95       	ror	r18
    39e6:	ba 95       	dec	r27
    39e8:	c9 f7       	brne	.-14     	; 0x39dc <__ultoa_invert+0xa2>
    39ea:	62 0f       	add	r22, r18
    39ec:	73 1f       	adc	r23, r19
    39ee:	84 1f       	adc	r24, r20
    39f0:	95 1f       	adc	r25, r21
    39f2:	a0 1d       	adc	r26, r0
    39f4:	08 95       	ret

000039f6 <_exit>:
    39f6:	f8 94       	cli

000039f8 <__stop_program>:
    39f8:	ff cf       	rjmp	.-2      	; 0x39f8 <__stop_program>
