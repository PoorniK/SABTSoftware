
SABT_MainUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000364  00800100  000039f8  00003a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a4  00800464  00800464  00003df0  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00003104  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000050d3  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d16  00000000  00000000  0000c147  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002bd5  00000000  00000000  0000ce5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000fa34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001126  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c42  00000000  00000000  000111ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00012e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_13>
      38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      50:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_20>
      54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      64:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      68:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      6c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      70:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_28>
      74:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      78:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      7c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      80:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      84:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      88:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      8c:	5f 18       	sub	r5, r15
      8e:	62 18       	sub	r6, r2
      90:	65 18       	sub	r6, r5
      92:	68 18       	sub	r6, r8
      94:	6b 18       	sub	r6, r11
      96:	6e 18       	sub	r6, r14
      98:	71 18       	sub	r7, r1
      9a:	74 18       	sub	r7, r4
      9c:	77 18       	sub	r7, r7
      9e:	7a 18       	sub	r7, r10
      a0:	7d 18       	sub	r7, r13
      a2:	80 18       	sub	r8, r0
      a4:	83 18       	sub	r8, r3
      a6:	86 18       	sub	r8, r6
      a8:	89 18       	sub	r8, r9
      aa:	8c 18       	sub	r8, r12
      ac:	8f 18       	sub	r8, r15
      ae:	92 18       	sub	r9, r2
      b0:	95 18       	sub	r9, r5
      b2:	98 18       	sub	r9, r8
      b4:	9b 18       	sub	r9, r11
      b6:	9e 18       	sub	r9, r14
      b8:	a1 18       	sub	r10, r1
      ba:	a4 18       	sub	r10, r4
      bc:	a7 18       	sub	r10, r7
      be:	aa 18       	sub	r10, r10

000000c0 <__c.1820>:
      c0:	4d 6f 64 65 20 66 69 6c 65 20 66 6f 75 6e 64 00     Mode file found.

000000d0 <__c.1818>:
      d0:	4d 6f 64 65 20 66 69 6c 65 20 6e 6f 74 20 66 6f     Mode file not fo
      e0:	75 6e 64 00                                         und.

000000e4 <__c.1816>:
      e4:	53 41 42 54 20 74 65 73 74 69 6e 67 2e 2e 2e 00     SABT testing....

000000f4 <__c.2383>:
      f4:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 7a 69     Error initializi
     104:	6e 67 20 56 53 31 30 35 33 20 2d 20 43 4f 44 45     ng VS1053 - CODE
     114:	20 00                                                .

00000116 <__c.2381>:
     116:	56 53 31 30 35 33 20 4d 50 33 20 63 68 69 70 20     VS1053 MP3 chip 
     126:	73 75 63 65 73 73 66 75 6c 6c 79 20 69 6e 69 74     sucessfully init
     136:	69 61 6c 69 7a 65 64 00                             ialized.

0000013e <__c.2379>:
     13e:	46 41 54 33 32 20 66 69 6c 65 20 73 79 73 74 65     FAT32 file syste
     14e:	6d 20 64 65 74 65 63 74 65 64 2e 2e 2e 00           m detected....

0000015c <__c.2377>:
     15c:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000016d <__c.2375>:
     16d:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     17d:	44 65 74 65 63 74 65 64 00                          Detected.

00000186 <__c.2372>:
     186:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     196:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1a6:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001b0 <__c.2369>:
     1b0:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     1c0:	72 64 20 44 65 74 65 63 74 65 64 00                 rd Detected.

000001cc <__c.2365>:
     1cc:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1dc:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     1ec:	20 44 65 74 65 63 74 65 64 00                        Detected.

000001f6 <__c.2361>:
     1f6:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     206:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000213 <__c.2359>:
     213:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     223:	63 74 65 64 2e 2e 00                                cted...

0000022a <__c.2161>:
     22a:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     23a:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     24a:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000254 <__c.2065>:
     254:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     264:	2e 00                                               ..

00000266 <__c.2027>:
     266:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     276:	20 63 6c 75 73 74 65 72 00                           cluster.

0000027f <__c.1980>:
     27f:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     28f:	20 63 6c 75 73 74 65 72 00                           cluster.

00000298 <__c.1939>:
     298:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2a8:	20 63 6c 75 73 74 65 72 00                           cluster.

000002b1 <__c.1888>:
     2b1:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2c1:	20 63 6c 75 73 74 65 72 00                           cluster.

000002ca <__c.1880>:
     2ca:	52 4f 4f 54 00                                      ROOT.

000002cf <__c.1878>:
     2cf:	44 49 52 00                                         DIR.

000002d3 <__c.1876>:
     2d3:	20 20 20 00                                            .

000002d7 <__c.1874>:
     2d7:	46 49 4c 45 00                                      FILE.

000002dc <__c.1872>:
     2dc:	20 20 20 00                                            .

000002e0 <__c.1866>:
     2e0:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000002ee <__c.1864>:
     2ee:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000002f9 <__c.1859>:
     2f9:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     309:	69 73 74 21 00                                      ist!.

0000030e <__c.1926>:
     30e:	56 6f 6c 20 44 4f 57 4e 20 70 72 65 73 73 65 64     Vol DOWN pressed
	...

0000031f <__c.1923>:
     31f:	56 6f 6c 20 55 50 20 70 72 65 73 73 65 64 00        Vol UP pressed.

0000032e <__c.1920>:
     32e:	4d 6f 64 65 20 32 20 70 72 65 73 73 65 64 00        Mode 2 pressed.

0000033d <__c.1917>:
     33d:	4d 6f 64 65 20 31 20 70 72 65 73 73 65 64 00        Mode 1 pressed.

0000034c <__c.1914>:
     34c:	45 6e 74 65 72 20 32 20 70 72 65 73 73 65 64 00     Enter 2 pressed.

0000035c <__c.1911>:
     35c:	45 6e 74 65 72 20 31 20 70 72 65 73 73 65 64 00     Enter 1 pressed.

0000036c <__c.1878>:
     36c:	41 6e 61 6c 6f 67 20 49 6e 70 75 74 20 63 68 61     Analog Input cha
     37c:	6e 6e 65 6c 2c 4d 53 42 2c 4c 53 42 20 3a 00        nnel,MSB,LSB :.

0000038b <__c.1816>:
     38b:	41 6e 64 20 74 68 65 20 6d 6f 64 65 73 20 61 72     And the modes ar
     39b:	65 3b 20 00                                         e; .

0000039f <__c.1814>:
     39f:	4e 75 6d 62 65 72 20 6f 66 20 6d 6f 64 65 73 20     Number of modes 
     3af:	73 65 6c 65 63 74 65 64 3a 20 00                    selected: .

000003ba <__c.1785>:
     3ba:	53 41 42 54 2d 46 41 49 4c 00                       SABT-FAIL.

000003c4 <__c.1783>:
     3c4:	53 41 42 54 2d 4f 4b 00                             SABT-OK.

000003cc <__c.1765>:
     3cc:	53 41 42 54 2d 76 32 2e 31 00                       SABT-v2.1.

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf ef       	ldi	r28, 0xFF	; 255
     3dc:	d0 e4       	ldi	r29, 0x40	; 64
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	14 e0       	ldi	r17, 0x04	; 4
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b1 e0       	ldi	r27, 0x01	; 1
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f9 e3       	ldi	r31, 0x39	; 57
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	0b bf       	out	0x3b, r16	; 59
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__do_copy_data+0x14>
     3f2:	07 90       	elpm	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	a4 36       	cpi	r26, 0x64	; 100
     3f8:	b1 07       	cpc	r27, r17
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__do_copy_data+0x10>

000003fc <__do_clear_bss>:
     3fc:	18 e0       	ldi	r17, 0x08	; 8
     3fe:	a4 e6       	ldi	r26, 0x64	; 100
     400:	b4 e0       	ldi	r27, 0x04	; 4
     402:	01 c0       	rjmp	.+2      	; 0x406 <.do_clear_bss_start>

00000404 <.do_clear_bss_loop>:
     404:	1d 92       	st	X+, r1

00000406 <.do_clear_bss_start>:
     406:	a8 30       	cpi	r26, 0x08	; 8
     408:	b1 07       	cpc	r27, r17
     40a:	e1 f7       	brne	.-8      	; 0x404 <.do_clear_bss_loop>
     40c:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
     410:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <_exit>

00000414 <__bad_interrupt>:
     414:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000418 <TimeRoutine>:
 *    IT seems like the PORTD is a data register. Turns off/on bits 5,6,7 in Portd depending on LED_STAT
 * @ref AtATmega1284P(Preferred).pdf
 * @return Void
 */
void TimeRoutine(void){
  if(!LED_STAT){
     418:	80 91 da 06 	lds	r24, 0x06DA
     41c:	88 23       	and	r24, r24
     41e:	39 f4       	brne	.+14     	; 0x42e <TimeRoutine+0x16>
    PORTD &= ~_BV(5);
     420:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~_BV(6);
     422:	5e 98       	cbi	0x0b, 6	; 11
    PORTD &= ~_BV(7);
     424:	5f 98       	cbi	0x0b, 7	; 11
    LED_STAT=true;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 da 06 	sts	0x06DA, r24
     42c:	08 95       	ret
  }else{
    PORTD |= _BV(5);
     42e:	5d 9a       	sbi	0x0b, 5	; 11
    PORTD |= _BV(6);
     430:	5e 9a       	sbi	0x0b, 6	; 11
    PORTD |= _BV(7);
     432:	5f 9a       	sbi	0x0b, 7	; 11
    LED_STAT=false;
     434:	10 92 da 06 	sts	0x06DA, r1
     438:	08 95       	ret

0000043a <__vector_13>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(TIMER1_COMPA_vect){
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	8f 93       	push	r24
  TMR1_INT=true;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 8e 04 	sts	0x048E, r24
};
     44c:	8f 91       	pop	r24
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_28>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART1_RX_vect){
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	8f 93       	push	r24
  USART_Keypad_Received_Data=UDR1;
     464:	80 91 ce 00 	lds	r24, 0x00CE
     468:	80 93 e8 07 	sts	0x07E8, r24
  USART_Keypad_DATA_RDY=true; 
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 72 04 	sts	0x0472, r24
};
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_20>:
 * @param Interrupt vector.  Compared to interupt that is fired to see if correct
 *        function to call
 * @ref   http://www.nongnu.org/avr-libc/
 * @return  Void
 */
ISR(USART0_RX_vect){
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	8f 93       	push	r24
//Temporarly using the PC as the UI
//  USART_Keypad_Received_Data=UDR0;
//  USART_Keypad_DATA_RDY=true; 
///*  Temporaraly disabled the PC communications since we are simulating the UI with PC
  USART_PC_Received_Data=UDR0;
     48a:	80 91 c6 00 	lds	r24, 0x00C6
     48e:	80 93 d5 06 	sts	0x06D5, r24
  USART_PC_DATA_RDY=true;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 e4 06 	sts	0x06E4, r24
//*/
};
     498:	8f 91       	pop	r24
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <InitializeSystem>:
/**
 * @brief Initialize the system and interrupts
 * @return Void
 */
void InitializeSystem(void){
  TMR1_INT = false;   // clear the timer interrupt flag
     4a4:	10 92 8e 04 	sts	0x048E, r1
  PORTA = 0x00;
     4a8:	12 b8       	out	0x02, r1	; 2
  DDRA = 0xFF;  
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	81 b9       	out	0x01, r24	; 1
  PORTA = 0x00;  
     4ae:	12 b8       	out	0x02, r1	; 2

  DDRD |= _BV(5)|_BV(6)|_BV(7);
     4b0:	8a b1       	in	r24, 0x0a	; 10
     4b2:	80 6e       	ori	r24, 0xE0	; 224
     4b4:	8a b9       	out	0x0a, r24	; 10
  
  TCCR1A=0x00;
     4b6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=0x0D;
     4ba:	8d e0       	ldi	r24, 0x0D	; 13
     4bc:	80 93 81 00 	sts	0x0081, r24
  OCR1A=780; //1s interval
     4c0:	8c e0       	ldi	r24, 0x0C	; 12
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	90 93 89 00 	sts	0x0089, r25
     4c8:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 |= (1<<OCIE1A); //Enable interrupt
     4cc:	80 91 6f 00 	lds	r24, 0x006F
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	80 93 6f 00 	sts	0x006F, r24

  init_USART_Keypad();
     4d6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <init_USART_Keypad>
  init_USART_PC();
     4da:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <init_USART_PC>
  SPI_Initialize();
     4de:	0e 94 c3 05 	call	0xb86	; 0xb86 <SPI_Initialize>
  sei();  // sets the interrupt flag (enables interrupts)
     4e2:	78 94       	sei

  UI_Current_Mode=0;  //No mode selected
     4e4:	10 92 b9 06 	sts	0x06B9, r1
  TX_NEWLINE_PC;
     4e8:	8d e0       	ldi	r24, 0x0D	; 13
     4ea:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
     4ee:	8a e0       	ldi	r24, 0x0A	; 10
     4f0:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
  USART_transmitStringToPCFromFlash (PSTR("SABT testing..."));
     4f4:	84 ee       	ldi	r24, 0xE4	; 228
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
  TX_NEWLINE_PC;
     4fc:	8d e0       	ldi	r24, 0x0D	; 13
     4fe:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>

  InitSDCard(true);
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 22 0c 	call	0x1844	; 0x1844 <InitSDCard>
  
  if(!UI_CheckModes())
     50e:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <UI_CheckModes>
     512:	88 23       	and	r24, r24
     514:	19 f4       	brne	.+6      	; 0x51c <InitializeSystem+0x78>
  {
    USART_transmitStringToPCFromFlash (PSTR("Mode file not found"));
     516:	80 ed       	ldi	r24, 0xD0	; 208
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <InitializeSystem+0x7c>
    TX_NEWLINE_PC;
  }
  else
  {
    USART_transmitStringToPCFromFlash (PSTR("Mode file found"));
     51c:	80 ec       	ldi	r24, 0xC0	; 192
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    TX_NEWLINE_PC;
     524:	8d e0       	ldi	r24, 0x0D	; 13
     526:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
     52a:	8a e0       	ldi	r24, 0x0A	; 10
     52c:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
  }
  
  RequestToPlayMP3file("INT.MP3");  // Play the welcome message
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
}
     538:	08 95       	ret

0000053a <main>:
/**
 * @brief the main routine
 * @return Void
 */
int main(void){  
  InitializeSystem();
     53a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <InitializeSystem>

  //Display the files in the SD card
  //TX_NEWLINE_PC;
  //findFiles(GET_LIST,0);
  //TX_NEWLINE_PC;
  TX_NEWLINE_PC;
     53e:	8d e0       	ldi	r24, 0x0D	; 13
     540:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
     544:	8a e0       	ldi	r24, 0x0A	; 10
     546:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
  //USART_transmitStringToPCFromFlash (PSTR("Press a key and see it returns."));
  TX_NEWLINE_PC;
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
     550:	8a e0       	ldi	r24, 0x0A	; 10
     552:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
  while(1){
    // TODO remove test string
    // DPRINTF("Small waves crashing against the sand%d.", 42);

    if(TMR1_INT){
     556:	80 91 8e 04 	lds	r24, 0x048E
     55a:	88 23       	and	r24, r24
     55c:	11 f0       	breq	.+4      	; 0x562 <main+0x28>
      TMR1_INT=false;
     55e:	10 92 8e 04 	sts	0x048E, r1
    //  TimeRoutine();
    }

    // check to see if we've received data from UI board
    // if true, process the single byte
    if(USART_Keypad_DATA_RDY){
     562:	80 91 72 04 	lds	r24, 0x0472
     566:	88 23       	and	r24, r24
     568:	11 f0       	breq	.+4      	; 0x56e <main+0x34>
       *  A: contains braille dot at this location in the UI
       *  B: contains braille character at this location in the UI
       *  C: payload contains an error message
       *  D: payload contains a control button input from UI
       *  E: miscellaneous */
      USART_Keypad_ReceiveAction();
     56a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <USART_Keypad_ReceiveAction>
    }

    // check to see if we've received data from a connected PC 
    // if true, process the single byte
    if(USART_PC_DATA_RDY){
     56e:	80 91 e4 06 	lds	r24, 0x06E4
     572:	88 23       	and	r24, r24
     574:	11 f0       	breq	.+4      	; 0x57a <main+0x40>
      USART_PC_ReceiveAction();
     576:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <USART_PC_ReceiveAction>
        USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
        TX_NEWLINE_PC;
      }
      */
    }
    if(USART_PC_Message_ready) //If a message ready from the PC, process it
     57a:	80 91 6a 04 	lds	r24, 0x046A
     57e:	88 23       	and	r24, r24
     580:	11 f0       	breq	.+4      	; 0x586 <main+0x4c>
    {
      PC_parse_message();
     582:	0e 94 9f 19 	call	0x333e	; 0x333e <PC_parse_message>
    }
    if(USART_UI_Message_ready) //If a message ready from the user interface, process it
     586:	80 91 b8 04 	lds	r24, 0x04B8
     58a:	88 23       	and	r24, r24
     58c:	19 f0       	breq	.+6      	; 0x594 <main+0x5a>
    {
      UI_parse_message(false);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UI_parse_message>
    }
    if(UI_MP3_file_Pending)  //If the UI handler needs to play new file, play it (the main loop won't be called while playing another file, so don't worry)
     594:	80 91 6d 04 	lds	r24, 0x046D
     598:	88 23       	and	r24, r24
     59a:	81 f0       	breq	.+32     	; 0x5bc <main+0x82>
    {

      PlayMP3file(fileName);  //WHERE IS THIS FUNCTION?
     59c:	83 e7       	ldi	r24, 0x73	; 115
     59e:	94 e0       	ldi	r25, 0x04	; 4
     5a0:	0e 94 56 13 	call	0x26ac	; 0x26ac <PlayMP3file>

      PlayMP3file(fileName);
     5a4:	83 e7       	ldi	r24, 0x73	; 115
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 56 13 	call	0x26ac	; 0x26ac <PlayMP3file>
      RequestToPlayMP3file("INT.MP3");
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
      PlayMP3file(fileName);
     5b4:	83 e7       	ldi	r24, 0x73	; 115
     5b6:	94 e0       	ldi	r25, 0x04	; 4
     5b8:	0e 94 56 13 	call	0x26ac	; 0x26ac <PlayMP3file>
      
    }
    UI_RunMainOfCurrentMode();
     5bc:	0e 94 b8 14 	call	0x2970	; 0x2970 <UI_RunMainOfCurrentMode>
     5c0:	ca cf       	rjmp	.-108    	; 0x556 <main+0x1c>

000005c2 <init_USART_Keypad>:
 * @brief Initializes the baud communication over USART.
 * @return Void
 */
void init_USART_Keypad(void)
{
  UCSR1B = 0x00; //disable while setting baud rate
     5c2:	e9 ec       	ldi	r30, 0xC9	; 201
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	10 82       	st	Z, r1
  UCSR1A = 0x00;
     5c8:	10 92 c8 00 	sts	0x00C8, r1
  UCSR1C = 0x06;
     5cc:	86 e0       	ldi	r24, 0x06	; 6
     5ce:	80 93 ca 00 	sts	0x00CA, r24
  UBRR1L = 0x19; //set baud rate lo
     5d2:	89 e1       	ldi	r24, 0x19	; 25
     5d4:	80 93 cc 00 	sts	0x00CC, r24
  UBRR1H = 0x00; //set baud rate hi 19,200 baud with 8MHz clock
     5d8:	10 92 cd 00 	sts	0x00CD, r1
  UCSR1B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     5dc:	88 e9       	ldi	r24, 0x98	; 152
     5de:	80 83       	st	Z, r24
  USART_UI_length_received=false;
     5e0:	10 92 f3 07 	sts	0x07F3, r1
  USART_UI_header_received=false;
     5e4:	10 92 f2 07 	sts	0x07F2, r1
  USART_UI_Message_ready=false;
     5e8:	10 92 b8 04 	sts	0x04B8, r1
}
     5ec:	08 95       	ret

000005ee <USART_Keypad_ReceiveAction>:
 *          Transfers data from USART_Keypad_Reiceved_Data->USART_UI_ReceivedPacket
 * @ref  tech_report.pdf
 * @return Void
 */
void USART_Keypad_ReceiveAction(void){
  USART_Keypad_DATA_RDY=false;
     5ee:	10 92 72 04 	sts	0x0472, r1

  if(!USART_UI_header_received)
     5f2:	80 91 f2 07 	lds	r24, 0x07F2
     5f6:	88 23       	and	r24, r24
     5f8:	d9 f4       	brne	.+54     	; 0x630 <USART_Keypad_ReceiveAction+0x42>
  {
    USART_UI_prefix[2]=USART_Keypad_Received_Data;
     5fa:	20 91 e8 07 	lds	r18, 0x07E8
     5fe:	20 93 f1 07 	sts	0x07F1, r18
    USART_UI_prefix[0]=USART_UI_prefix[1];
     602:	90 91 f0 07 	lds	r25, 0x07F0
     606:	90 93 ef 07 	sts	0x07EF, r25
    USART_UI_prefix[1]=USART_UI_prefix[2];
     60a:	20 93 f0 07 	sts	0x07F0, r18
    if((USART_UI_prefix[0]=='U')&&(USART_UI_prefix[1]=='I'))
     60e:	95 35       	cpi	r25, 0x55	; 85
     610:	f1 f5       	brne	.+124    	; 0x68e <USART_Keypad_ReceiveAction+0xa0>
     612:	29 34       	cpi	r18, 0x49	; 73
     614:	e1 f5       	brne	.+120    	; 0x68e <USART_Keypad_ReceiveAction+0xa0>
    {
      USART_UI_header_received=true;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 f2 07 	sts	0x07F2, r24
      USART_UI_ReceivedPacket[0]=USART_UI_prefix[0];
     61c:	90 93 bc 06 	sts	0x06BC, r25
      USART_UI_ReceivedPacket[1]=USART_UI_prefix[1];
     620:	20 93 bd 06 	sts	0x06BD, r18
      USART_UI_receive_msgcnt=2;
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	80 93 ee 07 	sts	0x07EE, r24
      USART_UI_length_received=false;
     62a:	10 92 f3 07 	sts	0x07F3, r1
     62e:	08 95       	ret
      //USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
      //USART_UI_length_reveived=true;
      //USART_UI_receive_msgcnt++;
    }
  }
  else if(!USART_UI_length_received)
     630:	80 91 f3 07 	lds	r24, 0x07F3
     634:	90 91 ee 07 	lds	r25, 0x07EE
     638:	88 23       	and	r24, r24
     63a:	a1 f4       	brne	.+40     	; 0x664 <USART_Keypad_ReceiveAction+0x76>
  {
    if(USART_UI_receive_msgcnt==2)
     63c:	92 30       	cpi	r25, 0x02	; 2
     63e:	79 f4       	brne	.+30     	; 0x65e <USART_Keypad_ReceiveAction+0x70>
    {
      USART_UI_received_playload_len=USART_Keypad_Received_Data;
     640:	80 91 e8 07 	lds	r24, 0x07E8
     644:	80 93 f4 07 	sts	0x07F4, r24
      USART_UI_ReceivedPacket[USART_UI_receive_msgcnt]=USART_Keypad_Received_Data;
     648:	80 91 e8 07 	lds	r24, 0x07E8
     64c:	80 93 be 06 	sts	0x06BE, r24
      USART_UI_length_received=true;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 f3 07 	sts	0x07F3, r24
      USART_UI_receive_msgcnt++;
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	80 93 ee 07 	sts	0x07EE, r24
     65c:	08 95       	ret
    }
    else
    {
      USART_UI_header_received=false;
     65e:	10 92 f2 07 	sts	0x07F2, r1
     662:	08 95       	ret
    }
  }
  else
  {
    USART_UI_ReceivedPacket[USART_UI_receive_msgcnt++]=USART_Keypad_Received_Data;
     664:	e9 2f       	mov	r30, r25
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 91 e8 07 	lds	r24, 0x07E8
     66c:	e4 54       	subi	r30, 0x44	; 68
     66e:	f9 4f       	sbci	r31, 0xF9	; 249
     670:	80 83       	st	Z, r24
     672:	9f 5f       	subi	r25, 0xFF	; 255
     674:	90 93 ee 07 	sts	0x07EE, r25
    if(USART_UI_receive_msgcnt==USART_UI_received_playload_len) //full message has been received
     678:	80 91 f4 07 	lds	r24, 0x07F4
     67c:	98 17       	cp	r25, r24
     67e:	39 f4       	brne	.+14     	; 0x68e <USART_Keypad_ReceiveAction+0xa0>
    {
      USART_UI_Message_ready=true;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 b8 04 	sts	0x04B8, r24
      USART_UI_header_received=false;
     686:	10 92 f2 07 	sts	0x07F2, r1
      USART_UI_length_received=false;
     68a:	10 92 f3 07 	sts	0x07F3, r1
     68e:	08 95       	ret

00000690 <USART_transmitByteToKeypad>:
    }
  }    
}  

void USART_transmitByteToKeypad( unsigned char data )
{
     690:	98 2f       	mov	r25, r24
  while ( !(UCSR1A & (1<<UDRE1)) )
     692:	80 91 c8 00 	lds	r24, 0x00C8
     696:	85 ff       	sbrs	r24, 5
     698:	fc cf       	rjmp	.-8      	; 0x692 <USART_transmitByteToKeypad+0x2>
    ;                       /* Wait for empty transmit buffer */
  UDR1 = data;               /* Start transmition */
     69a:	90 93 ce 00 	sts	0x00CE, r25
}
     69e:	08 95       	ret

000006a0 <USART_transmitStringToKeypadFromFlash>:

void USART_transmitStringToKeypadFromFlash(char* string)
{
     6a0:	fc 01       	movw	r30, r24
     6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <USART_transmitStringToKeypadFromFlash+0x12>
  }    
}  

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
     6a4:	80 91 c8 00 	lds	r24, 0x00C8
     6a8:	85 ff       	sbrs	r24, 5
     6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <USART_transmitStringToKeypadFromFlash+0x4>
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
     6ac:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
    ;                       /* Wait for empty transmit buffer */
  UDR1 = data;               /* Start transmition */
     6ae:	90 93 ce 00 	sts	0x00CE, r25
}

void USART_transmitStringToKeypadFromFlash(char* string)
{
  while (pgm_read_byte(&(*string)))
     6b2:	94 91       	lpm	r25, Z+
     6b4:	99 23       	and	r25, r25
     6b6:	b1 f7       	brne	.-20     	; 0x6a4 <USART_transmitStringToKeypadFromFlash+0x4>
   USART_transmitByteToKeypad(pgm_read_byte(&(*string++)));
}
     6b8:	08 95       	ret

000006ba <USART_transmitStringToKeypad>:


void USART_transmitStringToKeypad(unsigned char* string)
{
     6ba:	fc 01       	movw	r30, r24
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <USART_transmitStringToKeypad+0x12>
  }    
}  

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
     6be:	80 91 c8 00 	lds	r24, 0x00C8
     6c2:	85 ff       	sbrs	r24, 5
     6c4:	fc cf       	rjmp	.-8      	; 0x6be <USART_transmitStringToKeypad+0x4>


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
   USART_transmitByteToKeypad(*string++);
     6c6:	31 96       	adiw	r30, 0x01	; 1

void USART_transmitByteToKeypad( unsigned char data )
{
  while ( !(UCSR1A & (1<<UDRE1)) )
    ;                       /* Wait for empty transmit buffer */
  UDR1 = data;               /* Start transmition */
     6c8:	90 93 ce 00 	sts	0x00CE, r25
}


void USART_transmitStringToKeypad(unsigned char* string)
{
  while (*string)
     6cc:	90 81       	ld	r25, Z
     6ce:	99 23       	and	r25, r25
     6d0:	b1 f7       	brne	.-20     	; 0x6be <USART_transmitStringToKeypad+0x4>
   USART_transmitByteToKeypad(*string++);
}
     6d2:	08 95       	ret

000006d4 <init_USART_PC>:
 * @brief Initializes the buad communication over USART.
 * @return Void
 */
void init_USART_PC(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     6d4:	e1 ec       	ldi	r30, 0xC1	; 193
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     6da:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     6de:	86 e0       	ldi	r24, 0x06	; 6
     6e0:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x19;
     6e4:	89 e1       	ldi	r24, 0x19	; 25
     6e6:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate to 19,200 with 8MHz clock
     6ea:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98; //RXCIE1=1, RXEN1=1, TXEN1=1
     6ee:	88 e9       	ldi	r24, 0x98	; 152
     6f0:	80 83       	st	Z, r24
}
     6f2:	08 95       	ret

000006f4 <USART_PC_ReceiveAction>:
 *          messages to be sent
 * @ref  tech_report.pdf
 * @return always 0?
 */
unsigned char USART_PC_ReceiveAction(void){
  USART_PC_DATA_RDY=false;
     6f4:	10 92 e4 06 	sts	0x06E4, r1

  if(!USART_PC_header_received)
     6f8:	80 91 fa 07 	lds	r24, 0x07FA
     6fc:	88 23       	and	r24, r24
     6fe:	b9 f4       	brne	.+46     	; 0x72e <USART_PC_ReceiveAction+0x3a>
  {
    USART_PC_prefix[2]=USART_PC_Received_Data;
     700:	20 91 d5 06 	lds	r18, 0x06D5
     704:	20 93 f8 07 	sts	0x07F8, r18
    USART_PC_prefix[0]=USART_PC_prefix[1];
     708:	90 91 f7 07 	lds	r25, 0x07F7
     70c:	90 93 f6 07 	sts	0x07F6, r25
    USART_PC_prefix[1]=USART_PC_prefix[2];
     710:	20 93 f7 07 	sts	0x07F7, r18
    if((USART_PC_prefix[0]=='P')&&(USART_PC_prefix[1]=='C'))
     714:	90 35       	cpi	r25, 0x50	; 80
     716:	21 f5       	brne	.+72     	; 0x760 <USART_PC_ReceiveAction+0x6c>
     718:	23 34       	cpi	r18, 0x43	; 67
     71a:	11 f5       	brne	.+68     	; 0x760 <USART_PC_ReceiveAction+0x6c>
    {
      USART_PC_header_received=true;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 fa 07 	sts	0x07FA, r24
      USART_PC_ReceivedPacket[0]=USART_PC_prefix[0];
     722:	90 93 90 04 	sts	0x0490, r25
      USART_PC_ReceivedPacket[1]=USART_PC_prefix[1];
     726:	20 93 91 04 	sts	0x0491, r18
      USART_PC_receive_msgcnt=2;
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	17 c0       	rjmp	.+46     	; 0x75c <USART_PC_ReceiveAction+0x68>
      //USART_PC_length_reveived=true;
      //USART_PC_receive_msgcnt++;
    }
  }
  else{
    if(USART_PC_Received_Data==13) //If carraige return found --> end of the command
     72e:	80 91 d5 06 	lds	r24, 0x06D5
     732:	8d 30       	cpi	r24, 0x0D	; 13
     734:	49 f4       	brne	.+18     	; 0x748 <USART_PC_ReceiveAction+0x54>
    {
      USART_PC_received_playload_len=USART_PC_receive_msgcnt;
     736:	80 91 f9 07 	lds	r24, 0x07F9
     73a:	80 93 e6 06 	sts	0x06E6, r24
      USART_PC_Message_ready=true;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 6a 04 	sts	0x046A, r24
      USART_PC_header_received=false;
     744:	10 92 fa 07 	sts	0x07FA, r1
      //USART_PC_length_reveived=false;
    }
    USART_PC_ReceivedPacket[USART_PC_receive_msgcnt++]=USART_PC_Received_Data;
     748:	80 91 f9 07 	lds	r24, 0x07F9
     74c:	e8 2f       	mov	r30, r24
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	90 91 d5 06 	lds	r25, 0x06D5
     754:	e0 57       	subi	r30, 0x70	; 112
     756:	fb 4f       	sbci	r31, 0xFB	; 251
     758:	90 83       	st	Z, r25
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 93 f9 07 	sts	0x07F9, r24
      USART_PC_length_reveived=false;
    }
  }    
*/
  return 0;
}
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	08 95       	ret

00000764 <USART_transmitByteToPC>:
 * @brief transmit one byte to UDR0 (PC connection) 
 * @param bData contains the byte that needs to be sent
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
     764:	98 2f       	mov	r25, r24
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
     766:	80 91 c0 00 	lds	r24, 0x00C0
     76a:	85 ff       	sbrs	r24, 5
     76c:	fc cf       	rjmp	.-8      	; 0x766 <USART_transmitByteToPC+0x2>
  UDR0 = bData;                     // Transmit one byte of data
     76e:	90 93 c6 00 	sts	0x00C6, r25
//  */
}
     772:	08 95       	ret

00000774 <USART_transmitStringToPCFromFlash>:
 * @brief reads each byte of data and sends it to the Flash individually
 * @param strData   String     Contains message to be sent to PC
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
     774:	fc 01       	movw	r30, r24
     776:	07 c0       	rjmp	.+14     	; 0x786 <USART_transmitStringToPCFromFlash+0x12>
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
     778:	80 91 c0 00 	lds	r24, 0x00C0
     77c:	85 ff       	sbrs	r24, 5
     77e:	fc cf       	rjmp	.-8      	; 0x778 <USART_transmitStringToPCFromFlash+0x4>
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
     780:	31 96       	adiw	r30, 0x01	; 1
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
  UDR0 = bData;                     // Transmit one byte of data
     782:	90 93 c6 00 	sts	0x00C6, r25
 * @param strData   String     Contains message to be sent to PC
 * @return Void
 */
void USART_transmitStringToPCFromFlash(char* strData)
{
  while (pgm_read_byte(&(*strData)))
     786:	94 91       	lpm	r25, Z+
     788:	99 23       	and	r25, r25
     78a:	b1 f7       	brne	.-20     	; 0x778 <USART_transmitStringToPCFromFlash+0x4>
   USART_transmitByteToPC(pgm_read_byte(&(*strData++)));
}
     78c:	08 95       	ret

0000078e <USART_transmitStringToPC>:
 * @param strData string to transmit
 * @return Void
 * TODO: does this method send null terminator?
 */
void USART_transmitStringToPC(unsigned char* strData)
{
     78e:	fc 01       	movw	r30, r24
     790:	07 c0       	rjmp	.+14     	; 0x7a0 <USART_transmitStringToPC+0x12>
 * return Void
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
     792:	80 91 c0 00 	lds	r24, 0x00C0
     796:	85 ff       	sbrs	r24, 5
     798:	fc cf       	rjmp	.-8      	; 0x792 <USART_transmitStringToPC+0x4>
 * TODO: does this method send null terminator?
 */
void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
   USART_transmitByteToPC(*strData++);
     79a:	31 96       	adiw	r30, 0x01	; 1
 */
void USART_transmitByteToPC( unsigned char bData )
{
///*  Disabled PC TX temp
  while ( !(UCSR0A & (1<<UDRE0)) ); // Loop until the data register is empty
  UDR0 = bData;                     // Transmit one byte of data
     79c:	90 93 c6 00 	sts	0x00C6, r25
 * @return Void
 * TODO: does this method send null terminator?
 */
void USART_transmitStringToPC(unsigned char* strData)
{
  while (*strData)
     7a0:	90 81       	ld	r25, Z
     7a2:	99 23       	and	r25, r25
     7a4:	b1 f7       	brne	.-20     	; 0x792 <USART_transmitStringToPC+0x4>
   USART_transmitByteToPC(*strData++);
}
     7a6:	08 95       	ret

000007a8 <RequestToPlayMP3file>:
 * loop)
 * @param thisFile  the name of the MP3 file to be played
 * @return Void
 */
void RequestToPlayMP3file(const char* thisFile)
{
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	7c 01       	movw	r14, r24
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
  int i = 0;
  
  while(i < strlen(fileName))
     7ba:	a3 e7       	ldi	r26, 0x73	; 115
     7bc:	b4 e0       	ldi	r27, 0x04	; 4
  {
    fileName[i++] = "";
     7be:	28 e0       	ldi	r18, 0x08	; 8
     7c0:	31 e0       	ldi	r19, 0x01	; 1
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <RequestToPlayMP3file+0x26>
     7c4:	fc 01       	movw	r30, r24
     7c6:	ed 58       	subi	r30, 0x8D	; 141
     7c8:	fb 4f       	sbci	r31, 0xFB	; 251
     7ca:	20 83       	st	Z, r18
     7cc:	01 96       	adiw	r24, 0x01	; 1
 */
void RequestToPlayMP3file(const char* thisFile)
{
  int i = 0;
  
  while(i < strlen(fileName))
     7ce:	fd 01       	movw	r30, r26
     7d0:	01 90       	ld	r0, Z+
     7d2:	00 20       	and	r0, r0
     7d4:	e9 f7       	brne	.-6      	; 0x7d0 <RequestToPlayMP3file+0x28>
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	e3 57       	subi	r30, 0x73	; 115
     7da:	f4 40       	sbci	r31, 0x04	; 4
     7dc:	8e 17       	cp	r24, r30
     7de:	9f 07       	cpc	r25, r31
     7e0:	88 f3       	brcs	.-30     	; 0x7c4 <RequestToPlayMP3file+0x1c>
  {
    fileName[i++] = "";
  }
  DPRINTF("fileName = %s\n\r", fileName);
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <RequestToPlayMP3file+0x3c>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <RequestToPlayMP3file+0x3e>
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <RequestToPlayMP3file+0x40>
     7e8:	ed b7       	in	r30, 0x3d	; 61
     7ea:	fe b7       	in	r31, 0x3e	; 62
     7ec:	31 96       	adiw	r30, 0x01	; 1
     7ee:	07 ee       	ldi	r16, 0xE7	; 231
     7f0:	16 e0       	ldi	r17, 0x06	; 6
     7f2:	ad b7       	in	r26, 0x3d	; 61
     7f4:	be b7       	in	r27, 0x3e	; 62
     7f6:	12 96       	adiw	r26, 0x02	; 2
     7f8:	1c 93       	st	X, r17
     7fa:	0e 93       	st	-X, r16
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	89 e0       	ldi	r24, 0x09	; 9
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	93 83       	std	Z+3, r25	; 0x03
     804:	82 83       	std	Z+2, r24	; 0x02
     806:	83 e7       	ldi	r24, 0x73	; 115
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	95 83       	std	Z+5, r25	; 0x05
     80c:	84 83       	std	Z+4, r24	; 0x04
     80e:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
     812:	8d b7       	in	r24, 0x3d	; 61
     814:	9e b7       	in	r25, 0x3e	; 62
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	9e bf       	out	0x3e, r25	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	8d bf       	out	0x3d, r24	; 61
     822:	c8 01       	movw	r24, r16
     824:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	03 c0       	rjmp	.+6      	; 0x834 <RequestToPlayMP3file+0x8c>
  i = 0;
  
    // copy the file name to the global variable
  while(*thisFile != '.')
  {
    fileName[i++] = *(thisFile++);
     82e:	80 83       	st	Z, r24
     830:	d9 01       	movw	r26, r18
     832:	7e 01       	movw	r14, r28
  }
  DPRINTF("fileName = %s\n\r", fileName);
  i = 0;
  
    // copy the file name to the global variable
  while(*thisFile != '.')
     834:	e7 01       	movw	r28, r14
     836:	89 91       	ld	r24, Y+
     838:	fd 01       	movw	r30, r26
     83a:	ed 58       	subi	r30, 0x8D	; 141
     83c:	fb 4f       	sbci	r31, 0xFB	; 251
     83e:	9d 01       	movw	r18, r26
     840:	2f 5f       	subi	r18, 0xFF	; 255
     842:	3f 4f       	sbci	r19, 0xFF	; 255
     844:	8e 32       	cpi	r24, 0x2E	; 46
     846:	99 f7       	brne	.-26     	; 0x82e <RequestToPlayMP3file+0x86>
  {
    fileName[i++] = *(thisFile++);
  }
  fileName[i++] = *(thisFile++);
     848:	80 83       	st	Z, r24
  fileName[i++] = *(thisFile++);
     84a:	d9 01       	movw	r26, r18
     84c:	ad 58       	subi	r26, 0x8D	; 141
     84e:	bb 4f       	sbci	r27, 0xFB	; 251
     850:	fe 01       	movw	r30, r28
     852:	81 91       	ld	r24, Z+
     854:	8c 93       	st	X, r24
  fileName[i++] = *(thisFile++);
     856:	d9 01       	movw	r26, r18
     858:	ac 58       	subi	r26, 0x8C	; 140
     85a:	bb 4f       	sbci	r27, 0xFB	; 251
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	8c 93       	st	X, r24
  fileName[i++] = *(thisFile++);
     860:	81 81       	ldd	r24, Z+1	; 0x01
     862:	11 96       	adiw	r26, 0x01	; 1
     864:	8c 93       	st	X, r24
  DPRINTF("end fileName = %s\n\r", fileName);
     866:	00 d0       	rcall	.+0      	; 0x868 <RequestToPlayMP3file+0xc0>
     868:	00 d0       	rcall	.+0      	; 0x86a <RequestToPlayMP3file+0xc2>
     86a:	00 d0       	rcall	.+0      	; 0x86c <RequestToPlayMP3file+0xc4>
     86c:	ed b7       	in	r30, 0x3d	; 61
     86e:	fe b7       	in	r31, 0x3e	; 62
     870:	31 96       	adiw	r30, 0x01	; 1
     872:	07 ee       	ldi	r16, 0xE7	; 231
     874:	16 e0       	ldi	r17, 0x06	; 6
     876:	ad b7       	in	r26, 0x3d	; 61
     878:	be b7       	in	r27, 0x3e	; 62
     87a:	12 96       	adiw	r26, 0x02	; 2
     87c:	1c 93       	st	X, r17
     87e:	0e 93       	st	-X, r16
     880:	11 97       	sbiw	r26, 0x01	; 1
     882:	89 e1       	ldi	r24, 0x19	; 25
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	93 83       	std	Z+3, r25	; 0x03
     888:	82 83       	std	Z+2, r24	; 0x02
     88a:	83 e7       	ldi	r24, 0x73	; 115
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	95 83       	std	Z+5, r25	; 0x05
     890:	84 83       	std	Z+4, r24	; 0x04
     892:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
     896:	8d b7       	in	r24, 0x3d	; 61
     898:	9e b7       	in	r25, 0x3e	; 62
     89a:	06 96       	adiw	r24, 0x06	; 6
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	9e bf       	out	0x3e, r25	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	8d bf       	out	0x3d, r24	; 61
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>

  // Mark that a file is queued to be played by the user interface
  UI_MP3_file_Pending = true;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 6d 04 	sts	0x046D, r24
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <VS1053_ReadCmd>:
  SPI_transmit(temp5);
  SPI_DeselectAll();
}

unsigned int VS1053_ReadCmd(unsigned char addr)
{
     8c0:	1f 93       	push	r17
     8c2:	18 2f       	mov	r17, r24
  tempAddr=addr;
     8c4:	80 93 fb 07 	sts	0x07FB, r24
  SPI_Select_MP3_Cmd();
     8c8:	0e 94 b4 05 	call	0xb68	; 0xb68 <SPI_Select_MP3_Cmd>
  SPI_transmit(0x03);
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  SPI_transmit(addr);
     8d2:	81 2f       	mov	r24, r17
     8d4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  temp1 = SPI_receive();
     8d8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	90 93 65 04 	sts	0x0465, r25
     8e2:	80 93 64 04 	sts	0x0464, r24
  temp2 = SPI_receive();
     8e6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	90 93 67 04 	sts	0x0467, r25
     8f0:	80 93 66 04 	sts	0x0466, r24
  temp3 = temp1*256 + temp2;
     8f4:	80 91 64 04 	lds	r24, 0x0464
     8f8:	90 91 65 04 	lds	r25, 0x0465
     8fc:	20 91 66 04 	lds	r18, 0x0466
     900:	30 91 67 04 	lds	r19, 0x0467
     904:	98 2f       	mov	r25, r24
     906:	88 27       	eor	r24, r24
     908:	82 0f       	add	r24, r18
     90a:	93 1f       	adc	r25, r19
     90c:	90 93 69 04 	sts	0x0469, r25
     910:	80 93 68 04 	sts	0x0468, r24
  SPI_DeselectAll();
     914:	0e 94 a6 05 	call	0xb4c	; 0xb4c <SPI_DeselectAll>
  return temp3;
     918:	20 91 68 04 	lds	r18, 0x0468
     91c:	30 91 69 04 	lds	r19, 0x0469
}
     920:	c9 01       	movw	r24, r18
     922:	1f 91       	pop	r17
     924:	08 95       	ret

00000926 <VS1053_WriteCmd>:
  SPI_transmit(data);
  SPI_DeselectAll();
}

void VS1053_WriteCmd(unsigned char addr, unsigned int cmd)
{
     926:	1f 93       	push	r17
     928:	18 2f       	mov	r17, r24
    temp4 = (cmd & 0xFF00) >> 8;
     92a:	70 93 fd 07 	sts	0x07FD, r23
    temp5 = (cmd & 0x00FF);
     92e:	60 93 fc 07 	sts	0x07FC, r22
  tempAddr=addr;
     932:	80 93 fb 07 	sts	0x07FB, r24
  SPI_Select_MP3_Cmd();
     936:	0e 94 b4 05 	call	0xb68	; 0xb68 <SPI_Select_MP3_Cmd>
  SPI_transmit(0x02);
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  SPI_transmit(addr);
     940:	81 2f       	mov	r24, r17
     942:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  SPI_transmit(temp4);
     946:	80 91 fd 07 	lds	r24, 0x07FD
     94a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  SPI_transmit(temp5);
     94e:	80 91 fc 07 	lds	r24, 0x07FC
     952:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  SPI_DeselectAll();
     956:	0e 94 a6 05 	call	0xb4c	; 0xb4c <SPI_DeselectAll>
}
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <VS1053_DecreaseVol>:
  }
  return true;
}

bool VS1053_DecreaseVol(void)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
  int retry=0;
  VS1053_Vol=VS1053_Vol-((uint16_t)(1<<8)+1);
     962:	80 91 fe 07 	lds	r24, 0x07FE
     966:	90 91 ff 07 	lds	r25, 0x07FF
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	91 40       	sbci	r25, 0x01	; 1
     96e:	90 93 ff 07 	sts	0x07FF, r25
     972:	80 93 fe 07 	sts	0x07FE, r24
  if(VS1053_Vol<=0x0101)
     976:	80 91 fe 07 	lds	r24, 0x07FE
     97a:	90 91 ff 07 	lds	r25, 0x07FF
     97e:	82 50       	subi	r24, 0x02	; 2
     980:	91 40       	sbci	r25, 0x01	; 1
     982:	18 f0       	brcs	.+6      	; 0x98a <VS1053_DecreaseVol+0x2c>
     984:	c0 e0       	ldi	r28, 0x00	; 0
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <VS1053_DecreaseVol+0x54>
  {
    VS1053_Vol=0x0101;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	90 93 ff 07 	sts	0x07FF, r25
     992:	80 93 fe 07 	sts	0x07FE, r24
     996:	17 c0       	rjmp	.+46     	; 0x9c6 <VS1053_DecreaseVol+0x68>
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
    {
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
     998:	60 91 fe 07 	lds	r22, 0x07FE
     99c:	70 91 ff 07 	lds	r23, 0x07FF
     9a0:	8b e0       	ldi	r24, 0x0B	; 11
     9a2:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
      if(retry++ >10 )return false;
     9a6:	cb 30       	cpi	r28, 0x0B	; 11
     9a8:	d1 05       	cpc	r29, r1
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <VS1053_DecreaseVol+0x52>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0c c0       	rjmp	.+24     	; 0x9c8 <VS1053_DecreaseVol+0x6a>
     9b0:	21 96       	adiw	r28, 0x01	; 1
  {
    VS1053_Vol=0x0101;
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
     9b2:	8b e0       	ldi	r24, 0x0B	; 11
     9b4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <VS1053_ReadCmd>
     9b8:	20 91 fe 07 	lds	r18, 0x07FE
     9bc:	30 91 ff 07 	lds	r19, 0x07FF
     9c0:	82 17       	cp	r24, r18
     9c2:	93 07       	cpc	r25, r19
     9c4:	49 f7       	brne	.-46     	; 0x998 <VS1053_DecreaseVol+0x3a>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
      if(retry++ >10 )return false;
    }
  }
  return true;
}          
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <VS1053_IncreaseVol>:
  VS1053_WriteCmd(0x00,0x0804);    //Software reset via mode register
  _delay_ms(20);
}

bool VS1053_IncreaseVol(void)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
  int retry=0;
  VS1053_Vol=VS1053_Vol+((uint16_t)(1<<8)+1);
     9d2:	80 91 fe 07 	lds	r24, 0x07FE
     9d6:	90 91 ff 07 	lds	r25, 0x07FF
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	9e 4f       	sbci	r25, 0xFE	; 254
     9de:	90 93 ff 07 	sts	0x07FF, r25
     9e2:	80 93 fe 07 	sts	0x07FE, r24
  if(VS1053_Vol>=0xFEFE)
     9e6:	80 91 fe 07 	lds	r24, 0x07FE
     9ea:	90 91 ff 07 	lds	r25, 0x07FF
     9ee:	8e 5f       	subi	r24, 0xFE	; 254
     9f0:	9e 4f       	sbci	r25, 0xFE	; 254
     9f2:	18 f4       	brcc	.+6      	; 0x9fa <VS1053_IncreaseVol+0x2c>
     9f4:	c0 e0       	ldi	r28, 0x00	; 0
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <VS1053_IncreaseVol+0x54>
  {
    VS1053_Vol=0xFEFE; 
     9fa:	8e ef       	ldi	r24, 0xFE	; 254
     9fc:	9e ef       	ldi	r25, 0xFE	; 254
     9fe:	90 93 ff 07 	sts	0x07FF, r25
     a02:	80 93 fe 07 	sts	0x07FE, r24
     a06:	17 c0       	rjmp	.+46     	; 0xa36 <VS1053_IncreaseVol+0x68>
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
    {
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
     a08:	60 91 fe 07 	lds	r22, 0x07FE
     a0c:	70 91 ff 07 	lds	r23, 0x07FF
     a10:	8b e0       	ldi	r24, 0x0B	; 11
     a12:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
      if(retry++ >10 )return false;
     a16:	cb 30       	cpi	r28, 0x0B	; 11
     a18:	d1 05       	cpc	r29, r1
     a1a:	11 f4       	brne	.+4      	; 0xa20 <VS1053_IncreaseVol+0x52>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0c c0       	rjmp	.+24     	; 0xa38 <VS1053_IncreaseVol+0x6a>
     a20:	21 96       	adiw	r28, 0x01	; 1
  {
    VS1053_Vol=0xFEFE; 
  }
  else
  {
    while(VS1053_ReadCmd(0x0B) != VS1053_Vol)  //REDO if not written properly
     a22:	8b e0       	ldi	r24, 0x0B	; 11
     a24:	0e 94 60 04 	call	0x8c0	; 0x8c0 <VS1053_ReadCmd>
     a28:	20 91 fe 07 	lds	r18, 0x07FE
     a2c:	30 91 ff 07 	lds	r19, 0x07FF
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	49 f7       	brne	.-46     	; 0xa08 <VS1053_IncreaseVol+0x3a>
     a36:	81 e0       	ldi	r24, 0x01	; 1
      VS1053_WriteCmd(0x0B,VS1053_Vol);    //Set the requested volume
      if(retry++ >10 )return false;
    }
  }
  return true;
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <VS1053_SoftwareReset>:
  return 0;
}

void VS1053_SoftwareReset(void)
{
  VS1053_WriteCmd(0x00,0x0804);    //Software reset via mode register
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	64 e0       	ldi	r22, 0x04	; 4
     a42:	78 e0       	ldi	r23, 0x08	; 8
     a44:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a48:	80 e4       	ldi	r24, 0x40	; 64
     a4a:	9c e9       	ldi	r25, 0x9C	; 156
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <VS1053_SoftwareReset+0xe>
  _delay_ms(20);
}
     a50:	08 95       	ret

00000a52 <VS1053_WriteData>:
  }
  return true;
}          

void VS1053_WriteData(unsigned char data)
{
     a52:	1f 93       	push	r17
     a54:	18 2f       	mov	r17, r24
  SPI_Select_MP3_Data();
     a56:	0e 94 af 05 	call	0xb5e	; 0xb5e <SPI_Select_MP3_Data>
  SPI_transmit(data);
     a5a:	81 2f       	mov	r24, r17
     a5c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
  SPI_DeselectAll();
     a60:	0e 94 a6 05 	call	0xb4c	; 0xb4c <SPI_DeselectAll>
}
     a64:	1f 91       	pop	r17
     a66:	08 95       	ret

00000a68 <VS1053_Initialize>:
/**
 * @brief initialize the audio codec
 * @return ?
 */
unsigned char VS1053_Initialize(void)
{
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
  unsigned char retry;
  SPI_DeselectAll();
     a6c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <SPI_DeselectAll>
  SPI_PORT &= ~_BV(MP3_RESET);  //De assert RESET line (Chip in the reset state)
     a70:	2c 98       	cbi	0x05, 4	; 5
     a72:	00 e4       	ldi	r16, 0x40	; 64
     a74:	1c e9       	ldi	r17, 0x9C	; 156
     a76:	c8 01       	movw	r24, r16
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <VS1053_Initialize+0x10>
  _delay_ms(20);          //Hold for 20ms
  SPI_PORT |= _BV(MP3_RESET);    //Assert RESET line (Chip is powered now)
     a7c:	2c 9a       	sbi	0x05, 4	; 5
  SPI_1X();            //Low speed mode
     a7e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <SPI_1X>
     a82:	c8 01       	movw	r24, r16
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <VS1053_Initialize+0x1c>
     a88:	00 e0       	ldi	r16, 0x00	; 0
     a8a:	0a c0       	rjmp	.+20     	; 0xaa0 <VS1053_Initialize+0x38>
  _delay_ms(20);          //Hold for 20ms
  retry=0;

  while(VS1053_ReadCmd(0x03) != 0x9800)  //REDO if not written properly  
  {
    VS1053_WriteCmd(0x03,0x9800);    //set PLL register to 3.5 (preferred for normal operation)
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	78 e9       	ldi	r23, 0x98	; 152
     a92:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
    if(retry++ >10 )return 1;      //try this for 10 times
     a96:	0b 30       	cpi	r16, 0x0B	; 11
     a98:	11 f4       	brne	.+4      	; 0xa9e <VS1053_Initialize+0x36>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	54 c0       	rjmp	.+168    	; 0xb46 <VS1053_Initialize+0xde>
     a9e:	0f 5f       	subi	r16, 0xFF	; 255
  SPI_PORT |= _BV(MP3_RESET);    //Assert RESET line (Chip is powered now)
  SPI_1X();            //Low speed mode
  _delay_ms(20);          //Hold for 20ms
  retry=0;

  while(VS1053_ReadCmd(0x03) != 0x9800)  //REDO if not written properly  
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <VS1053_ReadCmd>
     aa6:	80 50       	subi	r24, 0x00	; 0
     aa8:	98 49       	sbci	r25, 0x98	; 152
     aaa:	81 f7       	brne	.-32     	; 0xa8c <VS1053_Initialize+0x24>
     aac:	80 e4       	ldi	r24, 0x40	; 64
     aae:	9c e9       	ldi	r25, 0x9C	; 156
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <VS1053_Initialize+0x48>
     ab4:	00 e0       	ldi	r16, 0x00	; 0
     ab6:	0a c0       	rjmp	.+20     	; 0xacc <VS1053_Initialize+0x64>
  //VS1053_WriteCmd(0x05,0x000A);      //Set low sample rate
  
  retry=0;
  while(VS1053_ReadCmd(0x0B) != 0xFEFE)  //REDO if not written properly
  {
    VS1053_WriteCmd(0x0B,0xfefe);    //Total silence
     ab8:	8b e0       	ldi	r24, 0x0B	; 11
     aba:	6e ef       	ldi	r22, 0xFE	; 254
     abc:	7e ef       	ldi	r23, 0xFE	; 254
     abe:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
    if(retry++ >10 )return 2;
     ac2:	0b 30       	cpi	r16, 0x0B	; 11
     ac4:	11 f4       	brne	.+4      	; 0xaca <VS1053_Initialize+0x62>
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	3e c0       	rjmp	.+124    	; 0xb46 <VS1053_Initialize+0xde>
     aca:	0f 5f       	subi	r16, 0xFF	; 255
  _delay_ms(20);
  
  //VS1053_WriteCmd(0x05,0x000A);      //Set low sample rate
  
  retry=0;
  while(VS1053_ReadCmd(0x0B) != 0xFEFE)  //REDO if not written properly
     acc:	8b e0       	ldi	r24, 0x0B	; 11
     ace:	0e 94 60 04 	call	0x8c0	; 0x8c0 <VS1053_ReadCmd>
     ad2:	8e 5f       	subi	r24, 0xFE	; 254
     ad4:	9e 4f       	sbci	r25, 0xFE	; 254
     ad6:	81 f7       	brne	.-32     	; 0xab8 <VS1053_Initialize+0x50>
  {
    VS1053_WriteCmd(0x0B,0xfefe);    //Total silence
    if(retry++ >10 )return 2;
  }

  VS1053_WriteCmd(0x05,0xac45);      //Activate sample rate as 44.1kHz stereo
     ad8:	85 e0       	ldi	r24, 0x05	; 5
     ada:	65 e4       	ldi	r22, 0x45	; 69
     adc:	7c ea       	ldi	r23, 0xAC	; 172
     ade:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	0a c0       	rjmp	.+20     	; 0xafa <VS1053_Initialize+0x92>

  retry=0;
  while(VS1053_ReadCmd(0x0b) != 0x2828)  //REDO if not written properly
  {
    VS1053_WriteCmd(0x0b,0x2828);    //Set volume to a midrange value
     ae6:	8b e0       	ldi	r24, 0x0B	; 11
     ae8:	68 e2       	ldi	r22, 0x28	; 40
     aea:	78 e2       	ldi	r23, 0x28	; 40
     aec:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
    if(retry++ >10 )return 3;      //try this for 10 times
     af0:	0b 30       	cpi	r16, 0x0B	; 11
     af2:	11 f4       	brne	.+4      	; 0xaf8 <VS1053_Initialize+0x90>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	27 c0       	rjmp	.+78     	; 0xb46 <VS1053_Initialize+0xde>
     af8:	0f 5f       	subi	r16, 0xFF	; 255
  }

  VS1053_WriteCmd(0x05,0xac45);      //Activate sample rate as 44.1kHz stereo

  retry=0;
  while(VS1053_ReadCmd(0x0b) != 0x2828)  //REDO if not written properly
     afa:	8b e0       	ldi	r24, 0x0B	; 11
     afc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <VS1053_ReadCmd>
     b00:	28 e2       	ldi	r18, 0x28	; 40
     b02:	88 32       	cpi	r24, 0x28	; 40
     b04:	92 07       	cpc	r25, r18
     b06:	79 f7       	brne	.-34     	; 0xae6 <VS1053_Initialize+0x7e>
  {
    VS1053_WriteCmd(0x0b,0x2828);    //Set volume to a midrange value
    if(retry++ >10 )return 3;      //try this for 10 times
  }
  VS1053_Vol=0x2828;
     b08:	90 93 ff 07 	sts	0x07FF, r25
     b0c:	80 93 fe 07 	sts	0x07FE, r24
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <VS1053_Initialize+0xc0>
  retry=0;
  while(VS1053_ReadCmd(0x00) != 0x0800)      //REDO if not written properly
  {
    VS1053_WriteCmd(0x00,0x0800);        //Set mode register to SDINEW mode and MICIN
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	78 e0       	ldi	r23, 0x08	; 8
     b1a:	0e 94 93 04 	call	0x926	; 0x926 <VS1053_WriteCmd>
    if(retry++ >10 )return 4;          //try this for 10 times
     b1e:	0b 30       	cpi	r16, 0x0B	; 11
     b20:	11 f4       	brne	.+4      	; 0xb26 <VS1053_Initialize+0xbe>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	10 c0       	rjmp	.+32     	; 0xb46 <VS1053_Initialize+0xde>
     b26:	0f 5f       	subi	r16, 0xFF	; 255
    VS1053_WriteCmd(0x0b,0x2828);    //Set volume to a midrange value
    if(retry++ >10 )return 3;      //try this for 10 times
  }
  VS1053_Vol=0x2828;
  retry=0;
  while(VS1053_ReadCmd(0x00) != 0x0800)      //REDO if not written properly
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <VS1053_ReadCmd>
     b2e:	80 50       	subi	r24, 0x00	; 0
     b30:	98 40       	sbci	r25, 0x08	; 8
     b32:	81 f7       	brne	.-32     	; 0xb14 <VS1053_Initialize+0xac>
     b34:	80 e4       	ldi	r24, 0x40	; 64
     b36:	9c e9       	ldi	r25, 0x9C	; 156
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <VS1053_Initialize+0xd0>
  {
    VS1053_WriteCmd(0x00,0x0800);        //Set mode register to SDINEW mode and MICIN
    if(retry++ >10 )return 4;          //try this for 10 times
  }
  _delay_ms(20);
  VS1053_SoftwareReset();
     b3c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <VS1053_SoftwareReset>
  //_delay_ms(20);
  SPI_2X();
     b40:	0e 94 b9 05 	call	0xb72	; 0xb72 <SPI_2X>
     b44:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <SPI_DeselectAll>:
  SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
  SPI_2X();
}

void SPI_DeselectAll(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b4c:	85 b1       	in	r24, 0x05	; 5
     b4e:	87 60       	ori	r24, 0x07	; 7
     b50:	85 b9       	out	0x05, r24	; 5
}
     b52:	08 95       	ret

00000b54 <SPI_Select_SD>:

void SPI_Select_SD(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b54:	85 b1       	in	r24, 0x05	; 5
     b56:	87 60       	ori	r24, 0x07	; 7
     b58:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(SD_SELECT);
     b5a:	28 98       	cbi	0x05, 0	; 5
}
     b5c:	08 95       	ret

00000b5e <SPI_Select_MP3_Data>:

void SPI_Select_MP3_Data(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b5e:	85 b1       	in	r24, 0x05	; 5
     b60:	87 60       	ori	r24, 0x07	; 7
     b62:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(MP3_DATA);
     b64:	2a 98       	cbi	0x05, 2	; 5
}
     b66:	08 95       	ret

00000b68 <SPI_Select_MP3_Cmd>:

void SPI_Select_MP3_Cmd(void){
  SPI_PORT |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD);
     b68:	85 b1       	in	r24, 0x05	; 5
     b6a:	87 60       	ori	r24, 0x07	; 7
     b6c:	85 b9       	out	0x05, r24	; 5
  SPI_PORT &= ~_BV(MP3_CMD);
     b6e:	29 98       	cbi	0x05, 1	; 5
}
     b70:	08 95       	ret

00000b72 <SPI_2X>:

void SPI_2X(void){ //4MHz
  SPCR &= ~_BV(SPR1);
     b72:	8c b5       	in	r24, 0x2c	; 44
     b74:	8d 7f       	andi	r24, 0xFD	; 253
     b76:	8c bd       	out	0x2c, r24	; 44
  SPCR &= ~_BV(SPR0);
     b78:	8c b5       	in	r24, 0x2c	; 44
     b7a:	8e 7f       	andi	r24, 0xFE	; 254
     b7c:	8c bd       	out	0x2c, r24	; 44
  SPSR |= _BV(SPI2X);
     b7e:	8d b5       	in	r24, 0x2d	; 45
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	8d bd       	out	0x2d, r24	; 45
}
     b84:	08 95       	ret

00000b86 <SPI_Initialize>:
/**
 * @brief Initilizes variables for SPI
 * @return Void
 */
void SPI_Initialize(void){
  DDRB |= _BV(SD_SELECT)|_BV(MP3_DATA)|_BV(MP3_CMD)|_BV(MP3_RESET);
     b86:	84 b1       	in	r24, 0x04	; 4
     b88:	87 61       	ori	r24, 0x17	; 23
     b8a:	84 b9       	out	0x04, r24	; 4
  DDRB &= ~_BV(MP3_DREQ);
     b8c:	23 98       	cbi	0x04, 3	; 4
  DDRB=0xB7;
     b8e:	87 eb       	ldi	r24, 0xB7	; 183
     b90:	84 b9       	out	0x04, r24	; 4
  SPCR=0x50; //SPE=1, MSTR=1, SPR1=0, SPR0=0 (Fosc/4)
     b92:	80 e5       	ldi	r24, 0x50	; 80
     b94:	8c bd       	out	0x2c, r24	; 44
  SPI_2X();
     b96:	0e 94 b9 05 	call	0xb72	; 0xb72 <SPI_2X>
}
     b9a:	08 95       	ret

00000b9c <SPI_1X>:
  SPCR &= ~_BV(SPR0);
  SPSR |= _BV(SPI2X);
}

void SPI_1X(void){  //62.5 kHz
  SPCR |= _BV(SPR1)|_BV(SPR0);
     b9c:	8c b5       	in	r24, 0x2c	; 44
     b9e:	83 60       	ori	r24, 0x03	; 3
     ba0:	8c bd       	out	0x2c, r24	; 44
  SPSR &= ~_BV(SPI2X);
     ba2:	8d b5       	in	r24, 0x2d	; 45
     ba4:	8e 7f       	andi	r24, 0xFE	; 254
     ba6:	8d bd       	out	0x2d, r24	; 45
}
     ba8:	08 95       	ret

00000baa <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data){
  // Start transmission
  SPDR = data;
     baa:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     bac:	0d b4       	in	r0, 0x2d	; 45
     bae:	07 fe       	sbrs	r0, 7
     bb0:	fd cf       	rjmp	.-6      	; 0xbac <SPI_transmit+0x2>
  data = SPDR;
     bb2:	8e b5       	in	r24, 0x2e	; 46
  return(data);
}
     bb4:	08 95       	ret

00000bb6 <SPI_receive>:

unsigned char SPI_receive(void){
  unsigned char data;
  // Wait for reception complete

  SPDR = 0xff;
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
     bba:	0d b4       	in	r0, 0x2d	; 45
     bbc:	07 fe       	sbrs	r0, 7
     bbe:	fd cf       	rjmp	.-6      	; 0xbba <SPI_receive+0x4>
  data = SPDR;
     bc0:	8e b5       	in	r24, 0x2e	; 46

  // Return data register
  return data;
}
     bc2:	08 95       	ret

00000bc4 <SD_sendCommand>:
//Arguments  : unsigned char (8-bit command value)
//         & unsigned long (32-bit command argument)
//return  : unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	d8 2e       	mov	r13, r24
     bd0:	7a 01       	movw	r14, r20
     bd2:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)    
     bd4:	80 91 d4 06 	lds	r24, 0x06D4
     bd8:	88 23       	and	r24, r24
     bda:	b9 f4       	brne	.+46     	; 0xc0a <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
     bdc:	8d 2d       	mov	r24, r13
     bde:	81 51       	subi	r24, 0x11	; 17
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	60 f0       	brcs	.+24     	; 0xbfc <SD_sendCommand+0x38>
     be4:	88 e1       	ldi	r24, 0x18	; 24
     be6:	d8 16       	cp	r13, r24
     be8:	49 f0       	breq	.+18     	; 0xbfc <SD_sendCommand+0x38>
     bea:	89 e1       	ldi	r24, 0x19	; 25
     bec:	d8 16       	cp	r13, r24
     bee:	31 f0       	breq	.+12     	; 0xbfc <SD_sendCommand+0x38>
     bf0:	80 e2       	ldi	r24, 0x20	; 32
     bf2:	d8 16       	cp	r13, r24
     bf4:	19 f0       	breq	.+6      	; 0xbfc <SD_sendCommand+0x38>
     bf6:	81 e2       	ldi	r24, 0x21	; 33
     bf8:	d8 16       	cp	r13, r24
     bfa:	39 f4       	brne	.+14     	; 0xc0a <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
     bfc:	39 e0       	ldi	r19, 0x09	; 9
     bfe:	ee 0c       	add	r14, r14
     c00:	ff 1c       	adc	r15, r15
     c02:	00 1f       	adc	r16, r16
     c04:	11 1f       	adc	r17, r17
     c06:	3a 95       	dec	r19
     c08:	d1 f7       	brne	.-12     	; 0xbfe <SD_sendCommand+0x3a>
   }     

SD_CS_ASSERT;
     c0a:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
     c0c:	8d 2d       	mov	r24, r13
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
SPI_transmit(arg>>24);
     c14:	81 2f       	mov	r24, r17
     c16:	99 27       	eor	r25, r25
     c18:	aa 27       	eor	r26, r26
     c1a:	bb 27       	eor	r27, r27
     c1c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
SPI_transmit(arg>>16);
     c20:	c8 01       	movw	r24, r16
     c22:	aa 27       	eor	r26, r26
     c24:	bb 27       	eor	r27, r27
     c26:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
SPI_transmit(arg>>8);
     c2a:	bb 27       	eor	r27, r27
     c2c:	a1 2f       	mov	r26, r17
     c2e:	90 2f       	mov	r25, r16
     c30:	8f 2d       	mov	r24, r15
     c32:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
SPI_transmit(arg);
     c36:	8e 2d       	mov	r24, r14
     c38:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>

if(cmd == SEND_IF_COND)   //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	d8 16       	cp	r13, r24
     c40:	11 f4       	brne	.+4      	; 0xc46 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
     c42:	87 e8       	ldi	r24, 0x87	; 135
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
     c46:	85 e9       	ldi	r24, 0x95	; 149
     c48:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)   //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
     c50:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     c52:	d1 f0       	breq	.+52     	; 0xc88 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)   //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
     c54:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     c58:	08 2f       	mov	r16, r24
     c5a:	8f 3f       	cpi	r24, 0xFF	; 255
     c5c:	c9 f3       	breq	.-14     	; 0xc50 <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
     c5e:	88 23       	and	r24, r24
     c60:	99 f4       	brne	.+38     	; 0xc88 <SD_sendCommand+0xc4>
     c62:	8a e3       	ldi	r24, 0x3A	; 58
     c64:	d8 16       	cp	r13, r24
     c66:	81 f4       	brne	.+32     	; 0xc88 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
     c68:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
     c6c:	86 ff       	sbrs	r24, 6
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <SD_sendCommand+0xb4>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 d4 06 	sts	0x06D4, r24
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
     c78:	10 92 d4 06 	sts	0x06D4, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
     c7c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
     c80:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
  SPI_receive(); 
     c84:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
     c88:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
SD_CS_DEASSERT;
     c8c:	28 9a       	sbi	0x05, 0	; 5

return response; //return state
}
     c8e:	80 2f       	mov	r24, r16
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	08 95       	ret

00000c9c <SD_erase>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
     c9c:	af 92       	push	r10
     c9e:	bf 92       	push	r11
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	7b 01       	movw	r14, r22
     cae:	8c 01       	movw	r16, r24
     cb0:	59 01       	movw	r10, r18
     cb2:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	b8 01       	movw	r22, r16
     cb8:	a7 01       	movw	r20, r14
     cba:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     cbe:	88 23       	and	r24, r24
     cc0:	b9 f4       	brne	.+46     	; 0xcf0 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
     cc2:	08 94       	sec
     cc4:	e1 08       	sbc	r14, r1
     cc6:	f1 08       	sbc	r15, r1
     cc8:	01 09       	sbc	r16, r1
     cca:	11 09       	sbc	r17, r1
     ccc:	ea 0c       	add	r14, r10
     cce:	fb 1c       	adc	r15, r11
     cd0:	0c 1d       	adc	r16, r12
     cd2:	1d 1d       	adc	r17, r13
     cd4:	81 e2       	ldi	r24, 0x21	; 33
     cd6:	b8 01       	movw	r22, r16
     cd8:	a7 01       	movw	r20, r14
     cda:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
if(response != 0x00)
     cde:	88 23       	and	r24, r24
     ce0:	39 f4       	brne	.+14     	; 0xcf0 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
     ce2:	86 e2       	ldi	r24, 0x26	; 38
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	08 95       	ret

00000d02 <SD_init>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	10 e0       	ldi	r17, 0x00	; 0
  unsigned char i, response, SD_version;
  unsigned int retry=0 ;

  for(i=0;i<10;i++)
    SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
unsigned char SD_init(void)
{
  unsigned char i, response, SD_version;
  unsigned int retry=0 ;

  for(i=0;i<10;i++)
     d10:	1f 5f       	subi	r17, 0xFF	; 255
     d12:	1a 30       	cpi	r17, 0x0A	; 10
     d14:	d1 f7       	brne	.-12     	; 0xd0a <SD_init+0x8>
    SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    SD_CS_ASSERT;
     d16:	28 98       	cbi	0x05, 0	; 5
     d18:	c0 e0       	ldi	r28, 0x00	; 0
     d1a:	d0 e0       	ldi	r29, 0x00	; 0
    do
    {
       response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
       retry++;
     d2a:	21 96       	adiw	r28, 0x01	; 1
       if(retry>0x20) 
     d2c:	c1 32       	cpi	r28, 0x21	; 33
     d2e:	d1 05       	cpc	r29, r1
     d30:	11 f4       	brne	.+4      	; 0xd36 <SD_init+0x34>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	56 c0       	rjmp	.+172    	; 0xde2 <SD_init+0xe0>
         return 1;   //time out, card not detected
    } while(response != 0x01);
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	89 f7       	brne	.-30     	; 0xd1c <SD_init+0x1a>

    SD_CS_DEASSERT;
     d3a:	28 9a       	sbi	0x05, 0	; 5
    SPI_transmit (0xff);
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
    SPI_transmit (0xff);
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
     d48:	c0 e0       	ldi	r28, 0x00	; 0
     d4a:	d0 e0       	ldi	r29, 0x00	; 0

    SD_version = 2; //default set to SD compliance with ver2.x; 
        //this may change after checking the next command
    do
    {
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
     d4c:	88 e0       	ldi	r24, 0x08	; 8
     d4e:	4a ea       	ldi	r20, 0xAA	; 170
     d50:	51 e0       	ldi	r21, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
retry++;
     d5a:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     d5c:	cf 3f       	cpi	r28, 0xFF	; 255
     d5e:	d1 05       	cpc	r29, r1
     d60:	29 f4       	brne	.+10     	; 0xd6c <SD_init+0x6a>
   {
    //TX_NEWLINE;
    SD_version = 1;
    cardType = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 e2 06 	sts	0x06E2, r24
     d68:	11 e0       	ldi	r17, 0x01	; 1
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <SD_init+0x70>
    break;
   } //time out

}while(response != 0x01);
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	71 f7       	brne	.-36     	; 0xd4c <SD_init+0x4a>
     d70:	12 e0       	ldi	r17, 0x02	; 2
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
     d76:	87 e3       	ldi	r24, 0x37	; 55
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
     d84:	89 e2       	ldi	r24, 0x29	; 41
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e4       	ldi	r23, 0x40	; 64
     d8e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>

retry++;
     d92:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
     d94:	cf 3f       	cpi	r28, 0xFF	; 255
     d96:	d1 05       	cpc	r29, r1
     d98:	11 f4       	brne	.+4      	; 0xd9e <SD_init+0x9c>
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	22 c0       	rjmp	.+68     	; 0xde2 <SD_init+0xe0>
   {
      //TX_NEWLINE;
    return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
     d9e:	88 23       	and	r24, r24
     da0:	51 f7       	brne	.-44     	; 0xd76 <SD_init+0x74>


retry = 0;
SDHC_flag = 0;
     da2:	10 92 d4 06 	sts	0x06D4, r1

if (SD_version == 2)
     da6:	12 30       	cpi	r17, 0x02	; 2
     da8:	e1 f4       	brne	.+56     	; 0xde2 <SD_init+0xe0>
     daa:	c0 e0       	ldi	r28, 0x00	; 0
     dac:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
   response = SD_sendCommand(READ_OCR,0);
     dae:	8a e3       	ldi	r24, 0x3A	; 58
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
   retry++;
     dbc:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0xfe) 
     dbe:	cf 3f       	cpi	r28, 0xFF	; 255
     dc0:	d1 05       	cpc	r29, r1
     dc2:	19 f4       	brne	.+6      	; 0xdca <SD_init+0xc8>
     {
       //TX_NEWLINE;
     cardType = 0;
     dc4:	10 92 e2 06 	sts	0x06E2, r1
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <SD_init+0xcc>
     break;
     } //time out

   }while(response != 0x00);
     dca:	88 23       	and	r24, r24
     dcc:	81 f7       	brne	.-32     	; 0xdae <SD_init+0xac>

   if(SDHC_flag == 1) cardType = 2;
     dce:	80 91 d4 06 	lds	r24, 0x06D4
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	11 f4       	brne	.+4      	; 0xdda <SD_init+0xd8>
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <SD_init+0xda>
   else cardType = 3;
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	80 93 e2 06 	sts	0x06E2, r24
     de0:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	08 95       	ret

00000dea <SD_writeSingleBlock>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ab 01       	movw	r20, r22
     df0:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
     df2:	88 e1       	ldi	r24, 0x18	; 24
     df4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     df8:	88 23       	and	r24, r24
     dfa:	11 f0       	breq	.+4      	; 0xe00 <SD_writeSingleBlock+0x16>
     dfc:	98 2f       	mov	r25, r24
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
     e00:	28 98       	cbi	0x05, 0	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     e02:	8e ef       	ldi	r24, 0xFE	; 254
     e04:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
     e08:	c0 e0       	ldi	r28, 0x00	; 0
     e0a:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
     e0c:	fe 01       	movw	r30, r28
     e0e:	e7 54       	subi	r30, 0x47	; 71
     e10:	fb 4f       	sbci	r31, 0xFB	; 251
     e12:	80 81       	ld	r24, Z
     e14:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
     e18:	21 96       	adiw	r28, 0x01	; 1
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	c0 30       	cpi	r28, 0x00	; 0
     e1e:	d8 07       	cpc	r29, r24
     e20:	a9 f7       	brne	.-22     	; 0xe0c <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
SPI_transmit(0xff);
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>

response = SPI_receive();
     e2e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     e32:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     e34:	8f 71       	andi	r24, 0x1F	; 31
     e36:	85 30       	cpi	r24, 0x05	; 5
     e38:	41 f0       	breq	.+16     	; 0xe4a <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     e3a:	28 9a       	sbi	0x05, 0	; 5
     e3c:	20 c0       	rjmp	.+64     	; 0xe7e <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	cf 3f       	cpi	r28, 0xFF	; 255
     e42:	d8 07       	cpc	r29, r24
     e44:	91 f0       	breq	.+36     	; 0xe6a <SD_writeSingleBlock+0x80>
     e46:	21 96       	adiw	r28, 0x01	; 1
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <SD_writeSingleBlock+0x64>
     e4a:	c0 e0       	ldi	r28, 0x00	; 0
     e4c:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     e4e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     e52:	88 23       	and	r24, r24
     e54:	a1 f3       	breq	.-24     	; 0xe3e <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
     e56:	28 9a       	sbi	0x05, 0	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     e5e:	28 98       	cbi	0x05, 0	; 5
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	cf 3f       	cpi	r28, 0xFF	; 255
     e66:	d8 07       	cpc	r29, r24
     e68:	19 f4       	brne	.+6      	; 0xe70 <SD_writeSingleBlock+0x86>
     e6a:	28 9a       	sbi	0x05, 0	; 5
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <SD_writeSingleBlock+0x94>
     e70:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     e72:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     e76:	88 23       	and	r24, r24
     e78:	a1 f3       	breq	.-24     	; 0xe62 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
     e7a:	28 9a       	sbi	0x05, 0	; 5
     e7c:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
     e7e:	89 2f       	mov	r24, r25
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <SD_readSingleBlock>:
//Arguments  : none
//return  : unsigned char; will be 0 if no error,
//         otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ab 01       	movw	r20, r22
     e8e:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
     e90:	81 e1       	ldi	r24, 0x11	; 17
     e92:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SD_sendCommand>
     e96:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     e98:	88 23       	and	r24, r24
     e9a:	09 f5       	brne	.+66     	; 0xede <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
     e9c:	28 98       	cbi	0x05, 0	; 5
     e9e:	c0 e0       	ldi	r28, 0x00	; 0
     ea0:	d0 e0       	ldi	r29, 0x00	; 0
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     ea4:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
     ea6:	19 f4       	brne	.+6      	; 0xeae <SD_readSingleBlock+0x28>
     ea8:	28 9a       	sbi	0x05, 0	; 5
     eaa:	11 e0       	ldi	r17, 0x01	; 1
     eac:	18 c0       	rjmp	.+48     	; 0xede <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
     eae:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     eb2:	8e 3f       	cpi	r24, 0xFE	; 254
     eb4:	b9 f7       	brne	.-18     	; 0xea4 <SD_readSingleBlock+0x1e>
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
     eba:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
     ebe:	fe 01       	movw	r30, r28
     ec0:	e7 54       	subi	r30, 0x47	; 71
     ec2:	fb 4f       	sbci	r31, 0xFB	; 251
     ec4:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
     ec6:	21 96       	adiw	r28, 0x01	; 1
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	c0 30       	cpi	r28, 0x00	; 0
     ecc:	d8 07       	cpc	r29, r24
     ece:	a9 f7       	brne	.-22     	; 0xeba <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
     ed0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
SPI_receive();
     ed4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
     ed8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receive>
SD_CS_DEASSERT;
     edc:	28 9a       	sbi	0x05, 0	; 5

return 0;
}
     ede:	81 2f       	mov	r24, r17
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	08 95       	ret

00000ee8 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     ef0:	20 91 ba 06 	lds	r18, 0x06BA
     ef4:	30 91 bb 06 	lds	r19, 0x06BB
     ef8:	e0 90 80 04 	lds	r14, 0x0480
     efc:	f0 90 81 04 	lds	r15, 0x0481
     f00:	00 91 82 04 	lds	r16, 0x0482
     f04:	10 91 83 04 	lds	r17, 0x0483
     f08:	62 50       	subi	r22, 0x02	; 2
     f0a:	70 40       	sbci	r23, 0x00	; 0
     f0c:	80 40       	sbci	r24, 0x00	; 0
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
     f18:	9b 01       	movw	r18, r22
     f1a:	ac 01       	movw	r20, r24
     f1c:	2e 0d       	add	r18, r14
     f1e:	3f 1d       	adc	r19, r15
     f20:	40 1f       	adc	r20, r16
     f22:	51 1f       	adc	r21, r17
}
     f24:	b9 01       	movw	r22, r18
     f26:	ca 01       	movw	r24, r20
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	08 95       	ret

00000f32 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//       2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	64 97       	sbiw	r28, 0x14	; 20
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	98 2e       	mov	r9, r24
     f5a:	6a 01       	movw	r12, r20
     f5c:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     f5e:	de 01       	movw	r26, r28
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	ed e2       	ldi	r30, 0x2D	; 45
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	84 e1       	ldi	r24, 0x14	; 20
     f68:	01 90       	ld	r0, Z+
     f6a:	0d 92       	st	X+, r0
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <displayMemory+0x36>
     f70:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
  {
     memoryString[i-1] = ',';  
     f72:	8c e2       	ldi	r24, 0x2C	; 44
     f74:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     f76:	05 30       	cpi	r16, 0x05	; 5
     f78:	11 f0       	breq	.+4      	; 0xf7e <displayMemory+0x4c>
     f7a:	09 30       	cpi	r16, 0x09	; 9
     f7c:	29 f4       	brne	.+10     	; 0xf88 <displayMemory+0x56>
  {
     memoryString[i-1] = ',';  
     f7e:	fe 01       	movw	r30, r28
     f80:	e0 0f       	add	r30, r16
     f82:	f1 1d       	adc	r31, r1
     f84:	80 82       	st	Z, r8
     i--;
     f86:	01 50       	subi	r16, 0x01	; 1
  }
    memoryString[i-1] = (memory % 10) | 0x30;
     f88:	5e 01       	movw	r10, r28
     f8a:	a0 0e       	add	r10, r16
     f8c:	b1 1c       	adc	r11, r1
     f8e:	c7 01       	movw	r24, r14
     f90:	b6 01       	movw	r22, r12
     f92:	2a e0       	ldi	r18, 0x0A	; 10
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
     f9e:	60 63       	ori	r22, 0x30	; 48
     fa0:	f5 01       	movw	r30, r10
     fa2:	60 83       	st	Z, r22
    memory /= 10;
     fa4:	c7 01       	movw	r24, r14
     fa6:	b6 01       	movw	r22, r12
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
     fb4:	c9 01       	movw	r24, r18
     fb6:	da 01       	movw	r26, r20
     fb8:	6c 01       	movw	r12, r24
     fba:	7d 01       	movw	r14, r26
  if(memory == 0) break;
     fbc:	c1 14       	cp	r12, r1
     fbe:	d1 04       	cpc	r13, r1
     fc0:	e1 04       	cpc	r14, r1
     fc2:	f1 04       	cpc	r15, r1
     fc4:	11 f0       	breq	.+4      	; 0xfca <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     fc6:	01 50       	subi	r16, 0x01	; 1
     fc8:	b1 f6       	brne	.-84     	; 0xf76 <displayMemory+0x44>
  }
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
  if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     fca:	f1 e0       	ldi	r31, 0x01	; 1
     fcc:	9f 16       	cp	r9, r31
     fce:	11 f4       	brne	.+4      	; 0xfd4 <displayMemory+0xa2>
     fd0:	8b e4       	ldi	r24, 0x4B	; 75
     fd2:	8e 87       	std	Y+14, r24	; 0x0e
  USART_transmitStringToPC(memoryString);
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
}
     fdc:	64 96       	adiw	r28, 0x14	; 20
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	08 95       	ret

00001000 <convertFileName>:
 * @TODO Currently overwrites the passed in buffer so if you pass in the same buffer twice, it 
 * will have already converted the fileName (specifically removed the '.' which is what the invalid
 * file check is done off of)
*/ 
unsigned char convertFileName (unsigned char *fileName)
{
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	2b 97       	sbiw	r28, 0x0b	; 11
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	8c 01       	movw	r16, r24
  unsigned char fileNameFAT[11];
  unsigned char j, k;

  PRINTF("[convertFileName]Filename:");
    101e:	81 e4       	ldi	r24, 0x41	; 65
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  PRINTF(fileName);
    1026:	c8 01       	movw	r24, r16
    1028:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    102c:	8d e0       	ldi	r24, 0x0D	; 13
    102e:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1032:	8a e0       	ldi	r24, 0x0A	; 10
    1034:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1038:	50 2f       	mov	r21, r16
    103a:	a1 2f       	mov	r26, r17
    103c:	f8 01       	movw	r30, r16
    103e:	40 e0       	ldi	r20, 0x00	; 0

  for(j=0; j<12; j++) {
    if(fileName[j] == '.') 
    1040:	80 81       	ld	r24, Z
    1042:	8e 32       	cpi	r24, 0x2E	; 46
    1044:	19 f4       	brne	.+6      	; 0x104c <convertFileName+0x4c>
  if (j == 12)
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    1046:	49 30       	cpi	r20, 0x09	; 9
    1048:	30 f0       	brcs	.+12     	; 0x1056 <convertFileName+0x56>
    104a:	0e c0       	rjmp	.+28     	; 0x1068 <convertFileName+0x68>

  PRINTF("[convertFileName]Filename:");
  PRINTF(fileName);
  TX_NEWLINE_PC;

  for(j=0; j<12; j++) {
    104c:	4f 5f       	subi	r20, 0xFF	; 255
    104e:	31 96       	adiw	r30, 0x01	; 1
    1050:	4c 30       	cpi	r20, 0x0C	; 12
    1052:	b1 f7       	brne	.-20     	; 0x1040 <convertFileName+0x40>
    1054:	7b c0       	rjmp	.+246    	; 0x114c <convertFileName+0x14c>
    1056:	be 01       	movw	r22, r28
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	85 2f       	mov	r24, r21
    105e:	9a 2f       	mov	r25, r26
    1060:	9c 01       	movw	r18, r24
    1062:	f9 01       	movw	r30, r18
    1064:	db 01       	movw	r26, r22
    1066:	08 c0       	rjmp	.+16     	; 0x1078 <convertFileName+0x78>
    // assume that a string without any dots is already converted
    return 0;

  // 1 = BAD_EXTENSION
  if(j>8) {
    USART_transmitStringToPCFromFlash(PSTR("Invalid fileName.")); 
    1068:	84 e5       	ldi	r24, 0x54	; 84
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	6d c0       	rjmp	.+218    	; 0x114e <convertFileName+0x14e>
    return 1;
  }

  for(k=0; k<j; k++) //setting file name
    fileNameFAT[k] = fileName[k];
    1074:	81 91       	ld	r24, Z+
    1076:	8d 93       	st	X+, r24
  if(j>8) {
    USART_transmitStringToPCFromFlash(PSTR("Invalid fileName.")); 
    return 1;
  }

  for(k=0; k<j; k++) //setting file name
    1078:	8e 2f       	mov	r24, r30
    107a:	85 1b       	sub	r24, r21
    107c:	84 17       	cp	r24, r20
    107e:	d0 f3       	brcs	.-12     	; 0x1074 <convertFileName+0x74>
    1080:	84 2f       	mov	r24, r20
    fileNameFAT[k] = fileName[k];

  for(k=j; k<=7; k++) //filling file name trail with blanks
    fileNameFAT[k] = ' ';
    1082:	9e 01       	movw	r18, r28
    1084:	2f 5f       	subi	r18, 0xFF	; 255
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	90 e2       	ldi	r25, 0x20	; 32
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <convertFileName+0x96>
    108c:	f9 01       	movw	r30, r18
    108e:	e8 0f       	add	r30, r24
    1090:	f1 1d       	adc	r31, r1
    1092:	90 83       	st	Z, r25
  }

  for(k=0; k<j; k++) //setting file name
    fileNameFAT[k] = fileName[k];

  for(k=j; k<=7; k++) //filling file name trail with blanks
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	c9 f7       	brne	.-14     	; 0x108c <convertFileName+0x8c>
    fileNameFAT[k] = ' ';

  j++;
    109a:	24 2f       	mov	r18, r20
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    }
    else //filling extension trail with blanks
    {
      while(k<11)
      {
        fileNameFAT[k++] = ' ';
    109e:	ae 01       	movw	r20, r28
    10a0:	4f 5f       	subi	r20, 0xFF	; 255
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	30 e2       	ldi	r19, 0x20	; 32

  j++;

  for(k=8; k<11; k++) //setting file extention
  {
    if(fileName[j] != 0)
    10a6:	f8 01       	movw	r30, r16
    10a8:	e2 0f       	add	r30, r18
    10aa:	f1 1d       	adc	r31, r1
    10ac:	90 81       	ld	r25, Z
    10ae:	99 23       	and	r25, r25
    10b0:	59 f0       	breq	.+22     	; 0x10c8 <convertFileName+0xc8>
    {
      fileNameFAT[k] = fileName[j++];
    10b2:	fa 01       	movw	r30, r20
    10b4:	e8 0f       	add	r30, r24
    10b6:	f1 1d       	adc	r31, r1
    10b8:	90 83       	st	Z, r25
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <convertFileName+0xcc>
    }
    else //filling extension trail with blanks
    {
      while(k<11)
      {
        fileNameFAT[k++] = ' ';
    10be:	fa 01       	movw	r30, r20
    10c0:	e8 0f       	add	r30, r24
    10c2:	f1 1d       	adc	r31, r1
    10c4:	30 83       	st	Z, r19
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    {
      fileNameFAT[k] = fileName[j++];
    }
    else //filling extension trail with blanks
    {
      while(k<11)
    10c8:	8b 30       	cpi	r24, 0x0B	; 11
    10ca:	c8 f3       	brcs	.-14     	; 0x10be <convertFileName+0xbe>
  for(k=j; k<=7; k++) //filling file name trail with blanks
    fileNameFAT[k] = ' ';

  j++;

  for(k=8; k<11; k++) //setting file extention
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	8b 30       	cpi	r24, 0x0B	; 11
    10d0:	50 f3       	brcs	.-44     	; 0x10a6 <convertFileName+0xa6>
        fileNameFAT[k++] = ' ';
      }
    }
  }

  for(j=0; j<11; j++) //converting small letters to caps
    10d2:	9e 01       	movw	r18, r28
    10d4:	24 5f       	subi	r18, 0xF4	; 244
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
  {
    if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    10d8:	fb 01       	movw	r30, r22
    10da:	90 81       	ld	r25, Z
    10dc:	89 2f       	mov	r24, r25
    10de:	81 56       	subi	r24, 0x61	; 97
    10e0:	8a 31       	cpi	r24, 0x1A	; 26
    10e2:	10 f4       	brcc	.+4      	; 0x10e8 <convertFileName+0xe8>
    {
        fileNameFAT[j] -= 0x20;
    10e4:	90 52       	subi	r25, 0x20	; 32
    10e6:	90 83       	st	Z, r25
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
        fileNameFAT[k++] = ' ';
      }
    }
  }

  for(j=0; j<11; j++) //converting small letters to caps
    10ec:	62 17       	cp	r22, r18
    10ee:	73 07       	cpc	r23, r19
    10f0:	99 f7       	brne	.-26     	; 0x10d8 <convertFileName+0xd8>
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    }
  }


  for(j=0; j<11; j++)
    fileName[j] = fileNameFAT[j];
    10f6:	7e 01       	movw	r14, r28
    10f8:	08 94       	sec
    10fa:	e1 1c       	adc	r14, r1
    10fc:	f1 1c       	adc	r15, r1
    10fe:	f8 01       	movw	r30, r16
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	d7 01       	movw	r26, r14
    1106:	a2 0f       	add	r26, r18
    1108:	b3 1f       	adc	r27, r19
    110a:	8c 91       	ld	r24, X
    110c:	80 83       	st	Z, r24
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
        fileNameFAT[j] -= 0x20;
    }
  }


  for(j=0; j<11; j++)
    1112:	2b 30       	cpi	r18, 0x0B	; 11
    1114:	31 05       	cpc	r19, r1
    1116:	99 f7       	brne	.-26     	; 0x10fe <convertFileName+0xfe>
    fileName[j] = fileNameFAT[j];

  // Add null terminator to filename
  //fileName[11] = '\0';

  PRINTF("[convertFileName]File name FAT:");
    1118:	8c e5       	ldi	r24, 0x5C	; 92
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  PRINTF(fileNameFAT);
    1120:	c7 01       	movw	r24, r14
    1122:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    1126:	8d e0       	ldi	r24, 0x0D	; 13
    1128:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    112c:	8a e0       	ldi	r24, 0x0A	; 10
    112e:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>


  PRINTF("[convertFileName]File name after:");
    1132:	8c e7       	ldi	r24, 0x7C	; 124
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  PRINTF(fileName);
    113a:	c8 01       	movw	r24, r16
    113c:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    1140:	8d e0       	ldi	r24, 0x0D	; 13
    1142:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1146:	8a e0       	ldi	r24, 0x0A	; 10
    1148:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    114c:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
    114e:	2b 96       	adiw	r28, 0x0b	; 11
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	08 95       	ret

00001168 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    1168:	6f 92       	push	r6
    116a:	7f 92       	push	r7
    116c:	8f 92       	push	r8
    116e:	9f 92       	push	r9
    1170:	af 92       	push	r10
    1172:	bf 92       	push	r11
    1174:	cf 92       	push	r12
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
  startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    1180:	60 78       	andi	r22, 0x80	; 128
    1182:	3b 01       	movw	r6, r22
    1184:	4c 01       	movw	r8, r24
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	66 0c       	add	r6, r6
    118a:	77 1c       	adc	r7, r7
    118c:	88 1c       	adc	r8, r8
    118e:	99 1c       	adc	r9, r9
    1190:	2a 95       	dec	r18
    1192:	d1 f7       	brne	.-12     	; 0x1188 <searchNextFreeCluster+0x20>
    1194:	5b 01       	movw	r10, r22
    1196:	6c 01       	movw	r12, r24
    1198:	50 c0       	rjmp	.+160    	; 0x123a <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    119a:	e0 90 db 06 	lds	r14, 0x06DB
    119e:	f0 90 dc 06 	lds	r15, 0x06DC
    11a2:	20 91 88 04 	lds	r18, 0x0488
    11a6:	30 91 89 04 	lds	r19, 0x0489
      SD_readSingleBlock(sector);
    11aa:	00 e0       	ldi	r16, 0x00	; 0
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	80 91 d0 06 	lds	r24, 0x06D0
    11b2:	90 91 d1 06 	lds	r25, 0x06D1
    11b6:	a0 91 d2 06 	lds	r26, 0x06D2
    11ba:	b0 91 d3 06 	lds	r27, 0x06D3
    11be:	e8 0e       	add	r14, r24
    11c0:	f9 1e       	adc	r15, r25
    11c2:	0a 1f       	adc	r16, r26
    11c4:	1b 1f       	adc	r17, r27
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	c4 01       	movw	r24, r8
    11cc:	b3 01       	movw	r22, r6
    11ce:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    11d2:	e2 0e       	add	r14, r18
    11d4:	f3 1e       	adc	r15, r19
    11d6:	04 1f       	adc	r16, r20
    11d8:	15 1f       	adc	r17, r21
    11da:	c8 01       	movw	r24, r16
    11dc:	b7 01       	movw	r22, r14
    11de:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
          value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    11e4:	e6 2f       	mov	r30, r22
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	e7 54       	subi	r30, 0x47	; 71
    11f2:	fb 4f       	sbci	r31, 0xFB	; 251
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	a2 81       	ldd	r26, Z+2	; 0x02
    11fa:	b3 81       	ldd	r27, Z+3	; 0x03
    11fc:	bf 70       	andi	r27, 0x0F	; 15
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	a1 05       	cpc	r26, r1
    1202:	b1 05       	cpc	r27, r1
    1204:	39 f4       	brne	.+14     	; 0x1214 <searchNextFreeCluster+0xac>
            return(cluster+i);
    1206:	a6 01       	movw	r20, r12
    1208:	95 01       	movw	r18, r10
    120a:	26 0f       	add	r18, r22
    120c:	31 1d       	adc	r19, r1
    120e:	41 1d       	adc	r20, r1
    1210:	51 1d       	adc	r21, r1
    1212:	25 c0       	rjmp	.+74     	; 0x125e <searchNextFreeCluster+0xf6>
  startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	60 38       	cpi	r22, 0x80	; 128
    1218:	29 f7       	brne	.-54     	; 0x11e4 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
  startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	a8 0e       	add	r10, r24
    1224:	b9 1e       	adc	r11, r25
    1226:	ca 1e       	adc	r12, r26
    1228:	db 1e       	adc	r13, r27
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	a0 e0       	ldi	r26, 0x00	; 0
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	68 0e       	add	r6, r24
    1234:	79 1e       	adc	r7, r25
    1236:	8a 1e       	adc	r8, r26
    1238:	9b 1e       	adc	r9, r27
    123a:	80 91 8a 04 	lds	r24, 0x048A
    123e:	90 91 8b 04 	lds	r25, 0x048B
    1242:	a0 91 8c 04 	lds	r26, 0x048C
    1246:	b0 91 8d 04 	lds	r27, 0x048D
    124a:	a8 16       	cp	r10, r24
    124c:	b9 06       	cpc	r11, r25
    124e:	ca 06       	cpc	r12, r26
    1250:	db 06       	cpc	r13, r27
    1252:	08 f4       	brcc	.+2      	; 0x1256 <searchNextFreeCluster+0xee>
    1254:	a2 cf       	rjmp	.-188    	; 0x119a <searchNextFreeCluster+0x32>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    125e:	b9 01       	movw	r22, r18
    1260:	ca 01       	movw	r24, r20
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	6f 90       	pop	r6
    127a:	08 95       	ret

0000127c <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//      0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	d8 2e       	mov	r13, r24
    128a:	c6 2e       	mov	r12, r22
    128c:	79 01       	movw	r14, r18
    128e:	8a 01       	movw	r16, r20
  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
  unsigned char error;

  SD_readSingleBlock(unusedSectors + 1);
    1290:	60 91 d0 06 	lds	r22, 0x06D0
    1294:	70 91 d1 06 	lds	r23, 0x06D1
    1298:	80 91 d2 06 	lds	r24, 0x06D2
    129c:	90 91 d3 06 	lds	r25, 0x06D3
    12a0:	6f 5f       	subi	r22, 0xFF	; 255
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>

  if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    12ac:	80 91 b9 04 	lds	r24, 0x04B9
    12b0:	90 91 ba 04 	lds	r25, 0x04BA
    12b4:	a0 91 bb 04 	lds	r26, 0x04BB
    12b8:	b0 91 bc 04 	lds	r27, 0x04BC
    12bc:	82 55       	subi	r24, 0x52	; 82
    12be:	92 45       	sbci	r25, 0x52	; 82
    12c0:	a1 46       	sbci	r26, 0x61	; 97
    12c2:	b1 44       	sbci	r27, 0x41	; 65
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <getSetFreeCluster+0x4c>
    12c6:	54 c0       	rjmp	.+168    	; 0x1370 <getSetFreeCluster+0xf4>
    12c8:	80 91 9d 06 	lds	r24, 0x069D
    12cc:	90 91 9e 06 	lds	r25, 0x069E
    12d0:	a0 91 9f 06 	lds	r26, 0x069F
    12d4:	b0 91 a0 06 	lds	r27, 0x06A0
    12d8:	82 57       	subi	r24, 0x72	; 114
    12da:	92 47       	sbci	r25, 0x72	; 114
    12dc:	a1 44       	sbci	r26, 0x41	; 65
    12de:	b1 46       	sbci	r27, 0x61	; 97
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <getSetFreeCluster+0x68>
    12e2:	46 c0       	rjmp	.+140    	; 0x1370 <getSetFreeCluster+0xf4>
    12e4:	80 91 b5 06 	lds	r24, 0x06B5
    12e8:	90 91 b6 06 	lds	r25, 0x06B6
    12ec:	a0 91 b7 06 	lds	r26, 0x06B7
    12f0:	b0 91 b8 06 	lds	r27, 0x06B8
    12f4:	80 50       	subi	r24, 0x00	; 0
    12f6:	90 40       	sbci	r25, 0x00	; 0
    12f8:	a5 45       	sbci	r26, 0x55	; 85
    12fa:	ba 4a       	sbci	r27, 0xAA	; 170
    12fc:	c9 f5       	brne	.+114    	; 0x1370 <getSetFreeCluster+0xf4>
  return 0xffffffff;

  if(get_set == GET)
    12fe:	cc 20       	and	r12, r12
    1300:	a9 f4       	brne	.+42     	; 0x132c <getSetFreeCluster+0xb0>
  {
  if(totOrNext == TOTAL_FREE)
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	d8 16       	cp	r13, r24
    1306:	49 f4       	brne	.+18     	; 0x131a <getSetFreeCluster+0x9e>
    return(FS->freeClusterCount);
    1308:	20 91 a1 06 	lds	r18, 0x06A1
    130c:	30 91 a2 06 	lds	r19, 0x06A2
    1310:	40 91 a3 06 	lds	r20, 0x06A3
    1314:	50 91 a4 06 	lds	r21, 0x06A4
    1318:	2f c0       	rjmp	.+94     	; 0x1378 <getSetFreeCluster+0xfc>
  else // when totOrNext = NEXT_FREE
    return(FS->nextFreeCluster);
    131a:	20 91 a5 06 	lds	r18, 0x06A5
    131e:	30 91 a6 06 	lds	r19, 0x06A6
    1322:	40 91 a7 06 	lds	r20, 0x06A7
    1326:	50 91 a8 06 	lds	r21, 0x06A8
    132a:	26 c0       	rjmp	.+76     	; 0x1378 <getSetFreeCluster+0xfc>
  }
  else
  {
  if(totOrNext == TOTAL_FREE)
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	d2 16       	cp	r13, r18
    1330:	49 f4       	brne	.+18     	; 0x1344 <getSetFreeCluster+0xc8>
    FS->freeClusterCount = FSEntry;
    1332:	e0 92 a1 06 	sts	0x06A1, r14
    1336:	f0 92 a2 06 	sts	0x06A2, r15
    133a:	00 93 a3 06 	sts	0x06A3, r16
    133e:	10 93 a4 06 	sts	0x06A4, r17
    1342:	08 c0       	rjmp	.+16     	; 0x1354 <getSetFreeCluster+0xd8>
  else // when totOrNext = NEXT_FREE
    FS->nextFreeCluster = FSEntry;
    1344:	e0 92 a5 06 	sts	0x06A5, r14
    1348:	f0 92 a6 06 	sts	0x06A6, r15
    134c:	00 93 a7 06 	sts	0x06A7, r16
    1350:	10 93 a8 06 	sts	0x06A8, r17

  error = SD_writeSingleBlock(unusedSectors + 1);  //update FSinfo
    1354:	60 91 d0 06 	lds	r22, 0x06D0
    1358:	70 91 d1 06 	lds	r23, 0x06D1
    135c:	80 91 d2 06 	lds	r24, 0x06D2
    1360:	90 91 d3 06 	lds	r25, 0x06D3
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
  }
  return 0xffffffff;
    1370:	2f ef       	ldi	r18, 0xFF	; 255
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f ef       	ldi	r20, 0xFF	; 255
    1376:	5f ef       	ldi	r21, 0xFF	; 255
}
    1378:	b9 01       	movw	r22, r18
    137a:	ca 01       	movw	r24, r20
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	08 95       	ret

0000138a <freeMemoryUpdate>:
//      to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	d8 2e       	mov	r13, r24
    1396:	db 01       	movw	r26, r22
    1398:	ca 01       	movw	r24, r20
    139a:	e9 e0       	ldi	r30, 0x09	; 9
    139c:	b6 95       	lsr	r27
    139e:	a7 95       	ror	r26
    13a0:	97 95       	ror	r25
    13a2:	87 95       	ror	r24
    13a4:	ea 95       	dec	r30
    13a6:	d1 f7       	brne	.-12     	; 0x139c <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    13a8:	51 70       	andi	r21, 0x01	; 1
    13aa:	60 70       	andi	r22, 0x00	; 0
    13ac:	70 70       	andi	r23, 0x00	; 0
    13ae:	41 15       	cp	r20, r1
    13b0:	51 05       	cpc	r21, r1
    13b2:	61 05       	cpc	r22, r1
    13b4:	71 05       	cpc	r23, r1
    13b6:	19 f4       	brne	.+6      	; 0x13be <freeMemoryUpdate+0x34>
    13b8:	ac 01       	movw	r20, r24
    13ba:	bd 01       	movw	r22, r26
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    13be:	ac 01       	movw	r20, r24
    13c0:	bd 01       	movw	r22, r26
    13c2:	4f 5f       	subi	r20, 0xFF	; 255
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	6f 4f       	sbci	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	db 01       	movw	r26, r22
    13cc:	ca 01       	movw	r24, r20
    13ce:	33 e0       	ldi	r19, 0x03	; 3
    13d0:	b6 95       	lsr	r27
    13d2:	a7 95       	ror	r26
    13d4:	97 95       	ror	r25
    13d6:	87 95       	ror	r24
    13d8:	3a 95       	dec	r19
    13da:	d1 f7       	brne	.-12     	; 0x13d0 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    13dc:	47 70       	andi	r20, 0x07	; 7
    13de:	50 70       	andi	r21, 0x00	; 0
    13e0:	60 70       	andi	r22, 0x00	; 0
    13e2:	70 70       	andi	r23, 0x00	; 0
    13e4:	41 15       	cp	r20, r1
    13e6:	51 05       	cpc	r21, r1
    13e8:	61 05       	cpc	r22, r1
    13ea:	71 05       	cpc	r23, r1
    13ec:	19 f4       	brne	.+6      	; 0x13f4 <freeMemoryUpdate+0x6a>
    13ee:	7c 01       	movw	r14, r24
    13f0:	8d 01       	movw	r16, r26
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    13f4:	7c 01       	movw	r14, r24
    13f6:	8d 01       	movw	r16, r26
    13f8:	08 94       	sec
    13fa:	e1 1c       	adc	r14, r1
    13fc:	f1 1c       	adc	r15, r1
    13fe:	01 1d       	adc	r16, r1
    1400:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    1402:	80 91 e7 07 	lds	r24, 0x07E7
    1406:	88 23       	and	r24, r24
    1408:	d9 f0       	breq	.+54     	; 0x1440 <freeMemoryUpdate+0xb6>
  {
  freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
  if(flag == ADD)
    141a:	dd 20       	and	r13, r13
    141c:	39 f4       	brne	.+14     	; 0x142c <freeMemoryUpdate+0xa2>
       freeClusters = freeClusters + size;
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	2e 0d       	add	r18, r14
    1424:	3f 1d       	adc	r19, r15
    1426:	40 1f       	adc	r20, r16
    1428:	51 1f       	adc	r21, r17
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <freeMemoryUpdate+0xae>
  else  //when flag = REMOVE
     freeClusters = freeClusters - size;
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	2e 19       	sub	r18, r14
    1432:	3f 09       	sbc	r19, r15
    1434:	40 0b       	sbc	r20, r16
    1436:	51 0b       	sbc	r21, r17
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
  }
}
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	08 95       	ret

0000144c <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    144c:	2f 92       	push	r2
    144e:	3f 92       	push	r3
    1450:	4f 92       	push	r4
    1452:	5f 92       	push	r5
    1454:	6f 92       	push	r6
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    146c:	20 91 8a 04 	lds	r18, 0x048A
    1470:	30 91 8b 04 	lds	r19, 0x048B
    1474:	40 91 8c 04 	lds	r20, 0x048C
    1478:	50 91 8d 04 	lds	r21, 0x048D
    147c:	60 91 ba 06 	lds	r22, 0x06BA
    1480:	70 91 bb 06 	lds	r23, 0x06BB
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    148c:	5b 01       	movw	r10, r22
    148e:	6c 01       	movw	r12, r24
    1490:	1a e0       	ldi	r17, 0x0A	; 10
    1492:	d6 94       	lsr	r13
    1494:	c7 94       	ror	r12
    1496:	b7 94       	ror	r11
    1498:	a7 94       	ror	r10
    149a:	1a 95       	dec	r17
    149c:	d1 f7       	brne	.-12     	; 0x1492 <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
    149e:	e0 90 88 04 	lds	r14, 0x0488
    14a2:	f0 90 89 04 	lds	r15, 0x0489

TX_NEWLINE_PC;
    14a6:	8d e0       	ldi	r24, 0x0D	; 13
    14a8:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
TX_NEWLINE_PC;
    14b2:	8d e0       	ldi	r24, 0x0D	; 13
    14b4:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    14b8:	8a e0       	ldi	r24, 0x0A	; 10
    14ba:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
//USART_transmitStringToPCFromFlash(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	c6 01       	movw	r24, r12
    14c4:	b5 01       	movw	r22, r10
    14c6:	a8 01       	movw	r20, r16
    14c8:	97 01       	movw	r18, r14
    14ca:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    14ce:	ab 01       	movw	r20, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	0e 94 99 07 	call	0xf32	; 0xf32 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
    14e8:	3b 01       	movw	r6, r22
    14ea:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    14ec:	80 91 8a 04 	lds	r24, 0x048A
    14f0:	90 91 8b 04 	lds	r25, 0x048B
    14f4:	a0 91 8c 04 	lds	r26, 0x048C
    14f8:	b0 91 8d 04 	lds	r27, 0x048D
    14fc:	86 15       	cp	r24, r6
    14fe:	97 05       	cpc	r25, r7
    1500:	a8 05       	cpc	r26, r8
    1502:	b9 05       	cpc	r27, r9
    1504:	08 f0       	brcs	.+2      	; 0x1508 <memoryStatistics+0xbc>
    1506:	7c c0       	rjmp	.+248    	; 0x1600 <memoryStatistics+0x1b4>
{
   freeClusterCountUpdated = 0;
    1508:	10 92 e7 07 	sts	0x07E7, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    150c:	a0 90 ae 04 	lds	r10, 0x04AE
    1510:	b0 90 af 04 	lds	r11, 0x04AF
    1514:	c0 90 b0 04 	lds	r12, 0x04B0
    1518:	d0 90 b1 04 	lds	r13, 0x04B1
    151c:	b2 e0       	ldi	r27, 0x02	; 2
    151e:	aa 0c       	add	r10, r10
    1520:	bb 1c       	adc	r11, r11
    1522:	cc 1c       	adc	r12, r12
    1524:	dd 1c       	adc	r13, r13
    1526:	ba 95       	dec	r27
    1528:	d1 f7       	brne	.-12     	; 0x151e <memoryStatistics+0xd2>
    152a:	66 24       	eor	r6, r6
    152c:	77 24       	eor	r7, r7
    152e:	43 01       	movw	r8, r6
    1530:	22 24       	eor	r2, r2
    1532:	33 24       	eor	r3, r3
    1534:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    1536:	e0 90 db 06 	lds	r14, 0x06DB
    153a:	f0 90 dc 06 	lds	r15, 0x06DC
    153e:	20 91 88 04 	lds	r18, 0x0488
    1542:	30 91 89 04 	lds	r19, 0x0489
      SD_readSingleBlock(sector);
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	80 91 d0 06 	lds	r24, 0x06D0
    154e:	90 91 d1 06 	lds	r25, 0x06D1
    1552:	a0 91 d2 06 	lds	r26, 0x06D2
    1556:	b0 91 d3 06 	lds	r27, 0x06D3
    155a:	e8 0e       	add	r14, r24
    155c:	f9 1e       	adc	r15, r25
    155e:	0a 1f       	adc	r16, r26
    1560:	1b 1f       	adc	r17, r27
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	c6 01       	movw	r24, r12
    1568:	b5 01       	movw	r22, r10
    156a:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    156e:	e2 0e       	add	r14, r18
    1570:	f3 1e       	adc	r15, r19
    1572:	04 1f       	adc	r16, r20
    1574:	15 1f       	adc	r17, r21
    1576:	c8 01       	movw	r24, r16
    1578:	b7 01       	movw	r22, r14
    157a:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    157e:	a2 01       	movw	r20, r4
    1580:	91 01       	movw	r18, r2
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    1586:	fb 01       	movw	r30, r22
    1588:	e7 54       	subi	r30, 0x47	; 71
    158a:	fb 4f       	sbci	r31, 0xFB	; 251
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	a2 81       	ldd	r26, Z+2	; 0x02
    1592:	b3 81       	ldd	r27, Z+3	; 0x03
    1594:	bf 70       	andi	r27, 0x0F	; 15
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	a1 05       	cpc	r26, r1
    159a:	b1 05       	cpc	r27, r1
    159c:	29 f4       	brne	.+10     	; 0x15a8 <memoryStatistics+0x15c>
            freeClusters++;;
    159e:	08 94       	sec
    15a0:	61 1c       	adc	r6, r1
    15a2:	71 1c       	adc	r7, r1
    15a4:	81 1c       	adc	r8, r1
    15a6:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    15a8:	2f 5f       	subi	r18, 0xFF	; 255
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	4f 4f       	sbci	r20, 0xFF	; 255
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    15b0:	80 91 8a 04 	lds	r24, 0x048A
    15b4:	90 91 8b 04 	lds	r25, 0x048B
    15b8:	a0 91 8c 04 	lds	r26, 0x048C
    15bc:	b0 91 8d 04 	lds	r27, 0x048D
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	a1 1d       	adc	r26, r1
    15c4:	b1 1d       	adc	r27, r1
    15c6:	28 17       	cp	r18, r24
    15c8:	39 07       	cpc	r19, r25
    15ca:	4a 07       	cpc	r20, r26
    15cc:	5b 07       	cpc	r21, r27
    15ce:	c1 f0       	breq	.+48     	; 0x1600 <memoryStatistics+0x1b4>
    15d0:	c9 01       	movw	r24, r18
    15d2:	82 19       	sub	r24, r2
    15d4:	93 09       	sbc	r25, r3
    15d6:	6c 5f       	subi	r22, 0xFC	; 252
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    15da:	02 e0       	ldi	r16, 0x02	; 2
    15dc:	60 30       	cpi	r22, 0x00	; 0
    15de:	70 07       	cpc	r23, r16
    15e0:	91 f6       	brne	.-92     	; 0x1586 <memoryStatistics+0x13a>
    15e2:	e1 2c       	mov	r14, r1
    15e4:	a2 e0       	ldi	r26, 0x02	; 2
    15e6:	fa 2e       	mov	r15, r26
    15e8:	01 2d       	mov	r16, r1
    15ea:	11 2d       	mov	r17, r1
    15ec:	ae 0c       	add	r10, r14
    15ee:	bf 1c       	adc	r11, r15
    15f0:	c0 1e       	adc	r12, r16
    15f2:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    15f4:	80 38       	cpi	r24, 0x80	; 128
    15f6:	91 05       	cpc	r25, r1
    15f8:	18 f0       	brcs	.+6      	; 0x1600 <memoryStatistics+0x1b4>
    15fa:	19 01       	movw	r2, r18
    15fc:	2a 01       	movw	r4, r20
    15fe:	9b cf       	rjmp	.-202    	; 0x1536 <memoryStatistics+0xea>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
    1600:	80 91 e7 07 	lds	r24, 0x07E7
    1604:	88 23       	and	r24, r24
    1606:	31 f4       	brne	.+12     	; 0x1614 <memoryStatistics+0x1c8>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	a4 01       	movw	r20, r8
    160e:	93 01       	movw	r18, r6
    1610:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 e7 07 	sts	0x07E7, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
    161a:	20 91 ba 06 	lds	r18, 0x06BA
    161e:	30 91 bb 06 	lds	r19, 0x06BB
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	c4 01       	movw	r24, r8
    1628:	b3 01       	movw	r22, r6
    162a:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    162e:	fa e0       	ldi	r31, 0x0A	; 10
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	77 95       	ror	r23
    1636:	67 95       	ror	r22
    1638:	fa 95       	dec	r31
    163a:	d1 f7       	brne	.-12     	; 0x1630 <memoryStatistics+0x1e4>
freeMemory *= bytesPerSector ;
    163c:	20 91 88 04 	lds	r18, 0x0488
    1640:	30 91 89 04 	lds	r19, 0x0489
//TX_NEWLINE_PC;
//USART_transmitStringToPCFromFlash(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    164c:	ab 01       	movw	r20, r22
    164e:	bc 01       	movw	r22, r24
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 99 07 	call	0xf32	; 0xf32 <displayMemory>
//TX_NEWLINE_PC; 
}
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	8f 90       	pop	r8
    166a:	7f 90       	pop	r7
    166c:	6f 90       	pop	r6
    166e:	5f 90       	pop	r5
    1670:	4f 90       	pop	r4
    1672:	3f 90       	pop	r3
    1674:	2f 90       	pop	r2
    1676:	08 95       	ret

00001678 <getBootSectorData>:
 */

#include "Globals.h"

unsigned char getBootSectorData (void)
{
    1678:	6f 92       	push	r6
    167a:	7f 92       	push	r7
    167c:	8f 92       	push	r8
    167e:	9f 92       	push	r9
    1680:	af 92       	push	r10
    1682:	bf 92       	push	r11
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
  struct BS_Structure *bpb; //mapping the buffer onto the structure
  struct MBRinfo_Structure *mbr;
  struct partitionInfo_Structure *partition;
  unsigned long dataSectors;

  unusedSectors = 0;
    1690:	10 92 d0 06 	sts	0x06D0, r1
    1694:	10 92 d1 06 	sts	0x06D1, r1
    1698:	10 92 d2 06 	sts	0x06D2, r1
    169c:	10 92 d3 06 	sts	0x06D3, r1

  SD_readSingleBlock(0);
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;

  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    16ac:	80 91 b9 04 	lds	r24, 0x04B9
    16b0:	89 3e       	cpi	r24, 0xE9	; 233
    16b2:	19 f1       	breq	.+70     	; 0x16fa <getBootSectorData+0x82>
    16b4:	8b 3e       	cpi	r24, 0xEB	; 235
    16b6:	09 f1       	breq	.+66     	; 0x16fa <getBootSectorData+0x82>
  {
    mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR

    if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    16b8:	80 91 b7 06 	lds	r24, 0x06B7
    16bc:	90 91 b8 06 	lds	r25, 0x06B8
    16c0:	85 55       	subi	r24, 0x55	; 85
    16c2:	9a 4a       	sbci	r25, 0xAA	; 170
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <getBootSectorData+0x50>
    16c6:	b0 c0       	rjmp	.+352    	; 0x1828 <getBootSectorData+0x1b0>

    partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
    unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    16c8:	60 91 7f 06 	lds	r22, 0x067F
    16cc:	70 91 80 06 	lds	r23, 0x0680
    16d0:	80 91 81 06 	lds	r24, 0x0681
    16d4:	90 91 82 06 	lds	r25, 0x0682
    16d8:	60 93 d0 06 	sts	0x06D0, r22
    16dc:	70 93 d1 06 	sts	0x06D1, r23
    16e0:	80 93 d2 06 	sts	0x06D2, r24
    16e4:	90 93 d3 06 	sts	0x06D3, r25

    SD_readSingleBlock(partition->firstSector);//read the bpb sector
    16e8:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    bpb = (struct BS_Structure *)buffer;
    if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    16ec:	80 91 b9 04 	lds	r24, 0x04B9
    16f0:	89 3e       	cpi	r24, 0xE9	; 233
    16f2:	19 f0       	breq	.+6      	; 0x16fa <getBootSectorData+0x82>
    16f4:	8b 3e       	cpi	r24, 0xEB	; 235
    16f6:	09 f0       	breq	.+2      	; 0x16fa <getBootSectorData+0x82>
    16f8:	97 c0       	rjmp	.+302    	; 0x1828 <getBootSectorData+0x1b0>
  }

  bytesPerSector = bpb->bytesPerSector;
    16fa:	80 91 c4 04 	lds	r24, 0x04C4
    16fe:	90 91 c5 04 	lds	r25, 0x04C5
    1702:	90 93 89 04 	sts	0x0489, r25
    1706:	80 93 88 04 	sts	0x0488, r24
  //transmitHex(INT, bytesPerSector); USART_transmitByteToPC(' ');
  sectorPerCluster = bpb->sectorPerCluster;
    170a:	80 91 c6 04 	lds	r24, 0x04C6
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	90 93 bb 06 	sts	0x06BB, r25
    1714:	80 93 ba 06 	sts	0x06BA, r24
  //transmitHex(INT, sectorPerCluster); USART_transmitByteToPC(' ');
  reservedSectorCount = bpb->reservedSectorCount;
    1718:	a0 90 c7 04 	lds	r10, 0x04C7
    171c:	b0 90 c8 04 	lds	r11, 0x04C8
    1720:	b0 92 dc 06 	sts	0x06DC, r11
    1724:	a0 92 db 06 	sts	0x06DB, r10
  rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    1728:	80 91 e5 04 	lds	r24, 0x04E5
    172c:	90 91 e6 04 	lds	r25, 0x04E6
    1730:	a0 91 e7 04 	lds	r26, 0x04E7
    1734:	b0 91 e8 04 	lds	r27, 0x04E8
    1738:	80 93 ae 04 	sts	0x04AE, r24
    173c:	90 93 af 04 	sts	0x04AF, r25
    1740:	a0 93 b0 04 	sts	0x04B0, r26
    1744:	b0 93 b1 04 	sts	0x04B1, r27
  firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    1748:	e0 90 db 06 	lds	r14, 0x06DB
    174c:	f0 90 dc 06 	lds	r15, 0x06DC
    1750:	60 91 c9 04 	lds	r22, 0x04C9
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	20 91 dd 04 	lds	r18, 0x04DD
    175e:	30 91 de 04 	lds	r19, 0x04DE
    1762:	40 91 df 04 	lds	r20, 0x04DF
    1766:	50 91 e0 04 	lds	r21, 0x04E0
    176a:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    176e:	3b 01       	movw	r6, r22
    1770:	4c 01       	movw	r8, r24
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	80 91 d5 04 	lds	r24, 0x04D5
    177a:	90 91 d6 04 	lds	r25, 0x04D6
    177e:	a0 91 d7 04 	lds	r26, 0x04D7
    1782:	b0 91 d8 04 	lds	r27, 0x04D8
    1786:	e8 0e       	add	r14, r24
    1788:	f9 1e       	adc	r15, r25
    178a:	0a 1f       	adc	r16, r26
    178c:	1b 1f       	adc	r17, r27
    178e:	e6 0c       	add	r14, r6
    1790:	f7 1c       	adc	r15, r7
    1792:	08 1d       	adc	r16, r8
    1794:	19 1d       	adc	r17, r9
    1796:	e0 92 80 04 	sts	0x0480, r14
    179a:	f0 92 81 04 	sts	0x0481, r15
    179e:	00 93 82 04 	sts	0x0482, r16
    17a2:	10 93 83 04 	sts	0x0483, r17

  dataSectors = bpb->totalSectors_F32
                - bpb->reservedSectorCount
                - ( bpb->numberofFATs * bpb->FATsize_F32);
  totalClusters = dataSectors / sectorPerCluster;
    17a6:	20 91 ba 06 	lds	r18, 0x06BA
    17aa:	30 91 bb 06 	lds	r19, 0x06BB
    17ae:	cc 24       	eor	r12, r12
    17b0:	dd 24       	eor	r13, r13
    17b2:	60 91 d9 04 	lds	r22, 0x04D9
    17b6:	70 91 da 04 	lds	r23, 0x04DA
    17ba:	80 91 db 04 	lds	r24, 0x04DB
    17be:	90 91 dc 04 	lds	r25, 0x04DC
    17c2:	6a 19       	sub	r22, r10
    17c4:	7b 09       	sbc	r23, r11
    17c6:	8c 09       	sbc	r24, r12
    17c8:	9d 09       	sbc	r25, r13
    17ca:	66 19       	sub	r22, r6
    17cc:	77 09       	sbc	r23, r7
    17ce:	88 09       	sbc	r24, r8
    17d0:	99 09       	sbc	r25, r9
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    17da:	c9 01       	movw	r24, r18
    17dc:	da 01       	movw	r26, r20
    17de:	80 93 8a 04 	sts	0x048A, r24
    17e2:	90 93 8b 04 	sts	0x048B, r25
    17e6:	a0 93 8c 04 	sts	0x048C, r26
    17ea:	b0 93 8d 04 	sts	0x048D, r27
  //transmitHex(LONG, totalClusters); USART_transmitByteToPC(' ');

  if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
    17fe:	20 91 8a 04 	lds	r18, 0x048A
    1802:	30 91 8b 04 	lds	r19, 0x048B
    1806:	40 91 8c 04 	lds	r20, 0x048C
    180a:	50 91 8d 04 	lds	r21, 0x048D
    180e:	26 17       	cp	r18, r22
    1810:	37 07       	cpc	r19, r23
    1812:	48 07       	cpc	r20, r24
    1814:	59 07       	cpc	r21, r25
    1816:	18 f4       	brcc	.+6      	; 0x181e <getBootSectorData+0x1a6>
       freeClusterCountUpdated = 0;
    1818:	10 92 e7 07 	sts	0x07E7, r1
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <getBootSectorData+0x1ac>
  else
     freeClusterCountUpdated = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	80 93 e7 07 	sts	0x07E7, r24
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	01 c0       	rjmp	.+2      	; 0x182a <getBootSectorData+0x1b2>
    1828:	81 e0       	ldi	r24, 0x01	; 1
  return 0;
}
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	9f 90       	pop	r9
    183c:	8f 90       	pop	r8
    183e:	7f 90       	pop	r7
    1840:	6f 90       	pop	r6
    1842:	08 95       	ret

00001844 <InitSDCard>:
 *        to the computer
 * @ref   www.dharmanitech.com
 * @return Void
 */
void InitSDCard(bool bVerb)
{
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	18 2f       	mov	r17, r24
  unsigned char iInit=0;
  unsigned char option, error, data, FAT32_active;
  unsigned int i;
  cardType = 0;
    184c:	10 92 e2 06 	sts	0x06E2, r1
    1850:	c0 e0       	ldi	r28, 0x00	; 0
    1852:	d0 e0       	ldi	r29, 0x00	; 0

  for (i=0; i<10; i++)
  {
    error = SD_init();
    1854:	0e 94 81 06 	call	0xd02	; 0xd02 <SD_init>
    if(!error) break;
    1858:	88 23       	and	r24, r24
    185a:	21 f0       	breq	.+8      	; 0x1864 <InitSDCard+0x20>
  unsigned char iInit=0;
  unsigned char option, error, data, FAT32_active;
  unsigned int i;
  cardType = 0;

  for (i=0; i<10; i++)
    185c:	21 96       	adiw	r28, 0x01	; 1
    185e:	ca 30       	cpi	r28, 0x0A	; 10
    1860:	d1 05       	cpc	r29, r1
    1862:	c1 f7       	brne	.-16     	; 0x1854 <InitSDCard+0x10>
  {
    error = SD_init();
    if(!error) break;
  }

  if(bVerb)
    1864:	11 23       	and	r17, r17
    1866:	09 f4       	brne	.+2      	; 0x186a <InitSDCard+0x26>
    1868:	5f c0       	rjmp	.+190    	; 0x1928 <InitSDCard+0xe4>
  {
    if(error)
    186a:	88 23       	and	r24, r24
    186c:	71 f0       	breq	.+28     	; 0x188a <InitSDCard+0x46>
    {
      if(error == 1) USART_transmitStringToPCFromFlash(PSTR("SD card not detected.."));
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	29 f4       	brne	.+10     	; 0x187c <InitSDCard+0x38>
    1872:	83 e1       	ldi	r24, 0x13	; 19
    1874:	92 e0       	ldi	r25, 0x02	; 2
    1876:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <InitSDCard+0x44>
      if(error == 2) USART_transmitStringToPCFromFlash(PSTR("Card Initialization failed.."));
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	21 f4       	brne	.+8      	; 0x1888 <InitSDCard+0x44>
    1880:	86 ef       	ldi	r24, 0xF6	; 246
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    1888:	ff cf       	rjmp	.-2      	; 0x1888 <InitSDCard+0x44>
        while(1);  //wait here forever if error in SD init   
    }


    switch (cardType)
    188a:	80 91 e2 06 	lds	r24, 0x06E2
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	39 f0       	breq	.+14     	; 0x18a0 <InitSDCard+0x5c>
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	41 f0       	breq	.+16     	; 0x18a6 <InitSDCard+0x62>
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	49 f4       	brne	.+18     	; 0x18ac <InitSDCard+0x68>
    {
      case 1:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 1.x) Detected"));
    189a:	8c ec       	ldi	r24, 0xCC	; 204
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <InitSDCard+0x6c>
           break;
      case 2:USART_transmitStringToPCFromFlash(PSTR("High Capacity Card Detected"));
    18a0:	80 eb       	ldi	r24, 0xB0	; 176
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <InitSDCard+0x6c>
           break;
      case 3:USART_transmitStringToPCFromFlash(PSTR("Standard Capacity Card (Ver 2.x) Detected"));
    18a6:	86 e8       	ldi	r24, 0x86	; 134
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <InitSDCard+0x6c>
           break;
      default:USART_transmitStringToPCFromFlash(PSTR("Unknown SD Card Detected"));
    18ac:	8d e6       	ldi	r24, 0x6D	; 109
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    18b4:	80 ed       	ldi	r24, 0xD0	; 208
    18b6:	97 e0       	ldi	r25, 0x07	; 7
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <InitSDCard+0x74>
  

    _delay_ms(1);   //some delay

    FAT32_active = 1;
    error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    18bc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <getBootSectorData>
    if(error)   
    18c0:	88 23       	and	r24, r24
    18c2:	49 f0       	breq	.+18     	; 0x18d6 <InitSDCard+0x92>
    {
      TX_NEWLINE_PC;
    18c4:	8d e0       	ldi	r24, 0x0D	; 13
    18c6:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    18ca:	8a e0       	ldi	r24, 0x0A	; 10
    18cc:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      USART_transmitStringToPCFromFlash (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    18d0:	8c e5       	ldi	r24, 0x5C	; 92
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	08 c0       	rjmp	.+16     	; 0x18e6 <InitSDCard+0xa2>
      FAT32_active = 0;
    }else{
      TX_NEWLINE_PC;
    18d6:	8d e0       	ldi	r24, 0x0D	; 13
    18d8:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      USART_transmitStringToPCFromFlash (PSTR("FAT32 file system detected..."));
    18e2:	8e e3       	ldi	r24, 0x3E	; 62
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    }
    TX_NEWLINE_PC;  
    18ea:	8d e0       	ldi	r24, 0x0D	; 13
    18ec:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    18f0:	8a e0       	ldi	r24, 0x0A	; 10
    18f2:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    iInit=VS1053_Initialize();
    18f6:	0e 94 34 05 	call	0xa68	; 0xa68 <VS1053_Initialize>
    18fa:	18 2f       	mov	r17, r24
    if(iInit==0){
    18fc:	88 23       	and	r24, r24
    18fe:	29 f4       	brne	.+10     	; 0x190a <InitSDCard+0xc6>
      USART_transmitStringToPCFromFlash (PSTR("VS1053 MP3 chip sucessfully initialized"));
    1900:	86 e1       	ldi	r24, 0x16	; 22
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    1908:	08 c0       	rjmp	.+16     	; 0x191a <InitSDCard+0xd6>
      TX_NEWLINE_PC;  
    }else{
      USART_transmitStringToPCFromFlash (PSTR("Error initializing VS1053 - CODE "));
    190a:	84 ef       	ldi	r24, 0xF4	; 244
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      USART_transmitByteToPC(iInit+64);
    1912:	81 2f       	mov	r24, r17
    1914:	80 5c       	subi	r24, 0xC0	; 192
    1916:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      TX_NEWLINE_PC;
    191a:	8d e0       	ldi	r24, 0x0D	; 13
    191c:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1920:	8a e0       	ldi	r24, 0x0A	; 10
    1922:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1926:	0a c0       	rjmp	.+20     	; 0x193c <InitSDCard+0xf8>
    }
  }
  else
  {
    if(error)
    1928:	81 11       	cpse	r24, r1
    192a:	ff cf       	rjmp	.-2      	; 0x192a <InitSDCard+0xe6>
    192c:	80 ed       	ldi	r24, 0xD0	; 208
    192e:	97 e0       	ldi	r25, 0x07	; 7
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <InitSDCard+0xec>
        while(1);  //wait here forever if error in SD init   
    }
    _delay_ms(1);   //some delay

    FAT32_active = 1;
    error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1934:	0e 94 3c 0b 	call	0x1678	; 0x1678 <getBootSectorData>
    {
      FAT32_active = 0;
    }else{

    }
    iInit=VS1053_Initialize();
    1938:	0e 94 34 05 	call	0xa68	; 0xa68 <VS1053_Initialize>
  }
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	08 95       	ret

00001944 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    1944:	4f 92       	push	r4
    1946:	5f 92       	push	r5
    1948:	6f 92       	push	r6
    194a:	7f 92       	push	r7
    194c:	8f 92       	push	r8
    194e:	9f 92       	push	r9
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	5b 01       	movw	r10, r22
    1966:	6c 01       	movw	r12, r24
    1968:	84 2e       	mov	r8, r20
    196a:	28 01       	movw	r4, r16
    196c:	39 01       	movw	r6, r18
  unsigned long *FATEntryValue;
  unsigned long FATEntrySector;
  unsigned char retry = 0;

  //get sector number of the cluster entry in the FAT
  FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    196e:	80 91 db 06 	lds	r24, 0x06DB
    1972:	90 91 dc 06 	lds	r25, 0x06DC
    1976:	02 e0       	ldi	r16, 0x02	; 2
    1978:	aa 0c       	add	r10, r10
    197a:	bb 1c       	adc	r11, r11
    197c:	cc 1c       	adc	r12, r12
    197e:	dd 1c       	adc	r13, r13
    1980:	0a 95       	dec	r16
    1982:	d1 f7       	brne	.-12     	; 0x1978 <getSetNextCluster+0x34>
    1984:	20 91 88 04 	lds	r18, 0x0488
    1988:	30 91 89 04 	lds	r19, 0x0489
    198c:	7c 01       	movw	r14, r24
    198e:	00 e0       	ldi	r16, 0x00	; 0
    1990:	10 e0       	ldi	r17, 0x00	; 0
    1992:	80 91 d0 06 	lds	r24, 0x06D0
    1996:	90 91 d1 06 	lds	r25, 0x06D1
    199a:	a0 91 d2 06 	lds	r26, 0x06D2
    199e:	b0 91 d3 06 	lds	r27, 0x06D3
    19a2:	e8 0e       	add	r14, r24
    19a4:	f9 1e       	adc	r15, r25
    19a6:	0a 1f       	adc	r16, r26
    19a8:	1b 1f       	adc	r17, r27
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	c6 01       	movw	r24, r12
    19b0:	b5 01       	movw	r22, r10
    19b2:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    19b6:	e2 0e       	add	r14, r18
    19b8:	f3 1e       	adc	r15, r19
    19ba:	04 1f       	adc	r16, r20
    19bc:	15 1f       	adc	r17, r21

  //get the offset address in that sector number
  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    19be:	c0 91 88 04 	lds	r28, 0x0488
    19c2:	d0 91 89 04 	lds	r29, 0x0489
    19c6:	99 24       	eor	r9, r9

  //read the sector into a buffer
  while(retry <10)
  { if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    19c8:	c8 01       	movw	r24, r16
    19ca:	b7 01       	movw	r22, r14
    19cc:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    19d0:	88 23       	and	r24, r24
    19d2:	21 f0       	breq	.+8      	; 0x19dc <getSetNextCluster+0x98>
    19d4:	93 94       	inc	r9

  //get the offset address in that sector number
  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

  //read the sector into a buffer
  while(retry <10)
    19d6:	8a e0       	ldi	r24, 0x0A	; 10
    19d8:	98 16       	cp	r9, r24
    19da:	b1 f7       	brne	.-20     	; 0x19c8 <getSetNextCluster+0x84>
  { if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

  //get the cluster address from the buffer
  FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    19dc:	9e 01       	movw	r18, r28
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	c6 01       	movw	r24, r12
    19e4:	b5 01       	movw	r22, r10
    19e6:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    19ea:	fb 01       	movw	r30, r22
    19ec:	e7 54       	subi	r30, 0x47	; 71
    19ee:	fb 4f       	sbci	r31, 0xFB	; 251

  if(get_set == GET)
    19f0:	88 20       	and	r8, r8
    19f2:	31 f4       	brne	.+12     	; 0x1a00 <getSetNextCluster+0xbc>
    return ((*FATEntryValue) & 0x0fffffff);
    19f4:	20 81       	ld	r18, Z
    19f6:	31 81       	ldd	r19, Z+1	; 0x01
    19f8:	42 81       	ldd	r20, Z+2	; 0x02
    19fa:	53 81       	ldd	r21, Z+3	; 0x03
    19fc:	5f 70       	andi	r21, 0x0F	; 15
    19fe:	0c c0       	rjmp	.+24     	; 0x1a18 <getSetNextCluster+0xd4>


  *FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    1a00:	40 82       	st	Z, r4
    1a02:	51 82       	std	Z+1, r5	; 0x01
    1a04:	62 82       	std	Z+2, r6	; 0x02
    1a06:	73 82       	std	Z+3, r7	; 0x03

  SD_writeSingleBlock(FATEntrySector);
    1a08:	c8 01       	movw	r24, r16
    1a0a:	b7 01       	movw	r22, r14
    1a0c:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0

  return (0);
}
    1a18:	b9 01       	movw	r22, r18
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	cf 90       	pop	r12
    1a2c:	bf 90       	pop	r11
    1a2e:	af 90       	pop	r10
    1a30:	9f 90       	pop	r9
    1a32:	8f 90       	pop	r8
    1a34:	7f 90       	pop	r7
    1a36:	6f 90       	pop	r6
    1a38:	5f 90       	pop	r5
    1a3a:	4f 90       	pop	r4
    1a3c:	08 95       	ret

00001a3e <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//      Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1a3e:	2f 92       	push	r2
    1a40:	3f 92       	push	r3
    1a42:	4f 92       	push	r4
    1a44:	5f 92       	push	r5
    1a46:	6f 92       	push	r6
    1a48:	7f 92       	push	r7
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	2a 97       	sbiw	r28, 0x0a	; 10
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	7f 83       	std	Y+7, r23	; 0x07
    1a76:	6e 83       	std	Y+6, r22	; 0x06
  unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
  struct dir_Structure *dir;
  unsigned int i;
  unsigned char j;

  cluster = rootCluster; //root cluster
    1a78:	a0 90 ae 04 	lds	r10, 0x04AE
    1a7c:	b0 90 af 04 	lds	r11, 0x04AF
    1a80:	c0 90 b0 04 	lds	r12, 0x04B0
    1a84:	d0 90 b1 04 	lds	r13, 0x04B1
            USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
        return 0;   
      }
      if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
          {
            if((flag == GET_FILE) || (flag == DELETE))
    1a88:	81 50       	subi	r24, 0x01	; 1
    1a8a:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1a8c:	20 91 ba 06 	lds	r18, 0x06BA
    1a90:	30 91 bb 06 	lds	r19, 0x06BB
    1a94:	e0 90 80 04 	lds	r14, 0x0480
    1a98:	f0 90 81 04 	lds	r15, 0x0481
    1a9c:	00 91 82 04 	lds	r16, 0x0482
    1aa0:	10 91 83 04 	lds	r17, 0x0483
    1aa4:	c6 01       	movw	r24, r12
    1aa6:	b5 01       	movw	r22, r10
    1aa8:	62 50       	subi	r22, 0x02	; 2
    1aaa:	70 40       	sbci	r23, 0x00	; 0
    1aac:	80 40       	sbci	r24, 0x00	; 0
    1aae:	90 40       	sbci	r25, 0x00	; 0
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    1ab8:	1b 01       	movw	r2, r22
    1aba:	2c 01       	movw	r4, r24
    1abc:	2e 0c       	add	r2, r14
    1abe:	3f 1c       	adc	r3, r15
    1ac0:	40 1e       	adc	r4, r16
    1ac2:	51 1e       	adc	r5, r17
    1ac4:	66 24       	eor	r6, r6
    1ac6:	77 24       	eor	r7, r7
    1ac8:	43 01       	movw	r8, r6
    1aca:	60 c1       	rjmp	.+704    	; 0x1d8c <findFiles+0x34e>

  while(1)
  {
     firstSector = getFirstSector (cluster);

     for(sector = 0; sector < sectorPerCluster; sector++)
    1acc:	d4 01       	movw	r26, r8
    1ace:	c3 01       	movw	r24, r6
    1ad0:	82 0d       	add	r24, r2
    1ad2:	93 1d       	adc	r25, r3
    1ad4:	a4 1d       	adc	r26, r4
    1ad6:	b5 1d       	adc	r27, r5
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	ab 83       	std	Y+3, r26	; 0x03
    1ade:	bc 83       	std	Y+4, r27	; 0x04
     {
       SD_readSingleBlock (firstSector + sector);
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	e4 2e       	mov	r14, r20
    1aec:	f1 2c       	mov	r15, r1
    1aee:	3e c1       	rjmp	.+636    	; 0x1d6c <findFiles+0x32e>
  

       for(i=0; i<bytesPerSector; i+=32)
    1af0:	8a 01       	movw	r16, r20
    1af2:	07 54       	subi	r16, 0x47	; 71
    1af4:	1b 4f       	sbci	r17, 0xFB	; 251
       {
        dir = (struct dir_Structure *) &buffer[i];

          if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1af6:	f7 01       	movw	r30, r14
    1af8:	e7 54       	subi	r30, 0x47	; 71
    1afa:	fb 4f       	sbci	r31, 0xFB	; 251
    1afc:	b0 97       	sbiw	r30, 0x20	; 32
    1afe:	80 81       	ld	r24, Z
    1b00:	b0 96       	adiw	r30, 0x20	; 32
    1b02:	88 23       	and	r24, r24
    1b04:	41 f4       	brne	.+16     	; 0x1b16 <findFiles+0xd8>
      {
        if((flag == GET_FILE) || (flag == DELETE))
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	91 50       	subi	r25, 0x01	; 1
    1b0a:	92 30       	cpi	r25, 0x02	; 2
    1b0c:	08 f0       	brcs	.+2      	; 0x1b10 <findFiles+0xd2>
    1b0e:	68 c1       	rjmp	.+720    	; 0x1de0 <findFiles+0x3a2>
            USART_transmitStringToPCFromFlash(PSTR("File does not exist!"));
    1b10:	89 ef       	ldi	r24, 0xF9	; 249
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	63 c1       	rjmp	.+710    	; 0x1ddc <findFiles+0x39e>
        return 0;   
      }
      if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1b16:	85 3e       	cpi	r24, 0xE5	; 229
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <findFiles+0xde>
    1b1a:	24 c1       	rjmp	.+584    	; 0x1d64 <findFiles+0x326>
    1b1c:	75 97       	sbiw	r30, 0x15	; 21
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 30       	cpi	r24, 0x0F	; 15
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <findFiles+0xe8>
    1b24:	1f c1       	rjmp	.+574    	; 0x1d64 <findFiles+0x326>
          {
            if((flag == GET_FILE) || (flag == DELETE))
    1b26:	a8 85       	ldd	r26, Y+8	; 0x08
    1b28:	a2 30       	cpi	r26, 0x02	; 2
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <findFiles+0xf0>
    1b2c:	d2 c0       	rjmp	.+420    	; 0x1cd2 <findFiles+0x294>
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
            {
              for(j=0; j<11; j++)
              if(dir->name[j] != fileName[j]) break;
    1b32:	c8 01       	movw	r24, r16
    1b34:	82 0f       	add	r24, r18
    1b36:	93 1f       	adc	r25, r19
    1b38:	ae 81       	ldd	r26, Y+6	; 0x06
    1b3a:	bf 81       	ldd	r27, Y+7	; 0x07
    1b3c:	a2 0f       	add	r26, r18
    1b3e:	b3 1f       	adc	r27, r19
    1b40:	fc 01       	movw	r30, r24
    1b42:	90 81       	ld	r25, Z
    1b44:	8c 91       	ld	r24, X
    1b46:	98 17       	cp	r25, r24
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <findFiles+0x10e>
    1b4a:	0c c1       	rjmp	.+536    	; 0x1d64 <findFiles+0x326>
    1b4c:	82 2f       	mov	r24, r18
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	2f 5f       	subi	r18, 0xFF	; 255
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
      }
      if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
          {
            if((flag == GET_FILE) || (flag == DELETE))
            {
              for(j=0; j<11; j++)
    1b54:	2b 30       	cpi	r18, 0x0B	; 11
    1b56:	31 05       	cpc	r19, r1
    1b58:	61 f7       	brne	.-40     	; 0x1b32 <findFiles+0xf4>
              if(dir->name[j] != fileName[j]) break;
              if(j == 11)
    1b5a:	8b 30       	cpi	r24, 0x0B	; 11
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <findFiles+0x122>
    1b5e:	02 c1       	rjmp	.+516    	; 0x1d64 <findFiles+0x326>
        {
          if(flag == GET_FILE)
    1b60:	fd 81       	ldd	r31, Y+5	; 0x05
    1b62:	f1 30       	cpi	r31, 0x01	; 1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <findFiles+0x12a>
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <findFiles+0x1a8>
                {
            appendFileSector = firstSector + sector;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b70:	80 93 e9 07 	sts	0x07E9, r24
    1b74:	90 93 ea 07 	sts	0x07EA, r25
    1b78:	a0 93 eb 07 	sts	0x07EB, r26
    1b7c:	b0 93 ec 07 	sts	0x07EC, r27
          appendFileLocation = i;
    1b80:	ca 01       	movw	r24, r20
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	80 93 6e 04 	sts	0x046E, r24
    1b8a:	90 93 6f 04 	sts	0x046F, r25
    1b8e:	a0 93 70 04 	sts	0x0470, r26
    1b92:	b0 93 71 04 	sts	0x0471, r27
          appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1b96:	d8 01       	movw	r26, r16
    1b98:	54 96       	adiw	r26, 0x14	; 20
    1b9a:	8d 91       	ld	r24, X+
    1b9c:	9c 91       	ld	r25, X
    1b9e:	55 97       	sbiw	r26, 0x15	; 21
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	99 27       	eor	r25, r25
    1ba8:	88 27       	eor	r24, r24
    1baa:	f8 01       	movw	r30, r16
    1bac:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bae:	33 8d       	ldd	r19, Z+27	; 0x1b
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	82 2b       	or	r24, r18
    1bb6:	93 2b       	or	r25, r19
    1bb8:	a4 2b       	or	r26, r20
    1bba:	b5 2b       	or	r27, r21
    1bbc:	80 93 dd 06 	sts	0x06DD, r24
    1bc0:	90 93 de 06 	sts	0x06DE, r25
    1bc4:	a0 93 df 06 	sts	0x06DF, r26
    1bc8:	b0 93 e0 06 	sts	0x06E0, r27
          fileSize = dir->fileSize;
    1bcc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bce:	95 8d       	ldd	r25, Z+29	; 0x1d
    1bd0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1bd2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1bd4:	80 93 84 04 	sts	0x0484, r24
    1bd8:	90 93 85 04 	sts	0x0485, r25
    1bdc:	a0 93 86 04 	sts	0x0486, r26
    1be0:	b0 93 87 04 	sts	0x0487, r27
    1be4:	ff c0       	rjmp	.+510    	; 0x1de4 <findFiles+0x3a6>
            return (dir);
          }  
          else    //when flag = DELETE
          {
             TX_NEWLINE_PC;
    1be6:	8d e0       	ldi	r24, 0x0D	; 13
    1be8:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
           USART_transmitStringToPCFromFlash(PSTR("Deleting.."));
    1bf2:	8e ee       	ldi	r24, 0xEE	; 238
    1bf4:	92 e0       	ldi	r25, 0x02	; 2
    1bf6:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
           TX_NEWLINE_PC;
    1bfa:	8d e0       	ldi	r24, 0x0D	; 13
    1bfc:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1c00:	8a e0       	ldi	r24, 0x0A	; 10
    1c02:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
           TX_NEWLINE_PC;
    1c06:	8d e0       	ldi	r24, 0x0D	; 13
    1c08:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1c0c:	8a e0       	ldi	r24, 0x0A	; 10
    1c0e:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
           firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1c12:	d8 01       	movw	r26, r16
    1c14:	54 96       	adiw	r26, 0x14	; 20
    1c16:	8d 91       	ld	r24, X+
    1c18:	9c 91       	ld	r25, X
    1c1a:	55 97       	sbiw	r26, 0x15	; 21
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	5c 01       	movw	r10, r24
    1c22:	99 24       	eor	r9, r9
    1c24:	88 24       	eor	r8, r8
    1c26:	f8 01       	movw	r30, r16
    1c28:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	88 2a       	or	r8, r24
    1c32:	99 2a       	or	r9, r25
    1c34:	aa 2a       	or	r10, r26
    1c36:	bb 2a       	or	r11, r27
                
           //mark file as 'deleted' in FAT table
           dir->name[0] = DELETED;    
    1c38:	85 ee       	ldi	r24, 0xE5	; 229
    1c3a:	80 83       	st	Z, r24
           SD_writeSingleBlock (firstSector+sector);
    1c3c:	69 81       	ldd	r22, Y+1	; 0x01
    1c3e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
                
           freeMemoryUpdate (ADD, dir->fileSize);
    1c48:	d8 01       	movw	r26, r16
    1c4a:	5c 96       	adiw	r26, 0x1c	; 28
    1c4c:	4d 91       	ld	r20, X+
    1c4e:	5d 91       	ld	r21, X+
    1c50:	6d 91       	ld	r22, X+
    1c52:	7c 91       	ld	r23, X
    1c54:	5f 97       	sbiw	r26, 0x1f	; 31
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	0e 94 c5 09 	call	0x138a	; 0x138a <freeMemoryUpdate>

           //update next free cluster entry in FSinfo sector
           cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
           if(firstCluster < cluster)
    1c6c:	86 16       	cp	r8, r22
    1c6e:	97 06       	cpc	r9, r23
    1c70:	a8 06       	cpc	r10, r24
    1c72:	b9 06       	cpc	r11, r25
    1c74:	30 f4       	brcc	.+12     	; 0x1c82 <findFiles+0x244>
               getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	a5 01       	movw	r20, r10
    1c7c:	94 01       	movw	r18, r8
    1c7e:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>

           //mark all the clusters allocated to the file as 'free'
             while(1)  
             {
                nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1c82:	c5 01       	movw	r24, r10
    1c84:	b4 01       	movw	r22, r8
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    1c94:	f6 2e       	mov	r15, r22
    1c96:	e7 2e       	mov	r14, r23
    1c98:	d8 2e       	mov	r13, r24
    1c9a:	c9 2e       	mov	r12, r25
            getSetNextCluster (firstCluster, SET, 0);
    1c9c:	c5 01       	movw	r24, r10
    1c9e:	b4 01       	movw	r22, r8
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	00 e0       	ldi	r16, 0x00	; 0
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    1cae:	8f 2d       	mov	r24, r15
    1cb0:	9e 2d       	mov	r25, r14
    1cb2:	ad 2d       	mov	r26, r13
    1cb4:	bc 2d       	mov	r27, r12
    1cb6:	4c 01       	movw	r8, r24
    1cb8:	5d 01       	movw	r10, r26
            if(nextCluster > 0x0ffffff6) 
    1cba:	b7 ef       	ldi	r27, 0xF7	; 247
    1cbc:	8b 16       	cp	r8, r27
    1cbe:	bf ef       	ldi	r27, 0xFF	; 255
    1cc0:	9b 06       	cpc	r9, r27
    1cc2:	bf ef       	ldi	r27, 0xFF	; 255
    1cc4:	ab 06       	cpc	r10, r27
    1cc6:	bf e0       	ldi	r27, 0x0F	; 15
    1cc8:	bb 06       	cpc	r11, r27
    1cca:	d8 f2       	brcs	.-74     	; 0x1c82 <findFiles+0x244>
               {USART_transmitStringToPCFromFlash(PSTR("File deleted!"));return 0;}
    1ccc:	80 ee       	ldi	r24, 0xE0	; 224
    1cce:	92 e0       	ldi	r25, 0x02	; 2
    1cd0:	85 c0       	rjmp	.+266    	; 0x1ddc <findFiles+0x39e>
          }
              }
            }
            else  //when flag = GET_LIST
        {
           TX_NEWLINE_PC;
    1cd2:	8d e0       	ldi	r24, 0x0D	; 13
    1cd4:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1cd8:	8a e0       	ldi	r24, 0x0A	; 10
    1cda:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1cde:	1a 86       	std	Y+10, r1	; 0x0a
    1ce0:	19 86       	std	Y+9, r1	; 0x09
    1ce2:	0b c0       	rjmp	.+22     	; 0x1cfa <findFiles+0x2bc>
         for(j=0; j<11; j++)
           {
           if(j == 8) USART_transmitByteToPC(' ');
    1ce4:	e9 85       	ldd	r30, Y+9	; 0x09
    1ce6:	e7 30       	cpi	r30, 0x07	; 7
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <findFiles+0x2b2>
    1cea:	80 e2       	ldi	r24, 0x20	; 32
    1cec:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	9a 87       	std	Y+10, r25	; 0x0a
    1cf8:	89 87       	std	Y+9, r24	; 0x09
           USART_transmitByteToPC (dir->name[j]);
    1cfa:	e9 85       	ldd	r30, Y+9	; 0x09
    1cfc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cfe:	e0 0f       	add	r30, r16
    1d00:	f1 1f       	adc	r31, r17
    1d02:	80 81       	ld	r24, Z
    1d04:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
              }
            }
            else  //when flag = GET_LIST
        {
           TX_NEWLINE_PC;
         for(j=0; j<11; j++)
    1d08:	a9 85       	ldd	r26, Y+9	; 0x09
    1d0a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1d0c:	1a 97       	sbiw	r26, 0x0a	; 10
    1d0e:	51 f7       	brne	.-44     	; 0x1ce4 <findFiles+0x2a6>
           {
           if(j == 8) USART_transmitByteToPC(' ');
           USART_transmitByteToPC (dir->name[j]);
         }
           USART_transmitStringToPCFromFlash (PSTR("   "));
    1d10:	8c ed       	ldi	r24, 0xDC	; 220
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
           if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1d18:	87 01       	movw	r16, r14
    1d1a:	07 54       	subi	r16, 0x47	; 71
    1d1c:	1b 4f       	sbci	r17, 0xFB	; 251
    1d1e:	05 51       	subi	r16, 0x15	; 21
    1d20:	10 40       	sbci	r17, 0x00	; 0
    1d22:	f8 01       	movw	r30, r16
    1d24:	80 81       	ld	r24, Z
    1d26:	0b 5e       	subi	r16, 0xEB	; 235
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	80 31       	cpi	r24, 0x10	; 16
    1d2c:	b9 f0       	breq	.+46     	; 0x1d5c <findFiles+0x31e>
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	19 f4       	brne	.+6      	; 0x1d38 <findFiles+0x2fa>
             USART_transmitStringToPCFromFlash (PSTR("FILE" ));
               USART_transmitStringToPCFromFlash (PSTR("   "));
             displayMemory (LOW, dir->fileSize);
         }
         else
           USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1d32:	8a ec       	ldi	r24, 0xCA	; 202
    1d34:	92 e0       	ldi	r25, 0x02	; 2
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <findFiles+0x322>
           USART_transmitByteToPC (dir->name[j]);
         }
           USART_transmitStringToPCFromFlash (PSTR("   "));
           if((dir->attrib != 0x10) && (dir->attrib != 0x08))
         {
             USART_transmitStringToPCFromFlash (PSTR("FILE" ));
    1d38:	87 ed       	ldi	r24, 0xD7	; 215
    1d3a:	92 e0       	ldi	r25, 0x02	; 2
    1d3c:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
               USART_transmitStringToPCFromFlash (PSTR("   "));
    1d40:	83 ed       	ldi	r24, 0xD3	; 211
    1d42:	92 e0       	ldi	r25, 0x02	; 2
    1d44:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
             displayMemory (LOW, dir->fileSize);
    1d48:	f8 01       	movw	r30, r16
    1d4a:	34 97       	sbiw	r30, 0x04	; 4
    1d4c:	40 81       	ld	r20, Z
    1d4e:	51 81       	ldd	r21, Z+1	; 0x01
    1d50:	62 81       	ldd	r22, Z+2	; 0x02
    1d52:	73 81       	ldd	r23, Z+3	; 0x03
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	0e 94 99 07 	call	0xf32	; 0xf32 <displayMemory>
    1d5a:	04 c0       	rjmp	.+8      	; 0x1d64 <findFiles+0x326>
         }
         else
           USART_transmitStringToPCFromFlash ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1d5c:	8f ec       	ldi	r24, 0xCF	; 207
    1d5e:	92 e0       	ldi	r25, 0x02	; 2
    1d60:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	e8 0e       	add	r14, r24
    1d6a:	f9 1e       	adc	r15, r25
    1d6c:	a7 01       	movw	r20, r14
    1d6e:	40 52       	subi	r20, 0x20	; 32
    1d70:	50 40       	sbci	r21, 0x00	; 0
     for(sector = 0; sector < sectorPerCluster; sector++)
     {
       SD_readSingleBlock (firstSector + sector);
  

       for(i=0; i<bytesPerSector; i+=32)
    1d72:	80 91 88 04 	lds	r24, 0x0488
    1d76:	90 91 89 04 	lds	r25, 0x0489
    1d7a:	48 17       	cp	r20, r24
    1d7c:	59 07       	cpc	r21, r25
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <findFiles+0x344>
    1d80:	b7 ce       	rjmp	.-658    	; 0x1af0 <findFiles+0xb2>

  while(1)
  {
     firstSector = getFirstSector (cluster);

     for(sector = 0; sector < sectorPerCluster; sector++)
    1d82:	08 94       	sec
    1d84:	61 1c       	adc	r6, r1
    1d86:	71 1c       	adc	r7, r1
    1d88:	81 1c       	adc	r8, r1
    1d8a:	91 1c       	adc	r9, r1
    1d8c:	80 91 ba 06 	lds	r24, 0x06BA
    1d90:	90 91 bb 06 	lds	r25, 0x06BB
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	68 16       	cp	r6, r24
    1d9a:	79 06       	cpc	r7, r25
    1d9c:	8a 06       	cpc	r8, r26
    1d9e:	9b 06       	cpc	r9, r27
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <findFiles+0x366>
    1da2:	94 ce       	rjmp	.-728    	; 0x1acc <findFiles+0x8e>
        }
         }
       }
     }

     cluster = (getSetNextCluster (cluster, GET, 0));
    1da4:	c6 01       	movw	r24, r12
    1da6:	b5 01       	movw	r22, r10
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	00 e0       	ldi	r16, 0x00	; 0
    1dac:	10 e0       	ldi	r17, 0x00	; 0
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    1db6:	5b 01       	movw	r10, r22
    1db8:	6c 01       	movw	r12, r24

     if(cluster > 0x0ffffff6)
    1dba:	97 ef       	ldi	r25, 0xF7	; 247
    1dbc:	a9 16       	cp	r10, r25
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	b9 06       	cpc	r11, r25
    1dc2:	9f ef       	ldi	r25, 0xFF	; 255
    1dc4:	c9 06       	cpc	r12, r25
    1dc6:	9f e0       	ldi	r25, 0x0F	; 15
    1dc8:	d9 06       	cpc	r13, r25
    1dca:	50 f4       	brcc	.+20     	; 0x1de0 <findFiles+0x3a2>
        return 0;
     if(cluster == 0) 
    1dcc:	a1 14       	cp	r10, r1
    1dce:	b1 04       	cpc	r11, r1
    1dd0:	c1 04       	cpc	r12, r1
    1dd2:	d1 04       	cpc	r13, r1
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <findFiles+0x39a>
    1dd6:	5a ce       	rjmp	.-844    	; 0x1a8c <findFiles+0x4e>
     {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster"));  return 0;}
    1dd8:	81 eb       	ldi	r24, 0xB1	; 177
    1dda:	92 e0       	ldi	r25, 0x02	; 2
    1ddc:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	10 e0       	ldi	r17, 0x00	; 0
   }
  return 0;
}
    1de4:	c8 01       	movw	r24, r16
    1de6:	2a 96       	adiw	r28, 0x0a	; 10
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	bf 90       	pop	r11
    1e04:	af 90       	pop	r10
    1e06:	9f 90       	pop	r9
    1e08:	8f 90       	pop	r8
    1e0a:	7f 90       	pop	r7
    1e0c:	6f 90       	pop	r6
    1e0e:	5f 90       	pop	r5
    1e10:	4f 90       	pop	r4
    1e12:	3f 90       	pop	r3
    1e14:	2f 90       	pop	r2
    1e16:	08 95       	ret

00001e18 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1e1e:	0e 94 00 08 	call	0x1000	; 0x1000 <convertFileName>
  if(error) return;
    1e22:	88 23       	and	r24, r24
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	be 01       	movw	r22, r28
    1e2a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <findFiles>
}
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <readAndRetreiveFileContents>:
 * @param fileName    char *   That contains the file name of what you want to read
          dataString  char *   Where the data is put, can store 100 bytes
 * @return unsigned char - number where zero means success
 */
unsigned char readAndRetreiveFileContents (unsigned char *fileName, unsigned char *dataString)
{
    1e34:	2f 92       	push	r2
    1e36:	3f 92       	push	r3
    1e38:	4f 92       	push	r4
    1e3a:	5f 92       	push	r5
    1e3c:	6f 92       	push	r6
    1e3e:	7f 92       	push	r7
    1e40:	8f 92       	push	r8
    1e42:	9f 92       	push	r9
    1e44:	af 92       	push	r10
    1e46:	bf 92       	push	r11
    1e48:	cf 92       	push	r12
    1e4a:	df 92       	push	r13
    1e4c:	ef 92       	push	r14
    1e4e:	ff 92       	push	r15
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	28 97       	sbiw	r28, 0x08	; 8
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	8c 01       	movw	r16, r24
    1e6a:	7e 83       	std	Y+6, r23	; 0x06
    1e6c:	6d 83       	std	Y+5, r22	; 0x05
  unsigned int k;//,iCntForSingleAudioWrite;
  unsigned char j, error;
  unsigned int iReadByteCnt;
  bool bEndOfFile=false;

  PRINTF("In readAndRetrieve, fileName:");
    1e6e:	8e e9       	ldi	r24, 0x9E	; 158
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  PRINTF(fileName);
    1e76:	c8 01       	movw	r24, r16
    1e78:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    1e7c:	8d e0       	ldi	r24, 0x0D	; 13
    1e7e:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    1e82:	8a e0       	ldi	r24, 0x0A	; 10
    1e84:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>

  error = convertFileName (fileName); //convert fileName into FAT format
    1e88:	c8 01       	movw	r24, r16
    1e8a:	0e 94 00 08 	call	0x1000	; 0x1000 <convertFileName>
  if(error) return 1;
    1e8e:	88 23       	and	r24, r24
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <readAndRetreiveFileContents+0x62>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	a8 c0       	rjmp	.+336    	; 0x1fe6 <readAndRetreiveFileContents+0x1b2>

  dir = findFiles (GET_FILE, fileName); //get the file location
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	b8 01       	movw	r22, r16
    1e9a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <findFiles>
    1e9e:	9c 01       	movw	r18, r24
  if(dir == 0) 
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <readAndRetreiveFileContents+0x74>
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	9f c0       	rjmp	.+318    	; 0x1fe6 <readAndRetreiveFileContents+0x1b2>
    return (2);

//  if(flag == VERIFY) return (1);  //specified file name is already existing

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	54 96       	adiw	r26, 0x14	; 20
    1eac:	8d 91       	ld	r24, X+
    1eae:	9c 91       	ld	r25, X
    1eb0:	55 97       	sbiw	r26, 0x15	; 21
    1eb2:	a0 e0       	ldi	r26, 0x00	; 0
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	6c 01       	movw	r12, r24
    1eb8:	bb 24       	eor	r11, r11
    1eba:	aa 24       	eor	r10, r10
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ec0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ec2:	a0 e0       	ldi	r26, 0x00	; 0
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	a8 2a       	or	r10, r24
    1ec8:	b9 2a       	or	r11, r25
    1eca:	ca 2a       	or	r12, r26
    1ecc:	db 2a       	or	r13, r27

  fileSize = dir->fileSize;
    1ece:	d9 01       	movw	r26, r18
    1ed0:	5c 96       	adiw	r26, 0x1c	; 28
    1ed2:	2d 90       	ld	r2, X+
    1ed4:	3d 90       	ld	r3, X+
    1ed6:	4d 90       	ld	r4, X+
    1ed8:	5c 90       	ld	r5, X
    1eda:	5f 97       	sbiw	r26, 0x1f	; 31
    1edc:	29 82       	std	Y+1, r2	; 0x01
    1ede:	3a 82       	std	Y+2, r3	; 0x02
    1ee0:	4b 82       	std	Y+3, r4	; 0x03
    1ee2:	5c 82       	std	Y+4, r5	; 0x04
    1ee4:	22 24       	eor	r2, r2
    1ee6:	33 24       	eor	r3, r3
    1ee8:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1eea:	20 91 ba 06 	lds	r18, 0x06BA
    1eee:	30 91 bb 06 	lds	r19, 0x06BB
    1ef2:	e0 90 80 04 	lds	r14, 0x0480
    1ef6:	f0 90 81 04 	lds	r15, 0x0481
    1efa:	00 91 82 04 	lds	r16, 0x0482
    1efe:	10 91 83 04 	lds	r17, 0x0483
    1f02:	c6 01       	movw	r24, r12
    1f04:	b5 01       	movw	r22, r10
    1f06:	62 50       	subi	r22, 0x02	; 2
    1f08:	70 40       	sbci	r23, 0x00	; 0
    1f0a:	80 40       	sbci	r24, 0x00	; 0
    1f0c:	90 40       	sbci	r25, 0x00	; 0
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    1f16:	3b 01       	movw	r6, r22
    1f18:	4c 01       	movw	r8, r24
    1f1a:	6e 0c       	add	r6, r14
    1f1c:	7f 1c       	adc	r7, r15
    1f1e:	80 1e       	adc	r8, r16
    1f20:	91 1e       	adc	r9, r17
    1f22:	10 e0       	ldi	r17, 0x00	; 0
    1f24:	40 c0       	rjmp	.+128    	; 0x1fa6 <readAndRetreiveFileContents+0x172>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    1f26:	c4 01       	movw	r24, r8
    1f28:	b3 01       	movw	r22, r6
    1f2a:	61 0f       	add	r22, r17
    1f2c:	71 1d       	adc	r23, r1
    1f2e:	81 1d       	adc	r24, r1
    1f30:	91 1d       	adc	r25, r1
    1f32:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    1f36:	a2 01       	movw	r20, r4
    1f38:	91 01       	movw	r18, r2
    1f3a:	60 e0       	ldi	r22, 0x00	; 0


      for(k=0; k<512; k++)
    1f3c:	d2 01       	movw	r26, r4
    1f3e:	c1 01       	movw	r24, r2
    1f40:	80 50       	subi	r24, 0x00	; 0
    1f42:	9e 4f       	sbci	r25, 0xFE	; 254
    1f44:	af 4f       	sbci	r26, 0xFF	; 255
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    1f48:	29 80       	ldd	r2, Y+1	; 0x01
    1f4a:	3a 80       	ldd	r3, Y+2	; 0x02
    1f4c:	4b 80       	ldd	r4, Y+3	; 0x03
    1f4e:	5c 80       	ldd	r5, Y+4	; 0x04
    1f50:	22 15       	cp	r18, r2
    1f52:	33 05       	cpc	r19, r3
    1f54:	44 05       	cpc	r20, r4
    1f56:	55 05       	cpc	r21, r5
    1f58:	08 f0       	brcs	.+2      	; 0x1f5c <readAndRetreiveFileContents+0x128>
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	4f 4f       	sbci	r20, 0xFF	; 255
    1f62:	5f 4f       	sbci	r21, 0xFF	; 255
    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);


      for(k=0; k<512; k++)
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	4a 07       	cpc	r20, r26
    1f6a:	5b 07       	cpc	r21, r27
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <readAndRetreiveFileContents+0x114>
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <readAndRetreiveFileContents+0x15a>
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
        
      }
      while(iReadByteCnt<k)
      {
        *dataString++=buffer[iReadByteCnt];
    1f70:	ef 81       	ldd	r30, Y+7	; 0x07
    1f72:	f8 85       	ldd	r31, Y+8	; 0x08
    1f74:	e7 54       	subi	r30, 0x47	; 71
    1f76:	fb 4f       	sbci	r31, 0xFB	; 251
    1f78:	80 81       	ld	r24, Z
    1f7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1f7c:	be 81       	ldd	r27, Y+6	; 0x06
    1f7e:	8d 93       	st	X+, r24
    1f80:	be 83       	std	Y+6, r27	; 0x06
    1f82:	ad 83       	std	Y+5, r26	; 0x05
        if(iReadByteCnt++==k)return 0;  
    1f84:	ef 81       	ldd	r30, Y+7	; 0x07
    1f86:	f8 85       	ldd	r31, Y+8	; 0x08
    1f88:	31 96       	adiw	r30, 0x01	; 1
    1f8a:	f8 87       	std	Y+8, r31	; 0x08
    1f8c:	ef 83       	std	Y+7, r30	; 0x07
      for(k=0; k<512; k++)
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
        
      }
      while(iReadByteCnt<k)
    1f8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f90:	98 85       	ldd	r25, Y+8	; 0x08
    1f92:	80 50       	subi	r24, 0x00	; 0
    1f94:	92 40       	sbci	r25, 0x02	; 2
    1f96:	60 f3       	brcs	.-40     	; 0x1f70 <readAndRetreiveFileContents+0x13c>
      {
        *dataString++=buffer[iReadByteCnt];
        if(iReadByteCnt++==k)return 0;  
      }
      if(bEndOfFile)
    1f98:	66 23       	and	r22, r22
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <readAndRetreiveFileContents+0x16c>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	23 c0       	rjmp	.+70     	; 0x1fe6 <readAndRetreiveFileContents+0x1b2>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    1fa0:	1f 5f       	subi	r17, 0xFF	; 255
    1fa2:	19 01       	movw	r2, r18
    1fa4:	2a 01       	movw	r4, r20
    1fa6:	20 91 ba 06 	lds	r18, 0x06BA
    1faa:	30 91 bb 06 	lds	r19, 0x06BB
    1fae:	81 2f       	mov	r24, r17
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	82 17       	cp	r24, r18
    1fb4:	93 07       	cpc	r25, r19
    1fb6:	08 f4       	brcc	.+2      	; 0x1fba <readAndRetreiveFileContents+0x186>
    1fb8:	b6 cf       	rjmp	.-148    	; 0x1f26 <readAndRetreiveFileContents+0xf2>
      if(bEndOfFile)
      {
        return 0;
      }
    }
    cluster = getSetNextCluster (cluster, GET, 0);
    1fba:	c6 01       	movw	r24, r12
    1fbc:	b5 01       	movw	r22, r10
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	00 e0       	ldi	r16, 0x00	; 0
    1fc2:	10 e0       	ldi	r17, 0x00	; 0
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    1fcc:	5b 01       	movw	r10, r22
    1fce:	6c 01       	movw	r12, r24
    if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 3;}
    1fd0:	61 15       	cp	r22, r1
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	81 05       	cpc	r24, r1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <readAndRetreiveFileContents+0x1a8>
    1fda:	87 cf       	rjmp	.-242    	; 0x1eea <readAndRetreiveFileContents+0xb6>
    1fdc:	8f e7       	ldi	r24, 0x7F	; 127
    1fde:	92 e0       	ldi	r25, 0x02	; 2
    1fe0:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
  }
  return 4;
}
    1fe6:	28 96       	adiw	r28, 0x08	; 8
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	bf 90       	pop	r11
    2004:	af 90       	pop	r10
    2006:	9f 90       	pop	r9
    2008:	8f 90       	pop	r8
    200a:	7f 90       	pop	r7
    200c:	6f 90       	pop	r6
    200e:	5f 90       	pop	r5
    2010:	4f 90       	pop	r4
    2012:	3f 90       	pop	r3
    2014:	2f 90       	pop	r2
    2016:	08 95       	ret

00002018 <readFile>:
//        1, if file is already existing and flag = VERIFY
//      2, if file name is incompatible
//***************************************************************************

unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    2018:	2f 92       	push	r2
    201a:	3f 92       	push	r3
    201c:	4f 92       	push	r4
    201e:	5f 92       	push	r5
    2020:	6f 92       	push	r6
    2022:	7f 92       	push	r7
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <readFile+0x26>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <readFile+0x28>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	e8 2e       	mov	r14, r24
    2046:	8b 01       	movw	r16, r22
  unsigned int k;//,iCntForSingleAudioWrite;
  unsigned char j, error;
  //unsigned int iAudioByteCnt;
  bool bEndOfFile=false;

  error = convertFileName (fileName); //convert fileName into FAT format
    2048:	cb 01       	movw	r24, r22
    204a:	0e 94 00 08 	call	0x1000	; 0x1000 <convertFileName>
  if(error) return 2;
    204e:	88 23       	and	r24, r24
    2050:	11 f0       	breq	.+4      	; 0x2056 <readFile+0x3e>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	94 c0       	rjmp	.+296    	; 0x217e <readFile+0x166>

  dir = findFiles (GET_FILE, fileName); //get the file location
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	b8 01       	movw	r22, r16
    205a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <findFiles>
    205e:	9c 01       	movw	r18, r24
  if(dir == 0) 
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	09 f4       	brne	.+2      	; 0x2066 <readFile+0x4e>
    2064:	8b c0       	rjmp	.+278    	; 0x217c <readFile+0x164>
    return (0);

  if(flag == VERIFY) return (1);  //specified file name is already existing
    2066:	22 24       	eor	r2, r2
    2068:	23 94       	inc	r2
    206a:	e2 14       	cp	r14, r2
    206c:	11 f4       	brne	.+4      	; 0x2072 <readFile+0x5a>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	86 c0       	rjmp	.+268    	; 0x217e <readFile+0x166>

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2072:	dc 01       	movw	r26, r24
    2074:	54 96       	adiw	r26, 0x14	; 20
    2076:	8d 91       	ld	r24, X+
    2078:	9c 91       	ld	r25, X
    207a:	55 97       	sbiw	r26, 0x15	; 21
    207c:	a0 e0       	ldi	r26, 0x00	; 0
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	6c 01       	movw	r12, r24
    2082:	bb 24       	eor	r11, r11
    2084:	aa 24       	eor	r10, r10
    2086:	f9 01       	movw	r30, r18
    2088:	82 8d       	ldd	r24, Z+26	; 0x1a
    208a:	93 8d       	ldd	r25, Z+27	; 0x1b
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	a8 2a       	or	r10, r24
    2092:	b9 2a       	or	r11, r25
    2094:	ca 2a       	or	r12, r26
    2096:	db 2a       	or	r13, r27

  fileSize = dir->fileSize;
    2098:	d9 01       	movw	r26, r18
    209a:	5c 96       	adiw	r26, 0x1c	; 28
    209c:	2d 90       	ld	r2, X+
    209e:	3d 90       	ld	r3, X+
    20a0:	4d 90       	ld	r4, X+
    20a2:	5c 90       	ld	r5, X
    20a4:	5f 97       	sbiw	r26, 0x1f	; 31
    20a6:	29 82       	std	Y+1, r2	; 0x01
    20a8:	3a 82       	std	Y+2, r3	; 0x02
    20aa:	4b 82       	std	Y+3, r4	; 0x03
    20ac:	5c 82       	std	Y+4, r5	; 0x04
    20ae:	22 24       	eor	r2, r2
    20b0:	33 24       	eor	r3, r3
    20b2:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    20b4:	20 91 ba 06 	lds	r18, 0x06BA
    20b8:	30 91 bb 06 	lds	r19, 0x06BB
    20bc:	e0 90 80 04 	lds	r14, 0x0480
    20c0:	f0 90 81 04 	lds	r15, 0x0481
    20c4:	00 91 82 04 	lds	r16, 0x0482
    20c8:	10 91 83 04 	lds	r17, 0x0483
    20cc:	c6 01       	movw	r24, r12
    20ce:	b5 01       	movw	r22, r10
    20d0:	62 50       	subi	r22, 0x02	; 2
    20d2:	70 40       	sbci	r23, 0x00	; 0
    20d4:	80 40       	sbci	r24, 0x00	; 0
    20d6:	90 40       	sbci	r25, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    20e0:	3b 01       	movw	r6, r22
    20e2:	4c 01       	movw	r8, r24
    20e4:	6e 0c       	add	r6, r14
    20e6:	7f 1c       	adc	r7, r15
    20e8:	80 1e       	adc	r8, r16
    20ea:	91 1e       	adc	r9, r17
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	28 c0       	rjmp	.+80     	; 0x2140 <readFile+0x128>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    20f0:	c4 01       	movw	r24, r8
    20f2:	b3 01       	movw	r22, r6
    20f4:	61 0f       	add	r22, r17
    20f6:	71 1d       	adc	r23, r1
    20f8:	81 1d       	adc	r24, r1
    20fa:	91 1d       	adc	r25, r1
    20fc:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    2100:	d2 01       	movw	r26, r4
    2102:	c1 01       	movw	r24, r2
    2104:	60 e0       	ldi	r22, 0x00	; 0


      for(k=0; k<512; k++)
    2106:	a2 01       	movw	r20, r4
    2108:	91 01       	movw	r18, r2
    210a:	20 50       	subi	r18, 0x00	; 0
    210c:	3e 4f       	sbci	r19, 0xFE	; 254
    210e:	4f 4f       	sbci	r20, 0xFF	; 255
    2110:	5f 4f       	sbci	r21, 0xFF	; 255
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    2112:	29 80       	ldd	r2, Y+1	; 0x01
    2114:	3a 80       	ldd	r3, Y+2	; 0x02
    2116:	4b 80       	ldd	r4, Y+3	; 0x03
    2118:	5c 80       	ldd	r5, Y+4	; 0x04
    211a:	82 15       	cp	r24, r2
    211c:	93 05       	cpc	r25, r3
    211e:	a4 05       	cpc	r26, r4
    2120:	b5 05       	cpc	r27, r5
    2122:	08 f0       	brcs	.+2      	; 0x2126 <readFile+0x10e>
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	a1 1d       	adc	r26, r1
    212a:	b1 1d       	adc	r27, r1
    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);


      for(k=0; k<512; k++)
    212c:	82 17       	cp	r24, r18
    212e:	93 07       	cpc	r25, r19
    2130:	a4 07       	cpc	r26, r20
    2132:	b5 07       	cpc	r27, r21
    2134:	71 f7       	brne	.-36     	; 0x2112 <readFile+0xfa>
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
      }
      if(bEndOfFile)
    2136:	66 23       	and	r22, r22
    2138:	09 f5       	brne	.+66     	; 0x217c <readFile+0x164>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    213a:	1f 5f       	subi	r17, 0xFF	; 255
    213c:	1c 01       	movw	r2, r24
    213e:	2d 01       	movw	r4, r26
    2140:	20 91 ba 06 	lds	r18, 0x06BA
    2144:	30 91 bb 06 	lds	r19, 0x06BB
    2148:	81 2f       	mov	r24, r17
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	82 17       	cp	r24, r18
    214e:	93 07       	cpc	r25, r19
    2150:	78 f2       	brcs	.-98     	; 0x20f0 <readFile+0xd8>
      if(bEndOfFile)
      {
        return 0;
      }
    }
    cluster = getSetNextCluster (cluster, GET, 0);
    2152:	c6 01       	movw	r24, r12
    2154:	b5 01       	movw	r22, r10
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	00 e0       	ldi	r16, 0x00	; 0
    215a:	10 e0       	ldi	r17, 0x00	; 0
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    2164:	5b 01       	movw	r10, r22
    2166:	6c 01       	movw	r12, r24
    if(cluster == 0) {USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); return 0;}
    2168:	61 15       	cp	r22, r1
    216a:	71 05       	cpc	r23, r1
    216c:	81 05       	cpc	r24, r1
    216e:	91 05       	cpc	r25, r1
    2170:	09 f0       	breq	.+2      	; 0x2174 <readFile+0x15c>
    2172:	a0 cf       	rjmp	.-192    	; 0x20b4 <readFile+0x9c>
    2174:	88 e9       	ldi	r24, 0x98	; 152
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    217c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 0;
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	df 90       	pop	r13
    2194:	cf 90       	pop	r12
    2196:	bf 90       	pop	r11
    2198:	af 90       	pop	r10
    219a:	9f 90       	pop	r9
    219c:	8f 90       	pop	r8
    219e:	7f 90       	pop	r7
    21a0:	6f 90       	pop	r6
    21a2:	5f 90       	pop	r5
    21a4:	4f 90       	pop	r4
    21a6:	3f 90       	pop	r3
    21a8:	2f 90       	pop	r2
    21aa:	08 95       	ret

000021ac <writeFile>:
//      file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    21ac:	2f 92       	push	r2
    21ae:	3f 92       	push	r3
    21b0:	4f 92       	push	r4
    21b2:	5f 92       	push	r5
    21b4:	6f 92       	push	r6
    21b6:	7f 92       	push	r7
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	bc 01       	movw	r22, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0e 94 0c 10 	call	0x2018	; 0x2018 <readFile>

if(j == 1) 
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	09 f0       	breq	.+2      	; 0x21da <writeFile+0x2e>
    21d8:	55 c0       	rjmp	.+170    	; 0x2284 <writeFile+0xd8>
{
  USART_transmitStringToPCFromFlash(PSTR("  File already existing, appending data..")); 
    21da:	8a e2       	ldi	r24, 0x2A	; 42
    21dc:	92 e0       	ldi	r25, 0x02	; 2
    21de:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
  appendFile = 1;
  cluster = appendStartCluster;
    21e2:	60 90 dd 06 	lds	r6, 0x06DD
    21e6:	70 90 de 06 	lds	r7, 0x06DE
    21ea:	80 90 df 06 	lds	r8, 0x06DF
    21ee:	90 90 e0 06 	lds	r9, 0x06E0
    21f2:	aa 24       	eor	r10, r10
    21f4:	bb 24       	eor	r11, r11
    21f6:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    21f8:	c4 01       	movw	r24, r8
    21fa:	b3 01       	movw	r22, r6
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	00 e0       	ldi	r16, 0x00	; 0
    2200:	10 e0       	ldi	r17, 0x00	; 0
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    if(nextCluster == EOF) break;
    220a:	6f 3f       	cpi	r22, 0xFF	; 255
    220c:	2f ef       	ldi	r18, 0xFF	; 255
    220e:	72 07       	cpc	r23, r18
    2210:	2f ef       	ldi	r18, 0xFF	; 255
    2212:	82 07       	cpc	r24, r18
    2214:	2f e0       	ldi	r18, 0x0F	; 15
    2216:	92 07       	cpc	r25, r18
    2218:	41 f0       	breq	.+16     	; 0x222a <writeFile+0x7e>
  cluster = nextCluster;
  clusterCount++;
    221a:	08 94       	sec
    221c:	a1 1c       	adc	r10, r1
    221e:	b1 1c       	adc	r11, r1
    2220:	c1 1c       	adc	r12, r1
    2222:	d1 1c       	adc	r13, r1
    2224:	3b 01       	movw	r6, r22
    2226:	4c 01       	movw	r8, r24
    2228:	e7 cf       	rjmp	.-50     	; 0x21f8 <writeFile+0x4c>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    222a:	20 91 ba 06 	lds	r18, 0x06BA
    222e:	30 91 bb 06 	lds	r19, 0x06BB
    2232:	60 91 88 04 	lds	r22, 0x0488
    2236:	70 91 89 04 	lds	r23, 0x0489
    223a:	e0 90 88 04 	lds	r14, 0x0488
    223e:	f0 90 89 04 	lds	r15, 0x0489
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    224e:	a6 01       	movw	r20, r12
    2250:	95 01       	movw	r18, r10
    2252:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    2256:	9b 01       	movw	r18, r22
    2258:	ac 01       	movw	r20, r24
    225a:	60 91 84 04 	lds	r22, 0x0484
    225e:	70 91 85 04 	lds	r23, 0x0485
    2262:	80 91 86 04 	lds	r24, 0x0486
    2266:	90 91 87 04 	lds	r25, 0x0487
    226a:	62 1b       	sub	r22, r18
    226c:	73 0b       	sbc	r23, r19
    226e:	84 0b       	sbc	r24, r20
    2270:	95 0b       	sbc	r25, r21
    2272:	00 e0       	ldi	r16, 0x00	; 0
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	a8 01       	movw	r20, r16
    2278:	97 01       	movw	r18, r14
    227a:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    227e:	b2 2e       	mov	r11, r18
    2280:	21 e0       	ldi	r18, 0x01	; 1
    2282:	3e c0       	rjmp	.+124    	; 0x2300 <writeFile+0x154>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    2284:	82 30       	cpi	r24, 0x02	; 2
    2286:	09 f4       	brne	.+2      	; 0x228a <writeFile+0xde>
    2288:	08 c1       	rjmp	.+528    	; 0x249a <writeFile+0x2ee>
else
{
//  TX_NEWLINE_PC;
//  USART_transmitStringToPCFromFlash(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	0e 94 3e 09 	call	0x127c	; 0x127c <getSetFreeCluster>
    229a:	9b 01       	movw	r18, r22
    229c:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    229e:	80 91 8a 04 	lds	r24, 0x048A
    22a2:	90 91 8b 04 	lds	r25, 0x048B
    22a6:	a0 91 8c 04 	lds	r26, 0x048C
    22aa:	b0 91 8d 04 	lds	r27, 0x048D
    22ae:	82 17       	cp	r24, r18
    22b0:	93 07       	cpc	r25, r19
    22b2:	a4 07       	cpc	r26, r20
    22b4:	b5 07       	cpc	r27, r21
    22b6:	40 f4       	brcc	.+16     	; 0x22c8 <writeFile+0x11c>
     cluster = rootCluster;
    22b8:	20 91 ae 04 	lds	r18, 0x04AE
    22bc:	30 91 af 04 	lds	r19, 0x04AF
    22c0:	40 91 b0 04 	lds	r20, 0x04B0
    22c4:	50 91 b1 04 	lds	r21, 0x04B1

  cluster = searchNextFreeCluster(cluster);
    22c8:	ca 01       	movw	r24, r20
    22ca:	b9 01       	movw	r22, r18
    22cc:	0e 94 b4 08 	call	0x1168	; 0x1168 <searchNextFreeCluster>
    22d0:	3b 01       	movw	r6, r22
    22d2:	4c 01       	movw	r8, r24
   if(cluster == 0)
    22d4:	61 15       	cp	r22, r1
    22d6:	71 05       	cpc	r23, r1
    22d8:	81 05       	cpc	r24, r1
    22da:	91 05       	cpc	r25, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <writeFile+0x134>
    22de:	dd c0       	rjmp	.+442    	; 0x249a <writeFile+0x2ee>
   {
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
    return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	0f ef       	ldi	r16, 0xFF	; 255
    22e4:	1f ef       	ldi	r17, 0xFF	; 255
    22e6:	2f ef       	ldi	r18, 0xFF	; 255
    22e8:	3f e0       	ldi	r19, 0x0F	; 15
    22ea:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
    22ee:	10 92 84 04 	sts	0x0484, r1
    22f2:	10 92 85 04 	sts	0x0485, r1
    22f6:	10 92 86 04 	sts	0x0486, r1
    22fa:	10 92 87 04 	sts	0x0487, r1
    22fe:	20 e0       	ldi	r18, 0x00	; 0
while(1)
{
   if(start)
   {
      start = 0;
    startBlock = getFirstSector (cluster) + sector;
    2300:	2b 2c       	mov	r2, r11
    2302:	33 24       	eor	r3, r3
    2304:	44 24       	eor	r4, r4
    2306:	55 24       	eor	r5, r5
    2308:	c4 01       	movw	r24, r8
    230a:	b3 01       	movw	r22, r6
    230c:	62 50       	subi	r22, 0x02	; 2
    230e:	70 40       	sbci	r23, 0x00	; 0
    2310:	80 40       	sbci	r24, 0x00	; 0
    2312:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    2314:	22 23       	and	r18, r18
    2316:	e1 f1       	breq	.+120    	; 0x2390 <writeFile+0x1e4>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2318:	20 91 ba 06 	lds	r18, 0x06BA
    231c:	30 91 bb 06 	lds	r19, 0x06BB
    2320:	e0 90 80 04 	lds	r14, 0x0480
    2324:	f0 90 81 04 	lds	r15, 0x0481
    2328:	00 91 82 04 	lds	r16, 0x0482
    232c:	10 91 83 04 	lds	r17, 0x0483
while(1)
{
   if(start)
   {
      start = 0;
    startBlock = getFirstSector (cluster) + sector;
    2330:	e2 0c       	add	r14, r2
    2332:	f3 1c       	adc	r15, r3
    2334:	04 1d       	adc	r16, r4
    2336:	15 1d       	adc	r17, r5
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    2340:	e6 0e       	add	r14, r22
    2342:	f7 1e       	adc	r15, r23
    2344:	08 1f       	adc	r16, r24
    2346:	19 1f       	adc	r17, r25
    2348:	e0 92 b3 04 	sts	0x04B3, r14
    234c:	f0 92 b4 04 	sts	0x04B4, r15
    2350:	00 93 b5 04 	sts	0x04B5, r16
    2354:	10 93 b6 04 	sts	0x04B6, r17
    SD_readSingleBlock (startBlock);
    2358:	60 91 b3 04 	lds	r22, 0x04B3
    235c:	70 91 b4 04 	lds	r23, 0x04B4
    2360:	80 91 b5 04 	lds	r24, 0x04B5
    2364:	90 91 b6 04 	lds	r25, 0x04B6
    2368:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    i = fileSize % bytesPerSector;
    236c:	20 91 88 04 	lds	r18, 0x0488
    2370:	30 91 89 04 	lds	r19, 0x0489
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	60 91 84 04 	lds	r22, 0x0484
    237c:	70 91 85 04 	lds	r23, 0x0485
    2380:	80 91 86 04 	lds	r24, 0x0486
    2384:	90 91 87 04 	lds	r25, 0x0487
    2388:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    238c:	1b 2d       	mov	r17, r11
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <writeFile+0x222>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2390:	20 91 ba 06 	lds	r18, 0x06BA
    2394:	30 91 bb 06 	lds	r19, 0x06BB
    2398:	e0 90 80 04 	lds	r14, 0x0480
    239c:	f0 90 81 04 	lds	r15, 0x0481
    23a0:	00 91 82 04 	lds	r16, 0x0482
    23a4:	10 91 83 04 	lds	r17, 0x0483
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    23b0:	e6 0e       	add	r14, r22
    23b2:	f7 1e       	adc	r15, r23
    23b4:	08 1f       	adc	r16, r24
    23b6:	19 1f       	adc	r17, r25
    i = fileSize % bytesPerSector;
    j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    23b8:	e0 92 b3 04 	sts	0x04B3, r14
    23bc:	f0 92 b4 04 	sts	0x04B4, r15
    23c0:	00 93 b5 04 	sts	0x04B5, r16
    23c4:	10 93 b6 04 	sts	0x04B6, r17
    23c8:	10 e0       	ldi	r17, 0x00	; 0
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	20 91 84 04 	lds	r18, 0x0484
    23d2:	30 91 85 04 	lds	r19, 0x0485
    23d6:	40 91 86 04 	lds	r20, 0x0486
    23da:	50 91 87 04 	lds	r21, 0x0487
     fileSize--;
     } 
     continue;     
   }
//   USART_transmitByteToPC(data);
     buffer[i++] = data;
    23de:	fb 01       	movw	r30, r22
    23e0:	e7 54       	subi	r30, 0x47	; 71
    23e2:	fb 4f       	sbci	r31, 0xFB	; 251
    23e4:	10 82       	st	Z, r1
    23e6:	6f 5f       	subi	r22, 0xFF	; 255
    23e8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ea:	2f 5f       	subi	r18, 0xFF	; 255
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	4f 4f       	sbci	r20, 0xFF	; 255
    23f0:	5f 4f       	sbci	r21, 0xFF	; 255
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
       fileSize++;
      }
     }
   
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	60 30       	cpi	r22, 0x00	; 0
    23f6:	78 07       	cpc	r23, r24
    23f8:	90 f3       	brcs	.-28     	; 0x23de <writeFile+0x232>
    23fa:	20 93 84 04 	sts	0x0484, r18
    23fe:	30 93 85 04 	sts	0x0485, r19
    2402:	40 93 86 04 	sts	0x0486, r20
    2406:	50 93 87 04 	sts	0x0487, r21
   {        //infinite loop in case it happens to be greater than 512 due to some data corruption
     i=0;
     error = SD_writeSingleBlock (startBlock);
    240a:	60 91 b3 04 	lds	r22, 0x04B3
    240e:	70 91 b4 04 	lds	r23, 0x04B4
    2412:	80 91 b5 04 	lds	r24, 0x04B5
    2416:	90 91 b6 04 	lds	r25, 0x04B6
    241a:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
       j++;
    241e:	1f 5f       	subi	r17, 0xFF	; 255
     if(j == sectorPerCluster) {j = 0; break;}
    2420:	20 91 ba 06 	lds	r18, 0x06BA
    2424:	30 91 bb 06 	lds	r19, 0x06BB
    2428:	81 2f       	mov	r24, r17
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	82 17       	cp	r24, r18
    242e:	93 07       	cpc	r25, r19
    2430:	61 f4       	brne	.+24     	; 0x244a <writeFile+0x29e>
      break;
   } 
    
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    2432:	c4 01       	movw	r24, r8
    2434:	b3 01       	movw	r22, r6
    2436:	0e 94 b4 08 	call	0x1168	; 0x1168 <searchNextFreeCluster>
    243a:	6b 01       	movw	r12, r22
    243c:	7c 01       	movw	r14, r24

   if(cluster == 0)
    243e:	61 15       	cp	r22, r1
    2440:	71 05       	cpc	r23, r1
    2442:	81 05       	cpc	r24, r1
    2444:	91 05       	cpc	r25, r1
    2446:	a9 f4       	brne	.+42     	; 0x2472 <writeFile+0x2c6>
    2448:	28 c0       	rjmp	.+80     	; 0x249a <writeFile+0x2ee>
   {        //infinite loop in case it happens to be greater than 512 due to some data corruption
     i=0;
     error = SD_writeSingleBlock (startBlock);
       j++;
     if(j == sectorPerCluster) {j = 0; break;}
     startBlock++; 
    244a:	80 91 b3 04 	lds	r24, 0x04B3
    244e:	90 91 b4 04 	lds	r25, 0x04B4
    2452:	a0 91 b5 04 	lds	r26, 0x04B5
    2456:	b0 91 b6 04 	lds	r27, 0x04B6
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	a1 1d       	adc	r26, r1
    245e:	b1 1d       	adc	r27, r1
    2460:	80 93 b3 04 	sts	0x04B3, r24
    2464:	90 93 b4 04 	sts	0x04B4, r25
    2468:	a0 93 b5 04 	sts	0x04B5, r26
    246c:	b0 93 b6 04 	sts	0x04B6, r27
    2470:	ac cf       	rjmp	.-168    	; 0x23ca <writeFile+0x21e>
//      TX_NEWLINE_PC;
//      USART_transmitStringToPCFromFlash(PSTR(" No free cluster!"));
    return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    2472:	c4 01       	movw	r24, r8
    2474:	b3 01       	movw	r22, r6
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	97 01       	movw	r18, r14
    247a:	86 01       	movw	r16, r12
    247c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2480:	c7 01       	movw	r24, r14
    2482:	b6 01       	movw	r22, r12
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0f ef       	ldi	r16, 0xFF	; 255
    2488:	1f ef       	ldi	r17, 0xFF	; 255
    248a:	2f ef       	ldi	r18, 0xFF	; 255
    248c:	3f e0       	ldi	r19, 0x0F	; 15
    248e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	36 01       	movw	r6, r12
    2496:	47 01       	movw	r8, r14
    2498:	37 cf       	rjmp	.-402    	; 0x2308 <writeFile+0x15c>
   
   prevCluster = cluster;
 }
 
 return;
}
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	ff 90       	pop	r15
    24a0:	ef 90       	pop	r14
    24a2:	df 90       	pop	r13
    24a4:	cf 90       	pop	r12
    24a6:	bf 90       	pop	r11
    24a8:	af 90       	pop	r10
    24aa:	9f 90       	pop	r9
    24ac:	8f 90       	pop	r8
    24ae:	7f 90       	pop	r7
    24b0:	6f 90       	pop	r6
    24b2:	5f 90       	pop	r5
    24b4:	4f 90       	pop	r4
    24b6:	3f 90       	pop	r3
    24b8:	2f 90       	pop	r2
    24ba:	08 95       	ret

000024bc <ReplaceTheContentOfThisFileWith>:
/*
Modified write file function with replacing all the text with new text given
*/

int ReplaceTheContentOfThisFileWith (unsigned char *fileName, unsigned char *fileContent)
{
    24bc:	6f 92       	push	r6
    24be:	7f 92       	push	r7
    24c0:	8f 92       	push	r8
    24c2:	9f 92       	push	r9
    24c4:	af 92       	push	r10
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	9c 01       	movw	r18, r24
    24da:	eb 01       	movw	r28, r22
  struct dir_Structure *dir;
  unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

  //j = readFile (VERIFY, fileName);

  if(readFile (VERIFY, fileName) == 1) 
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	b9 01       	movw	r22, r18
    24e0:	0e 94 0c 10 	call	0x2018	; 0x2018 <readFile>
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	19 f0       	breq	.+6      	; 0x24ee <ReplaceTheContentOfThisFileWith+0x32>
    24e8:	21 e0       	ldi	r18, 0x01	; 1
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	cf c0       	rjmp	.+414    	; 0x268c <ReplaceTheContentOfThisFileWith+0x1d0>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    24ee:	a0 90 dd 06 	lds	r10, 0x06DD
    24f2:	b0 90 de 06 	lds	r11, 0x06DE
    24f6:	c0 90 df 06 	lds	r12, 0x06DF
    24fa:	d0 90 e0 06 	lds	r13, 0x06E0
    24fe:	8e ef       	ldi	r24, 0xFE	; 254
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	af ef       	ldi	r26, 0xFF	; 255
    2504:	bf ef       	ldi	r27, 0xFF	; 255
    2506:	a8 0e       	add	r10, r24
    2508:	b9 1e       	adc	r11, r25
    250a:	ca 1e       	adc	r12, r26
    250c:	db 1e       	adc	r13, r27
    250e:	60 91 ba 06 	lds	r22, 0x06BA
    2512:	70 91 bb 06 	lds	r23, 0x06BB
    2516:	e0 90 80 04 	lds	r14, 0x0480
    251a:	f0 90 81 04 	lds	r15, 0x0481
    251e:	00 91 82 04 	lds	r16, 0x0482
    2522:	10 91 83 04 	lds	r17, 0x0483
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a6 01       	movw	r20, r12
    252c:	95 01       	movw	r18, r10
    252e:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    2532:	3b 01       	movw	r6, r22
    2534:	4c 01       	movw	r8, r24
    2536:	6e 0c       	add	r6, r14
    2538:	7f 1c       	adc	r7, r15
    253a:	80 1e       	adc	r8, r16
    253c:	91 1e       	adc	r9, r17
    //TX_NEWLINE_PC;
    appendFile = 1;
    cluster = appendStartCluster;
    clusterCount=0;
    firstSector = getFirstSector (cluster);
    startBlock = getFirstSector (cluster);
    253e:	60 91 ba 06 	lds	r22, 0x06BA
    2542:	70 91 bb 06 	lds	r23, 0x06BB
    2546:	e0 90 80 04 	lds	r14, 0x0480
    254a:	f0 90 81 04 	lds	r15, 0x0481
    254e:	00 91 82 04 	lds	r16, 0x0482
    2552:	10 91 83 04 	lds	r17, 0x0483
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    255e:	e6 0e       	add	r14, r22
    2560:	f7 1e       	adc	r15, r23
    2562:	08 1f       	adc	r16, r24
    2564:	19 1f       	adc	r17, r25
    2566:	e0 92 b3 04 	sts	0x04B3, r14
    256a:	f0 92 b4 04 	sts	0x04B4, r15
    256e:	00 93 b5 04 	sts	0x04B5, r16
    2572:	10 93 b6 04 	sts	0x04B6, r17
    2576:	10 e0       	ldi	r17, 0x00	; 0
    2578:	34 c0       	rjmp	.+104    	; 0x25e2 <ReplaceTheContentOfThisFileWith+0x126>
    i=0;
    j=0;
    while(*fileContent != '$')
    {      
      buffer[i++]=*fileContent;
    257a:	fc 01       	movw	r30, r24
    257c:	e7 54       	subi	r30, 0x47	; 71
    257e:	fb 4f       	sbci	r31, 0xFB	; 251
    2580:	20 83       	st	Z, r18
    2582:	01 96       	adiw	r24, 0x01	; 1
      fileContent++;
    2584:	21 96       	adiw	r28, 0x01	; 1
      if(i >= 512)
    2586:	a2 e0       	ldi	r26, 0x02	; 2
    2588:	80 30       	cpi	r24, 0x00	; 0
    258a:	9a 07       	cpc	r25, r26
    258c:	60 f1       	brcs	.+88     	; 0x25e6 <ReplaceTheContentOfThisFileWith+0x12a>
      {        
        i=0;
        error = SD_writeSingleBlock (startBlock);
    258e:	60 91 b3 04 	lds	r22, 0x04B3
    2592:	70 91 b4 04 	lds	r23, 0x04B4
    2596:	80 91 b5 04 	lds	r24, 0x04B5
    259a:	90 91 b6 04 	lds	r25, 0x04B6
    259e:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
        j++;
    25a2:	1f 5f       	subi	r17, 0xFF	; 255
        if(j == sectorPerCluster) {j = 0; break;}
    25a4:	20 91 ba 06 	lds	r18, 0x06BA
    25a8:	30 91 bb 06 	lds	r19, 0x06BB
    25ac:	81 2f       	mov	r24, r17
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	82 17       	cp	r24, r18
    25b2:	93 07       	cpc	r25, r19
    25b4:	19 f4       	brne	.+6      	; 0x25bc <ReplaceTheContentOfThisFileWith+0x100>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	18 c0       	rjmp	.+48     	; 0x25ec <ReplaceTheContentOfThisFileWith+0x130>
        startBlock++; 
    25bc:	80 91 b3 04 	lds	r24, 0x04B3
    25c0:	90 91 b4 04 	lds	r25, 0x04B4
    25c4:	a0 91 b5 04 	lds	r26, 0x04B5
    25c8:	b0 91 b6 04 	lds	r27, 0x04B6
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	a1 1d       	adc	r26, r1
    25d0:	b1 1d       	adc	r27, r1
    25d2:	80 93 b3 04 	sts	0x04B3, r24
    25d6:	90 93 b4 04 	sts	0x04B4, r25
    25da:	a0 93 b5 04 	sts	0x04B5, r26
    25de:	b0 93 b6 04 	sts	0x04B6, r27
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    clusterCount=0;
    firstSector = getFirstSector (cluster);
    startBlock = getFirstSector (cluster);
    i=0;
    j=0;
    while(*fileContent != '$')
    25e6:	28 81       	ld	r18, Y
    25e8:	24 32       	cpi	r18, 0x24	; 36
    25ea:	39 f6       	brne	.-114    	; 0x257a <ReplaceTheContentOfThisFileWith+0xbe>
        if(j == sectorPerCluster) {j = 0; break;}
        startBlock++; 
      }
    }
    //fileContent--;
    if(*fileContent=='$')
    25ec:	68 81       	ld	r22, Y
    25ee:	64 32       	cpi	r22, 0x24	; 36
    25f0:	09 f5       	brne	.+66     	; 0x2634 <ReplaceTheContentOfThisFileWith+0x178>
    {
      buffer[i++]='$';
    25f2:	fc 01       	movw	r30, r24
    25f4:	e7 54       	subi	r30, 0x47	; 71
    25f6:	fb 4f       	sbci	r31, 0xFB	; 251
    25f8:	60 83       	st	Z, r22
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <ReplaceTheContentOfThisFileWith+0x148>
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    25fc:	fc 01       	movw	r30, r24
    25fe:	e7 54       	subi	r30, 0x47	; 71
    2600:	fb 4f       	sbci	r31, 0xFB	; 251
    2602:	10 82       	st	Z, r1
    }
    //fileContent--;
    if(*fileContent=='$')
    {
      buffer[i++]='$';
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	b2 e0       	ldi	r27, 0x02	; 2
    2608:	80 30       	cpi	r24, 0x00	; 0
    260a:	9b 07       	cpc	r25, r27
    260c:	b8 f3       	brcs	.-18     	; 0x25fc <ReplaceTheContentOfThisFileWith+0x140>
        buffer[i]= 0x00;
      error = SD_writeSingleBlock (startBlock);
    260e:	60 91 b3 04 	lds	r22, 0x04B3
    2612:	70 91 b4 04 	lds	r23, 0x04B4
    2616:	80 91 b5 04 	lds	r24, 0x04B5
    261a:	90 91 b6 04 	lds	r25, 0x04B6
    261e:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
    2622:	88 ee       	ldi	r24, 0xE8	; 232
    2624:	93 e0       	ldi	r25, 0x03	; 3
    2626:	28 ec       	ldi	r18, 0xC8	; 200
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	f9 01       	movw	r30, r18
    262c:	31 97       	sbiw	r30, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <ReplaceTheContentOfThisFileWith+0x170>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	d9 f7       	brne	.-10     	; 0x262a <ReplaceTheContentOfThisFileWith+0x16e>
      _delay_ms(100);
      //USART_transmitStringToPCFromFlash(PSTR("Successfully replace the file content")); 
      //TX_NEWLINE_PC;
    }
    SD_readSingleBlock (firstSector);    
    2634:	c4 01       	movw	r24, r8
    2636:	b3 01       	movw	r22, r6
    2638:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    263c:	88 ee       	ldi	r24, 0xE8	; 232
    263e:	93 e0       	ldi	r25, 0x03	; 3
    2640:	28 ec       	ldi	r18, 0xC8	; 200
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	f9 01       	movw	r30, r18
    2646:	31 97       	sbiw	r30, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <ReplaceTheContentOfThisFileWith+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	d9 f7       	brne	.-10     	; 0x2644 <ReplaceTheContentOfThisFileWith+0x188>
    _delay_ms(100);
    dir = (struct dir_Structure *) &buffer[0]; 
    //extraMemory = fileSize - dir->fileSize;
    dir->fileSize = fileSize;
    264e:	80 91 84 04 	lds	r24, 0x0484
    2652:	90 91 85 04 	lds	r25, 0x0485
    2656:	a0 91 86 04 	lds	r26, 0x0486
    265a:	b0 91 87 04 	lds	r27, 0x0487
    265e:	80 93 d5 04 	sts	0x04D5, r24
    2662:	90 93 d6 04 	sts	0x04D6, r25
    2666:	a0 93 d7 04 	sts	0x04D7, r26
    266a:	b0 93 d8 04 	sts	0x04D8, r27
    SD_writeSingleBlock (firstSector);
    266e:	c4 01       	movw	r24, r8
    2670:	b3 01       	movw	r22, r6
    2672:	0e 94 f5 06 	call	0xdea	; 0xdea <SD_writeSingleBlock>
    2676:	88 ee       	ldi	r24, 0xE8	; 232
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	28 ec       	ldi	r18, 0xC8	; 200
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	f9 01       	movw	r30, r18
    2680:	31 97       	sbiw	r30, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <ReplaceTheContentOfThisFileWith+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	d9 f7       	brne	.-10     	; 0x267e <ReplaceTheContentOfThisFileWith+0x1c2>
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    return 1;
    //USART_transmitStringToPCFromFlash(PSTR("SABT-ERR001")); 
    //TX_NEWLINE_PC;
  }
  return 2;
}
    268c:	c9 01       	movw	r24, r18
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	ff 90       	pop	r15
    2698:	ef 90       	pop	r14
    269a:	df 90       	pop	r13
    269c:	cf 90       	pop	r12
    269e:	bf 90       	pop	r11
    26a0:	af 90       	pop	r10
    26a2:	9f 90       	pop	r9
    26a4:	8f 90       	pop	r8
    26a6:	7f 90       	pop	r7
    26a8:	6f 90       	pop	r6
    26aa:	08 95       	ret

000026ac <PlayMP3file>:
2. Stop playing command issued from the controller

*/

unsigned char PlayMP3file (unsigned char *fileName)
{
    26ac:	2f 92       	push	r2
    26ae:	3f 92       	push	r3
    26b0:	4f 92       	push	r4
    26b2:	5f 92       	push	r5
    26b4:	6f 92       	push	r6
    26b6:	7f 92       	push	r7
    26b8:	8f 92       	push	r8
    26ba:	9f 92       	push	r9
    26bc:	af 92       	push	r10
    26be:	bf 92       	push	r11
    26c0:	cf 92       	push	r12
    26c2:	df 92       	push	r13
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	2a 97       	sbiw	r28, 0x0a	; 10
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	8c 01       	movw	r16, r24
  unsigned int k,iCntForSingleAudioWrite;
  unsigned char j, error;
  unsigned int iAudioByteCnt;
  bool bEndOfFile=false;

  UI_MP3_file_Pending=false;
    26e2:	10 92 6d 04 	sts	0x046D, r1

  error = convertFileName (fileName); //convert fileName into FAT format
    26e6:	0e 94 00 08 	call	0x1000	; 0x1000 <convertFileName>
  if(error) return 2;
    26ea:	88 23       	and	r24, r24
    26ec:	11 f0       	breq	.+4      	; 0x26f2 <PlayMP3file+0x46>
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	d9 c0       	rjmp	.+434    	; 0x28a4 <PlayMP3file+0x1f8>

  dir = findFiles (GET_FILE, fileName); //get the file location
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	b8 01       	movw	r22, r16
    26f6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <findFiles>
    26fa:	9c 01       	movw	r18, r24
  if(dir == 0) 
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	09 f4       	brne	.+2      	; 0x2702 <PlayMP3file+0x56>
    2700:	d0 c0       	rjmp	.+416    	; 0x28a2 <PlayMP3file+0x1f6>
    return (0);

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2702:	dc 01       	movw	r26, r24
    2704:	54 96       	adiw	r26, 0x14	; 20
    2706:	8d 91       	ld	r24, X+
    2708:	9c 91       	ld	r25, X
    270a:	55 97       	sbiw	r26, 0x15	; 21
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	5c 01       	movw	r10, r24
    2712:	99 24       	eor	r9, r9
    2714:	88 24       	eor	r8, r8
    2716:	f9 01       	movw	r30, r18
    2718:	82 8d       	ldd	r24, Z+26	; 0x1a
    271a:	93 8d       	ldd	r25, Z+27	; 0x1b
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	88 2a       	or	r8, r24
    2722:	99 2a       	or	r9, r25
    2724:	aa 2a       	or	r10, r26
    2726:	bb 2a       	or	r11, r27

  fileSize = dir->fileSize;
    2728:	d9 01       	movw	r26, r18
    272a:	5c 96       	adiw	r26, 0x1c	; 28
    272c:	8d 91       	ld	r24, X+
    272e:	9d 91       	ld	r25, X+
    2730:	0d 90       	ld	r0, X+
    2732:	bc 91       	ld	r27, X
    2734:	a0 2d       	mov	r26, r0
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	ab 83       	std	Y+3, r26	; 0x03
    273c:	bc 83       	std	Y+4, r27	; 0x04
  VS1053_SKIP_PLAY=false;
    273e:	10 92 e3 06 	sts	0x06E3, r1
    2742:	1d 82       	std	Y+5, r1	; 0x05
    2744:	1e 82       	std	Y+6, r1	; 0x06
    2746:	1f 82       	std	Y+7, r1	; 0x07
    2748:	18 86       	std	Y+8, r1	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    274a:	20 91 ba 06 	lds	r18, 0x06BA
    274e:	30 91 bb 06 	lds	r19, 0x06BB
    2752:	e0 90 80 04 	lds	r14, 0x0480
    2756:	f0 90 81 04 	lds	r15, 0x0481
    275a:	00 91 82 04 	lds	r16, 0x0482
    275e:	10 91 83 04 	lds	r17, 0x0483
    2762:	c5 01       	movw	r24, r10
    2764:	b4 01       	movw	r22, r8
    2766:	62 50       	subi	r22, 0x02	; 2
    2768:	70 40       	sbci	r23, 0x00	; 0
    276a:	80 40       	sbci	r24, 0x00	; 0
    276c:	90 40       	sbci	r25, 0x00	; 0
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	0e 94 b5 19 	call	0x336a	; 0x336a <__mulsi3>
    2776:	2b 01       	movw	r4, r22
    2778:	3c 01       	movw	r6, r24
    277a:	4e 0c       	add	r4, r14
    277c:	5f 1c       	adc	r5, r15
    277e:	60 1e       	adc	r6, r16
    2780:	71 1e       	adc	r7, r17
    2782:	33 24       	eor	r3, r3
    2784:	6f c0       	rjmp	.+222    	; 0x2864 <PlayMP3file+0x1b8>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    2786:	c3 01       	movw	r24, r6
    2788:	b2 01       	movw	r22, r4
    278a:	63 0d       	add	r22, r3
    278c:	71 1d       	adc	r23, r1
    278e:	81 1d       	adc	r24, r1
    2790:	91 1d       	adc	r25, r1
    2792:	0e 94 43 07 	call	0xe86	; 0xe86 <SD_readSingleBlock>
    2796:	cd 80       	ldd	r12, Y+5	; 0x05
    2798:	de 80       	ldd	r13, Y+6	; 0x06
    279a:	ef 80       	ldd	r14, Y+7	; 0x07
    279c:	f8 84       	ldd	r15, Y+8	; 0x08
    279e:	22 24       	eor	r2, r2


      for(k=0; k<512; k++)
    27a0:	d7 01       	movw	r26, r14
    27a2:	c6 01       	movw	r24, r12
    27a4:	80 50       	subi	r24, 0x00	; 0
    27a6:	9e 4f       	sbci	r25, 0xFE	; 254
    27a8:	af 4f       	sbci	r26, 0xFF	; 255
    27aa:	bf 4f       	sbci	r27, 0xFF	; 255
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
    27ac:	29 81       	ldd	r18, Y+1	; 0x01
    27ae:	3a 81       	ldd	r19, Y+2	; 0x02
    27b0:	4b 81       	ldd	r20, Y+3	; 0x03
    27b2:	5c 81       	ldd	r21, Y+4	; 0x04
    27b4:	c2 16       	cp	r12, r18
    27b6:	d3 06       	cpc	r13, r19
    27b8:	e4 06       	cpc	r14, r20
    27ba:	f5 06       	cpc	r15, r21
    27bc:	10 f0       	brcs	.+4      	; 0x27c2 <PlayMP3file+0x116>
    27be:	22 24       	eor	r2, r2
    27c0:	23 94       	inc	r2
    27c2:	08 94       	sec
    27c4:	c1 1c       	adc	r12, r1
    27c6:	d1 1c       	adc	r13, r1
    27c8:	e1 1c       	adc	r14, r1
    27ca:	f1 1c       	adc	r15, r1
    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);


      for(k=0; k<512; k++)
    27cc:	c8 16       	cp	r12, r24
    27ce:	d9 06       	cpc	r13, r25
    27d0:	ea 06       	cpc	r14, r26
    27d2:	fb 06       	cpc	r15, r27
    27d4:	59 f7       	brne	.-42     	; 0x27ac <PlayMP3file+0x100>
    27d6:	e0 e0       	ldi	r30, 0x00	; 0
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
      }
      //After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
      iAudioByteCnt=0;
      while(iAudioByteCnt<k)
      {
        if(VS1053_SKIP_PLAY)
    27da:	80 91 e3 06 	lds	r24, 0x06E3
    27de:	88 23       	and	r24, r24
    27e0:	29 f0       	breq	.+10     	; 0x27ec <PlayMP3file+0x140>
        {
          VS1053_SKIP_PLAY=false;
    27e2:	10 92 e3 06 	sts	0x06E3, r1
          VS1053_SoftwareReset();
    27e6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <VS1053_SoftwareReset>
    27ea:	5b c0       	rjmp	.+182    	; 0x28a2 <PlayMP3file+0x1f6>
          return 0;//playing stopped by user
        }
        if((PINB & (1<<MP3_DREQ)))
    27ec:	1b 99       	sbic	0x03, 3	; 3
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <PlayMP3file+0x148>
    27f0:	8f 01       	movw	r16, r30
    27f2:	18 c0       	rjmp	.+48     	; 0x2824 <PlayMP3file+0x178>
    27f4:	8f 01       	movw	r16, r30
        {
          for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    27f6:	af 01       	movw	r20, r30
    27f8:	40 5e       	subi	r20, 0xE0	; 224
    27fa:	5f 4f       	sbci	r21, 0xFF	; 255
    27fc:	5a 87       	std	Y+10, r21	; 0x0a
    27fe:	49 87       	std	Y+9, r20	; 0x09
          {
            VS1053_WriteData(buffer[iAudioByteCnt]);
    2800:	f8 01       	movw	r30, r16
    2802:	e7 54       	subi	r30, 0x47	; 71
    2804:	fb 4f       	sbci	r31, 0xFB	; 251
    2806:	80 81       	ld	r24, Z
    2808:	0e 94 29 05 	call	0xa52	; 0xa52 <VS1053_WriteData>
            if(iAudioByteCnt++==k)return 0;    
    280c:	52 e0       	ldi	r21, 0x02	; 2
    280e:	00 30       	cpi	r16, 0x00	; 0
    2810:	15 07       	cpc	r17, r21
    2812:	09 f4       	brne	.+2      	; 0x2816 <PlayMP3file+0x16a>
    2814:	46 c0       	rjmp	.+140    	; 0x28a2 <PlayMP3file+0x1f6>
    2816:	0f 5f       	subi	r16, 0xFF	; 255
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
          VS1053_SoftwareReset();
          return 0;//playing stopped by user
        }
        if((PINB & (1<<MP3_DREQ)))
        {
          for(iCntForSingleAudioWrite=0;iCntForSingleAudioWrite<32;iCntForSingleAudioWrite++)
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	08 17       	cp	r16, r24
    2820:	19 07       	cpc	r17, r25
    2822:	71 f7       	brne	.-36     	; 0x2800 <PlayMP3file+0x154>
            VS1053_WriteData(buffer[iAudioByteCnt]);
            if(iAudioByteCnt++==k)return 0;    
          }  
        }
        //After playing a 32 bytes of data, check the user inputs
        if(USART_Keypad_DATA_RDY)
    2824:	80 91 72 04 	lds	r24, 0x0472
    2828:	88 23       	and	r24, r24
    282a:	11 f0       	breq	.+4      	; 0x2830 <PlayMP3file+0x184>
        {
          USART_Keypad_ReceiveAction();
    282c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <USART_Keypad_ReceiveAction>
        }
        if(USART_PC_DATA_RDY)
    2830:	80 91 e4 06 	lds	r24, 0x06E4
    2834:	88 23       	and	r24, r24
    2836:	11 f0       	breq	.+4      	; 0x283c <PlayMP3file+0x190>
        {
          USART_PC_ReceiveAction();
    2838:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <USART_PC_ReceiveAction>
        }    
        if(USART_UI_Message_ready) //If a message ready from the user interface, process it
    283c:	80 91 b8 04 	lds	r24, 0x04B8
    2840:	88 23       	and	r24, r24
    2842:	19 f0       	breq	.+6      	; 0x284a <PlayMP3file+0x19e>
        {
          UI_parse_message(true);
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UI_parse_message>
      {
        if ((byteCounter++) >= fileSize ) bEndOfFile=true;
      }
      //After reading each sector in the file --> send them to MP3 decoder in 32 byte segments
      iAudioByteCnt=0;
      while(iAudioByteCnt<k)
    284a:	92 e0       	ldi	r25, 0x02	; 2
    284c:	00 30       	cpi	r16, 0x00	; 0
    284e:	19 07       	cpc	r17, r25
    2850:	10 f4       	brcc	.+4      	; 0x2856 <PlayMP3file+0x1aa>
    2852:	f8 01       	movw	r30, r16
    2854:	c2 cf       	rjmp	.-124    	; 0x27da <PlayMP3file+0x12e>
        if(USART_UI_Message_ready) //If a message ready from the user interface, process it
        {
          UI_parse_message(true);
        }
      }
      if(bEndOfFile)
    2856:	22 20       	and	r2, r2
    2858:	21 f5       	brne	.+72     	; 0x28a2 <PlayMP3file+0x1f6>
  VS1053_SKIP_PLAY=false;
  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    285a:	33 94       	inc	r3
    285c:	cd 82       	std	Y+5, r12	; 0x05
    285e:	de 82       	std	Y+6, r13	; 0x06
    2860:	ef 82       	std	Y+7, r14	; 0x07
    2862:	f8 86       	std	Y+8, r15	; 0x08
    2864:	20 91 ba 06 	lds	r18, 0x06BA
    2868:	30 91 bb 06 	lds	r19, 0x06BB
    286c:	83 2d       	mov	r24, r3
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	82 17       	cp	r24, r18
    2872:	93 07       	cpc	r25, r19
    2874:	08 f4       	brcc	.+2      	; 0x2878 <PlayMP3file+0x1cc>
    2876:	87 cf       	rjmp	.-242    	; 0x2786 <PlayMP3file+0xda>
        return 0;
      }

    }

    cluster = getSetNextCluster (cluster, GET, 0);
    2878:	c5 01       	movw	r24, r10
    287a:	b4 01       	movw	r22, r8
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	00 e0       	ldi	r16, 0x00	; 0
    2880:	10 e0       	ldi	r17, 0x00	; 0
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	0e 94 a2 0c 	call	0x1944	; 0x1944 <getSetNextCluster>
    288a:	4b 01       	movw	r8, r22
    288c:	5c 01       	movw	r10, r24
    if(cluster == 0) 
    288e:	61 15       	cp	r22, r1
    2890:	71 05       	cpc	r23, r1
    2892:	81 05       	cpc	r24, r1
    2894:	91 05       	cpc	r25, r1
    2896:	09 f0       	breq	.+2      	; 0x289a <PlayMP3file+0x1ee>
    2898:	58 cf       	rjmp	.-336    	; 0x274a <PlayMP3file+0x9e>
    {
      USART_transmitStringToPCFromFlash(PSTR("Error in getting cluster")); 
    289a:	86 e6       	ldi	r24, 0x66	; 102
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      return 0;
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return 0;
}
    28a4:	2a 96       	adiw	r28, 0x0a	; 10
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	bf 90       	pop	r11
    28c2:	af 90       	pop	r10
    28c4:	9f 90       	pop	r9
    28c6:	8f 90       	pop	r8
    28c8:	7f 90       	pop	r7
    28ca:	6f 90       	pop	r6
    28cc:	5f 90       	pop	r5
    28ce:	4f 90       	pop	r4
    28d0:	3f 90       	pop	r3
    28d2:	2f 90       	pop	r2
    28d4:	08 95       	ret

000028d6 <UI_calculate_CRC>:
 * @brief calculate CRC (cyclic redundancy check)
 * @param pstrMsg message (?)
 * @return CRC value
 */
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	fc 01       	movw	r30, r24
  unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
    28e0:	b2 81       	ldd	r27, Z+2	; 0x02
  uint16_t chksum=0;

  pstrMsg+=3;
    28e2:	8c 01       	movw	r16, r24
    28e4:	0d 5f       	subi	r16, 0xFD	; 253
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	70 e0       	ldi	r23, 0x00	; 0
 * @brief calculate CRC (cyclic redundancy check)
 * @param pstrMsg message (?)
 * @return CRC value
 */
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    28ec:	b5 50       	subi	r27, 0x05	; 5
  unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
  uint16_t chksum=0;

  pstrMsg+=3;
  while(msglen > 1)
    28ee:	ab 2f       	mov	r26, r27
    28f0:	a6 95       	lsr	r26
    28f2:	ca 2f       	mov	r28, r26
    28f4:	d0 e0       	ldi	r29, 0x00	; 0
    28f6:	ae 01       	movw	r20, r28
    28f8:	4f 5f       	subi	r20, 0xFF	; 255
    28fa:	5f 4f       	sbci	r21, 0xFF	; 255
    28fc:	44 0f       	add	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	4e 0f       	add	r20, r30
    2902:	5f 1f       	adc	r21, r31
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <UI_calculate_CRC+0x40>
  {
    chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    2906:	31 81       	ldd	r19, Z+1	; 0x01
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	82 2b       	or	r24, r18
    2910:	93 2b       	or	r25, r19
    2912:	68 0f       	add	r22, r24
    2914:	79 1f       	adc	r23, r25
    2916:	32 96       	adiw	r30, 0x02	; 2
{
  unsigned char msglen=*(pstrMsg+2)-5;//Not including the checksum bytes
  uint16_t chksum=0;

  pstrMsg+=3;
  while(msglen > 1)
    2918:	e4 17       	cp	r30, r20
    291a:	f5 07       	cpc	r31, r21
    291c:	a1 f7       	brne	.-24     	; 0x2906 <UI_calculate_CRC+0x30>
 * @brief calculate CRC (cyclic redundancy check)
 * @param pstrMsg message (?)
 * @return CRC value
 */
uint16_t UI_calculate_CRC(unsigned char* pstrMsg)
{
    291e:	aa 0f       	add	r26, r26
    2920:	fe 01       	movw	r30, r28
    2922:	ee 0f       	add	r30, r30
    2924:	ff 1f       	adc	r31, r31
    2926:	e0 0f       	add	r30, r16
    2928:	f1 1f       	adc	r31, r17
    chksum+=(*(pstrMsg)<<8) | *(pstrMsg+1);
    chksum = chksum & 0xffff;
    msglen-=2;
    pstrMsg+=2;
  }
  if(msglen>0) //If the packet size is odd numbered
    292a:	ba 17       	cp	r27, r26
    292c:	21 f0       	breq	.+8      	; 0x2936 <UI_calculate_CRC+0x60>
  {
    chksum = chksum^ (int)*(pstrMsg++);
    292e:	80 81       	ld	r24, Z
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	68 27       	eor	r22, r24
    2934:	79 27       	eor	r23, r25
  }
  return (chksum);
}
    2936:	cb 01       	movw	r24, r22
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

00002942 <UI_buildMessage>:

//TODO this seems pointless?
bool UI_buildMessage(char MessageType)
{
  return true;
}
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	08 95       	ret

00002946 <UI_ResetTheCurrentMode>:
  }
}

void UI_ResetTheCurrentMode(void)
{
  if(UI_MODE_SELECTED){
    2946:	80 91 8f 04 	lds	r24, 0x048F
    294a:	88 23       	and	r24, r24
    294c:	81 f0       	breq	.+32     	; 0x296e <UI_ResetTheCurrentMode+0x28>
    switch(UI_Current_Mode)
    294e:	80 91 b9 06 	lds	r24, 0x06B9
    2952:	82 30       	cpi	r24, 0x02	; 2
    2954:	39 f0       	breq	.+14     	; 0x2964 <UI_ResetTheCurrentMode+0x1e>
    2956:	83 30       	cpi	r24, 0x03	; 3
    2958:	41 f0       	breq	.+16     	; 0x296a <UI_ResetTheCurrentMode+0x24>
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	41 f4       	brne	.+16     	; 0x296e <UI_ResetTheCurrentMode+0x28>
    {
      case 1:
        MD1_Reset();
    295e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <MD1_Reset>
    2962:	08 95       	ret
        break;
      case 2:
        MD2_Reset();
    2964:	0e 94 05 18 	call	0x300a	; 0x300a <MD2_Reset>
    2968:	08 95       	ret
        break;
      case 3:
        MD3_Reset();
    296a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <MD3_Reset>
    296e:	08 95       	ret

00002970 <UI_RunMainOfCurrentMode>:
 * @brief   Decides which of the three UI modes to go into based on UI_Current_Mode
 * @return  Void
 */
void UI_RunMainOfCurrentMode(void)
{
  if(UI_MODE_SELECTED){
    2970:	80 91 8f 04 	lds	r24, 0x048F
    2974:	88 23       	and	r24, r24
    2976:	81 f0       	breq	.+32     	; 0x2998 <UI_RunMainOfCurrentMode+0x28>
    switch(UI_Current_Mode)
    2978:	80 91 b9 06 	lds	r24, 0x06B9
    297c:	82 30       	cpi	r24, 0x02	; 2
    297e:	39 f0       	breq	.+14     	; 0x298e <UI_RunMainOfCurrentMode+0x1e>
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	41 f0       	breq	.+16     	; 0x2994 <UI_RunMainOfCurrentMode+0x24>
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	41 f4       	brne	.+16     	; 0x2998 <UI_RunMainOfCurrentMode+0x28>
    {
      case 1:
        MD1_Main();
    2988:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <MD1_Main>
    298c:	08 95       	ret
        break;
      case 2:
        MD2_Main();
    298e:	0e 94 b2 18 	call	0x3164	; 0x3164 <MD2_Main>
    2992:	08 95       	ret
        break;
      case 3:
        MD3_Main();
    2994:	0e 94 0e 19 	call	0x321c	; 0x321c <MD3_Main>
    2998:	08 95       	ret

0000299a <UI_InputCellToCurrentMode>:
  }
}

void UI_InputCellToCurrentMode(char thisCell)
{
  switch(UI_Current_Mode)
    299a:	90 91 b9 06 	lds	r25, 0x06B9
    299e:	92 30       	cpi	r25, 0x02	; 2
    29a0:	39 f0       	breq	.+14     	; 0x29b0 <UI_InputCellToCurrentMode+0x16>
    29a2:	93 30       	cpi	r25, 0x03	; 3
    29a4:	41 f0       	breq	.+16     	; 0x29b6 <UI_InputCellToCurrentMode+0x1c>
    29a6:	91 30       	cpi	r25, 0x01	; 1
    29a8:	41 f4       	brne	.+16     	; 0x29ba <UI_InputCellToCurrentMode+0x20>
  {
    case 1:
      MD1_InputCell(thisCell);
    29aa:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <MD1_InputCell>
    29ae:	08 95       	ret
      break;
    case 2:
      MD2_InputCell(thisCell);
    29b0:	0e 94 17 18 	call	0x302e	; 0x302e <MD2_InputCell>
    29b4:	08 95       	ret
      break;
    case 3:
      MD3_InputCell(thisCell);
    29b6:	0e 94 e5 18 	call	0x31ca	; 0x31ca <MD3_InputCell>
    29ba:	08 95       	ret

000029bc <UI_InputDotToCurrentMode>:
  }
}

void UI_InputDotToCurrentMode(char thisDot)
{
  switch(UI_Current_Mode)
    29bc:	90 91 b9 06 	lds	r25, 0x06B9
    29c0:	92 30       	cpi	r25, 0x02	; 2
    29c2:	39 f0       	breq	.+14     	; 0x29d2 <UI_InputDotToCurrentMode+0x16>
    29c4:	93 30       	cpi	r25, 0x03	; 3
    29c6:	41 f0       	breq	.+16     	; 0x29d8 <UI_InputDotToCurrentMode+0x1c>
    29c8:	91 30       	cpi	r25, 0x01	; 1
    29ca:	41 f4       	brne	.+16     	; 0x29dc <UI_InputDotToCurrentMode+0x20>
  {
    case 1:
      MD1_InputDot(thisDot);
    29cc:	0e 94 94 17 	call	0x2f28	; 0x2f28 <MD1_InputDot>
    29d0:	08 95       	ret
      break;
    case 2:
      MD2_InputDot(thisDot);
    29d2:	0e 94 0e 18 	call	0x301c	; 0x301c <MD2_InputDot>
    29d6:	08 95       	ret
      break;
    case 3:
      MD3_InputDot(thisDot);
    29d8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <MD3_InputDot>
    29dc:	08 95       	ret

000029de <UI_CallModeNoAnswer>:
 * @brief (?)
 * @return Void
 */
void UI_CallModeNoAnswer(void)
{
  switch(UI_Current_Mode)
    29de:	80 91 b9 06 	lds	r24, 0x06B9
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	39 f0       	breq	.+14     	; 0x29f4 <UI_CallModeNoAnswer+0x16>
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	41 f0       	breq	.+16     	; 0x29fa <UI_CallModeNoAnswer+0x1c>
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	41 f4       	brne	.+16     	; 0x29fe <UI_CallModeNoAnswer+0x20>
  {
    case 1:
      MD1_CallModeNoAnswer();
    29ee:	0e 94 93 17 	call	0x2f26	; 0x2f26 <MD1_CallModeNoAnswer>
    29f2:	08 95       	ret
      break;
    case 2:
      MD2_CallModeNoAnswer();
    29f4:	0e 94 0d 18 	call	0x301a	; 0x301a <MD2_CallModeNoAnswer>
    29f8:	08 95       	ret
      break;
    case 3:
      MD3_CallModeNoAnswer();
    29fa:	0e 94 db 18 	call	0x31b6	; 0x31b6 <MD3_CallModeNoAnswer>
    29fe:	08 95       	ret

00002a00 <UI_CallModeYesAnswer>:
 * @brief (?)
 * @return Void
 */
void UI_CallModeYesAnswer(void)
{
  switch(UI_Current_Mode)
    2a00:	80 91 b9 06 	lds	r24, 0x06B9
    2a04:	82 30       	cpi	r24, 0x02	; 2
    2a06:	39 f0       	breq	.+14     	; 0x2a16 <UI_CallModeYesAnswer+0x16>
    2a08:	83 30       	cpi	r24, 0x03	; 3
    2a0a:	41 f0       	breq	.+16     	; 0x2a1c <UI_CallModeYesAnswer+0x1c>
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	41 f4       	brne	.+16     	; 0x2a20 <UI_CallModeYesAnswer+0x20>
  {
    case 1:
      MD1_CallModeYesAnswer();
    2a10:	0e 94 92 17 	call	0x2f24	; 0x2f24 <MD1_CallModeYesAnswer>
    2a14:	08 95       	ret
      break;
    case 2:
      MD2_CallModeYesAnswer();
    2a16:	0e 94 0c 18 	call	0x3018	; 0x3018 <MD2_CallModeYesAnswer>
    2a1a:	08 95       	ret
      break;
    case 3:
      MD3_CallModeYesAnswer();
    2a1c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <MD3_CallModeYesAnswer>
    2a20:	08 95       	ret

00002a22 <UI_Play_Intro_Currentmode>:
 * @brief play the MP3 associated with the current mode
 * @return Void
 */
void UI_Play_Intro_Currentmode(void)
{
  switch(UI_Current_Mode)
    2a22:	80 91 b9 06 	lds	r24, 0x06B9
    2a26:	82 30       	cpi	r24, 0x02	; 2
    2a28:	39 f0       	breq	.+14     	; 0x2a38 <UI_Play_Intro_Currentmode+0x16>
    2a2a:	83 30       	cpi	r24, 0x03	; 3
    2a2c:	51 f0       	breq	.+20     	; 0x2a42 <UI_Play_Intro_Currentmode+0x20>
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	61 f4       	brne	.+24     	; 0x2a4a <UI_Play_Intro_Currentmode+0x28>
  {
    case 1:
      RequestToPlayMP3file("MD1.MP3");
    2a32:	8c eb       	ldi	r24, 0xBC	; 188
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <UI_Play_Intro_Currentmode+0x1a>
      break;
    case 2:
      RequestToPlayMP3file("MD2.MP3");
    2a38:	84 ec       	ldi	r24, 0xC4	; 196
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    2a40:	08 95       	ret
      break;
    case 3:
      RequestToPlayMP3file("MD3.MP3");
    2a42:	8c ec       	ldi	r24, 0xCC	; 204
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    2a4a:	08 95       	ret

00002a4c <UI_ControlKeyPressed>:
/**
 * @brief (?) 
 * @return Void
 */
void UI_ControlKeyPressed(void)
{
    2a4c:	1f 93       	push	r17
  switch(USART_UI_ReceivedPacket[5])
    2a4e:	10 91 c1 06 	lds	r17, 0x06C1
    2a52:	13 30       	cpi	r17, 0x03	; 3
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <UI_ControlKeyPressed+0xc>
    2a56:	4a c0       	rjmp	.+148    	; 0x2aec <UI_ControlKeyPressed+0xa0>
    2a58:	14 30       	cpi	r17, 0x04	; 4
    2a5a:	30 f4       	brcc	.+12     	; 0x2a68 <UI_ControlKeyPressed+0x1c>
    2a5c:	11 30       	cpi	r17, 0x01	; 1
    2a5e:	71 f0       	breq	.+28     	; 0x2a7c <UI_ControlKeyPressed+0x30>
    2a60:	12 30       	cpi	r17, 0x02	; 2
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <UI_ControlKeyPressed+0x1a>
    2a64:	ab c0       	rjmp	.+342    	; 0x2bbc <UI_ControlKeyPressed+0x170>
    2a66:	25 c0       	rjmp	.+74     	; 0x2ab2 <UI_ControlKeyPressed+0x66>
    2a68:	15 30       	cpi	r17, 0x05	; 5
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <UI_ControlKeyPressed+0x22>
    2a6c:	8e c0       	rjmp	.+284    	; 0x2b8a <UI_ControlKeyPressed+0x13e>
    2a6e:	15 30       	cpi	r17, 0x05	; 5
    2a70:	08 f4       	brcc	.+2      	; 0x2a74 <UI_ControlKeyPressed+0x28>
    2a72:	5a c0       	rjmp	.+180    	; 0x2b28 <UI_ControlKeyPressed+0xdc>
    2a74:	16 30       	cpi	r17, 0x06	; 6
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <UI_ControlKeyPressed+0x2e>
    2a78:	a1 c0       	rjmp	.+322    	; 0x2bbc <UI_ControlKeyPressed+0x170>
    2a7a:	94 c0       	rjmp	.+296    	; 0x2ba4 <UI_ControlKeyPressed+0x158>
  {
    case UI_CMD_NONE:
      break;
    case UI_CMD_ENT1: //Enter into a mode
      USART_transmitStringToPCFromFlash(PSTR("Enter 1 pressed"));
    2a7c:	8c e5       	ldi	r24, 0x5C	; 92
    2a7e:	93 e0       	ldi	r25, 0x03	; 3
    2a80:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;  
    2a84:	8d e0       	ldi	r24, 0x0D	; 13
    2a86:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2a8a:	8a e0       	ldi	r24, 0x0A	; 10
    2a8c:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      if(!UI_MODE_SELECTED) //Then this command is to select the mode
    2a90:	80 91 8f 04 	lds	r24, 0x048F
    2a94:	88 23       	and	r24, r24
    2a96:	51 f4       	brne	.+20     	; 0x2aac <UI_ControlKeyPressed+0x60>
      {
        if(UI_Selected_Mode>0)
    2a98:	80 91 b7 04 	lds	r24, 0x04B7
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <UI_ControlKeyPressed+0x56>
    2aa0:	8d c0       	rjmp	.+282    	; 0x2bbc <UI_ControlKeyPressed+0x170>
        {
          UI_MODE_SELECTED=true;
    2aa2:	10 93 8f 04 	sts	0x048F, r17
          UI_ResetTheCurrentMode();
    2aa6:	0e 94 a3 14 	call	0x2946	; 0x2946 <UI_ResetTheCurrentMode>
    2aaa:	88 c0       	rjmp	.+272    	; 0x2bbc <UI_ControlKeyPressed+0x170>
          //RequestToPlayMP3file("ERR1.MP3");
        }
      }
      else //Then this the "YES" command in the mode, so call the function in the mode
      {
        UI_CallModeYesAnswer();
    2aac:	0e 94 00 15 	call	0x2a00	; 0x2a00 <UI_CallModeYesAnswer>
    2ab0:	85 c0       	rjmp	.+266    	; 0x2bbc <UI_ControlKeyPressed+0x170>
      }
      break;
    case UI_CMD_ENT2: //Exit from a mode
      USART_transmitStringToPCFromFlash(PSTR("Enter 2 pressed"));
    2ab2:	8c e4       	ldi	r24, 0x4C	; 76
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2aba:	8d e0       	ldi	r24, 0x0D	; 13
    2abc:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2ac0:	8a e0       	ldi	r24, 0x0A	; 10
    2ac2:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      if(UI_MODE_SELECTED) //This might be an exit from mode command or "NO" command in the mode
    2ac6:	80 91 8f 04 	lds	r24, 0x048F
    2aca:	88 23       	and	r24, r24
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <UI_ControlKeyPressed+0x84>
    2ace:	76 c0       	rjmp	.+236    	; 0x2bbc <UI_ControlKeyPressed+0x170>
      {
        if(USART_UI_ReceivedPacket[6]==69) //If the next byte is 'E', this is exit command (when the user pressed E2 for more than 5 secs)
    2ad0:	80 91 c2 06 	lds	r24, 0x06C2
    2ad4:	85 34       	cpi	r24, 0x45	; 69
    2ad6:	39 f4       	brne	.+14     	; 0x2ae6 <UI_ControlKeyPressed+0x9a>
        {
          UI_MODE_SELECTED=false;
    2ad8:	10 92 8f 04 	sts	0x048F, r1
          RequestToPlayMP3file("MM.MP3");
    2adc:	84 ed       	ldi	r24, 0xD4	; 212
    2ade:	91 e0       	ldi	r25, 0x01	; 1
    2ae0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    2ae4:	6b c0       	rjmp	.+214    	; 0x2bbc <UI_ControlKeyPressed+0x170>
        }
        else //Then this a "NO" answer, call the mode function for this
        {
          UI_CallModeNoAnswer();
    2ae6:	0e 94 ef 14 	call	0x29de	; 0x29de <UI_CallModeNoAnswer>
    2aea:	68 c0       	rjmp	.+208    	; 0x2bbc <UI_ControlKeyPressed+0x170>
        }
      }
      //This has no effect when no mode is selected
      break;
    case UI_CMD_MFOR:
      USART_transmitStringToPCFromFlash(PSTR("Mode 1 pressed"));
    2aec:	8d e3       	ldi	r24, 0x3D	; 61
    2aee:	93 e0       	ldi	r25, 0x03	; 3
    2af0:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2af4:	8d e0       	ldi	r24, 0x0D	; 13
    2af6:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2afa:	8a e0       	ldi	r24, 0x0A	; 10
    2afc:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      if(!UI_MODE_SELECTED)
    2b00:	80 91 8f 04 	lds	r24, 0x048F
    2b04:	88 23       	and	r24, r24
    2b06:	09 f0       	breq	.+2      	; 0x2b0a <UI_ControlKeyPressed+0xbe>
    2b08:	59 c0       	rjmp	.+178    	; 0x2bbc <UI_ControlKeyPressed+0x170>
      {
        UI_Selected_Mode++;
    2b0a:	80 91 b7 04 	lds	r24, 0x04B7
    2b0e:	8f 5f       	subi	r24, 0xFF	; 255
    2b10:	80 93 b7 04 	sts	0x04B7, r24
        if(UI_Selected_Mode>Number_of_modes)
    2b14:	90 91 b7 04 	lds	r25, 0x04B7
    2b18:	80 91 b2 04 	lds	r24, 0x04B2
    2b1c:	89 17       	cp	r24, r25
    2b1e:	38 f5       	brcc	.+78     	; 0x2b6e <UI_ControlKeyPressed+0x122>
        {
          UI_Selected_Mode--;
    2b20:	80 91 b7 04 	lds	r24, 0x04B7
    2b24:	81 50       	subi	r24, 0x01	; 1
    2b26:	18 c0       	rjmp	.+48     	; 0x2b58 <UI_ControlKeyPressed+0x10c>
          UI_Play_Intro_Currentmode();
        }
      }
      break;
    case UI_CMD_MREV:
      USART_transmitStringToPCFromFlash(PSTR("Mode 2 pressed"));
    2b28:	8e e2       	ldi	r24, 0x2E	; 46
    2b2a:	93 e0       	ldi	r25, 0x03	; 3
    2b2c:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2b30:	8d e0       	ldi	r24, 0x0D	; 13
    2b32:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2b36:	8a e0       	ldi	r24, 0x0A	; 10
    2b38:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      if(!UI_MODE_SELECTED)
    2b3c:	80 91 8f 04 	lds	r24, 0x048F
    2b40:	88 23       	and	r24, r24
    2b42:	e1 f5       	brne	.+120    	; 0x2bbc <UI_ControlKeyPressed+0x170>
      {
        UI_Selected_Mode--;
    2b44:	80 91 b7 04 	lds	r24, 0x04B7
    2b48:	81 50       	subi	r24, 0x01	; 1
    2b4a:	80 93 b7 04 	sts	0x04B7, r24
        if(UI_Selected_Mode<1)
    2b4e:	80 91 b7 04 	lds	r24, 0x04B7
    2b52:	88 23       	and	r24, r24
    2b54:	61 f4       	brne	.+24     	; 0x2b6e <UI_ControlKeyPressed+0x122>
        {
          UI_Selected_Mode=1;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	80 93 b7 04 	sts	0x04B7, r24
          UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2b5c:	e0 91 b7 04 	lds	r30, 0x04B7
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	ed 55       	subi	r30, 0x5D	; 93
    2b64:	fb 4f       	sbci	r31, 0xFB	; 251
    2b66:	80 81       	ld	r24, Z
    2b68:	80 93 b9 06 	sts	0x06B9, r24
    2b6c:	27 c0       	rjmp	.+78     	; 0x2bbc <UI_ControlKeyPressed+0x170>
        }
        else
        {
          UI_Current_Mode=UI_Modes[UI_Selected_Mode-1];
    2b6e:	e0 91 b7 04 	lds	r30, 0x04B7
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	ed 55       	subi	r30, 0x5D	; 93
    2b76:	fb 4f       	sbci	r31, 0xFB	; 251
    2b78:	80 81       	ld	r24, Z
    2b7a:	80 93 b9 06 	sts	0x06B9, r24
          VS1053_SKIP_PLAY=true;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	80 93 e3 06 	sts	0x06E3, r24
          UI_Play_Intro_Currentmode();
    2b84:	0e 94 11 15 	call	0x2a22	; 0x2a22 <UI_Play_Intro_Currentmode>
    2b88:	19 c0       	rjmp	.+50     	; 0x2bbc <UI_ControlKeyPressed+0x170>
        }  
      }    
      break;
    case UI_CMD_VOLU:
      USART_transmitStringToPCFromFlash(PSTR("Vol UP pressed"));
    2b8a:	8f e1       	ldi	r24, 0x1F	; 31
    2b8c:	93 e0       	ldi	r25, 0x03	; 3
    2b8e:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2b92:	8d e0       	ldi	r24, 0x0D	; 13
    2b94:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2b98:	8a e0       	ldi	r24, 0x0A	; 10
    2b9a:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      VS1053_IncreaseVol();
    2b9e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <VS1053_IncreaseVol>
    2ba2:	0c c0       	rjmp	.+24     	; 0x2bbc <UI_ControlKeyPressed+0x170>
      break;
    case UI_CMD_VOLD:
      USART_transmitStringToPCFromFlash(PSTR("Vol DOWN pressed"));
    2ba4:	8e e0       	ldi	r24, 0x0E	; 14
    2ba6:	93 e0       	ldi	r25, 0x03	; 3
    2ba8:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;
    2bac:	8d e0       	ldi	r24, 0x0D	; 13
    2bae:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2bb2:	8a e0       	ldi	r24, 0x0A	; 10
    2bb4:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
      VS1053_DecreaseVol();
    2bb8:	0e 94 af 04 	call	0x95e	; 0x95e <VS1053_DecreaseVol>
      break;
    default:
      break;
  }
}
    2bbc:	1f 91       	pop	r17
    2bbe:	08 95       	ret

00002bc0 <UI_parse_message>:
 * msgtypes: 
 * @param  IsPlaying -  bool    determines whether or not an MP3 Files is playing
 * @return  bool - returns true if succesfully parsed, understood, and used message
 */
bool UI_parse_message(bool IsPlaying)
{
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	1f 93       	push	r17
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	2a 97       	sbiw	r28, 0x0a	; 10
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	e8 2e       	mov	r14, r24
  //First things first, check the CRC

  unsigned char message_len = USART_UI_ReceivedPacket[2];
    2bde:	f0 90 be 06 	lds	r15, 0x06BE

  unsigned char ADCmsg[10];
  //unsigned char message_payload[20];
  //unsigned char i=0;

  uint16_t chksum=UI_calculate_CRC(&USART_UI_ReceivedPacket);
    2be2:	8c eb       	ldi	r24, 0xBC	; 188
    2be4:	96 e0       	ldi	r25, 0x06	; 6
    2be6:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <UI_calculate_CRC>
    2bea:	8c 01       	movw	r16, r24
  
  // TODO test this
  DPRINTF("[UI_parse_message] Entering function");
    2bec:	87 ee       	ldi	r24, 0xE7	; 231
    2bee:	96 e0       	ldi	r25, 0x06	; 6
    2bf0:	6b ed       	ldi	r22, 0xDB	; 219
    2bf2:	71 e0       	ldi	r23, 0x01	; 1
    2bf4:	0e 94 14 1a 	call	0x3428	; 0x3428 <strcpy>
    2bf8:	87 ee       	ldi	r24, 0xE7	; 231
    2bfa:	96 e0       	ldi	r25, 0x06	; 6
    2bfc:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  
  if ( chksum == (USART_UI_ReceivedPacket[message_len-2] << 8 | USART_UI_ReceivedPacket[message_len-1]))
    2c00:	af 2d       	mov	r26, r15
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	fd 01       	movw	r30, r26
    2c06:	e6 54       	subi	r30, 0x46	; 70
    2c08:	f9 4f       	sbci	r31, 0xF9	; 249
    2c0a:	40 81       	ld	r20, Z
    2c0c:	a5 54       	subi	r26, 0x45	; 69
    2c0e:	b9 4f       	sbci	r27, 0xF9	; 249
    2c10:	2c 91       	ld	r18, X
    2c12:	94 2f       	mov	r25, r20
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	82 2b       	or	r24, r18
    2c1a:	93 2b       	or	r25, r19
    2c1c:	08 17       	cp	r16, r24
    2c1e:	19 07       	cpc	r17, r25
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <UI_parse_message+0x64>
    2c22:	74 c0       	rjmp	.+232    	; 0x2d0c <UI_parse_message+0x14c>
  {
    //If correct, store the message elements
    message_number=USART_UI_ReceivedPacket[3];
    2c24:	80 91 bf 06 	lds	r24, 0x06BF
    message_type=USART_UI_ReceivedPacket[4];
    2c28:	80 91 c0 06 	lds	r24, 0x06C0

    //process the message

    if(IsPlaying) //If a MP3 file is being played, only the commands are processed
    2c2c:	ee 20       	and	r14, r14
    2c2e:	41 f0       	breq	.+16     	; 0x2c40 <UI_parse_message+0x80>
    {
      if(message_type==68)
    2c30:	84 34       	cpi	r24, 0x44	; 68
    2c32:	31 f4       	brne	.+12     	; 0x2c40 <UI_parse_message+0x80>
      {
        UI_ControlKeyPressed();
    2c34:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UI_ControlKeyPressed>
        USART_UI_Message_ready=true;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	80 93 b8 04 	sts	0x04B8, r24
    2c3e:	6d c0       	rjmp	.+218    	; 0x2d1a <UI_parse_message+0x15a>
        return true;
      }
    }
    
    switch(message_type)
    2c40:	82 34       	cpi	r24, 0x42	; 66
    2c42:	89 f0       	breq	.+34     	; 0x2c66 <UI_parse_message+0xa6>
    2c44:	83 34       	cpi	r24, 0x43	; 67
    2c46:	20 f4       	brcc	.+8      	; 0x2c50 <UI_parse_message+0x90>
    2c48:	81 34       	cpi	r24, 0x41	; 65
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <UI_parse_message+0x8e>
    2c4c:	63 c0       	rjmp	.+198    	; 0x2d14 <UI_parse_message+0x154>
    2c4e:	06 c0       	rjmp	.+12     	; 0x2c5c <UI_parse_message+0x9c>
    2c50:	84 34       	cpi	r24, 0x44	; 68
    2c52:	71 f0       	breq	.+28     	; 0x2c70 <UI_parse_message+0xb0>
    2c54:	85 34       	cpi	r24, 0x45	; 69
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <UI_parse_message+0x9a>
    2c58:	5d c0       	rjmp	.+186    	; 0x2d14 <UI_parse_message+0x154>
    2c5a:	0d c0       	rjmp	.+26     	; 0x2c76 <UI_parse_message+0xb6>
    {
      case 65:   //Braille dot
        //Only one character is being send to the current mode
        UI_InputDotToCurrentMode(USART_UI_ReceivedPacket[5]);
    2c5c:	80 91 c1 06 	lds	r24, 0x06C1
    2c60:	0e 94 de 14 	call	0x29bc	; 0x29bc <UI_InputDotToCurrentMode>
    2c64:	57 c0       	rjmp	.+174    	; 0x2d14 <UI_parse_message+0x154>
      case 66:   //Braille cell
        /*
        Only one character is being send to the current mode. The cell number value is currently not used
        , if needed this information is available on USART_UI_ReceivedPacket[6]
        */
        UI_InputCellToCurrentMode(USART_UI_ReceivedPacket[5]);
    2c66:	80 91 c1 06 	lds	r24, 0x06C1
    2c6a:	0e 94 cd 14 	call	0x299a	; 0x299a <UI_InputCellToCurrentMode>
    2c6e:	52 c0       	rjmp	.+164    	; 0x2d14 <UI_parse_message+0x154>
        break;
      case 67:  //Error message
        //When an error occured in the user input a message will be sent here
        break;
      case 68:  //User Command
        UI_ControlKeyPressed();
    2c70:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UI_ControlKeyPressed>
    2c74:	4f c0       	rjmp	.+158    	; 0x2d14 <UI_parse_message+0x154>
        break;
      case 69:  //Acknowledgement
        ADCmsg[0]=USART_UI_ReceivedPacket[5];
    2c76:	80 91 c1 06 	lds	r24, 0x06C1
    2c7a:	89 83       	std	Y+1, r24	; 0x01
        ADCmsg[1]=USART_UI_ReceivedPacket[6];
    2c7c:	80 91 c2 06 	lds	r24, 0x06C2
    2c80:	8a 83       	std	Y+2, r24	; 0x02
        ADCmsg[2]=USART_UI_ReceivedPacket[7];
    2c82:	80 91 c3 06 	lds	r24, 0x06C3
    2c86:	8b 83       	std	Y+3, r24	; 0x03
        USART_transmitStringToPCFromFlash(PSTR("Analog Input channel,MSB,LSB :"));
    2c88:	8c e6       	ldi	r24, 0x6C	; 108
    2c8a:	93 e0       	ldi	r25, 0x03	; 3
    2c8c:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
        sprintf(ADCmsg, "%d,%d,%d", USART_UI_ReceivedPacket[5],USART_UI_ReceivedPacket[6],USART_UI_ReceivedPacket[7]); 
    2c90:	20 91 c1 06 	lds	r18, 0x06C1
    2c94:	30 91 c2 06 	lds	r19, 0x06C2
    2c98:	40 91 c3 06 	lds	r20, 0x06C3
    2c9c:	8d b7       	in	r24, 0x3d	; 61
    2c9e:	9e b7       	in	r25, 0x3e	; 62
    2ca0:	0a 97       	sbiw	r24, 0x0a	; 10
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	9e bf       	out	0x3e, r25	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	8d bf       	out	0x3d, r24	; 61
    2cac:	ed b7       	in	r30, 0x3d	; 61
    2cae:	fe b7       	in	r31, 0x3e	; 62
    2cb0:	31 96       	adiw	r30, 0x01	; 1
    2cb2:	8e 01       	movw	r16, r28
    2cb4:	0f 5f       	subi	r16, 0xFF	; 255
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	ad b7       	in	r26, 0x3d	; 61
    2cba:	be b7       	in	r27, 0x3e	; 62
    2cbc:	12 96       	adiw	r26, 0x02	; 2
    2cbe:	1c 93       	st	X, r17
    2cc0:	0e 93       	st	-X, r16
    2cc2:	11 97       	sbiw	r26, 0x01	; 1
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	92 e0       	ldi	r25, 0x02	; 2
    2cc8:	93 83       	std	Z+3, r25	; 0x03
    2cca:	82 83       	std	Z+2, r24	; 0x02
    2ccc:	24 83       	std	Z+4, r18	; 0x04
    2cce:	15 82       	std	Z+5, r1	; 0x05
    2cd0:	36 83       	std	Z+6, r19	; 0x06
    2cd2:	17 82       	std	Z+7, r1	; 0x07
    2cd4:	40 87       	std	Z+8, r20	; 0x08
    2cd6:	11 86       	std	Z+9, r1	; 0x09
    2cd8:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
        USART_transmitStringToPC(&ADCmsg);
    2cdc:	8d b7       	in	r24, 0x3d	; 61
    2cde:	9e b7       	in	r25, 0x3e	; 62
    2ce0:	0a 96       	adiw	r24, 0x0a	; 10
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	9e bf       	out	0x3e, r25	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	8d bf       	out	0x3d, r24	; 61
    2cec:	c8 01       	movw	r24, r16
    2cee:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
        TX_NEWLINE_PC;  
    2cf2:	8d e0       	ldi	r24, 0x0D	; 13
    2cf4:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2cf8:	8a e0       	ldi	r24, 0x0A	; 10
    2cfa:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
        TX_NEWLINE_PC;        
    2cfe:	8d e0       	ldi	r24, 0x0D	; 13
    2d00:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2d04:	8a e0       	ldi	r24, 0x0A	; 10
    2d06:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <UI_parse_message+0x154>
    }
    //In the end: send the acknowledgement to the sender (with the message number, of course !!!)
  }
  else
  {
    USART_UI_Message_ready=false;
    2d0c:	10 92 b8 04 	sts	0x04B8, r1
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <UI_parse_message+0x15a>
    return false;
  }
  USART_UI_Message_ready=false;
    2d14:	10 92 b8 04 	sts	0x04B8, r1
    2d18:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
    2d1a:	2a 96       	adiw	r28, 0x0a	; 10
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	08 95       	ret

00002d34 <UI_CheckModes>:
 *         what they are
 * @return bool  - return true on succesful completion of transmission, false on 
 *         failure
 */
bool UI_CheckModes(void)
{
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	c9 56       	subi	r28, 0x69	; 105
    2d4c:	d0 40       	sbci	r29, 0x00	; 0
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
  int i=0;
  int iMoN;
  bool bBoNFound;
  const char* ModesFile="MODES.DAT";

  Number_of_modes=0;
    2d58:	10 92 b2 04 	sts	0x04B2, r1
    2d5c:	56 e0       	ldi	r21, 0x06	; 6
    2d5e:	e5 2e       	mov	r14, r21
    2d60:	f1 2c       	mov	r15, r1
    2d62:	ec 0e       	add	r14, r28
    2d64:	fd 1e       	adc	r15, r29
    2d66:	f7 01       	movw	r30, r14
  for(i=0;i<100;i++)
    2d68:	c7 01       	movw	r24, r14
    2d6a:	1e 2d       	mov	r17, r14
    2d6c:	09 2f       	mov	r16, r25
    2d6e:	ce 01       	movw	r24, r28
    2d70:	86 59       	subi	r24, 0x96	; 150
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    FileContent[i]=0;
    2d74:	11 92       	st	Z+, r1
  int iMoN;
  bool bBoNFound;
  const char* ModesFile="MODES.DAT";

  Number_of_modes=0;
  for(i=0;i<100;i++)
    2d76:	e8 17       	cp	r30, r24
    2d78:	f9 07       	cpc	r31, r25
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <UI_CheckModes+0x40>
    FileContent[i]=0;
  if(readAndRetreiveFileContents (ModesFile,FileContent)>0)
    2d7c:	89 e0       	ldi	r24, 0x09	; 9
    2d7e:	92 e0       	ldi	r25, 0x02	; 2
    2d80:	61 2f       	mov	r22, r17
    2d82:	70 2f       	mov	r23, r16
    2d84:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <readAndRetreiveFileContents>
    2d88:	88 23       	and	r24, r24
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <UI_CheckModes+0x5a>
    2d8c:	b4 c0       	rjmp	.+360    	; 0x2ef6 <UI_CheckModes+0x1c2>
  {
    return false;
  }
  USART_transmitStringToPC(&FileContent);
    2d8e:	81 2f       	mov	r24, r17
    2d90:	90 2f       	mov	r25, r16
    2d92:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    2d96:	8d e0       	ldi	r24, 0x0D	; 13
    2d98:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2d9c:	8a e0       	ldi	r24, 0x0A	; 10
    2d9e:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    {
      if(iMoN==3)
      {
        return false;
      }
      ModeID[iMoN++]=FileContent[i];
    2da4:	43 e0       	ldi	r20, 0x03	; 3
    2da6:	a4 2e       	mov	r10, r20
    2da8:	b1 2c       	mov	r11, r1
    2daa:	ac 0e       	add	r10, r28
    2dac:	bd 1e       	adc	r11, r29
    2dae:	2e c0       	rjmp	.+92     	; 0x2e0c <UI_CheckModes+0xd8>
  TX_NEWLINE_PC;
  bBoNFound=false;
  i=0;
  while(FileContent[i]!='$')
  {
    if(FileContent[i]=='>')
    2db0:	8e 33       	cpi	r24, 0x3E	; 62
    2db2:	89 f4       	brne	.+34     	; 0x2dd6 <UI_CheckModes+0xa2>
    {
      UI_Modes[Number_of_modes]=atoi(ModeID);
    2db4:	80 91 b2 04 	lds	r24, 0x04B2
    2db8:	08 2f       	mov	r16, r24
    2dba:	10 e0       	ldi	r17, 0x00	; 0
    2dbc:	c5 01       	movw	r24, r10
    2dbe:	0e 94 f6 19 	call	0x33ec	; 0x33ec <atoi>
    2dc2:	0c 55       	subi	r16, 0x5C	; 92
    2dc4:	1b 4f       	sbci	r17, 0xFB	; 251
    2dc6:	d8 01       	movw	r26, r16
    2dc8:	8c 93       	st	X, r24
      Number_of_modes++;
    2dca:	80 91 b2 04 	lds	r24, 0x04B2
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	80 93 b2 04 	sts	0x04B2, r24
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <UI_CheckModes+0xa6>
      bBoNFound=false;
    }
    if(!bBoNFound)
    2dd6:	99 23       	and	r25, r25
    2dd8:	39 f4       	brne	.+14     	; 0x2de8 <UI_CheckModes+0xb4>
    {
      ModeID[0]=0;
    2dda:	1b 82       	std	Y+3, r1	; 0x03
      ModeID[1]=0;
    2ddc:	1c 82       	std	Y+4, r1	; 0x04
      ModeID[2]=0;
    2dde:	1d 82       	std	Y+5, r1	; 0x05
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0a c0       	rjmp	.+20     	; 0x2dfc <UI_CheckModes+0xc8>
      iMoN=0;
    }
    else
    {
      if(iMoN==3)
    2de8:	23 30       	cpi	r18, 0x03	; 3
    2dea:	31 05       	cpc	r19, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <UI_CheckModes+0xbc>
    2dee:	83 c0       	rjmp	.+262    	; 0x2ef6 <UI_CheckModes+0x1c2>
      {
        return false;
      }
      ModeID[iMoN++]=FileContent[i];
    2df0:	f5 01       	movw	r30, r10
    2df2:	e2 0f       	add	r30, r18
    2df4:	f3 1f       	adc	r31, r19
    2df6:	80 83       	st	Z, r24
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255

    }
    if(FileContent[i]=='<')
    2dfc:	f7 01       	movw	r30, r14
    2dfe:	80 81       	ld	r24, Z
    2e00:	8c 33       	cpi	r24, 0x3C	; 60
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <UI_CheckModes+0xd2>
    2e04:	91 e0       	ldi	r25, 0x01	; 1
    2e06:	08 94       	sec
    2e08:	e1 1c       	adc	r14, r1
    2e0a:	f1 1c       	adc	r15, r1
  }
  USART_transmitStringToPC(&FileContent);
  TX_NEWLINE_PC;
  bBoNFound=false;
  i=0;
  while(FileContent[i]!='$')
    2e0c:	d7 01       	movw	r26, r14
    2e0e:	8c 91       	ld	r24, X
    2e10:	84 32       	cpi	r24, 0x24	; 36
    2e12:	71 f6       	brne	.-100    	; 0x2db0 <UI_CheckModes+0x7c>
    }


    i++;    
  }
  USART_transmitStringToPCFromFlash(PSTR("Number of modes selected: "));
    2e14:	8f e9       	ldi	r24, 0x9F	; 159
    2e16:	93 e0       	ldi	r25, 0x03	; 3
    2e18:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
  PCPrintContent[0]=0;
    2e1c:	19 82       	std	Y+1, r1	; 0x01
  PCPrintContent[1]=0;
    2e1e:	1a 82       	std	Y+2, r1	; 0x02
  sprintf(PCPrintContent, "%d", Number_of_modes);
    2e20:	20 91 b2 04 	lds	r18, 0x04B2
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <UI_CheckModes+0xf2>
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <UI_CheckModes+0xf4>
    2e28:	00 d0       	rcall	.+0      	; 0x2e2a <UI_CheckModes+0xf6>
    2e2a:	ed b7       	in	r30, 0x3d	; 61
    2e2c:	fe b7       	in	r31, 0x3e	; 62
    2e2e:	31 96       	adiw	r30, 0x01	; 1
    2e30:	8e 01       	movw	r16, r28
    2e32:	0f 5f       	subi	r16, 0xFF	; 255
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	ad b7       	in	r26, 0x3d	; 61
    2e38:	be b7       	in	r27, 0x3e	; 62
    2e3a:	12 96       	adiw	r26, 0x02	; 2
    2e3c:	1c 93       	st	X, r17
    2e3e:	0e 93       	st	-X, r16
    2e40:	11 97       	sbiw	r26, 0x01	; 1
    2e42:	83 e1       	ldi	r24, 0x13	; 19
    2e44:	92 e0       	ldi	r25, 0x02	; 2
    2e46:	93 83       	std	Z+3, r25	; 0x03
    2e48:	82 83       	std	Z+2, r24	; 0x02
    2e4a:	24 83       	std	Z+4, r18	; 0x04
    2e4c:	15 82       	std	Z+5, r1	; 0x05
    2e4e:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
  USART_transmitStringToPC(&PCPrintContent);
    2e52:	ed b7       	in	r30, 0x3d	; 61
    2e54:	fe b7       	in	r31, 0x3e	; 62
    2e56:	36 96       	adiw	r30, 0x06	; 6
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	fe bf       	out	0x3e, r31	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	ed bf       	out	0x3d, r30	; 61
    2e62:	c8 01       	movw	r24, r16
    2e64:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  TX_NEWLINE_PC;
    2e68:	8d e0       	ldi	r24, 0x0D	; 13
    2e6a:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2e6e:	8a e0       	ldi	r24, 0x0A	; 10
    2e70:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
  USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
    2e74:	8b e8       	ldi	r24, 0x8B	; 139
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    2e7c:	ee 24       	eor	r14, r14
    2e7e:	ff 24       	eor	r15, r15
  for(i=0;i<Number_of_modes;i++)
  {
    sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    2e80:	d0 2e       	mov	r13, r16
    2e82:	01 2f       	mov	r16, r17
    2e84:	26 e1       	ldi	r18, 0x16	; 22
    2e86:	a2 2e       	mov	r10, r18
    2e88:	22 e0       	ldi	r18, 0x02	; 2
    2e8a:	b2 2e       	mov	r11, r18
    2e8c:	26 c0       	rjmp	.+76     	; 0x2eda <UI_CheckModes+0x1a6>
    2e8e:	f7 01       	movw	r30, r14
    2e90:	ec 55       	subi	r30, 0x5C	; 92
    2e92:	fb 4f       	sbci	r31, 0xFB	; 251
    2e94:	80 81       	ld	r24, Z
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <UI_CheckModes+0x164>
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <UI_CheckModes+0x166>
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <UI_CheckModes+0x168>
    2e9c:	ed b7       	in	r30, 0x3d	; 61
    2e9e:	fe b7       	in	r31, 0x3e	; 62
    2ea0:	31 96       	adiw	r30, 0x01	; 1
    2ea2:	ad b7       	in	r26, 0x3d	; 61
    2ea4:	be b7       	in	r27, 0x3e	; 62
    2ea6:	11 96       	adiw	r26, 0x01	; 1
    2ea8:	dc 92       	st	X, r13
    2eaa:	11 97       	sbiw	r26, 0x01	; 1
    2eac:	12 96       	adiw	r26, 0x02	; 2
    2eae:	0c 93       	st	X, r16
    2eb0:	b3 82       	std	Z+3, r11	; 0x03
    2eb2:	a2 82       	std	Z+2, r10	; 0x02
    2eb4:	84 83       	std	Z+4, r24	; 0x04
    2eb6:	15 82       	std	Z+5, r1	; 0x05
    2eb8:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
    USART_transmitStringToPC(&PCPrintContent);
    2ebc:	ed b7       	in	r30, 0x3d	; 61
    2ebe:	fe b7       	in	r31, 0x3e	; 62
    2ec0:	36 96       	adiw	r30, 0x06	; 6
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	fe bf       	out	0x3e, r31	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	ed bf       	out	0x3d, r30	; 61
    2ecc:	8d 2d       	mov	r24, r13
    2ece:	90 2f       	mov	r25, r16
    2ed0:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
  PCPrintContent[1]=0;
  sprintf(PCPrintContent, "%d", Number_of_modes);
  USART_transmitStringToPC(&PCPrintContent);
  TX_NEWLINE_PC;
  USART_transmitStringToPCFromFlash(PSTR("And the modes are; "));
  for(i=0;i<Number_of_modes;i++)
    2ed4:	08 94       	sec
    2ed6:	e1 1c       	adc	r14, r1
    2ed8:	f1 1c       	adc	r15, r1
    2eda:	80 91 b2 04 	lds	r24, 0x04B2
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	e8 16       	cp	r14, r24
    2ee2:	f9 06       	cpc	r15, r25
    2ee4:	a4 f2       	brlt	.-88     	; 0x2e8e <UI_CheckModes+0x15a>
  {
    sprintf(PCPrintContent, "%d, ", UI_Modes[i]);
    USART_transmitStringToPC(&PCPrintContent);
  }  
  TX_NEWLINE_PC;
    2ee6:	8d e0       	ldi	r24, 0x0D	; 13
    2ee8:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2eec:	8a e0       	ldi	r24, 0x0A	; 10
    2eee:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <UI_CheckModes+0x1c4>
  return true; 
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
}
    2ef8:	c7 59       	subi	r28, 0x97	; 151
    2efa:	df 4f       	sbci	r29, 0xFF	; 255
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	ff 90       	pop	r15
    2f10:	ef 90       	pop	r14
    2f12:	df 90       	pop	r13
    2f14:	bf 90       	pop	r11
    2f16:	af 90       	pop	r10
    2f18:	08 95       	ret

00002f1a <MD1_Reset>:
 * Should be useful for error handling
 * @return Void
 */
void MD1_Reset(void)
{
  Current_State = STATE_INITIAL;
    2f1a:	10 92 02 08 	sts	0x0802, r1
    2f1e:	10 92 01 08 	sts	0x0801, r1
}
    2f22:	08 95       	ret

00002f24 <MD1_CallModeYesAnswer>:
}

void MD1_CallModeYesAnswer(void)
{

}
    2f24:	08 95       	ret

00002f26 <MD1_CallModeNoAnswer>:

void MD1_CallModeNoAnswer(void)
{

}
    2f26:	08 95       	ret

00002f28 <MD1_InputDot>:
 * @param thisDot the dot being input
 * @return Void
 */
void MD1_InputDot(char thisDot)
{
  Last_Dot=thisDot;
    2f28:	80 93 00 08 	sts	0x0800, r24
  Current_State = STATE_PROC_INPUT;
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	90 93 02 08 	sts	0x0802, r25
    2f34:	80 93 01 08 	sts	0x0801, r24
}
    2f38:	08 95       	ret

00002f3a <MD1_InputCell>:

void MD1_InputCell(char thisCell)
{

}
    2f3a:	08 95       	ret

00002f3c <PlayRequestedDot>:
 * @return Void
 */
void PlayRequestedDot(void)
{
  // TODO default case?
  switch(Last_Dot)
    2f3c:	80 91 00 08 	lds	r24, 0x0800
    2f40:	83 33       	cpi	r24, 0x33	; 51
    2f42:	a1 f0       	breq	.+40     	; 0x2f6c <PlayRequestedDot+0x30>
    2f44:	84 33       	cpi	r24, 0x34	; 52
    2f46:	28 f4       	brcc	.+10     	; 0x2f52 <PlayRequestedDot+0x16>
    2f48:	81 33       	cpi	r24, 0x31	; 49
    2f4a:	51 f0       	breq	.+20     	; 0x2f60 <PlayRequestedDot+0x24>
    2f4c:	82 33       	cpi	r24, 0x32	; 50
    2f4e:	e9 f4       	brne	.+58     	; 0x2f8a <PlayRequestedDot+0x4e>
    2f50:	0a c0       	rjmp	.+20     	; 0x2f66 <PlayRequestedDot+0x2a>
    2f52:	85 33       	cpi	r24, 0x35	; 53
    2f54:	89 f0       	breq	.+34     	; 0x2f78 <PlayRequestedDot+0x3c>
    2f56:	85 33       	cpi	r24, 0x35	; 53
    2f58:	60 f0       	brcs	.+24     	; 0x2f72 <PlayRequestedDot+0x36>
    2f5a:	86 33       	cpi	r24, 0x36	; 54
    2f5c:	b1 f4       	brne	.+44     	; 0x2f8a <PlayRequestedDot+0x4e>
    2f5e:	11 c0       	rjmp	.+34     	; 0x2f82 <PlayRequestedDot+0x46>
  {
    case '1':
      RequestToPlayMP3file("MD1_1.MP3");
    2f60:	8b e1       	ldi	r24, 0x1B	; 27
    2f62:	92 e0       	ldi	r25, 0x02	; 2
    2f64:	0b c0       	rjmp	.+22     	; 0x2f7c <PlayRequestedDot+0x40>
      break;
    case '2':
      RequestToPlayMP3file("MD1_2.MP3");
    2f66:	85 e2       	ldi	r24, 0x25	; 37
    2f68:	92 e0       	ldi	r25, 0x02	; 2
    2f6a:	08 c0       	rjmp	.+16     	; 0x2f7c <PlayRequestedDot+0x40>
      break;
    case '3':
      RequestToPlayMP3file("MD1_3.MP3");
    2f6c:	8f e2       	ldi	r24, 0x2F	; 47
    2f6e:	92 e0       	ldi	r25, 0x02	; 2
    2f70:	05 c0       	rjmp	.+10     	; 0x2f7c <PlayRequestedDot+0x40>
      break;
    case '4':
      RequestToPlayMP3file("MD1_4.MP3");
    2f72:	89 e3       	ldi	r24, 0x39	; 57
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <PlayRequestedDot+0x40>
      break;
    case '5':
      RequestToPlayMP3file("MD1_5.MP3");
    2f78:	83 e4       	ldi	r24, 0x43	; 67
    2f7a:	92 e0       	ldi	r25, 0x02	; 2
    2f7c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    2f80:	08 95       	ret
      break;
    case '6':
      RequestToPlayMP3file("MD1_6.MP3");
    2f82:	8d e4       	ldi	r24, 0x4D	; 77
    2f84:	92 e0       	ldi	r25, 0x02	; 2
    2f86:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    2f8a:	08 95       	ret

00002f8c <MD1_Main>:
 * @brief main code for Mode 1
 * @return Void
 */
void MD1_Main(void)
{
  switch(Current_State)
    2f8c:	80 91 01 08 	lds	r24, 0x0801
    2f90:	90 91 02 08 	lds	r25, 0x0802
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	91 05       	cpc	r25, r1
    2f98:	d1 f0       	breq	.+52     	; 0x2fce <MD1_Main+0x42>
    2f9a:	82 30       	cpi	r24, 0x02	; 2
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	11 f1       	breq	.+68     	; 0x2fe4 <MD1_Main+0x58>
    2fa0:	89 2b       	or	r24, r25
    2fa2:	91 f5       	brne	.+100    	; 0x3008 <MD1_Main+0x7c>
  {
    case STATE_INITIAL:
      DPRINTF("[MD1] Entering MD1\n");
    2fa4:	87 ee       	ldi	r24, 0xE7	; 231
    2fa6:	96 e0       	ldi	r25, 0x06	; 6
    2fa8:	67 e5       	ldi	r22, 0x57	; 87
    2faa:	72 e0       	ldi	r23, 0x02	; 2
    2fac:	0e 94 14 1a 	call	0x3428	; 0x3428 <strcpy>
    2fb0:	87 ee       	ldi	r24, 0xE7	; 231
    2fb2:	96 e0       	ldi	r25, 0x06	; 6
    2fb4:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
      // Play the introductory message for Mode 1
      RequestToPlayMP3file("MD1INT.MP3");
    2fb8:	8b e6       	ldi	r24, 0x6B	; 107
    2fba:	92 e0       	ldi	r25, 0x02	; 2
    2fbc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
      Current_State = STATE_WAIT_INPUT;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	90 93 02 08 	sts	0x0802, r25
    2fc8:	80 93 01 08 	sts	0x0801, r24
    2fcc:	08 95       	ret
      break;
    case STATE_WAIT_INPUT:
      DPRINTF("[MD1] State 1\n");
    2fce:	87 ee       	ldi	r24, 0xE7	; 231
    2fd0:	96 e0       	ldi	r25, 0x06	; 6
    2fd2:	66 e7       	ldi	r22, 0x76	; 118
    2fd4:	72 e0       	ldi	r23, 0x02	; 2
    2fd6:	0e 94 14 1a 	call	0x3428	; 0x3428 <strcpy>
    2fda:	87 ee       	ldi	r24, 0xE7	; 231
    2fdc:	96 e0       	ldi	r25, 0x06	; 6
    2fde:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
    2fe2:	08 95       	ret
      break;
    case STATE_PROC_INPUT:
      DPRINTF("[MD1] State 2 >> 1: playing dot name\n");
    2fe4:	87 ee       	ldi	r24, 0xE7	; 231
    2fe6:	96 e0       	ldi	r25, 0x06	; 6
    2fe8:	65 e8       	ldi	r22, 0x85	; 133
    2fea:	72 e0       	ldi	r23, 0x02	; 2
    2fec:	0e 94 14 1a 	call	0x3428	; 0x3428 <strcpy>
    2ff0:	87 ee       	ldi	r24, 0xE7	; 231
    2ff2:	96 e0       	ldi	r25, 0x06	; 6
    2ff4:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>
      PlayRequestedDot();
    2ff8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <PlayRequestedDot>
      Current_State = STATE_WAIT_INPUT;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	90 93 02 08 	sts	0x0802, r25
    3004:	80 93 01 08 	sts	0x0801, r24
    3008:	08 95       	ret

0000300a <MD2_Reset>:
}


void MD2_Reset(void)
{
  Current_State=0;
    300a:	10 92 02 08 	sts	0x0802, r1
    300e:	10 92 01 08 	sts	0x0801, r1
  MD2_Last_Dot=0;
    3012:	10 92 04 08 	sts	0x0804, r1
}
    3016:	08 95       	ret

00003018 <MD2_CallModeYesAnswer>:
}

void MD2_CallModeYesAnswer(void)
{

}
    3018:	08 95       	ret

0000301a <MD2_CallModeNoAnswer>:

void MD2_CallModeNoAnswer(void)
{

}
    301a:	08 95       	ret

0000301c <MD2_InputDot>:

void MD2_InputDot(char thisDot)
{
  MD2_Last_Dot=thisDot;
    301c:	80 93 04 08 	sts	0x0804, r24
  Current_State=3;
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	90 93 02 08 	sts	0x0802, r25
    3028:	80 93 01 08 	sts	0x0801, r24
}
    302c:	08 95       	ret

0000302e <MD2_InputCell>:

void MD2_InputCell(char thisCell)
{
    302e:	98 2f       	mov	r25, r24
  if(MD2_Last_Dot!=0)
    3030:	80 91 04 08 	lds	r24, 0x0804
    3034:	88 23       	and	r24, r24
    3036:	41 f0       	breq	.+16     	; 0x3048 <MD2_InputCell+0x1a>
  {
    Last_Cell=thisCell;
    3038:	90 93 03 08 	sts	0x0803, r25
    Current_State=2;
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	90 93 02 08 	sts	0x0802, r25
    3044:	80 93 01 08 	sts	0x0801, r24
    3048:	08 95       	ret

0000304a <MD2_PlayRequestedDot>:
}


void MD2_PlayRequestedDot(void)
{
  switch(MD2_Last_Dot)
    304a:	80 91 04 08 	lds	r24, 0x0804
    304e:	83 33       	cpi	r24, 0x33	; 51
    3050:	a1 f0       	breq	.+40     	; 0x307a <MD2_PlayRequestedDot+0x30>
    3052:	84 33       	cpi	r24, 0x34	; 52
    3054:	28 f4       	brcc	.+10     	; 0x3060 <MD2_PlayRequestedDot+0x16>
    3056:	81 33       	cpi	r24, 0x31	; 49
    3058:	51 f0       	breq	.+20     	; 0x306e <MD2_PlayRequestedDot+0x24>
    305a:	82 33       	cpi	r24, 0x32	; 50
    305c:	e9 f4       	brne	.+58     	; 0x3098 <MD2_PlayRequestedDot+0x4e>
    305e:	0a c0       	rjmp	.+20     	; 0x3074 <MD2_PlayRequestedDot+0x2a>
    3060:	85 33       	cpi	r24, 0x35	; 53
    3062:	89 f0       	breq	.+34     	; 0x3086 <MD2_PlayRequestedDot+0x3c>
    3064:	85 33       	cpi	r24, 0x35	; 53
    3066:	60 f0       	brcs	.+24     	; 0x3080 <MD2_PlayRequestedDot+0x36>
    3068:	86 33       	cpi	r24, 0x36	; 54
    306a:	b1 f4       	brne	.+44     	; 0x3098 <MD2_PlayRequestedDot+0x4e>
    306c:	11 c0       	rjmp	.+34     	; 0x3090 <MD2_PlayRequestedDot+0x46>
  {
    case '1':
      RequestToPlayMP3file("MD1_1.MP3");
    306e:	8b ea       	ldi	r24, 0xAB	; 171
    3070:	92 e0       	ldi	r25, 0x02	; 2
    3072:	0b c0       	rjmp	.+22     	; 0x308a <MD2_PlayRequestedDot+0x40>
      break;
    case '2':
      RequestToPlayMP3file("MD1_2.MP3");
    3074:	85 eb       	ldi	r24, 0xB5	; 181
    3076:	92 e0       	ldi	r25, 0x02	; 2
    3078:	08 c0       	rjmp	.+16     	; 0x308a <MD2_PlayRequestedDot+0x40>
      break;
    case '3':
      RequestToPlayMP3file("MD1_3.MP3");
    307a:	8f eb       	ldi	r24, 0xBF	; 191
    307c:	92 e0       	ldi	r25, 0x02	; 2
    307e:	05 c0       	rjmp	.+10     	; 0x308a <MD2_PlayRequestedDot+0x40>
      break;
    case '4':
      RequestToPlayMP3file("MD1_4.MP3");
    3080:	89 ec       	ldi	r24, 0xC9	; 201
    3082:	92 e0       	ldi	r25, 0x02	; 2
    3084:	02 c0       	rjmp	.+4      	; 0x308a <MD2_PlayRequestedDot+0x40>
      break;
    case '5':
      RequestToPlayMP3file("MD1_5.MP3");
    3086:	83 ed       	ldi	r24, 0xD3	; 211
    3088:	92 e0       	ldi	r25, 0x02	; 2
    308a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    308e:	08 95       	ret
      break;
    case '6':
      RequestToPlayMP3file("MD1_6.MP3");
    3090:	8d ed       	ldi	r24, 0xDD	; 221
    3092:	92 e0       	ldi	r25, 0x02	; 2
    3094:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    3098:	08 95       	ret

0000309a <PlayRequestedCell>:

*/

void PlayRequestedCell(void)
{
  switch(Last_Cell)
    309a:	80 91 03 08 	lds	r24, 0x0803
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	fc 01       	movw	r30, r24
    30a2:	e1 56       	subi	r30, 0x61	; 97
    30a4:	f0 40       	sbci	r31, 0x00	; 0
    30a6:	ea 31       	cpi	r30, 0x1A	; 26
    30a8:	f1 05       	cpc	r31, r1
    30aa:	08 f0       	brcs	.+2      	; 0x30ae <PlayRequestedCell+0x14>
    30ac:	56 c0       	rjmp	.+172    	; 0x315a <PlayRequestedCell+0xc0>
    30ae:	ea 5b       	subi	r30, 0xBA	; 186
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	ee 0f       	add	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	05 90       	lpm	r0, Z+
    30b8:	f4 91       	lpm	r31, Z+
    30ba:	e0 2d       	mov	r30, r0
    30bc:	09 94       	ijmp
  {
    case 'a':
      RequestToPlayMP3file("MD2_a.MP3");
    30be:	87 ee       	ldi	r24, 0xE7	; 231
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	4d c0       	rjmp	.+154    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'b':
      RequestToPlayMP3file("MD2_b.MP3");
    30c4:	81 ef       	ldi	r24, 0xF1	; 241
    30c6:	92 e0       	ldi	r25, 0x02	; 2
    30c8:	4a c0       	rjmp	.+148    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'c':
      RequestToPlayMP3file("MD2_c.MP3");
    30ca:	8b ef       	ldi	r24, 0xFB	; 251
    30cc:	92 e0       	ldi	r25, 0x02	; 2
    30ce:	47 c0       	rjmp	.+142    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'd':
      RequestToPlayMP3file("MD2_d.MP3");
    30d0:	85 e0       	ldi	r24, 0x05	; 5
    30d2:	93 e0       	ldi	r25, 0x03	; 3
    30d4:	44 c0       	rjmp	.+136    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'e':
      RequestToPlayMP3file("MD2_e.MP3");
    30d6:	8f e0       	ldi	r24, 0x0F	; 15
    30d8:	93 e0       	ldi	r25, 0x03	; 3
    30da:	41 c0       	rjmp	.+130    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'f':
      RequestToPlayMP3file("MD2_f.MP3");
    30dc:	89 e1       	ldi	r24, 0x19	; 25
    30de:	93 e0       	ldi	r25, 0x03	; 3
    30e0:	3e c0       	rjmp	.+124    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'g':
      RequestToPlayMP3file("MD2_g.MP3");
    30e2:	83 e2       	ldi	r24, 0x23	; 35
    30e4:	93 e0       	ldi	r25, 0x03	; 3
    30e6:	3b c0       	rjmp	.+118    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'h':
      RequestToPlayMP3file("MD2_h.MP3");
    30e8:	8d e2       	ldi	r24, 0x2D	; 45
    30ea:	93 e0       	ldi	r25, 0x03	; 3
    30ec:	38 c0       	rjmp	.+112    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'i':
      RequestToPlayMP3file("MD2_i.MP3");
    30ee:	87 e3       	ldi	r24, 0x37	; 55
    30f0:	93 e0       	ldi	r25, 0x03	; 3
    30f2:	35 c0       	rjmp	.+106    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'j':
      RequestToPlayMP3file("MD2_j.MP3");
    30f4:	81 e4       	ldi	r24, 0x41	; 65
    30f6:	93 e0       	ldi	r25, 0x03	; 3
    30f8:	32 c0       	rjmp	.+100    	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'k':
      RequestToPlayMP3file("MD2_k.MP3");
    30fa:	8b e4       	ldi	r24, 0x4B	; 75
    30fc:	93 e0       	ldi	r25, 0x03	; 3
    30fe:	2f c0       	rjmp	.+94     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'l':
      RequestToPlayMP3file("MD2_l.MP3");
    3100:	85 e5       	ldi	r24, 0x55	; 85
    3102:	93 e0       	ldi	r25, 0x03	; 3
    3104:	2c c0       	rjmp	.+88     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'm':
      RequestToPlayMP3file("MD2_m.MP3");
    3106:	8f e5       	ldi	r24, 0x5F	; 95
    3108:	93 e0       	ldi	r25, 0x03	; 3
    310a:	29 c0       	rjmp	.+82     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'n':
      RequestToPlayMP3file("MD2_n.MP3");
    310c:	89 e6       	ldi	r24, 0x69	; 105
    310e:	93 e0       	ldi	r25, 0x03	; 3
    3110:	26 c0       	rjmp	.+76     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'o':
      RequestToPlayMP3file("MD2_o.MP3");
    3112:	83 e7       	ldi	r24, 0x73	; 115
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	23 c0       	rjmp	.+70     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'p':
      RequestToPlayMP3file("MD2_p.MP3");
    3118:	8d e7       	ldi	r24, 0x7D	; 125
    311a:	93 e0       	ldi	r25, 0x03	; 3
    311c:	20 c0       	rjmp	.+64     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'q':
      RequestToPlayMP3file("MD2_q.MP3");
    311e:	87 e8       	ldi	r24, 0x87	; 135
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	1d c0       	rjmp	.+58     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'r':
      RequestToPlayMP3file("MD2_r.MP3");
    3124:	81 e9       	ldi	r24, 0x91	; 145
    3126:	93 e0       	ldi	r25, 0x03	; 3
    3128:	1a c0       	rjmp	.+52     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 's':
      RequestToPlayMP3file("MD2_s.MP3");
    312a:	8b e9       	ldi	r24, 0x9B	; 155
    312c:	93 e0       	ldi	r25, 0x03	; 3
    312e:	17 c0       	rjmp	.+46     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 't':
      RequestToPlayMP3file("MD2_t.MP3");
    3130:	85 ea       	ldi	r24, 0xA5	; 165
    3132:	93 e0       	ldi	r25, 0x03	; 3
    3134:	14 c0       	rjmp	.+40     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'u':
      RequestToPlayMP3file("MD2_u.MP3");
    3136:	8f ea       	ldi	r24, 0xAF	; 175
    3138:	93 e0       	ldi	r25, 0x03	; 3
    313a:	11 c0       	rjmp	.+34     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'v':
      RequestToPlayMP3file("MD2_v.MP3");
    313c:	89 eb       	ldi	r24, 0xB9	; 185
    313e:	93 e0       	ldi	r25, 0x03	; 3
    3140:	0e c0       	rjmp	.+28     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'w':
      RequestToPlayMP3file("MD2_w.MP3");
    3142:	83 ec       	ldi	r24, 0xC3	; 195
    3144:	93 e0       	ldi	r25, 0x03	; 3
    3146:	0b c0       	rjmp	.+22     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'x':
      RequestToPlayMP3file("MD2_x.MP3");
    3148:	8d ec       	ldi	r24, 0xCD	; 205
    314a:	93 e0       	ldi	r25, 0x03	; 3
    314c:	08 c0       	rjmp	.+16     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'y':
      RequestToPlayMP3file("MD2_y.MP3");
    314e:	87 ed       	ldi	r24, 0xD7	; 215
    3150:	93 e0       	ldi	r25, 0x03	; 3
    3152:	05 c0       	rjmp	.+10     	; 0x315e <PlayRequestedCell+0xc4>
      break;
    case 'z':
      RequestToPlayMP3file("MD2_z.MP3");
    3154:	81 ee       	ldi	r24, 0xE1	; 225
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	02 c0       	rjmp	.+4      	; 0x315e <PlayRequestedCell+0xc4>
      break;
    default:
      RequestToPlayMP3file("MD2ER1.MP3");
    315a:	8b ee       	ldi	r24, 0xEB	; 235
    315c:	93 e0       	ldi	r25, 0x03	; 3
    315e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    3162:	08 95       	ret

00003164 <MD2_Main>:
  MD2_Last_Dot=0;
}

void MD2_Main(void)
{
  switch(Current_State)
    3164:	80 91 01 08 	lds	r24, 0x0801
    3168:	90 91 02 08 	lds	r25, 0x0802
    316c:	82 30       	cpi	r24, 0x02	; 2
    316e:	91 05       	cpc	r25, r1
    3170:	51 f0       	breq	.+20     	; 0x3186 <MD2_Main+0x22>
    3172:	83 30       	cpi	r24, 0x03	; 3
    3174:	91 05       	cpc	r25, r1
    3176:	81 f0       	breq	.+32     	; 0x3198 <MD2_Main+0x34>
    3178:	89 2b       	or	r24, r25
    317a:	b1 f4       	brne	.+44     	; 0x31a8 <MD2_Main+0x44>
  {
    case 0:
      RequestToPlayMP3file("MD2INT.MP3");
    317c:	86 ef       	ldi	r24, 0xF6	; 246
    317e:	93 e0       	ldi	r25, 0x03	; 3
    3180:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    3184:	02 c0       	rjmp	.+4      	; 0x318a <MD2_Main+0x26>
      Current_State=1;
      break;
    case 1:
      break;
    case 2:
      PlayRequestedCell();
    3186:	0e 94 4d 18 	call	0x309a	; 0x309a <PlayRequestedCell>
      Current_State=1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	90 93 02 08 	sts	0x0802, r25
    3192:	80 93 01 08 	sts	0x0801, r24
    3196:	08 95       	ret
      break;
    case 3:
      MD2_PlayRequestedDot();
    3198:	0e 94 25 18 	call	0x304a	; 0x304a <MD2_PlayRequestedDot>
      Current_State=1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	90 93 02 08 	sts	0x0802, r25
    31a4:	80 93 01 08 	sts	0x0801, r24
    31a8:	08 95       	ret

000031aa <MD3_Reset>:
  }
}

void MD3_Reset(void)
{
  MD3_Current_State=0;
    31aa:	10 92 07 08 	sts	0x0807, r1
    31ae:	10 92 06 08 	sts	0x0806, r1
}
    31b2:	08 95       	ret

000031b4 <MD3_CallModeYesAnswer>:
}

void MD3_CallModeYesAnswer(void)
{

}
    31b4:	08 95       	ret

000031b6 <MD3_CallModeNoAnswer>:

void MD3_CallModeNoAnswer(void)
{

}
    31b6:	08 95       	ret

000031b8 <MD3_InputDot>:

void MD3_InputDot(char thisDot)
{
  MD3_Last_Dot=thisDot;
    31b8:	80 93 05 08 	sts	0x0805, r24
  MD3_Current_State=2;
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	90 93 07 08 	sts	0x0807, r25
    31c4:	80 93 06 08 	sts	0x0806, r24
}
    31c8:	08 95       	ret

000031ca <MD3_InputCell>:

void MD3_InputCell(char thisCell)
{

}
    31ca:	08 95       	ret

000031cc <MD3_PlayRequestedDot>:

*/

void MD3_PlayRequestedDot(void)
{
  switch(MD3_Last_Dot)
    31cc:	80 91 05 08 	lds	r24, 0x0805
    31d0:	83 33       	cpi	r24, 0x33	; 51
    31d2:	a1 f0       	breq	.+40     	; 0x31fc <MD3_PlayRequestedDot+0x30>
    31d4:	84 33       	cpi	r24, 0x34	; 52
    31d6:	28 f4       	brcc	.+10     	; 0x31e2 <MD3_PlayRequestedDot+0x16>
    31d8:	81 33       	cpi	r24, 0x31	; 49
    31da:	51 f0       	breq	.+20     	; 0x31f0 <MD3_PlayRequestedDot+0x24>
    31dc:	82 33       	cpi	r24, 0x32	; 50
    31de:	e9 f4       	brne	.+58     	; 0x321a <MD3_PlayRequestedDot+0x4e>
    31e0:	0a c0       	rjmp	.+20     	; 0x31f6 <MD3_PlayRequestedDot+0x2a>
    31e2:	85 33       	cpi	r24, 0x35	; 53
    31e4:	89 f0       	breq	.+34     	; 0x3208 <MD3_PlayRequestedDot+0x3c>
    31e6:	85 33       	cpi	r24, 0x35	; 53
    31e8:	60 f0       	brcs	.+24     	; 0x3202 <MD3_PlayRequestedDot+0x36>
    31ea:	86 33       	cpi	r24, 0x36	; 54
    31ec:	b1 f4       	brne	.+44     	; 0x321a <MD3_PlayRequestedDot+0x4e>
    31ee:	11 c0       	rjmp	.+34     	; 0x3212 <MD3_PlayRequestedDot+0x46>
  {
    case '1':
      RequestToPlayMP3file("MD3_1.MP3");
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	94 e0       	ldi	r25, 0x04	; 4
    31f4:	0b c0       	rjmp	.+22     	; 0x320c <MD3_PlayRequestedDot+0x40>
      break;
    case '2':
      RequestToPlayMP3file("MD3_2.MP3");
    31f6:	8b e0       	ldi	r24, 0x0B	; 11
    31f8:	94 e0       	ldi	r25, 0x04	; 4
    31fa:	08 c0       	rjmp	.+16     	; 0x320c <MD3_PlayRequestedDot+0x40>
      break;
    case '3':
      RequestToPlayMP3file("MD3_3.MP3");
    31fc:	85 e1       	ldi	r24, 0x15	; 21
    31fe:	94 e0       	ldi	r25, 0x04	; 4
    3200:	05 c0       	rjmp	.+10     	; 0x320c <MD3_PlayRequestedDot+0x40>
      break;
    case '4':
      RequestToPlayMP3file("MD3_4.MP3");
    3202:	8f e1       	ldi	r24, 0x1F	; 31
    3204:	94 e0       	ldi	r25, 0x04	; 4
    3206:	02 c0       	rjmp	.+4      	; 0x320c <MD3_PlayRequestedDot+0x40>
      break;
    case '5':
      RequestToPlayMP3file("MD3_5.MP3");
    3208:	89 e2       	ldi	r24, 0x29	; 41
    320a:	94 e0       	ldi	r25, 0x04	; 4
    320c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    3210:	08 95       	ret
      break;
    case '6':
      RequestToPlayMP3file("MD3_6.MP3");
    3212:	83 e3       	ldi	r24, 0x33	; 51
    3214:	94 e0       	ldi	r25, 0x04	; 4
    3216:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
    321a:	08 95       	ret

0000321c <MD3_Main>:
  MD3_Current_State=0;
}

void MD3_Main(void)
{
  switch(MD3_Current_State)
    321c:	80 91 06 08 	lds	r24, 0x0806
    3220:	90 91 07 08 	lds	r25, 0x0807
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	19 f0       	breq	.+6      	; 0x322e <MD3_Main+0x12>
    3228:	02 97       	sbiw	r24, 0x02	; 2
    322a:	a1 f4       	brne	.+40     	; 0x3254 <MD3_Main+0x38>
    322c:	0b c0       	rjmp	.+22     	; 0x3244 <MD3_Main+0x28>
  {
    case 0:
      RequestToPlayMP3file("MD3INT.MP3");
    322e:	8d e3       	ldi	r24, 0x3D	; 61
    3230:	94 e0       	ldi	r25, 0x04	; 4
    3232:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RequestToPlayMP3file>
      MD3_Current_State=1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	90 93 07 08 	sts	0x0807, r25
    323e:	80 93 06 08 	sts	0x0806, r24
    3242:	08 95       	ret
      break;
    case 1:
      break;
    case 2:
      MD3_PlayRequestedDot();
    3244:	0e 94 e6 18 	call	0x31cc	; 0x31cc <MD3_PlayRequestedDot>
      MD3_Current_State=1;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	90 93 07 08 	sts	0x0807, r25
    3250:	80 93 06 08 	sts	0x0806, r24
    3254:	08 95       	ret

00003256 <PC_RequestsToModifyModesFile>:
 * @brief This function will replace the MODES.DAT file with new modes from the 
 *        message variable USART_PC_RecievedPacket
 * @return Void
 */
void PC_RequestsToModifyModesFile(void)
{
    3256:	ef 92       	push	r14
    3258:	ff 92       	push	r15
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	64 97       	sbiw	r28, 0x14	; 20
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	8e 01       	movw	r16, r28
    3274:	0f 5f       	subi	r16, 0xFF	; 255
    3276:	1f 4f       	sbci	r17, 0xFF	; 255
    3278:	f8 01       	movw	r30, r16
  const char* ModesFile="MODES.DAT";
  unsigned char WritingFileContent[20];
  
  // Clear the buffer
  int iT=0;
  for(iT=0;iT<20;iT++)
    327a:	ce 01       	movw	r24, r28
    327c:	45 96       	adiw	r24, 0x15	; 21
  {
    WritingFileContent[iT]=0x00;
    327e:	11 92       	st	Z+, r1
  const char* ModesFile="MODES.DAT";
  unsigned char WritingFileContent[20];
  
  // Clear the buffer
  int iT=0;
  for(iT=0;iT<20;iT++)
    3280:	e8 17       	cp	r30, r24
    3282:	f9 07       	cpc	r31, r25
    3284:	e1 f7       	brne	.-8      	; 0x327e <PC_RequestsToModifyModesFile+0x28>
  {
    WritingFileContent[iT]=0x00;
  }

  InitSDCard(false);
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	0e 94 22 0c 	call	0x1844	; 0x1844 <InitSDCard>
    328c:	23 e0       	ldi	r18, 0x03	; 3
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	09 c0       	rjmp	.+18     	; 0x32a4 <PC_RequestsToModifyModesFile+0x4e>

  // Copy over the modes in the form <1><2>...<n>
  iT=0;
  for(iT=3;iT<USART_PC_received_playload_len;iT++)
  {
    WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
    3292:	f9 01       	movw	r30, r18
    3294:	e0 57       	subi	r30, 0x70	; 112
    3296:	fb 4f       	sbci	r31, 0xFB	; 251
    3298:	80 81       	ld	r24, Z
    329a:	d8 01       	movw	r26, r16
    329c:	8d 93       	st	X+, r24
    329e:	8d 01       	movw	r16, r26

  InitSDCard(false);

  // Copy over the modes in the form <1><2>...<n>
  iT=0;
  for(iT=3;iT<USART_PC_received_playload_len;iT++)
    32a0:	2f 5f       	subi	r18, 0xFF	; 255
    32a2:	3f 4f       	sbci	r19, 0xFF	; 255
    32a4:	80 91 e6 06 	lds	r24, 0x06E6
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	28 17       	cp	r18, r24
    32ac:	39 07       	cpc	r19, r25
    32ae:	8c f3       	brlt	.-30     	; 0x3292 <PC_RequestsToModifyModesFile+0x3c>
  {
    WritingFileContent[iT-3]=USART_PC_ReceivedPacket[iT];
  }

  DPRINTF("File content: %s\n", WritingFileContent);
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <PC_RequestsToModifyModesFile+0x5c>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <PC_RequestsToModifyModesFile+0x5e>
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <PC_RequestsToModifyModesFile+0x60>
    32b6:	ed b7       	in	r30, 0x3d	; 61
    32b8:	fe b7       	in	r31, 0x3e	; 62
    32ba:	31 96       	adiw	r30, 0x01	; 1
    32bc:	87 ee       	ldi	r24, 0xE7	; 231
    32be:	e8 2e       	mov	r14, r24
    32c0:	86 e0       	ldi	r24, 0x06	; 6
    32c2:	f8 2e       	mov	r15, r24
    32c4:	ad b7       	in	r26, 0x3d	; 61
    32c6:	be b7       	in	r27, 0x3e	; 62
    32c8:	12 96       	adiw	r26, 0x02	; 2
    32ca:	fc 92       	st	X, r15
    32cc:	ee 92       	st	-X, r14
    32ce:	11 97       	sbiw	r26, 0x01	; 1
    32d0:	88 e4       	ldi	r24, 0x48	; 72
    32d2:	94 e0       	ldi	r25, 0x04	; 4
    32d4:	93 83       	std	Z+3, r25	; 0x03
    32d6:	82 83       	std	Z+2, r24	; 0x02
    32d8:	8e 01       	movw	r16, r28
    32da:	0f 5f       	subi	r16, 0xFF	; 255
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	15 83       	std	Z+5, r17	; 0x05
    32e0:	04 83       	std	Z+4, r16	; 0x04
    32e2:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
    32e6:	ed b7       	in	r30, 0x3d	; 61
    32e8:	fe b7       	in	r31, 0x3e	; 62
    32ea:	36 96       	adiw	r30, 0x06	; 6
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	fe bf       	out	0x3e, r31	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	ed bf       	out	0x3d, r30	; 61
    32f6:	c7 01       	movw	r24, r14
    32f8:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_transmitStringToPC>

  if(ReplaceTheContentOfThisFileWith(ModesFile,WritingFileContent)==0)
    32fc:	8a e5       	ldi	r24, 0x5A	; 90
    32fe:	94 e0       	ldi	r25, 0x04	; 4
    3300:	b8 01       	movw	r22, r16
    3302:	0e 94 5e 12 	call	0x24bc	; 0x24bc <ReplaceTheContentOfThisFileWith>
    3306:	89 2b       	or	r24, r25
    3308:	19 f4       	brne	.+6      	; 0x3310 <PC_RequestsToModifyModesFile+0xba>
  {
    USART_transmitStringToPCFromFlash(PSTR("SABT-OK"));
    330a:	84 ec       	ldi	r24, 0xC4	; 196
    330c:	93 e0       	ldi	r25, 0x03	; 3
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <PC_RequestsToModifyModesFile+0xbe>
    TX_NEWLINE_PC;      
  }else{
    USART_transmitStringToPCFromFlash(PSTR("SABT-FAIL"));
    3310:	8a eb       	ldi	r24, 0xBA	; 186
    3312:	93 e0       	ldi	r25, 0x03	; 3
    3314:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
    TX_NEWLINE_PC;  
    3318:	8d e0       	ldi	r24, 0x0D	; 13
    331a:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    331e:	8a e0       	ldi	r24, 0x0A	; 10
    3320:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
  }
}
    3324:	64 96       	adiw	r28, 0x14	; 20
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	08 95       	ret

0000333e <PC_parse_message>:
 * @return bool    but does not seem to ever return, so it will return false?
 */
bool PC_parse_message()
{
  unsigned char MessageType;
  USART_PC_Message_ready=false;
    333e:	10 92 6a 04 	sts	0x046A, r1
  MessageType=USART_PC_ReceivedPacket[2];
    3342:	80 91 92 04 	lds	r24, 0x0492
  switch(MessageType)
    3346:	8d 34       	cpi	r24, 0x4D	; 77
    3348:	69 f0       	breq	.+26     	; 0x3364 <PC_parse_message+0x26>
    334a:	88 37       	cpi	r24, 0x78	; 120
    334c:	69 f4       	brne	.+26     	; 0x3368 <PC_parse_message+0x2a>
  {
    case PC_CMD_INIT:
      USART_transmitStringToPCFromFlash(PSTR("SABT-v2.1"));
    334e:	8c ec       	ldi	r24, 0xCC	; 204
    3350:	93 e0       	ldi	r25, 0x03	; 3
    3352:	0e 94 ba 03 	call	0x774	; 0x774 <USART_transmitStringToPCFromFlash>
      TX_NEWLINE_PC;      
    3356:	8d e0       	ldi	r24, 0x0D	; 13
    3358:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    335c:	8a e0       	ldi	r24, 0x0A	; 10
    335e:	0e 94 b2 03 	call	0x764	; 0x764 <USART_transmitByteToPC>
    3362:	08 95       	ret
      break;
    case PC_CMD_NEWMODES:
      PC_RequestsToModifyModesFile();
    3364:	0e 94 2b 19 	call	0x3256	; 0x3256 <PC_RequestsToModifyModesFile>
      break;
  }
}
    3368:	08 95       	ret

0000336a <__mulsi3>:
    336a:	62 9f       	mul	r22, r18
    336c:	d0 01       	movw	r26, r0
    336e:	73 9f       	mul	r23, r19
    3370:	f0 01       	movw	r30, r0
    3372:	82 9f       	mul	r24, r18
    3374:	e0 0d       	add	r30, r0
    3376:	f1 1d       	adc	r31, r1
    3378:	64 9f       	mul	r22, r20
    337a:	e0 0d       	add	r30, r0
    337c:	f1 1d       	adc	r31, r1
    337e:	92 9f       	mul	r25, r18
    3380:	f0 0d       	add	r31, r0
    3382:	83 9f       	mul	r24, r19
    3384:	f0 0d       	add	r31, r0
    3386:	74 9f       	mul	r23, r20
    3388:	f0 0d       	add	r31, r0
    338a:	65 9f       	mul	r22, r21
    338c:	f0 0d       	add	r31, r0
    338e:	99 27       	eor	r25, r25
    3390:	72 9f       	mul	r23, r18
    3392:	b0 0d       	add	r27, r0
    3394:	e1 1d       	adc	r30, r1
    3396:	f9 1f       	adc	r31, r25
    3398:	63 9f       	mul	r22, r19
    339a:	b0 0d       	add	r27, r0
    339c:	e1 1d       	adc	r30, r1
    339e:	f9 1f       	adc	r31, r25
    33a0:	bd 01       	movw	r22, r26
    33a2:	cf 01       	movw	r24, r30
    33a4:	11 24       	eor	r1, r1
    33a6:	08 95       	ret

000033a8 <__udivmodsi4>:
    33a8:	a1 e2       	ldi	r26, 0x21	; 33
    33aa:	1a 2e       	mov	r1, r26
    33ac:	aa 1b       	sub	r26, r26
    33ae:	bb 1b       	sub	r27, r27
    33b0:	fd 01       	movw	r30, r26
    33b2:	0d c0       	rjmp	.+26     	; 0x33ce <__udivmodsi4_ep>

000033b4 <__udivmodsi4_loop>:
    33b4:	aa 1f       	adc	r26, r26
    33b6:	bb 1f       	adc	r27, r27
    33b8:	ee 1f       	adc	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	a2 17       	cp	r26, r18
    33be:	b3 07       	cpc	r27, r19
    33c0:	e4 07       	cpc	r30, r20
    33c2:	f5 07       	cpc	r31, r21
    33c4:	20 f0       	brcs	.+8      	; 0x33ce <__udivmodsi4_ep>
    33c6:	a2 1b       	sub	r26, r18
    33c8:	b3 0b       	sbc	r27, r19
    33ca:	e4 0b       	sbc	r30, r20
    33cc:	f5 0b       	sbc	r31, r21

000033ce <__udivmodsi4_ep>:
    33ce:	66 1f       	adc	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	88 1f       	adc	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	1a 94       	dec	r1
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <__udivmodsi4_loop>
    33da:	60 95       	com	r22
    33dc:	70 95       	com	r23
    33de:	80 95       	com	r24
    33e0:	90 95       	com	r25
    33e2:	9b 01       	movw	r18, r22
    33e4:	ac 01       	movw	r20, r24
    33e6:	bd 01       	movw	r22, r26
    33e8:	cf 01       	movw	r24, r30
    33ea:	08 95       	ret

000033ec <atoi>:
    33ec:	fc 01       	movw	r30, r24
    33ee:	88 27       	eor	r24, r24
    33f0:	99 27       	eor	r25, r25
    33f2:	e8 94       	clt
    33f4:	21 91       	ld	r18, Z+
    33f6:	20 32       	cpi	r18, 0x20	; 32
    33f8:	e9 f3       	breq	.-6      	; 0x33f4 <atoi+0x8>
    33fa:	29 30       	cpi	r18, 0x09	; 9
    33fc:	10 f0       	brcs	.+4      	; 0x3402 <atoi+0x16>
    33fe:	2e 30       	cpi	r18, 0x0E	; 14
    3400:	c8 f3       	brcs	.-14     	; 0x33f4 <atoi+0x8>
    3402:	2b 32       	cpi	r18, 0x2B	; 43
    3404:	41 f0       	breq	.+16     	; 0x3416 <atoi+0x2a>
    3406:	2d 32       	cpi	r18, 0x2D	; 45
    3408:	39 f4       	brne	.+14     	; 0x3418 <atoi+0x2c>
    340a:	68 94       	set
    340c:	04 c0       	rjmp	.+8      	; 0x3416 <atoi+0x2a>
    340e:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__mulhi_const_10>
    3412:	82 0f       	add	r24, r18
    3414:	91 1d       	adc	r25, r1
    3416:	21 91       	ld	r18, Z+
    3418:	20 53       	subi	r18, 0x30	; 48
    341a:	2a 30       	cpi	r18, 0x0A	; 10
    341c:	c0 f3       	brcs	.-16     	; 0x340e <atoi+0x22>
    341e:	1e f4       	brtc	.+6      	; 0x3426 <atoi+0x3a>
    3420:	90 95       	com	r25
    3422:	81 95       	neg	r24
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	08 95       	ret

00003428 <strcpy>:
    3428:	fb 01       	movw	r30, r22
    342a:	dc 01       	movw	r26, r24
    342c:	01 90       	ld	r0, Z+
    342e:	0d 92       	st	X+, r0
    3430:	00 20       	and	r0, r0
    3432:	e1 f7       	brne	.-8      	; 0x342c <strcpy+0x4>
    3434:	08 95       	ret

00003436 <__mulhi_const_10>:
    3436:	7a e0       	ldi	r23, 0x0A	; 10
    3438:	97 9f       	mul	r25, r23
    343a:	90 2d       	mov	r25, r0
    343c:	87 9f       	mul	r24, r23
    343e:	80 2d       	mov	r24, r0
    3440:	91 0d       	add	r25, r1
    3442:	11 24       	eor	r1, r1
    3444:	08 95       	ret

00003446 <sprintf>:
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	2e 97       	sbiw	r28, 0x0e	; 14
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	0d 89       	ldd	r16, Y+21	; 0x15
    3460:	1e 89       	ldd	r17, Y+22	; 0x16
    3462:	86 e0       	ldi	r24, 0x06	; 6
    3464:	8c 83       	std	Y+4, r24	; 0x04
    3466:	1a 83       	std	Y+2, r17	; 0x02
    3468:	09 83       	std	Y+1, r16	; 0x01
    346a:	8f ef       	ldi	r24, 0xFF	; 255
    346c:	9f e7       	ldi	r25, 0x7F	; 127
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	9e 01       	movw	r18, r28
    3474:	27 5e       	subi	r18, 0xE7	; 231
    3476:	3f 4f       	sbci	r19, 0xFF	; 255
    3478:	ce 01       	movw	r24, r28
    347a:	01 96       	adiw	r24, 0x01	; 1
    347c:	6f 89       	ldd	r22, Y+23	; 0x17
    347e:	78 8d       	ldd	r23, Y+24	; 0x18
    3480:	a9 01       	movw	r20, r18
    3482:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <vfprintf>
    3486:	2f 81       	ldd	r18, Y+7	; 0x07
    3488:	38 85       	ldd	r19, Y+8	; 0x08
    348a:	02 0f       	add	r16, r18
    348c:	13 1f       	adc	r17, r19
    348e:	f8 01       	movw	r30, r16
    3490:	10 82       	st	Z, r1
    3492:	2e 96       	adiw	r28, 0x0e	; 14
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	08 95       	ret

000034a8 <vfprintf>:
    34a8:	2f 92       	push	r2
    34aa:	3f 92       	push	r3
    34ac:	4f 92       	push	r4
    34ae:	5f 92       	push	r5
    34b0:	6f 92       	push	r6
    34b2:	7f 92       	push	r7
    34b4:	8f 92       	push	r8
    34b6:	9f 92       	push	r9
    34b8:	af 92       	push	r10
    34ba:	bf 92       	push	r11
    34bc:	cf 92       	push	r12
    34be:	df 92       	push	r13
    34c0:	ef 92       	push	r14
    34c2:	ff 92       	push	r15
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	2b 97       	sbiw	r28, 0x0b	; 11
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	3c 01       	movw	r6, r24
    34de:	2b 01       	movw	r4, r22
    34e0:	5a 01       	movw	r10, r20
    34e2:	fc 01       	movw	r30, r24
    34e4:	17 82       	std	Z+7, r1	; 0x07
    34e6:	16 82       	std	Z+6, r1	; 0x06
    34e8:	83 81       	ldd	r24, Z+3	; 0x03
    34ea:	81 fd       	sbrc	r24, 1
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <vfprintf+0x4c>
    34ee:	6f ef       	ldi	r22, 0xFF	; 255
    34f0:	7f ef       	ldi	r23, 0xFF	; 255
    34f2:	c6 c1       	rjmp	.+908    	; 0x3880 <vfprintf+0x3d8>
    34f4:	9a e0       	ldi	r25, 0x0A	; 10
    34f6:	89 2e       	mov	r8, r25
    34f8:	1e 01       	movw	r2, r28
    34fa:	08 94       	sec
    34fc:	21 1c       	adc	r2, r1
    34fe:	31 1c       	adc	r3, r1
    3500:	f3 01       	movw	r30, r6
    3502:	23 81       	ldd	r18, Z+3	; 0x03
    3504:	f2 01       	movw	r30, r4
    3506:	23 fd       	sbrc	r18, 3
    3508:	85 91       	lpm	r24, Z+
    350a:	23 ff       	sbrs	r18, 3
    350c:	81 91       	ld	r24, Z+
    350e:	2f 01       	movw	r4, r30
    3510:	88 23       	and	r24, r24
    3512:	09 f4       	brne	.+2      	; 0x3516 <vfprintf+0x6e>
    3514:	b2 c1       	rjmp	.+868    	; 0x387a <vfprintf+0x3d2>
    3516:	85 32       	cpi	r24, 0x25	; 37
    3518:	39 f4       	brne	.+14     	; 0x3528 <vfprintf+0x80>
    351a:	23 fd       	sbrc	r18, 3
    351c:	85 91       	lpm	r24, Z+
    351e:	23 ff       	sbrs	r18, 3
    3520:	81 91       	ld	r24, Z+
    3522:	2f 01       	movw	r4, r30
    3524:	85 32       	cpi	r24, 0x25	; 37
    3526:	29 f4       	brne	.+10     	; 0x3532 <vfprintf+0x8a>
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	b3 01       	movw	r22, r6
    352c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    3530:	e7 cf       	rjmp	.-50     	; 0x3500 <vfprintf+0x58>
    3532:	98 2f       	mov	r25, r24
    3534:	ff 24       	eor	r15, r15
    3536:	ee 24       	eor	r14, r14
    3538:	99 24       	eor	r9, r9
    353a:	ff e1       	ldi	r31, 0x1F	; 31
    353c:	ff 15       	cp	r31, r15
    353e:	d0 f0       	brcs	.+52     	; 0x3574 <vfprintf+0xcc>
    3540:	9b 32       	cpi	r25, 0x2B	; 43
    3542:	69 f0       	breq	.+26     	; 0x355e <vfprintf+0xb6>
    3544:	9c 32       	cpi	r25, 0x2C	; 44
    3546:	28 f4       	brcc	.+10     	; 0x3552 <vfprintf+0xaa>
    3548:	90 32       	cpi	r25, 0x20	; 32
    354a:	59 f0       	breq	.+22     	; 0x3562 <vfprintf+0xba>
    354c:	93 32       	cpi	r25, 0x23	; 35
    354e:	91 f4       	brne	.+36     	; 0x3574 <vfprintf+0xcc>
    3550:	0e c0       	rjmp	.+28     	; 0x356e <vfprintf+0xc6>
    3552:	9d 32       	cpi	r25, 0x2D	; 45
    3554:	49 f0       	breq	.+18     	; 0x3568 <vfprintf+0xc0>
    3556:	90 33       	cpi	r25, 0x30	; 48
    3558:	69 f4       	brne	.+26     	; 0x3574 <vfprintf+0xcc>
    355a:	41 e0       	ldi	r20, 0x01	; 1
    355c:	24 c0       	rjmp	.+72     	; 0x35a6 <vfprintf+0xfe>
    355e:	52 e0       	ldi	r21, 0x02	; 2
    3560:	f5 2a       	or	r15, r21
    3562:	84 e0       	ldi	r24, 0x04	; 4
    3564:	f8 2a       	or	r15, r24
    3566:	28 c0       	rjmp	.+80     	; 0x35b8 <vfprintf+0x110>
    3568:	98 e0       	ldi	r25, 0x08	; 8
    356a:	f9 2a       	or	r15, r25
    356c:	25 c0       	rjmp	.+74     	; 0x35b8 <vfprintf+0x110>
    356e:	e0 e1       	ldi	r30, 0x10	; 16
    3570:	fe 2a       	or	r15, r30
    3572:	22 c0       	rjmp	.+68     	; 0x35b8 <vfprintf+0x110>
    3574:	f7 fc       	sbrc	r15, 7
    3576:	29 c0       	rjmp	.+82     	; 0x35ca <vfprintf+0x122>
    3578:	89 2f       	mov	r24, r25
    357a:	80 53       	subi	r24, 0x30	; 48
    357c:	8a 30       	cpi	r24, 0x0A	; 10
    357e:	70 f4       	brcc	.+28     	; 0x359c <vfprintf+0xf4>
    3580:	f6 fe       	sbrs	r15, 6
    3582:	05 c0       	rjmp	.+10     	; 0x358e <vfprintf+0xe6>
    3584:	98 9c       	mul	r9, r8
    3586:	90 2c       	mov	r9, r0
    3588:	11 24       	eor	r1, r1
    358a:	98 0e       	add	r9, r24
    358c:	15 c0       	rjmp	.+42     	; 0x35b8 <vfprintf+0x110>
    358e:	e8 9c       	mul	r14, r8
    3590:	e0 2c       	mov	r14, r0
    3592:	11 24       	eor	r1, r1
    3594:	e8 0e       	add	r14, r24
    3596:	f0 e2       	ldi	r31, 0x20	; 32
    3598:	ff 2a       	or	r15, r31
    359a:	0e c0       	rjmp	.+28     	; 0x35b8 <vfprintf+0x110>
    359c:	9e 32       	cpi	r25, 0x2E	; 46
    359e:	29 f4       	brne	.+10     	; 0x35aa <vfprintf+0x102>
    35a0:	f6 fc       	sbrc	r15, 6
    35a2:	6b c1       	rjmp	.+726    	; 0x387a <vfprintf+0x3d2>
    35a4:	40 e4       	ldi	r20, 0x40	; 64
    35a6:	f4 2a       	or	r15, r20
    35a8:	07 c0       	rjmp	.+14     	; 0x35b8 <vfprintf+0x110>
    35aa:	9c 36       	cpi	r25, 0x6C	; 108
    35ac:	19 f4       	brne	.+6      	; 0x35b4 <vfprintf+0x10c>
    35ae:	50 e8       	ldi	r21, 0x80	; 128
    35b0:	f5 2a       	or	r15, r21
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <vfprintf+0x110>
    35b4:	98 36       	cpi	r25, 0x68	; 104
    35b6:	49 f4       	brne	.+18     	; 0x35ca <vfprintf+0x122>
    35b8:	f2 01       	movw	r30, r4
    35ba:	23 fd       	sbrc	r18, 3
    35bc:	95 91       	lpm	r25, Z+
    35be:	23 ff       	sbrs	r18, 3
    35c0:	91 91       	ld	r25, Z+
    35c2:	2f 01       	movw	r4, r30
    35c4:	99 23       	and	r25, r25
    35c6:	09 f0       	breq	.+2      	; 0x35ca <vfprintf+0x122>
    35c8:	b8 cf       	rjmp	.-144    	; 0x353a <vfprintf+0x92>
    35ca:	89 2f       	mov	r24, r25
    35cc:	85 54       	subi	r24, 0x45	; 69
    35ce:	83 30       	cpi	r24, 0x03	; 3
    35d0:	18 f0       	brcs	.+6      	; 0x35d8 <vfprintf+0x130>
    35d2:	80 52       	subi	r24, 0x20	; 32
    35d4:	83 30       	cpi	r24, 0x03	; 3
    35d6:	38 f4       	brcc	.+14     	; 0x35e6 <vfprintf+0x13e>
    35d8:	44 e0       	ldi	r20, 0x04	; 4
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	a4 0e       	add	r10, r20
    35de:	b5 1e       	adc	r11, r21
    35e0:	5f e3       	ldi	r21, 0x3F	; 63
    35e2:	59 83       	std	Y+1, r21	; 0x01
    35e4:	0f c0       	rjmp	.+30     	; 0x3604 <vfprintf+0x15c>
    35e6:	93 36       	cpi	r25, 0x63	; 99
    35e8:	31 f0       	breq	.+12     	; 0x35f6 <vfprintf+0x14e>
    35ea:	93 37       	cpi	r25, 0x73	; 115
    35ec:	79 f0       	breq	.+30     	; 0x360c <vfprintf+0x164>
    35ee:	93 35       	cpi	r25, 0x53	; 83
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <vfprintf+0x14c>
    35f2:	56 c0       	rjmp	.+172    	; 0x36a0 <vfprintf+0x1f8>
    35f4:	20 c0       	rjmp	.+64     	; 0x3636 <vfprintf+0x18e>
    35f6:	f5 01       	movw	r30, r10
    35f8:	80 81       	ld	r24, Z
    35fa:	89 83       	std	Y+1, r24	; 0x01
    35fc:	42 e0       	ldi	r20, 0x02	; 2
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	a4 0e       	add	r10, r20
    3602:	b5 1e       	adc	r11, r21
    3604:	61 01       	movw	r12, r2
    3606:	01 e0       	ldi	r16, 0x01	; 1
    3608:	10 e0       	ldi	r17, 0x00	; 0
    360a:	12 c0       	rjmp	.+36     	; 0x3630 <vfprintf+0x188>
    360c:	f5 01       	movw	r30, r10
    360e:	c0 80       	ld	r12, Z
    3610:	d1 80       	ldd	r13, Z+1	; 0x01
    3612:	f6 fc       	sbrc	r15, 6
    3614:	03 c0       	rjmp	.+6      	; 0x361c <vfprintf+0x174>
    3616:	6f ef       	ldi	r22, 0xFF	; 255
    3618:	7f ef       	ldi	r23, 0xFF	; 255
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <vfprintf+0x178>
    361c:	69 2d       	mov	r22, r9
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	42 e0       	ldi	r20, 0x02	; 2
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	a4 0e       	add	r10, r20
    3626:	b5 1e       	adc	r11, r21
    3628:	c6 01       	movw	r24, r12
    362a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <strnlen>
    362e:	8c 01       	movw	r16, r24
    3630:	5f e7       	ldi	r21, 0x7F	; 127
    3632:	f5 22       	and	r15, r21
    3634:	14 c0       	rjmp	.+40     	; 0x365e <vfprintf+0x1b6>
    3636:	f5 01       	movw	r30, r10
    3638:	c0 80       	ld	r12, Z
    363a:	d1 80       	ldd	r13, Z+1	; 0x01
    363c:	f6 fc       	sbrc	r15, 6
    363e:	03 c0       	rjmp	.+6      	; 0x3646 <vfprintf+0x19e>
    3640:	6f ef       	ldi	r22, 0xFF	; 255
    3642:	7f ef       	ldi	r23, 0xFF	; 255
    3644:	02 c0       	rjmp	.+4      	; 0x364a <vfprintf+0x1a2>
    3646:	69 2d       	mov	r22, r9
    3648:	70 e0       	ldi	r23, 0x00	; 0
    364a:	42 e0       	ldi	r20, 0x02	; 2
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	a4 0e       	add	r10, r20
    3650:	b5 1e       	adc	r11, r21
    3652:	c6 01       	movw	r24, r12
    3654:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <strnlen_P>
    3658:	8c 01       	movw	r16, r24
    365a:	50 e8       	ldi	r21, 0x80	; 128
    365c:	f5 2a       	or	r15, r21
    365e:	f3 fe       	sbrs	r15, 3
    3660:	07 c0       	rjmp	.+14     	; 0x3670 <vfprintf+0x1c8>
    3662:	1a c0       	rjmp	.+52     	; 0x3698 <vfprintf+0x1f0>
    3664:	80 e2       	ldi	r24, 0x20	; 32
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	b3 01       	movw	r22, r6
    366a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    366e:	ea 94       	dec	r14
    3670:	8e 2d       	mov	r24, r14
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	08 17       	cp	r16, r24
    3676:	19 07       	cpc	r17, r25
    3678:	a8 f3       	brcs	.-22     	; 0x3664 <vfprintf+0x1bc>
    367a:	0e c0       	rjmp	.+28     	; 0x3698 <vfprintf+0x1f0>
    367c:	f6 01       	movw	r30, r12
    367e:	f7 fc       	sbrc	r15, 7
    3680:	85 91       	lpm	r24, Z+
    3682:	f7 fe       	sbrs	r15, 7
    3684:	81 91       	ld	r24, Z+
    3686:	6f 01       	movw	r12, r30
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	b3 01       	movw	r22, r6
    368c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    3690:	e1 10       	cpse	r14, r1
    3692:	ea 94       	dec	r14
    3694:	01 50       	subi	r16, 0x01	; 1
    3696:	10 40       	sbci	r17, 0x00	; 0
    3698:	01 15       	cp	r16, r1
    369a:	11 05       	cpc	r17, r1
    369c:	79 f7       	brne	.-34     	; 0x367c <vfprintf+0x1d4>
    369e:	ea c0       	rjmp	.+468    	; 0x3874 <vfprintf+0x3cc>
    36a0:	94 36       	cpi	r25, 0x64	; 100
    36a2:	11 f0       	breq	.+4      	; 0x36a8 <vfprintf+0x200>
    36a4:	99 36       	cpi	r25, 0x69	; 105
    36a6:	69 f5       	brne	.+90     	; 0x3702 <vfprintf+0x25a>
    36a8:	f7 fe       	sbrs	r15, 7
    36aa:	08 c0       	rjmp	.+16     	; 0x36bc <vfprintf+0x214>
    36ac:	f5 01       	movw	r30, r10
    36ae:	20 81       	ld	r18, Z
    36b0:	31 81       	ldd	r19, Z+1	; 0x01
    36b2:	42 81       	ldd	r20, Z+2	; 0x02
    36b4:	53 81       	ldd	r21, Z+3	; 0x03
    36b6:	84 e0       	ldi	r24, 0x04	; 4
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	0a c0       	rjmp	.+20     	; 0x36d0 <vfprintf+0x228>
    36bc:	f5 01       	movw	r30, r10
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	9c 01       	movw	r18, r24
    36c4:	44 27       	eor	r20, r20
    36c6:	37 fd       	sbrc	r19, 7
    36c8:	40 95       	com	r20
    36ca:	54 2f       	mov	r21, r20
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	a8 0e       	add	r10, r24
    36d2:	b9 1e       	adc	r11, r25
    36d4:	9f e6       	ldi	r25, 0x6F	; 111
    36d6:	f9 22       	and	r15, r25
    36d8:	57 ff       	sbrs	r21, 7
    36da:	09 c0       	rjmp	.+18     	; 0x36ee <vfprintf+0x246>
    36dc:	50 95       	com	r21
    36de:	40 95       	com	r20
    36e0:	30 95       	com	r19
    36e2:	21 95       	neg	r18
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	4f 4f       	sbci	r20, 0xFF	; 255
    36e8:	5f 4f       	sbci	r21, 0xFF	; 255
    36ea:	e0 e8       	ldi	r30, 0x80	; 128
    36ec:	fe 2a       	or	r15, r30
    36ee:	ca 01       	movw	r24, r20
    36f0:	b9 01       	movw	r22, r18
    36f2:	a1 01       	movw	r20, r2
    36f4:	2a e0       	ldi	r18, 0x0A	; 10
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__ultoa_invert>
    36fc:	d8 2e       	mov	r13, r24
    36fe:	d2 18       	sub	r13, r2
    3700:	40 c0       	rjmp	.+128    	; 0x3782 <vfprintf+0x2da>
    3702:	95 37       	cpi	r25, 0x75	; 117
    3704:	29 f4       	brne	.+10     	; 0x3710 <vfprintf+0x268>
    3706:	1f 2d       	mov	r17, r15
    3708:	1f 7e       	andi	r17, 0xEF	; 239
    370a:	2a e0       	ldi	r18, 0x0A	; 10
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	1d c0       	rjmp	.+58     	; 0x374a <vfprintf+0x2a2>
    3710:	1f 2d       	mov	r17, r15
    3712:	19 7f       	andi	r17, 0xF9	; 249
    3714:	9f 36       	cpi	r25, 0x6F	; 111
    3716:	61 f0       	breq	.+24     	; 0x3730 <vfprintf+0x288>
    3718:	90 37       	cpi	r25, 0x70	; 112
    371a:	20 f4       	brcc	.+8      	; 0x3724 <vfprintf+0x27c>
    371c:	98 35       	cpi	r25, 0x58	; 88
    371e:	09 f0       	breq	.+2      	; 0x3722 <vfprintf+0x27a>
    3720:	ac c0       	rjmp	.+344    	; 0x387a <vfprintf+0x3d2>
    3722:	0f c0       	rjmp	.+30     	; 0x3742 <vfprintf+0x29a>
    3724:	90 37       	cpi	r25, 0x70	; 112
    3726:	39 f0       	breq	.+14     	; 0x3736 <vfprintf+0x28e>
    3728:	98 37       	cpi	r25, 0x78	; 120
    372a:	09 f0       	breq	.+2      	; 0x372e <vfprintf+0x286>
    372c:	a6 c0       	rjmp	.+332    	; 0x387a <vfprintf+0x3d2>
    372e:	04 c0       	rjmp	.+8      	; 0x3738 <vfprintf+0x290>
    3730:	28 e0       	ldi	r18, 0x08	; 8
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	0a c0       	rjmp	.+20     	; 0x374a <vfprintf+0x2a2>
    3736:	10 61       	ori	r17, 0x10	; 16
    3738:	14 fd       	sbrc	r17, 4
    373a:	14 60       	ori	r17, 0x04	; 4
    373c:	20 e1       	ldi	r18, 0x10	; 16
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	04 c0       	rjmp	.+8      	; 0x374a <vfprintf+0x2a2>
    3742:	14 fd       	sbrc	r17, 4
    3744:	16 60       	ori	r17, 0x06	; 6
    3746:	20 e1       	ldi	r18, 0x10	; 16
    3748:	32 e0       	ldi	r19, 0x02	; 2
    374a:	17 ff       	sbrs	r17, 7
    374c:	08 c0       	rjmp	.+16     	; 0x375e <vfprintf+0x2b6>
    374e:	f5 01       	movw	r30, r10
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	44 e0       	ldi	r20, 0x04	; 4
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	08 c0       	rjmp	.+16     	; 0x376e <vfprintf+0x2c6>
    375e:	f5 01       	movw	r30, r10
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	bc 01       	movw	r22, r24
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	42 e0       	ldi	r20, 0x02	; 2
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	a4 0e       	add	r10, r20
    3770:	b5 1e       	adc	r11, r21
    3772:	a1 01       	movw	r20, r2
    3774:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__ultoa_invert>
    3778:	d8 2e       	mov	r13, r24
    377a:	d2 18       	sub	r13, r2
    377c:	8f e7       	ldi	r24, 0x7F	; 127
    377e:	f8 2e       	mov	r15, r24
    3780:	f1 22       	and	r15, r17
    3782:	f6 fe       	sbrs	r15, 6
    3784:	0b c0       	rjmp	.+22     	; 0x379c <vfprintf+0x2f4>
    3786:	5e ef       	ldi	r21, 0xFE	; 254
    3788:	f5 22       	and	r15, r21
    378a:	d9 14       	cp	r13, r9
    378c:	38 f4       	brcc	.+14     	; 0x379c <vfprintf+0x2f4>
    378e:	f4 fe       	sbrs	r15, 4
    3790:	07 c0       	rjmp	.+14     	; 0x37a0 <vfprintf+0x2f8>
    3792:	f2 fc       	sbrc	r15, 2
    3794:	05 c0       	rjmp	.+10     	; 0x37a0 <vfprintf+0x2f8>
    3796:	8f ee       	ldi	r24, 0xEF	; 239
    3798:	f8 22       	and	r15, r24
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <vfprintf+0x2f8>
    379c:	1d 2d       	mov	r17, r13
    379e:	01 c0       	rjmp	.+2      	; 0x37a2 <vfprintf+0x2fa>
    37a0:	19 2d       	mov	r17, r9
    37a2:	f4 fe       	sbrs	r15, 4
    37a4:	0d c0       	rjmp	.+26     	; 0x37c0 <vfprintf+0x318>
    37a6:	fe 01       	movw	r30, r28
    37a8:	ed 0d       	add	r30, r13
    37aa:	f1 1d       	adc	r31, r1
    37ac:	80 81       	ld	r24, Z
    37ae:	80 33       	cpi	r24, 0x30	; 48
    37b0:	19 f4       	brne	.+6      	; 0x37b8 <vfprintf+0x310>
    37b2:	99 ee       	ldi	r25, 0xE9	; 233
    37b4:	f9 22       	and	r15, r25
    37b6:	08 c0       	rjmp	.+16     	; 0x37c8 <vfprintf+0x320>
    37b8:	1f 5f       	subi	r17, 0xFF	; 255
    37ba:	f2 fe       	sbrs	r15, 2
    37bc:	05 c0       	rjmp	.+10     	; 0x37c8 <vfprintf+0x320>
    37be:	03 c0       	rjmp	.+6      	; 0x37c6 <vfprintf+0x31e>
    37c0:	8f 2d       	mov	r24, r15
    37c2:	86 78       	andi	r24, 0x86	; 134
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <vfprintf+0x320>
    37c6:	1f 5f       	subi	r17, 0xFF	; 255
    37c8:	0f 2d       	mov	r16, r15
    37ca:	f3 fc       	sbrc	r15, 3
    37cc:	14 c0       	rjmp	.+40     	; 0x37f6 <vfprintf+0x34e>
    37ce:	f0 fe       	sbrs	r15, 0
    37d0:	0f c0       	rjmp	.+30     	; 0x37f0 <vfprintf+0x348>
    37d2:	1e 15       	cp	r17, r14
    37d4:	10 f0       	brcs	.+4      	; 0x37da <vfprintf+0x332>
    37d6:	9d 2c       	mov	r9, r13
    37d8:	0b c0       	rjmp	.+22     	; 0x37f0 <vfprintf+0x348>
    37da:	9d 2c       	mov	r9, r13
    37dc:	9e 0c       	add	r9, r14
    37de:	91 1a       	sub	r9, r17
    37e0:	1e 2d       	mov	r17, r14
    37e2:	06 c0       	rjmp	.+12     	; 0x37f0 <vfprintf+0x348>
    37e4:	80 e2       	ldi	r24, 0x20	; 32
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	b3 01       	movw	r22, r6
    37ea:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    37ee:	1f 5f       	subi	r17, 0xFF	; 255
    37f0:	1e 15       	cp	r17, r14
    37f2:	c0 f3       	brcs	.-16     	; 0x37e4 <vfprintf+0x33c>
    37f4:	04 c0       	rjmp	.+8      	; 0x37fe <vfprintf+0x356>
    37f6:	1e 15       	cp	r17, r14
    37f8:	10 f4       	brcc	.+4      	; 0x37fe <vfprintf+0x356>
    37fa:	e1 1a       	sub	r14, r17
    37fc:	01 c0       	rjmp	.+2      	; 0x3800 <vfprintf+0x358>
    37fe:	ee 24       	eor	r14, r14
    3800:	04 ff       	sbrs	r16, 4
    3802:	0f c0       	rjmp	.+30     	; 0x3822 <vfprintf+0x37a>
    3804:	80 e3       	ldi	r24, 0x30	; 48
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	b3 01       	movw	r22, r6
    380a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    380e:	02 ff       	sbrs	r16, 2
    3810:	1d c0       	rjmp	.+58     	; 0x384c <vfprintf+0x3a4>
    3812:	01 fd       	sbrc	r16, 1
    3814:	03 c0       	rjmp	.+6      	; 0x381c <vfprintf+0x374>
    3816:	88 e7       	ldi	r24, 0x78	; 120
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e c0       	rjmp	.+28     	; 0x3838 <vfprintf+0x390>
    381c:	88 e5       	ldi	r24, 0x58	; 88
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0b c0       	rjmp	.+22     	; 0x3838 <vfprintf+0x390>
    3822:	80 2f       	mov	r24, r16
    3824:	86 78       	andi	r24, 0x86	; 134
    3826:	91 f0       	breq	.+36     	; 0x384c <vfprintf+0x3a4>
    3828:	01 ff       	sbrs	r16, 1
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <vfprintf+0x388>
    382c:	8b e2       	ldi	r24, 0x2B	; 43
    382e:	01 c0       	rjmp	.+2      	; 0x3832 <vfprintf+0x38a>
    3830:	80 e2       	ldi	r24, 0x20	; 32
    3832:	f7 fc       	sbrc	r15, 7
    3834:	8d e2       	ldi	r24, 0x2D	; 45
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	b3 01       	movw	r22, r6
    383a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    383e:	06 c0       	rjmp	.+12     	; 0x384c <vfprintf+0x3a4>
    3840:	80 e3       	ldi	r24, 0x30	; 48
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	b3 01       	movw	r22, r6
    3846:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    384a:	9a 94       	dec	r9
    384c:	d9 14       	cp	r13, r9
    384e:	c0 f3       	brcs	.-16     	; 0x3840 <vfprintf+0x398>
    3850:	da 94       	dec	r13
    3852:	f1 01       	movw	r30, r2
    3854:	ed 0d       	add	r30, r13
    3856:	f1 1d       	adc	r31, r1
    3858:	80 81       	ld	r24, Z
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	b3 01       	movw	r22, r6
    385e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    3862:	dd 20       	and	r13, r13
    3864:	a9 f7       	brne	.-22     	; 0x3850 <vfprintf+0x3a8>
    3866:	06 c0       	rjmp	.+12     	; 0x3874 <vfprintf+0x3cc>
    3868:	80 e2       	ldi	r24, 0x20	; 32
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	b3 01       	movw	r22, r6
    386e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <fputc>
    3872:	ea 94       	dec	r14
    3874:	ee 20       	and	r14, r14
    3876:	c1 f7       	brne	.-16     	; 0x3868 <vfprintf+0x3c0>
    3878:	43 ce       	rjmp	.-890    	; 0x3500 <vfprintf+0x58>
    387a:	f3 01       	movw	r30, r6
    387c:	66 81       	ldd	r22, Z+6	; 0x06
    387e:	77 81       	ldd	r23, Z+7	; 0x07
    3880:	cb 01       	movw	r24, r22
    3882:	2b 96       	adiw	r28, 0x0b	; 11
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	df 90       	pop	r13
    389c:	cf 90       	pop	r12
    389e:	bf 90       	pop	r11
    38a0:	af 90       	pop	r10
    38a2:	9f 90       	pop	r9
    38a4:	8f 90       	pop	r8
    38a6:	7f 90       	pop	r7
    38a8:	6f 90       	pop	r6
    38aa:	5f 90       	pop	r5
    38ac:	4f 90       	pop	r4
    38ae:	3f 90       	pop	r3
    38b0:	2f 90       	pop	r2
    38b2:	08 95       	ret

000038b4 <strnlen_P>:
    38b4:	fc 01       	movw	r30, r24
    38b6:	05 90       	lpm	r0, Z+
    38b8:	61 50       	subi	r22, 0x01	; 1
    38ba:	70 40       	sbci	r23, 0x00	; 0
    38bc:	01 10       	cpse	r0, r1
    38be:	d8 f7       	brcc	.-10     	; 0x38b6 <strnlen_P+0x2>
    38c0:	80 95       	com	r24
    38c2:	90 95       	com	r25
    38c4:	8e 0f       	add	r24, r30
    38c6:	9f 1f       	adc	r25, r31
    38c8:	08 95       	ret

000038ca <strnlen>:
    38ca:	fc 01       	movw	r30, r24
    38cc:	61 50       	subi	r22, 0x01	; 1
    38ce:	70 40       	sbci	r23, 0x00	; 0
    38d0:	01 90       	ld	r0, Z+
    38d2:	01 10       	cpse	r0, r1
    38d4:	d8 f7       	brcc	.-10     	; 0x38cc <strnlen+0x2>
    38d6:	80 95       	com	r24
    38d8:	90 95       	com	r25
    38da:	8e 0f       	add	r24, r30
    38dc:	9f 1f       	adc	r25, r31
    38de:	08 95       	ret

000038e0 <fputc>:
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	8c 01       	movw	r16, r24
    38ea:	eb 01       	movw	r28, r22
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	81 ff       	sbrs	r24, 1
    38f0:	1b c0       	rjmp	.+54     	; 0x3928 <fputc+0x48>
    38f2:	82 ff       	sbrs	r24, 2
    38f4:	0d c0       	rjmp	.+26     	; 0x3910 <fputc+0x30>
    38f6:	2e 81       	ldd	r18, Y+6	; 0x06
    38f8:	3f 81       	ldd	r19, Y+7	; 0x07
    38fa:	8c 81       	ldd	r24, Y+4	; 0x04
    38fc:	9d 81       	ldd	r25, Y+5	; 0x05
    38fe:	28 17       	cp	r18, r24
    3900:	39 07       	cpc	r19, r25
    3902:	64 f4       	brge	.+24     	; 0x391c <fputc+0x3c>
    3904:	e8 81       	ld	r30, Y
    3906:	f9 81       	ldd	r31, Y+1	; 0x01
    3908:	01 93       	st	Z+, r16
    390a:	f9 83       	std	Y+1, r31	; 0x01
    390c:	e8 83       	st	Y, r30
    390e:	06 c0       	rjmp	.+12     	; 0x391c <fputc+0x3c>
    3910:	e8 85       	ldd	r30, Y+8	; 0x08
    3912:	f9 85       	ldd	r31, Y+9	; 0x09
    3914:	80 2f       	mov	r24, r16
    3916:	09 95       	icall
    3918:	89 2b       	or	r24, r25
    391a:	31 f4       	brne	.+12     	; 0x3928 <fputc+0x48>
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	9f 81       	ldd	r25, Y+7	; 0x07
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	9f 83       	std	Y+7, r25	; 0x07
    3924:	8e 83       	std	Y+6, r24	; 0x06
    3926:	02 c0       	rjmp	.+4      	; 0x392c <fputc+0x4c>
    3928:	0f ef       	ldi	r16, 0xFF	; 255
    392a:	1f ef       	ldi	r17, 0xFF	; 255
    392c:	c8 01       	movw	r24, r16
    392e:	df 91       	pop	r29
    3930:	cf 91       	pop	r28
    3932:	1f 91       	pop	r17
    3934:	0f 91       	pop	r16
    3936:	08 95       	ret

00003938 <__ultoa_invert>:
    3938:	fa 01       	movw	r30, r20
    393a:	aa 27       	eor	r26, r26
    393c:	28 30       	cpi	r18, 0x08	; 8
    393e:	51 f1       	breq	.+84     	; 0x3994 <__ultoa_invert+0x5c>
    3940:	20 31       	cpi	r18, 0x10	; 16
    3942:	81 f1       	breq	.+96     	; 0x39a4 <__ultoa_invert+0x6c>
    3944:	e8 94       	clt
    3946:	6f 93       	push	r22
    3948:	6e 7f       	andi	r22, 0xFE	; 254
    394a:	6e 5f       	subi	r22, 0xFE	; 254
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	8f 4f       	sbci	r24, 0xFF	; 255
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	af 4f       	sbci	r26, 0xFF	; 255
    3954:	b1 e0       	ldi	r27, 0x01	; 1
    3956:	3e d0       	rcall	.+124    	; 0x39d4 <__ultoa_invert+0x9c>
    3958:	b4 e0       	ldi	r27, 0x04	; 4
    395a:	3c d0       	rcall	.+120    	; 0x39d4 <__ultoa_invert+0x9c>
    395c:	67 0f       	add	r22, r23
    395e:	78 1f       	adc	r23, r24
    3960:	89 1f       	adc	r24, r25
    3962:	9a 1f       	adc	r25, r26
    3964:	a1 1d       	adc	r26, r1
    3966:	68 0f       	add	r22, r24
    3968:	79 1f       	adc	r23, r25
    396a:	8a 1f       	adc	r24, r26
    396c:	91 1d       	adc	r25, r1
    396e:	a1 1d       	adc	r26, r1
    3970:	6a 0f       	add	r22, r26
    3972:	71 1d       	adc	r23, r1
    3974:	81 1d       	adc	r24, r1
    3976:	91 1d       	adc	r25, r1
    3978:	a1 1d       	adc	r26, r1
    397a:	20 d0       	rcall	.+64     	; 0x39bc <__ultoa_invert+0x84>
    397c:	09 f4       	brne	.+2      	; 0x3980 <__ultoa_invert+0x48>
    397e:	68 94       	set
    3980:	3f 91       	pop	r19
    3982:	2a e0       	ldi	r18, 0x0A	; 10
    3984:	26 9f       	mul	r18, r22
    3986:	11 24       	eor	r1, r1
    3988:	30 19       	sub	r19, r0
    398a:	30 5d       	subi	r19, 0xD0	; 208
    398c:	31 93       	st	Z+, r19
    398e:	de f6       	brtc	.-74     	; 0x3946 <__ultoa_invert+0xe>
    3990:	cf 01       	movw	r24, r30
    3992:	08 95       	ret
    3994:	46 2f       	mov	r20, r22
    3996:	47 70       	andi	r20, 0x07	; 7
    3998:	40 5d       	subi	r20, 0xD0	; 208
    399a:	41 93       	st	Z+, r20
    399c:	b3 e0       	ldi	r27, 0x03	; 3
    399e:	0f d0       	rcall	.+30     	; 0x39be <__ultoa_invert+0x86>
    39a0:	c9 f7       	brne	.-14     	; 0x3994 <__ultoa_invert+0x5c>
    39a2:	f6 cf       	rjmp	.-20     	; 0x3990 <__ultoa_invert+0x58>
    39a4:	46 2f       	mov	r20, r22
    39a6:	4f 70       	andi	r20, 0x0F	; 15
    39a8:	40 5d       	subi	r20, 0xD0	; 208
    39aa:	4a 33       	cpi	r20, 0x3A	; 58
    39ac:	18 f0       	brcs	.+6      	; 0x39b4 <__ultoa_invert+0x7c>
    39ae:	49 5d       	subi	r20, 0xD9	; 217
    39b0:	31 fd       	sbrc	r19, 1
    39b2:	40 52       	subi	r20, 0x20	; 32
    39b4:	41 93       	st	Z+, r20
    39b6:	02 d0       	rcall	.+4      	; 0x39bc <__ultoa_invert+0x84>
    39b8:	a9 f7       	brne	.-22     	; 0x39a4 <__ultoa_invert+0x6c>
    39ba:	ea cf       	rjmp	.-44     	; 0x3990 <__ultoa_invert+0x58>
    39bc:	b4 e0       	ldi	r27, 0x04	; 4
    39be:	a6 95       	lsr	r26
    39c0:	97 95       	ror	r25
    39c2:	87 95       	ror	r24
    39c4:	77 95       	ror	r23
    39c6:	67 95       	ror	r22
    39c8:	ba 95       	dec	r27
    39ca:	c9 f7       	brne	.-14     	; 0x39be <__ultoa_invert+0x86>
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	61 05       	cpc	r22, r1
    39d0:	71 05       	cpc	r23, r1
    39d2:	08 95       	ret
    39d4:	9b 01       	movw	r18, r22
    39d6:	ac 01       	movw	r20, r24
    39d8:	0a 2e       	mov	r0, r26
    39da:	06 94       	lsr	r0
    39dc:	57 95       	ror	r21
    39de:	47 95       	ror	r20
    39e0:	37 95       	ror	r19
    39e2:	27 95       	ror	r18
    39e4:	ba 95       	dec	r27
    39e6:	c9 f7       	brne	.-14     	; 0x39da <__ultoa_invert+0xa2>
    39e8:	62 0f       	add	r22, r18
    39ea:	73 1f       	adc	r23, r19
    39ec:	84 1f       	adc	r24, r20
    39ee:	95 1f       	adc	r25, r21
    39f0:	a0 1d       	adc	r26, r0
    39f2:	08 95       	ret

000039f4 <_exit>:
    39f4:	f8 94       	cli

000039f6 <__stop_program>:
    39f6:	ff cf       	rjmp	.-2      	; 0x39f6 <__stop_program>
